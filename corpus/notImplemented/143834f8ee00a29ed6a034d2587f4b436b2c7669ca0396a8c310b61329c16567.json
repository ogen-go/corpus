{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Atlas-Rhythm/Hive"
		},
		"file": {
			"name": "hive.v1.yaml",
			"size": 0,
			"path": "api/reference/hive.v1.yaml",
			"byteSize": 30467,
			"content": "openapi: 3.0.0\ninfo:\n  title: Hive\n  description: Hive API Specification\n  contact:\n    name: BSMG\n  version: '1.0'\nservers:\n  - url: 'https://localhost:5001/api'\npaths:\n  /mods:\n    parameters:\n      - name: page\n        description: |\n          The page of mods to request. Defaults to 0.\n        in: query\n        required: false\n        schema:\n          type: number\n      - name: language\n        description: |\n          The ISO identifier of the lanugage to get mod info in.\n        in: query\n        required: false\n        schema:\n          type: string\n    get:\n      summary: 'Gets all of the mods in the specified channel(s), or a default if none is specified'\n      parameters:\n        - name: channelIds\n          description: The IDs of the channels to look up mods in\n          in: query\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            uniqueItems: true\n        - schema:\n            type: string\n          in: query\n          name: gameVersion\n          description: Game version to filter by\n        - schema:\n            type: string\n            enum:\n              - all\n              - latest\n            default: latest\n          in: query\n          name: filterType\n          description: How to filter the returned mods\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Mod'\n              examples:\n                Default Response:\n                  value:\n                    - id: test-mod\n                      version: 0.1.0\n                      uploadedAt: '2021-01-19T23:42:11.415979Z'\n                      editedAt: null\n                      uploaderUsername: me\n                      channelName: default\n                      downloadLink: 'file:///'\n                      localizedModInfo:\n                        language: en-US\n                        name: Test Mod\n                        description: A mod in the DB for testing\n                        changelog: null\n                        credits: null\n                      authors: []\n                      contributors: []\n                      supportedGameVersions:\n                        - 1.0.0\n                      links: []\n                      dependencies:\n                        - modID: dep-id\n                          versions: ^1.0.0\n                      conflictsWith: []\n                      additionalData: {}\n        '403':\n          $ref: '#/components/responses/ForbiddenResponse'\n      operationId: get-mods\n      description: |-\n        Gets all mods for a given channelId and channelIds to look within.\n        Query parameters left empty will use defaults.\n        channelId defaults to the instance default channel, typically a public channel.\n        channelIds defaults to an empty array.\n        gameVersion defaults to latest.\n        filterType defaults to latest.\n\n        Options for filterType are:\n        all: Returns all versions for each mod listed in the channel(s).\n        latest: Returns only the latest versions for each mod listed in the channel(s).\n\n        Plugins can be used to perform additional permissions checks and filter mods. See Hive.Services.Common.IModsPlugin\n\n        Plugin permission check at rule: `hive.mods.list`\n        Plugin filter call at rule: `hive.mods.filter`\n      tags:\n        - mods\n  '/mod/{modId}':\n    parameters:\n      - schema:\n          type: string\n        name: modId\n        in: path\n        required: true\n    get:\n      summary: Gets a mod from the ID specified\n      tags:\n        - mods\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Mod'\n              examples: {}\n            application/xml:\n              schema:\n                type: object\n                properties: {}\n        '403':\n          $ref: '#/components/responses/ForbiddenResponse'\n        '404':\n          description: Not Found\n      operationId: get-mod-modId\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: range\n          description: The version range of the mod to obtain\n        - schema:\n            type: array\n            items:\n              type: string\n          in: header\n          name: Accept-Language\n          description: The languages to return the localized mod for\n      description: |-\n        Gets a mod from a given mod ID and version range. If range is not specified, assumes range=*.\n        If a list of languages are provided via Accept-Language, will try to return the best LocalizedModInfo that matches.\n        If no languages are provided, or a previous match was not found, defaults to the system culture.\n        If the system culture does not exist, uses the first LocalizedModInfo of the matching mod.\n\n        Plugins can be used to perform additional permissions checks and filter mods. See Hive.Services.Common.IModsPlugin\n\n        Plugin permission check at rule: hive.mod.get\n        Plugin filter check at rule: `hive.mod.filter`\n      security:\n        - Auth0AuthToken: []\n  /upload:\n    parameters: []\n    post:\n      summary: Upload a mod\n      operationId: post-mod-upload-modId\n      security:\n        - Auth0AuthToken: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                properties:\n                  type:\n                    type: string\n                    enum:\n                      - Confirm\n                    default: Confirm\n                  data:\n                    $ref: '#/components/schemas/Mod'\n                  actionCookie:\n                    type: string\n                required:\n                  - type\n                  - data\n                  - actionCookie\n        '400':\n          description: 'Bad Request. Returned if the file is too big or if there is no file uploaded, or if a plugin denied the upload.'\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                properties:\n                  type:\n                    type: string\n                    enum:\n                      - Error\n                    default: Error\n                  error:\n                    type: object\n                required:\n                  - type\n                  - error\n        '401':\n          $ref: '#/components/responses/ForbiddenResponse'\n        '403':\n          $ref: '#/components/responses/UnauthorizedResponse'\n      description: |-\n        Performs the first step of an upload. This performs the following steps:\n\n        1. Performs standard permission checks on the file being uploaded.\n        2. Ensures the uploaded file is not too big.\n        3. Performs additional plugin validity checks.\n        4. Uploads the uploaded file to the CDN.\n        5. Returns the data necessary for the next step of uploading. See: /mod/upload/finish\n\n        Plugin permission checks are performed at rule: `hive.mod.upload` and at rule: `hive.mod.upload.with_data`\n      parameters: []\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties: {}\n        description: The mod file to upload. Valid files are dictated by plugins.\n      tags:\n        - mods\n        - creation\n  /game/versions:\n    get:\n      summary: Returns all game versions\n      tags:\n        - game-versions\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GameVersion'\n              examples:\n                Returned Versions:\n                  value:\n                    - name: v1.13.0\n                      creationTime: '2019-08-24T14:15:22Z'\n                      additionalData: {}\n        '403':\n          $ref: '#/components/responses/ForbiddenResponse'\n      operationId: get-game-versions\n      description: |-\n        Gets all game versions that are publicly available.\n        When passed with an authentication header, it will return all game versions viewable to the user.\n\n        Plugins can be used to both deny and filter access to some or all game versions. See Hive.Services.Common.IGameVersionsPlugin\n\n        Plugin permission check at rule: `hive.game.versions.list`\n        Plugin filter call at rule: `hive.game.versions.filter`\n      security:\n        - Auth0AuthToken: []\n  /resolve_dependencies:\n    post:\n      summary: Resolve dependencies\n      operationId: post-resolve_dependencies\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                properties:\n                  message:\n                    type: string\n                  additionalMods:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Mod'\n                required:\n                  - message\n                  - additionalMods\n        '400':\n          description: 'Bad Request, invalid data was provided.'\n        '403':\n          $ref: '#/components/responses/ForbiddenResponse'\n        '404':\n          description: Not Found\n        '424':\n          description: Failed Dependency (WebDAV)\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                properties:\n                  message:\n                    type: string\n                  additionalMods:\n                    $ref: '#/components/schemas/Mod'\n                  missing:\n                    type: array\n                    minItems: 0\n                    items:\n                      $ref: '#/components/schemas/ModIdentifier'\n                  conflicts:\n                    type: array\n                    minItems: 0\n                    items:\n                      type: string\n                  versionMismatching:\n                    type: array\n                    minItems: 0\n                    items:\n                      $ref: '#/components/schemas/ModIdentifier'\n                required:\n                  - message\n                  - missing\n                  - conflicts\n                  - versionMismatching\n                  - additionalMods\n      description: |-\n        Returns a list of mods that should be installed to resolve all dependencies.\n        If the dependencies cannot be resolved, returns a non-200 status code and an empty array.\n\n        Plugin permission check at rule: `hive.resolve_dependencies`\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              minItems: 1\n              items:\n                $ref: '#/components/schemas/ModIdentifier'\n        description: Mods to resolve\n      security:\n        - Auth0AuthToken: []\n      tags:\n        - mods\n        - dependencies\n  '/mod/move/{channelId}':\n    parameters:\n      - schema:\n          type: string\n        name: channelId\n        in: path\n        required: true\n        description: The destination channel ID\n    post:\n      summary: Move a mod\n      operationId: post-mod-move-channelId\n      security:\n        - Auth0AuthToken: []\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n        '401':\n          $ref: '#/components/responses/UnauthorizedResponse'\n        '403':\n          $ref: '#/components/responses/ForbiddenResponse'\n        '404':\n          description: Not Found. There was no mod found with the given ID and version.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ModIdentifier'\n            examples:\n              Test Move Mod:\n                value:\n                  id: mod-id\n                  version: v1.0.0\n          application/xml:\n            schema:\n              type: object\n              properties: {}\n        description: The specific mod identifier to move. A mod ID and specific version.\n      description: |-\n        Moves a specific ModIdentifier to the provided channelId.\n\n        Plugins permission check at rule: `hive.mod.move`\n      tags:\n        - mods\n        - movement\n  /channels:\n    get:\n      summary: 'Gets all publicly viewable channels, or all channels viewable by the given user'\n      tags:\n        - channels\n      security:\n        - Auth0AuthToken: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Channel'\n                uniqueItems: true\n              examples:\n                Returned Channels:\n                  value:\n                    - name: public\n                      additionalData: {}\n        '403':\n          $ref: '#/components/responses/ForbiddenResponse'\n      operationId: get-channels\n      description: |-\n        Gets all channels that are publicly viewable.\n        When passed with an auth header, it will return all channels viewable to the authorized user.\n\n        Plugins can be used to both deny and filter access to some or all channels. See Hive.Services.Common.IChannelsControllerPlugin\n\n        Plugin permission check at rule: `hive.channels.list`\n        Plugin filter call at rule: `hive.channels.filter`\n  '/mod/{modId}/latest':\n    parameters:\n      - schema:\n          type: string\n        name: modId\n        in: path\n        required: true\n        description: The mod ID to get the latest for\n    get:\n      summary: Get a mod's latest version\n      tags:\n        - mods\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Mod'\n              examples: {}\n        '403':\n          $ref: '#/components/responses/ForbiddenResponse'\n        '404':\n          description: Not Found\n      operationId: get-mod-modId-latest\n      description: 'Returns the latest mod with the provided ID. This is equivalent to calling: /mod/{modId}?range=*'\n      parameters: []\n      security:\n        - Auth0AuthToken: []\n  /upload/finish:\n    post:\n      summary: Finish an upload request\n      operationId: post-mod-upload-finish\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                properties:\n                  type:\n                    type: string\n                    enum:\n                      - Success\n                required:\n                  - type\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/UnauthorizedResponse'\n        '403':\n          $ref: '#/components/responses/ForbiddenResponse'\n        '410':\n          description: 'Gone, you performed the second stage of the upload too long after the first stage.'\n      description: |-\n        The final stage of an upload. Completes an upload by providing the final metadata of the mod.\n\n        Plugin permission check at rule: `hive.mod.upload.with_data`\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              additionalProperties: false\n              properties:\n                finalMetadataJson:\n                  type: string\n                  description: A JSON string which represents the final metadata of the mod.\n                cookie:\n                  type: string\n                  description: The action cookie from the first stage of uploading.\n              required:\n                - finalMetadataJson\n                - cookie\n        description: The final mod metadata to upload and the cookie returned in response to a successful completion of the first upload step.\n      security:\n        - Auth0AuthToken: []\n      tags:\n        - mods\n        - creation\n  /channels/new:\n    post:\n      summary: Makes a new channel\n      operationId: post-channels-new\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Channel'\n              examples:\n                Beta Channel:\n                  value:\n                    name: beta\n                    additionalData: {}\n        '401':\n          $ref: '#/components/responses/UnauthorizedResponse'\n        '403':\n          $ref: '#/components/responses/ForbiddenResponse'\n      description: |-\n        Adds the provided channel to the collection of all channels. Must be performed by a logged in user, will return an Unauthorized if not.\n\n        Plugins can be used to deny access to creations and perform additional edits to channel instances. See Hive.Services.Common.IChannelsControllerPlugin\n\n        Plugin permission check at rule: `hive.channels.create`\n      security:\n        - Auth0AuthToken: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Channel'\n            examples:\n              Beta Channel:\n                value:\n                  name: beta\n                  additionalData: {}\n        description: The new Channel object to add.\n      tags:\n        - channels\n        - creation\n  /game/versions/new:\n    post:\n      summary: Makes a new game version\n      operationId: post-game-versions-new\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GameVersion'\n              examples:\n                v1.13.0:\n                  value:\n                    name: string\n                    creationTime: '2019-08-24T14:15:22Z'\n                    additionalData: {}\n        '401':\n          $ref: '#/components/responses/UnauthorizedResponse'\n        '403':\n          $ref: '#/components/responses/ForbiddenResponse'\n      description: |-\n        Adds the provided game version to the collection of all game versions. Must be performed by a logged in user, will return an Unauthorized if not.\n\n        Plugins can be used to deny access to creations and perform additional edits to game version instances. See Hive.Services.Common.IGameVersionsPlugin\n\n        Plugin permission check at rule: `hive.game.versions.create`\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InputGameVersion'\n            examples:\n              v1.13.0:\n                value:\n                  name: v1.13.0\n                  additionalData: {}\n        description: The input game version to provide.\n      security:\n        - Auth0AuthToken: []\n      tags:\n        - game-versions\n        - creation\n  /auth0/get_data:\n    get:\n      summary: Your GET endpoint\n      tags:\n        - auth0\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Auth0ReturnData'\n        '404':\n          description: Not Found\n      operationId: get-auth0-get_data\n      description: 'Returns data useful for authentication with Auth0, if this instance of Hive has been configured to use Auth0. If this instance does not use Auth0, this endpoint will return a 404.'\n  /auth0/token:\n    get:\n      summary: Your GET endpoint\n      tags:\n        - auth0\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Auth0TokenResponse'\n        '404':\n          description: Not Found\n        '401':\n          description: Invalid code, or otherwise denied by server\n      operationId: get-auth0-token\n      description: 'Performs the authentication step of the Auth0 workflow. If the Hive instance was not configured to use Auth0, this endpoint will return a 404.'\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: code\n          description: The authentication code from the authentication call to Auth0\n          required: true\n        - schema:\n            type: string\n          in: query\n          name: redirectUri\n          description: The redirect URI from the authentication call to Auth0. MUST MATCH! If it does not, this will respond with a 401.\n          required: true\n  /user/rename:\n    post:\n      summary: ''\n      operationId: post-user-rename\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Bad Request. Username cannot contain whitespace or be null/empty.\n        '401':\n          $ref: '#/components/responses/UnauthorizedResponse'\n      description: |-\n        Renames the current user to the provided username.\n        The new username must be unique, if it is not, this will return a 401.\n        If the user is not logged in, this will return a 401.\n        If the current user cannot rename themselves, this will return a 401.\n\n        If the rename completes successfully, will return the changed username.\n\n        Plugin permission check at: `hive.user.rename`\n      tags:\n        - user\ncomponents:\n  schemas:\n    Channel:\n      type: object\n      title: Channel\n      additionalProperties: false\n      description: 'A channel object. Note that additionalData is public, and should not store private information.'\n      x-examples:\n        Default Channel:\n          name: default\n          additionalData: {}\n      properties:\n        name:\n          type: string\n          minLength: 1\n        additionalData:\n          type: object\n      required:\n        - name\n        - additionalData\n    Mod:\n      type: object\n      title: Mod\n      description: |-\n        A mod structure.\n        Note that additionalData is publicly read-only and should not store any sensitive information.\n      additionalProperties: false\n      x-examples:\n        Test Mod:\n          id: test-mod\n          version: 0.1.0\n          uploadedAt: '2021-01-19T23:42:11.415979Z'\n          editedAt: null\n          uploaderUsername: me\n          channelName: default\n          downloadLink: 'file:///'\n          localizedModInfo:\n            language: en-US\n            name: Test Mod\n            description: A mod in the DB for testing\n            changelog: null\n            credits: null\n          authors: []\n          contributors: []\n          supportedGameVersions:\n            - 1.0.0\n          links: []\n          dependencies:\n            - modID: dep-id\n              versions: ^1.0.0\n          conflictsWith: []\n          additionalData: {}\n      properties:\n        id:\n          type: string\n        version:\n          type: string\n        uploadedAt:\n          type: string\n          format: date-time\n        editedAt:\n          type: string\n          nullable: true\n          format: date-time\n        uploaderUsername:\n          type: string\n        channelName:\n          type: string\n        downloadLink:\n          type: string\n          format: uri\n        localizedModInfo:\n          $ref: '#/components/schemas/LocalizedModInfo'\n        authors:\n          type: array\n          items:\n            type: string\n        contributors:\n          type: array\n          items:\n            type: string\n        supportedGameVersions:\n          type: array\n          items:\n            type: string\n        links:\n          type: array\n          items:\n            type: object\n            additionalProperties: false\n            properties:\n              name:\n                type: string\n              url:\n                type: string\n                format: uri\n            required:\n              - name\n              - url\n        dependencies:\n          type: array\n          items:\n            $ref: '#/components/schemas/ModIdentifierRange'\n        conflictsWith:\n          type: array\n          items:\n            $ref: '#/components/schemas/ModIdentifierRange'\n        additionalData:\n          type: object\n      required:\n        - id\n        - version\n        - uploadedAt\n        - editedAt\n        - uploaderUsername\n        - channelName\n        - downloadLink\n        - localizedModInfo\n        - authors\n        - contributors\n        - supportedGameVersions\n        - links\n        - dependencies\n        - conflictsWith\n        - additionalData\n    LocalizedModInfo:\n      type: object\n      title: LocalizedModInfo\n      description: Localized data of a mod.\n      additionalProperties: false\n      x-examples:\n        Test Mod:\n          language: en-US\n          name: Test Mod\n          description: A mod in the DB for testing\n          changelog: null\n          credits: null\n      properties:\n        language:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        changelog:\n          type: string\n          nullable: true\n        credits:\n          type: string\n          nullable: true\n      required:\n        - language\n        - name\n        - description\n        - changelog\n        - credits\n    GameVersion:\n      type: object\n      title: GameVersion\n      additionalProperties: false\n      description: |-\n        Represents a version of a game.\n        Additional data is publicly read only. Avoid placing sensitive information in additionalData.\n      x-examples:\n        Version v1.13.0:\n          name: v1.13.0\n          additionalData: {}\n          creationTime: '2019-08-24T14:15:22Z'\n      properties:\n        name:\n          type: string\n          description: The game version itself\n        creationTime:\n          type: string\n          format: date-time\n          description: The time this game version was created.\n        additionalData:\n          type: object\n          description: Additional data for this game version\n      required:\n        - name\n        - creationTime\n        - additionalData\n    ModIdentifierRange:\n      type: object\n      title: ModIdentifierRange\n      description: A mod ID paired with a version range.\n      additionalProperties: false\n      properties:\n        modID:\n          type: string\n        versions:\n          type: string\n      required:\n        - modID\n        - versions\n      x-examples:\n        Simple Test:\n          modID: test-id\n          versions: ^1.0.0\n    ModIdentifier:\n      type: object\n      title: ModIdentifier\n      additionalProperties: false\n      properties:\n        id:\n          type: string\n        version:\n          type: string\n      required:\n        - id\n        - version\n      description: A mod ID paired with a specific version.\n      x-examples:\n        Identifier:\n          id: test-id\n          version: 1.0.0\n    InputGameVersion:\n      title: InputGameVersion\n      type: object\n      description: A subset of the GameVersion instance used in /game/versions/new. Additional data is publicly read only. Avoid placing sensitive information in additionalData.\n      x-examples:\n        Version v1.13.0:\n          name: v1.13.0\n          additionalData: {}\n      properties:\n        name:\n          type: string\n          description: The game version itself\n        additionalData:\n          type: object\n          description: Additional data for this game version\n      required:\n        - name\n        - additionalData\n    Auth0ReturnData:\n      type: object\n      title: Auth0ReturnData\n      additionalProperties: false\n      description: Auth0 Return Data\n      properties:\n        domain:\n          type: string\n          description: The domain this Hive instance is configured to use for Auth0\n        clientId:\n          type: string\n          description: The client ID of the Auth0 application used by this Hive instance\n        audience:\n          type: string\n          description: The audience for Auth0 desired by this Hive instance\n      required:\n        - domain\n        - clientId\n        - audience\n    Auth0TokenResponse:\n      type: object\n      title: Auth0TokenResponse\n      additionalProperties: false\n      description: The response from an Auth0 authentication request.\n      properties:\n        access_Token:\n          type: string\n          description: The access token (which should be used in future requests as the Bearer token)\n        refresh_Token:\n          type: string\n          description: The refresh token\n        id_Token:\n          type: string\n          description: The id token\n        token_Type:\n          type: string\n          description: The token type (should be Bearer)\n          example: Bearer\n          enum:\n            - Bearer\n      required:\n        - access_Token\n        - refresh_Token\n        - id_Token\n        - token_Type\n  securitySchemes:\n    Auth0AuthToken:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: 'Authentication using the OAuth wrapper service, Vaulth.'\n  responses:\n    ForbiddenResponse:\n      description: The response provided when an action is forbidden.\n      content:\n        text/plain:\n          schema:\n            type: string\n            enum:\n              - forbidden\n          examples:\n            Forbidden Response:\n              value: forbidden\n      headers: {}\n    UnauthorizedResponse:\n      description: Not authorized.\n      content:\n        text/plain:\n          schema:\n            type: string\n      headers: {}\n  parameters: {}\ntags:\n  - name: auth0\n  - name: channels\n  - name: creation\n  - name: dependencies\n  - name: game-versions\n  - name: mods\n  - name: movement\n  - name: user\n",
			"canonicalURL": "/github.com/Atlas-Rhythm/Hive@b4c1b4972fa7605b79c757a7f379d8bee3de37bc/-/blob/api/reference/hive.v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Atlas-Rhythm/Hive/blob/b4c1b4972fa7605b79c757a7f379d8bee3de37bc/api/reference/hive.v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/channels\": get: responses: 403: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"complex form schema",
		"unsupported content types"
	]
}