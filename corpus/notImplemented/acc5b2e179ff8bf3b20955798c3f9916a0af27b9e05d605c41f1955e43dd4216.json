{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/qdrant/qdrant"
		},
		"file": {
			"name": "openapi.json",
			"size": 0,
			"path": "docs/redoc/v0.4.2/openapi.json",
			"byteSize": 70458,
			"content": "{\n  \"components\": {\n    \"schemas\": {\n      \"AliasOperations\": {\n        \"anyOf\": [\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Create alternative name for a collection. Collection will be available under both names for search, retrieve,\",\n            \"properties\": {\n              \"create_alias\": {\n                \"properties\": {\n                  \"alias_name\": {\n                    \"type\": \"string\"\n                  },\n                  \"collection_name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"alias_name\",\n                  \"collection_name\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\n              \"create_alias\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Delete alias if exists\",\n            \"properties\": {\n              \"delete_alias\": {\n                \"properties\": {\n                  \"alias_name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"alias_name\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\n              \"delete_alias\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Change alias to a new one\",\n            \"properties\": {\n              \"rename_alias\": {\n                \"properties\": {\n                  \"new_alias_name\": {\n                    \"type\": \"string\"\n                  },\n                  \"old_alias_name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"new_alias_name\",\n                  \"old_alias_name\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\n              \"rename_alias\"\n            ],\n            \"type\": \"object\"\n          }\n        ]\n      },\n      \"CollectionConfig\": {\n        \"properties\": {\n          \"hnsw_config\": {\n            \"$ref\": \"#/components/schemas/HnswConfig\"\n          },\n          \"optimizer_config\": {\n            \"$ref\": \"#/components/schemas/OptimizersConfig\"\n          },\n          \"params\": {\n            \"$ref\": \"#/components/schemas/CollectionParams\"\n          },\n          \"wal_config\": {\n            \"$ref\": \"#/components/schemas/WalConfig\"\n          }\n        },\n        \"required\": [\n          \"hnsw_config\",\n          \"optimizer_config\",\n          \"params\",\n          \"wal_config\"\n        ],\n        \"type\": \"object\"\n      },\n      \"CollectionDescription\": {\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\"\n        ],\n        \"type\": \"object\"\n      },\n      \"CollectionInfo\": {\n        \"description\": \"Current statistics and configuration of the collection.\",\n        \"properties\": {\n          \"config\": {\n            \"$ref\": \"#/components/schemas/CollectionConfig\"\n          },\n          \"disk_data_size\": {\n            \"description\": \"Disk space, used by collection\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"payload_schema\": {\n            \"additionalProperties\": {\n              \"$ref\": \"#/components/schemas/PayloadSchemaInfo\"\n            },\n            \"description\": \"Types of stored payload\",\n            \"type\": \"object\"\n          },\n          \"ram_data_size\": {\n            \"description\": \"RAM used by collection\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"segments_count\": {\n            \"description\": \"Number of segments in collection\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"status\": {\n            \"$ref\": \"#/components/schemas/CollectionStatus\"\n          },\n          \"vectors_count\": {\n            \"description\": \"Number of vectors in collection\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          }\n        },\n        \"required\": [\n          \"config\",\n          \"disk_data_size\",\n          \"payload_schema\",\n          \"ram_data_size\",\n          \"segments_count\",\n          \"status\",\n          \"vectors_count\"\n        ],\n        \"type\": \"object\"\n      },\n      \"CollectionParams\": {\n        \"properties\": {\n          \"distance\": {\n            \"$ref\": \"#/components/schemas/Distance\"\n          },\n          \"vector_size\": {\n            \"description\": \"Size of a vectors used\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          }\n        },\n        \"required\": [\n          \"distance\",\n          \"vector_size\"\n        ],\n        \"type\": \"object\"\n      },\n      \"CollectionStatus\": {\n        \"enum\": [\n          \"green\",\n          \"yellow\",\n          \"red\"\n        ],\n        \"type\": \"string\"\n      },\n      \"CollectionUpdateOperations\": {\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/PointOperations\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/PayloadOps\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/FieldIndexOperations\"\n          }\n        ]\n      },\n      \"CollectionsResponse\": {\n        \"properties\": {\n          \"collections\": {\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CollectionDescription\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"collections\"\n        ],\n        \"type\": \"object\"\n      },\n      \"Condition\": {\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/FieldCondition\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/HasIdCondition\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/Filter\"\n          }\n        ]\n      },\n      \"Distance\": {\n        \"description\": \"Type of internal tags, build from payload Distance function types used to compare vectors\",\n        \"enum\": [\n          \"Cosine\",\n          \"Euclid\",\n          \"Dot\"\n        ],\n        \"type\": \"string\"\n      },\n      \"ErrorResponse\": {\n        \"properties\": {\n          \"result\": {\n            \"nullable\": true,\n            \"type\": \"object\"\n          },\n          \"status\": {\n            \"properties\": {\n              \"error\": {\n                \"description\": \"Description of the occurred error.\",\n                \"type\": \"string\"\n              }\n            },\n            \"type\": \"object\"\n          },\n          \"time\": {\n            \"description\": \"Time spent to process this request\",\n            \"format\": \"float\",\n            \"type\": \"number\"\n          }\n        },\n        \"type\": \"object\"\n      },\n      \"FieldCondition\": {\n        \"properties\": {\n          \"geo_bounding_box\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/GeoBoundingBox\"\n              },\n              {\n                \"nullable\": true\n              }\n            ],\n            \"description\": \"Check if points geo location lies in a given area\"\n          },\n          \"geo_radius\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/GeoRadius\"\n              },\n              {\n                \"nullable\": true\n              }\n            ],\n            \"description\": \"Check if geo point is within a given radius\"\n          },\n          \"key\": {\n            \"type\": \"string\"\n          },\n          \"match\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/Match\"\n              },\n              {\n                \"nullable\": true\n              }\n            ],\n            \"description\": \"Check if point has field with a given value\"\n          },\n          \"range\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/Range\"\n              },\n              {\n                \"nullable\": true\n              }\n            ],\n            \"description\": \"Check if points value lies in a given range\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ],\n        \"type\": \"object\"\n      },\n      \"FieldIndexOperations\": {\n        \"anyOf\": [\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Create index for payload field\",\n            \"properties\": {\n              \"create_index\": {\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"create_index\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Delete index for the field\",\n            \"properties\": {\n              \"delete_index\": {\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"delete_index\"\n            ],\n            \"type\": \"object\"\n          }\n        ]\n      },\n      \"Filter\": {\n        \"additionalProperties\": false,\n        \"properties\": {\n          \"must\": {\n            \"description\": \"All conditions must match\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Condition\"\n            },\n            \"nullable\": true,\n            \"type\": \"array\"\n          },\n          \"must_not\": {\n            \"description\": \"All conditions must NOT match\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Condition\"\n            },\n            \"nullable\": true,\n            \"type\": \"array\"\n          },\n          \"should\": {\n            \"description\": \"At least one of thous conditions should match\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Condition\"\n            },\n            \"nullable\": true,\n            \"type\": \"array\"\n          }\n        },\n        \"type\": \"object\"\n      },\n      \"GeoBoundingBox\": {\n        \"properties\": {\n          \"bottom_right\": {\n            \"$ref\": \"#/components/schemas/GeoPoint\"\n          },\n          \"top_left\": {\n            \"$ref\": \"#/components/schemas/GeoPoint\"\n          }\n        },\n        \"required\": [\n          \"bottom_right\",\n          \"top_left\"\n        ],\n        \"type\": \"object\"\n      },\n      \"GeoPoint\": {\n        \"properties\": {\n          \"lat\": {\n            \"format\": \"double\",\n            \"type\": \"number\"\n          },\n          \"lon\": {\n            \"format\": \"double\",\n            \"type\": \"number\"\n          }\n        },\n        \"required\": [\n          \"lat\",\n          \"lon\"\n        ],\n        \"type\": \"object\"\n      },\n      \"GeoRadius\": {\n        \"properties\": {\n          \"center\": {\n            \"$ref\": \"#/components/schemas/GeoPoint\"\n          },\n          \"radius\": {\n            \"description\": \"Radius of the area in meters\",\n            \"format\": \"double\",\n            \"type\": \"number\"\n          }\n        },\n        \"required\": [\n          \"center\",\n          \"radius\"\n        ],\n        \"type\": \"object\"\n      },\n      \"HasIdCondition\": {\n        \"properties\": {\n          \"has_id\": {\n            \"items\": {\n              \"format\": \"uint64\",\n              \"minimum\": 0,\n              \"type\": \"integer\"\n            },\n            \"type\": \"array\",\n            \"uniqueItems\": true\n          }\n        },\n        \"required\": [\n          \"has_id\"\n        ],\n        \"type\": \"object\"\n      },\n      \"HnswConfig\": {\n        \"properties\": {\n          \"ef_construct\": {\n            \"description\": \"Number of neighbours to consider during the index building. Larger the value - more accurate the search, more time required to build index.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"full_scan_threshold\": {\n            \"description\": \"Minimal amount of points for additional payload-based indexing. If payload chunk is smaller than `full_scan_threshold` additional indexing won't be used - in this case full-scan search should be preferred by query planner and additional indexing is not required.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"m\": {\n            \"description\": \"Number of edges per node in the index graph. Larger the value - more accurate the search, more space required.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          }\n        },\n        \"required\": [\n          \"ef_construct\",\n          \"full_scan_threshold\",\n          \"m\"\n        ],\n        \"type\": \"object\"\n      },\n      \"HnswConfigDiff\": {\n        \"properties\": {\n          \"ef_construct\": {\n            \"description\": \"Number of neighbours to consider during the index building. Larger the value - more accurate the search, more time required to build index.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"full_scan_threshold\": {\n            \"description\": \"Minimal amount of points for additional payload-based indexing. If payload chunk is smaller than `full_scan_threshold` additional indexing won't be used - in this case full-scan search should be preferred by query planner and additional indexing is not required.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"m\": {\n            \"description\": \"Number of edges per node in the index graph. Larger the value - more accurate the search, more space required.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          }\n        },\n        \"type\": \"object\"\n      },\n      \"Match\": {\n        \"properties\": {\n          \"integer\": {\n            \"description\": \"Integer value to match\",\n            \"format\": \"int64\",\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"keyword\": {\n            \"description\": \"Keyword value to match\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          }\n        },\n        \"type\": \"object\"\n      },\n      \"OptimizersConfig\": {\n        \"properties\": {\n          \"deleted_threshold\": {\n            \"description\": \"The minimal fraction of deleted vectors in a segment, required to perform segment optimization\",\n            \"format\": \"double\",\n            \"type\": \"number\"\n          },\n          \"flush_interval_sec\": {\n            \"description\": \"Minimum interval between forced flushes.\",\n            \"format\": \"uint64\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"indexing_threshold\": {\n            \"description\": \"Maximum number of vectors allowed for plain index. Default value based on https://github.com/google-research/google-research/blob/master/scann/docs/algorithms.md\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"max_segment_number\": {\n            \"description\": \"If the number of segments exceeds this value, the optimizer will merge the smallest segments.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"memmap_threshold\": {\n            \"description\": \"Maximum number of vectors to store in-memory per segment. Segments larger than this threshold will be stored as read-only memmaped file.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"payload_indexing_threshold\": {\n            \"description\": \"Starting from this amount of vectors per-segment the engine will start building index for payload.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"vacuum_min_vector_number\": {\n            \"description\": \"The minimal number of vectors in a segment, required to perform segment optimization\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          }\n        },\n        \"required\": [\n          \"deleted_threshold\",\n          \"flush_interval_sec\",\n          \"indexing_threshold\",\n          \"max_segment_number\",\n          \"memmap_threshold\",\n          \"payload_indexing_threshold\",\n          \"vacuum_min_vector_number\"\n        ],\n        \"type\": \"object\"\n      },\n      \"OptimizersConfigDiff\": {\n        \"properties\": {\n          \"deleted_threshold\": {\n            \"description\": \"The minimal fraction of deleted vectors in a segment, required to perform segment optimization\",\n            \"format\": \"double\",\n            \"nullable\": true,\n            \"type\": \"number\"\n          },\n          \"flush_interval_sec\": {\n            \"description\": \"Minimum interval between forced flushes.\",\n            \"format\": \"uint64\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"indexing_threshold\": {\n            \"description\": \"Maximum number of vectors allowed for plain index. Default value based on https://github.com/google-research/google-research/blob/master/scann/docs/algorithms.md\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"max_segment_number\": {\n            \"description\": \"If the number of segments exceeds this value, the optimizer will merge the smallest segments.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"memmap_threshold\": {\n            \"description\": \"Maximum number of vectors to store in-memory per segment. Segments larger than this threshold will be stored as read-only memmaped file.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"payload_indexing_threshold\": {\n            \"description\": \"Starting from this amount of vectors per-segment the engine will start building index for payload.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"vacuum_min_vector_number\": {\n            \"description\": \"The minimal number of vectors in a segment, required to perform segment optimization\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          }\n        },\n        \"type\": \"object\"\n      },\n      \"PayloadInterface\": {\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/components/schemas/PayloadVariant_for_String\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/PayloadVariant_for_int64\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/PayloadVariant_for_double\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/PayloadInterfaceStrict\"\n          }\n        ]\n      },\n      \"PayloadInterfaceStrict\": {\n        \"anyOf\": [\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"keyword\"\n                ],\n                \"type\": \"string\"\n              },\n              \"value\": {\n                \"$ref\": \"#/components/schemas/PayloadVariant_for_String\"\n              }\n            },\n            \"required\": [\n              \"type\",\n              \"value\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"integer\"\n                ],\n                \"type\": \"string\"\n              },\n              \"value\": {\n                \"$ref\": \"#/components/schemas/PayloadVariant_for_int64\"\n              }\n            },\n            \"required\": [\n              \"type\",\n              \"value\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"float\"\n                ],\n                \"type\": \"string\"\n              },\n              \"value\": {\n                \"$ref\": \"#/components/schemas/PayloadVariant_for_double\"\n              }\n            },\n            \"required\": [\n              \"type\",\n              \"value\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"geo\"\n                ],\n                \"type\": \"string\"\n              },\n              \"value\": {\n                \"$ref\": \"#/components/schemas/PayloadVariant_for_GeoPoint\"\n              }\n            },\n            \"required\": [\n              \"type\",\n              \"value\"\n            ],\n            \"type\": \"object\"\n          }\n        ]\n      },\n      \"PayloadOps\": {\n        \"anyOf\": [\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Set payload value, overrides if it is already exists\",\n            \"properties\": {\n              \"set_payload\": {\n                \"properties\": {\n                  \"payload\": {\n                    \"additionalProperties\": {\n                      \"$ref\": \"#/components/schemas/PayloadInterface\"\n                    },\n                    \"type\": \"object\"\n                  },\n                  \"points\": {\n                    \"description\": \"Assigns payload to each point in this list\",\n                    \"items\": {\n                      \"format\": \"uint64\",\n                      \"minimum\": 0,\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"payload\",\n                  \"points\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\n              \"set_payload\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Deletes specified payload values if they are assigned\",\n            \"properties\": {\n              \"delete_payload\": {\n                \"properties\": {\n                  \"keys\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"points\": {\n                    \"description\": \"Deletes values from each point in this list\",\n                    \"items\": {\n                      \"format\": \"uint64\",\n                      \"minimum\": 0,\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"keys\",\n                  \"points\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\n              \"delete_payload\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Drops all Payload values associated with given points.\",\n            \"properties\": {\n              \"clear_payload\": {\n                \"properties\": {\n                  \"points\": {\n                    \"items\": {\n                      \"format\": \"uint64\",\n                      \"minimum\": 0,\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"points\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\n              \"clear_payload\"\n            ],\n            \"type\": \"object\"\n          }\n        ],\n        \"description\": \"Define operations description for point payloads manipulation\"\n      },\n      \"PayloadSchemaInfo\": {\n        \"properties\": {\n          \"data_type\": {\n            \"$ref\": \"#/components/schemas/PayloadSchemaType\"\n          },\n          \"indexed\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": [\n          \"data_type\",\n          \"indexed\"\n        ],\n        \"type\": \"object\"\n      },\n      \"PayloadSchemaType\": {\n        \"anyOf\": [\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"keyword\"\n                ],\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"type\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"integer\"\n                ],\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"type\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"float\"\n                ],\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"type\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"geo\"\n                ],\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"type\"\n            ],\n            \"type\": \"object\"\n          }\n        ]\n      },\n      \"PayloadSelector\": {\n        \"additionalProperties\": false,\n        \"properties\": {\n          \"exclude\": {\n            \"description\": \"Post-exclude return payload key type\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"include\": {\n            \"description\": \"Include return payload key type\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"exclude\",\n          \"include\"\n        ],\n        \"type\": \"object\"\n      },\n      \"PayloadType\": {\n        \"anyOf\": [\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"keyword\"\n                ],\n                \"type\": \"string\"\n              },\n              \"value\": {\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"required\": [\n              \"type\",\n              \"value\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"integer\"\n                ],\n                \"type\": \"string\"\n              },\n              \"value\": {\n                \"items\": {\n                  \"format\": \"int64\",\n                  \"type\": \"integer\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"required\": [\n              \"type\",\n              \"value\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"float\"\n                ],\n                \"type\": \"string\"\n              },\n              \"value\": {\n                \"items\": {\n                  \"format\": \"double\",\n                  \"type\": \"number\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"required\": [\n              \"type\",\n              \"value\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\n                  \"geo\"\n                ],\n                \"type\": \"string\"\n              },\n              \"value\": {\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/GeoPoint\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"required\": [\n              \"type\",\n              \"value\"\n            ],\n            \"type\": \"object\"\n          }\n        ]\n      },\n      \"PayloadVariant_for_GeoPoint\": {\n        \"anyOf\": [\n          {\n            \"items\": {\n              \"$ref\": \"#/components/schemas/GeoPoint\"\n            },\n            \"type\": \"array\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/GeoPoint\"\n          }\n        ]\n      },\n      \"PayloadVariant_for_String\": {\n        \"anyOf\": [\n          {\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          {\n            \"type\": \"string\"\n          }\n        ]\n      },\n      \"PayloadVariant_for_double\": {\n        \"anyOf\": [\n          {\n            \"items\": {\n              \"format\": \"double\",\n              \"type\": \"number\"\n            },\n            \"type\": \"array\"\n          },\n          {\n            \"format\": \"double\",\n            \"type\": \"number\"\n          }\n        ]\n      },\n      \"PayloadVariant_for_int64\": {\n        \"anyOf\": [\n          {\n            \"items\": {\n              \"format\": \"int64\",\n              \"type\": \"integer\"\n            },\n            \"type\": \"array\"\n          },\n          {\n            \"format\": \"int64\",\n            \"type\": \"integer\"\n          }\n        ]\n      },\n      \"PointInsertOperations\": {\n        \"anyOf\": [\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Inset points from a batch.\",\n            \"properties\": {\n              \"batch\": {\n                \"properties\": {\n                  \"ids\": {\n                    \"items\": {\n                      \"format\": \"uint64\",\n                      \"minimum\": 0,\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"payloads\": {\n                    \"items\": {\n                      \"additionalProperties\": {\n                        \"$ref\": \"#/components/schemas/PayloadInterface\"\n                      },\n                      \"nullable\": true,\n                      \"type\": \"object\"\n                    },\n                    \"nullable\": true,\n                    \"type\": \"array\"\n                  },\n                  \"vectors\": {\n                    \"items\": {\n                      \"items\": {\n                        \"format\": \"float\",\n                        \"type\": \"number\"\n                      },\n                      \"type\": \"array\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"ids\",\n                  \"vectors\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\n              \"batch\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Insert points from a list\",\n            \"properties\": {\n              \"points\": {\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/PointStruct\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"required\": [\n              \"points\"\n            ],\n            \"type\": \"object\"\n          }\n        ]\n      },\n      \"PointOperations\": {\n        \"anyOf\": [\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Insert or update points\",\n            \"properties\": {\n              \"upsert_points\": {\n                \"$ref\": \"#/components/schemas/PointInsertOperations\"\n              }\n            },\n            \"required\": [\n              \"upsert_points\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Delete point if exists\",\n            \"properties\": {\n              \"delete_points\": {\n                \"properties\": {\n                  \"ids\": {\n                    \"items\": {\n                      \"format\": \"uint64\",\n                      \"minimum\": 0,\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"ids\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\n              \"delete_points\"\n            ],\n            \"type\": \"object\"\n          }\n        ]\n      },\n      \"PointRequest\": {\n        \"properties\": {\n          \"ids\": {\n            \"items\": {\n              \"format\": \"uint64\",\n              \"minimum\": 0,\n              \"type\": \"integer\"\n            },\n            \"type\": \"array\"\n          },\n          \"with_payload\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/WithPayloadInterface\"\n              },\n              {\n                \"nullable\": true\n              }\n            ]\n          }\n        },\n        \"required\": [\n          \"ids\"\n        ],\n        \"type\": \"object\"\n      },\n      \"PointStruct\": {\n        \"properties\": {\n          \"id\": {\n            \"description\": \"Point id\",\n            \"format\": \"uint64\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"payload\": {\n            \"additionalProperties\": {\n              \"$ref\": \"#/components/schemas/PayloadInterface\"\n            },\n            \"description\": \"Payload values (optional)\",\n            \"nullable\": true,\n            \"type\": \"object\"\n          },\n          \"vector\": {\n            \"description\": \"Vector\",\n            \"items\": {\n              \"format\": \"float\",\n              \"type\": \"number\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"vector\"\n        ],\n        \"type\": \"object\"\n      },\n      \"Range\": {\n        \"properties\": {\n          \"gt\": {\n            \"description\": \"point.key \u003e range.gt\",\n            \"format\": \"double\",\n            \"nullable\": true,\n            \"type\": \"number\"\n          },\n          \"gte\": {\n            \"description\": \"point.key \u003e= range.gte\",\n            \"format\": \"double\",\n            \"nullable\": true,\n            \"type\": \"number\"\n          },\n          \"lt\": {\n            \"description\": \"point.key \u003c range.lt\",\n            \"format\": \"double\",\n            \"nullable\": true,\n            \"type\": \"number\"\n          },\n          \"lte\": {\n            \"description\": \"point.key \u003c= range.lte\",\n            \"format\": \"double\",\n            \"nullable\": true,\n            \"type\": \"number\"\n          }\n        },\n        \"type\": \"object\"\n      },\n      \"RecommendRequest\": {\n        \"description\": \"Search request\",\n        \"properties\": {\n          \"filter\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/Filter\"\n              },\n              {\n                \"nullable\": true\n              }\n            ],\n            \"description\": \"Look only for points which satisfies this conditions\"\n          },\n          \"negative\": {\n            \"description\": \"Try to avoid vectors like this\",\n            \"items\": {\n              \"format\": \"uint64\",\n              \"minimum\": 0,\n              \"type\": \"integer\"\n            },\n            \"type\": \"array\"\n          },\n          \"params\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/SearchParams\"\n              },\n              {\n                \"nullable\": true\n              }\n            ],\n            \"description\": \"Additional search params\"\n          },\n          \"positive\": {\n            \"description\": \"Look for vectors closest to those\",\n            \"items\": {\n              \"format\": \"uint64\",\n              \"minimum\": 0,\n              \"type\": \"integer\"\n            },\n            \"type\": \"array\"\n          },\n          \"top\": {\n            \"description\": \"Max number of result to return\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          }\n        },\n        \"required\": [\n          \"negative\",\n          \"positive\",\n          \"top\"\n        ],\n        \"type\": \"object\"\n      },\n      \"Record\": {\n        \"description\": \"Point data\",\n        \"properties\": {\n          \"id\": {\n            \"description\": \"Id of the point\",\n            \"format\": \"uint64\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"payload\": {\n            \"additionalProperties\": {\n              \"$ref\": \"#/components/schemas/PayloadType\"\n            },\n            \"description\": \"Payload - values assigned to the point\",\n            \"nullable\": true,\n            \"type\": \"object\"\n          },\n          \"vector\": {\n            \"description\": \"Vector of the point\",\n            \"items\": {\n              \"format\": \"float\",\n              \"type\": \"number\"\n            },\n            \"nullable\": true,\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"id\"\n        ],\n        \"type\": \"object\"\n      },\n      \"ScoredPoint\": {\n        \"properties\": {\n          \"id\": {\n            \"description\": \"Point id\",\n            \"format\": \"uint64\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"payload\": {\n            \"additionalProperties\": {\n              \"$ref\": \"#/components/schemas/PayloadType\"\n            },\n            \"description\": \"Payload storage\",\n            \"nullable\": true,\n            \"type\": \"object\"\n          },\n          \"score\": {\n            \"description\": \"Points vector distance to the query vector\",\n            \"format\": \"float\",\n            \"type\": \"number\"\n          },\n          \"version\": {\n            \"description\": \"Point version\",\n            \"format\": \"uint64\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"score\",\n          \"version\"\n        ],\n        \"type\": \"object\"\n      },\n      \"ScrollRequest\": {\n        \"description\": \"Scroll request - paginate over all points which matches given condition\",\n        \"properties\": {\n          \"filter\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/Filter\"\n              },\n              {\n                \"nullable\": true\n              }\n            ],\n            \"description\": \"Look only for points which satisfies this conditions. If not provided - all points.\"\n          },\n          \"limit\": {\n            \"description\": \"Page size. Default: 10\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"offset\": {\n            \"description\": \"Start ID to read points from. Default: 0\",\n            \"format\": \"uint64\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"with_payload\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/WithPayloadInterface\"\n              },\n              {\n                \"nullable\": true\n              }\n            ],\n            \"description\": \"Return point payload with the result. Default: True\"\n          },\n          \"with_vector\": {\n            \"description\": \"Return point vector with the result. Default: false\",\n            \"nullable\": true,\n            \"type\": \"boolean\"\n          }\n        },\n        \"type\": \"object\"\n      },\n      \"ScrollResult\": {\n        \"description\": \"Result of the points read request. Contains\",\n        \"properties\": {\n          \"next_page_offset\": {\n            \"description\": \"Offset which should be used to retrieve a next page result\",\n            \"format\": \"uint64\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"points\": {\n            \"description\": \"List of retrieved points\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Record\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"points\"\n        ],\n        \"type\": \"object\"\n      },\n      \"SearchParams\": {\n        \"description\": \"Additional parameters of the search\",\n        \"properties\": {\n          \"hnsw_ef\": {\n            \"description\": \"Params relevant to HNSW index /// Size of the beam in a beam-search. Larger the value - more accurate the result, more time required for search.\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          }\n        },\n        \"type\": \"object\"\n      },\n      \"SearchRequest\": {\n        \"description\": \"Search request\",\n        \"properties\": {\n          \"filter\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/Filter\"\n              },\n              {\n                \"nullable\": true\n              }\n            ],\n            \"description\": \"Look only for points which satisfies this conditions\"\n          },\n          \"params\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/SearchParams\"\n              },\n              {\n                \"nullable\": true\n              }\n            ],\n            \"description\": \"Additional search params\"\n          },\n          \"top\": {\n            \"description\": \"Max number of result to return\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"vector\": {\n            \"description\": \"Look for vectors closest to this\",\n            \"items\": {\n              \"format\": \"float\",\n              \"type\": \"number\"\n            },\n            \"type\": \"array\"\n          },\n          \"with_payload\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/components/schemas/WithPayloadInterface\"\n              },\n              {\n                \"nullable\": true\n              }\n            ],\n            \"description\": \"Payload interface\"\n          }\n        },\n        \"required\": [\n          \"top\",\n          \"vector\"\n        ],\n        \"type\": \"object\"\n      },\n      \"StorageOperations\": {\n        \"anyOf\": [\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Create new collection and (optionally) specify index params\",\n            \"properties\": {\n              \"create_collection\": {\n                \"properties\": {\n                  \"distance\": {\n                    \"$ref\": \"#/components/schemas/Distance\"\n                  },\n                  \"hnsw_config\": {\n                    \"anyOf\": [\n                      {\n                        \"$ref\": \"#/components/schemas/HnswConfigDiff\"\n                      },\n                      {\n                        \"nullable\": true\n                      }\n                    ],\n                    \"description\": \"Custom params for HNSW index. If none - values from service configuration file are used.\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  },\n                  \"optimizers_config\": {\n                    \"anyOf\": [\n                      {\n                        \"$ref\": \"#/components/schemas/OptimizersConfigDiff\"\n                      },\n                      {\n                        \"nullable\": true\n                      }\n                    ],\n                    \"description\": \"Custom params for Optimizers.  If none - values from service configuration file are used.\"\n                  },\n                  \"vector_size\": {\n                    \"format\": \"uint\",\n                    \"minimum\": 0,\n                    \"type\": \"integer\"\n                  },\n                  \"wal_config\": {\n                    \"anyOf\": [\n                      {\n                        \"$ref\": \"#/components/schemas/WalConfigDiff\"\n                      },\n                      {\n                        \"nullable\": true\n                      }\n                    ],\n                    \"description\": \"Custom params for WAL. If none - values from service configuration file are used.\"\n                  }\n                },\n                \"required\": [\n                  \"distance\",\n                  \"name\",\n                  \"vector_size\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\n              \"create_collection\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Update parameters of the existing collection\",\n            \"properties\": {\n              \"update_collection\": {\n                \"properties\": {\n                  \"name\": {\n                    \"type\": \"string\"\n                  },\n                  \"optimizers_config\": {\n                    \"anyOf\": [\n                      {\n                        \"$ref\": \"#/components/schemas/OptimizersConfigDiff\"\n                      },\n                      {\n                        \"nullable\": true\n                      }\n                    ],\n                    \"description\": \"Custom params for Optimizers.  If none - values from service configuration file are used. This operation is blocking, it will only proceed ones all current optimizations are complete\"\n                  }\n                },\n                \"required\": [\n                  \"name\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\n              \"update_collection\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Delete collection with given name\",\n            \"properties\": {\n              \"delete_collection\": {\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"delete_collection\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"additionalProperties\": false,\n            \"description\": \"Perform changes of collection aliases. Alias changes are atomic, meaning that no collection modifications can happen between alias operations.\",\n            \"properties\": {\n              \"change_aliases\": {\n                \"properties\": {\n                  \"actions\": {\n                    \"items\": {\n                      \"$ref\": \"#/components/schemas/AliasOperations\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"actions\"\n                ],\n                \"type\": \"object\"\n              }\n            },\n            \"required\": [\n              \"change_aliases\"\n            ],\n            \"type\": \"object\"\n          }\n        ]\n      },\n      \"UpdateResult\": {\n        \"properties\": {\n          \"operation_id\": {\n            \"description\": \"Sequential number of the operation\",\n            \"format\": \"uint64\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"status\": {\n            \"$ref\": \"#/components/schemas/UpdateStatus\"\n          }\n        },\n        \"required\": [\n          \"operation_id\",\n          \"status\"\n        ],\n        \"type\": \"object\"\n      },\n      \"UpdateStatus\": {\n        \"enum\": [\n          \"acknowledged\",\n          \"completed\"\n        ],\n        \"type\": \"string\"\n      },\n      \"WalConfig\": {\n        \"properties\": {\n          \"wal_capacity_mb\": {\n            \"description\": \"Size of a single WAL segment in MB\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"wal_segments_ahead\": {\n            \"description\": \"Number of WAL segments to create ahead of actually used ones\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          }\n        },\n        \"required\": [\n          \"wal_capacity_mb\",\n          \"wal_segments_ahead\"\n        ],\n        \"type\": \"object\"\n      },\n      \"WalConfigDiff\": {\n        \"properties\": {\n          \"wal_capacity_mb\": {\n            \"description\": \"Size of a single WAL segment in MB\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"wal_segments_ahead\": {\n            \"description\": \"Number of WAL segments to create ahead of actually used ones\",\n            \"format\": \"uint\",\n            \"minimum\": 0,\n            \"nullable\": true,\n            \"type\": \"integer\"\n          }\n        },\n        \"type\": \"object\"\n      },\n      \"WithPayloadInterface\": {\n        \"anyOf\": [\n          {\n            \"type\": \"boolean\"\n          },\n          {\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/PayloadSelector\"\n          }\n        ]\n      }\n    }\n  },\n  \"externalDocs\": {\n    \"description\": \"Find out more about Qdrant aplications and demo\",\n    \"url\": \"demo.qdrant.tech\"\n  },\n  \"info\": {\n    \"contact\": {\n      \"email\": \"andrey@vasnetsov.com\"\n    },\n    \"description\": \"\\nAPI description for Qdrant vector search engine.\\n\\nThis document describes CRUD and search operations on collections of points (vectors with payload).\\n\\nQdrant supports any combinations of `should`, `must` and `must_not` conditions, which makes it possible to use in applications when object could not be described solely by vector. It could be location features, availability flags, and other custom properties businesses should take into account.\\n## Examples\\nThis examples cover the most basic use-cases - collection creation and basic vector search.\\n### Create collection\\nFirst - let's create a collection with dot-production metric.\\n```\\ncurl -X POST 'http://localhost:6333/collections' \\\\\\n  -H 'Content-Type: application/json' \\\\\\n  --data-raw '{\\n      \\\"create_collection\\\": {\\n          \\\"name\\\": \\\"test_collection\\\",\\n          \\\"vector_size\\\": 4,\\n          \\\"distance\\\": \\\"Dot\\\"\\n      }\\n  }'\\n```\\nExpected response:\\n```\\n{\\n    \\\"result\\\": true,\\n    \\\"status\\\": \\\"ok\\\",\\n    \\\"time\\\": 0.031095451\\n}\\n```\\nWe can ensure that collection was created:\\n```\\ncurl 'http://localhost:6333/collections/test_collection'\\n```\\nExpected response:\\n```\\n{\\n  \\\"result\\\": {\\n    \\\"status\\\": \\\"green\\\",\\n    \\\"vectors_count\\\": 0,\\n    \\\"segments_count\\\": 5,\\n    \\\"disk_data_size\\\": 0,\\n    \\\"ram_data_size\\\": 0,\\n    \\\"config\\\": {\\n      \\\"params\\\": {\\n        \\\"vector_size\\\": 4,\\n        \\\"distance\\\": \\\"Dot\\\"\\n      },\\n      \\\"hnsw_config\\\": {\\n        \\\"m\\\": 16,\\n        \\\"ef_construct\\\": 100,\\n        \\\"full_scan_threshold\\\": 10000\\n      },\\n      \\\"optimizer_config\\\": {\\n        \\\"deleted_threshold\\\": 0.2,\\n        \\\"vacuum_min_vector_number\\\": 1000,\\n        \\\"max_segment_number\\\": 5,\\n        \\\"memmap_threshold\\\": 50000,\\n        \\\"indexing_threshold\\\": 20000,\\n        \\\"payload_indexing_threshold\\\": 10000,\\n        \\\"flush_interval_sec\\\": 1\\n      },\\n      \\\"wal_config\\\": {\\n        \\\"wal_capacity_mb\\\": 32,\\n        \\\"wal_segments_ahead\\\": 0\\n      }\\n    }\\n  },\\n  \\\"status\\\": \\\"ok\\\",\\n  \\\"time\\\": 2.1199e-05\\n}\\n```\\n\\n### Add points\\nLet's now add vectors with some payload:\\n```\\ncurl -L -X POST 'http://localhost:6333/collections/test_collection?wait=true' \\\\ -H 'Content-Type: application/json' \\\\ --data-raw '{\\n  \\\"upsert_points\\\": {\\n    \\\"points\\\": [\\n      {\\\"id\\\": 1, \\\"vector\\\": [0.05, 0.61, 0.76, 0.74], \\\"payload\\\": {\\\"city\\\": {\\\"type\\\": \\\"keyword\\\", \\\"value\\\": \\\"Berlin\\\"}}},\\n      {\\\"id\\\": 2, \\\"vector\\\": [0.19, 0.81, 0.75, 0.11], \\\"payload\\\": {\\\"city\\\": {\\\"type\\\": \\\"keyword\\\", \\\"value\\\": [\\\"Berlin\\\", \\\"London\\\"] }}},\\n      {\\\"id\\\": 3, \\\"vector\\\": [0.36, 0.55, 0.47, 0.94], \\\"payload\\\": {\\\"city\\\": {\\\"type\\\": \\\"keyword\\\", \\\"value\\\": [\\\"Berlin\\\", \\\"Moscow\\\"] }}},\\n      {\\\"id\\\": 4, \\\"vector\\\": [0.18, 0.01, 0.85, 0.80], \\\"payload\\\": {\\\"city\\\": {\\\"type\\\": \\\"keyword\\\", \\\"value\\\": [\\\"London\\\", \\\"Moscow\\\"]}}},\\n      {\\\"id\\\": 5, \\\"vector\\\": [0.24, 0.18, 0.22, 0.44], \\\"payload\\\": {\\\"count\\\": {\\\"type\\\": \\\"integer\\\", \\\"value\\\": [0]}}},\\n      {\\\"id\\\": 6, \\\"vector\\\": [0.35, 0.08, 0.11, 0.44]}\\n    ]\\n  }\\n}'\\n```\\nExpected response:\\n```\\n{\\n    \\\"result\\\": {\\n        \\\"operation_id\\\": 0,\\n        \\\"status\\\": \\\"completed\\\"\\n    },\\n    \\\"status\\\": \\\"ok\\\",\\n    \\\"time\\\": 0.000206061\\n}\\n```\\n### Search with filtering\\nLet's start with a basic request:\\n```\\ncurl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\\\ -H 'Content-Type: application/json' \\\\ --data-raw '{\\n    \\\"vector\\\": [0.2,0.1,0.9,0.7],\\n    \\\"top\\\": 3\\n}'\\n```\\nExpected response:\\n```\\n{\\n    \\\"result\\\": [\\n        { \\\"id\\\": 4, \\\"score\\\": 1.362 },\\n        { \\\"id\\\": 1, \\\"score\\\": 1.273 },\\n        { \\\"id\\\": 3, \\\"score\\\": 1.208 }\\n    ],\\n    \\\"status\\\": \\\"ok\\\",\\n    \\\"time\\\": 0.000055785\\n}\\n```\\nBut result is different if we add a filter:\\n```\\ncurl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\\\ -H 'Content-Type: application/json' \\\\ --data-raw '{\\n    \\\"filter\\\": {\\n        \\\"should\\\": [\\n            {\\n                \\\"key\\\": \\\"city\\\",\\n                \\\"match\\\": {\\n                    \\\"keyword\\\": \\\"London\\\"\\n                }\\n            }\\n        ]\\n    },\\n    \\\"vector\\\": [0.2, 0.1, 0.9, 0.7],\\n    \\\"top\\\": 3\\n}'\\n```\\nExpected response:\\n```\\n{\\n    \\\"result\\\": [\\n        { \\\"id\\\": 4, \\\"score\\\": 1.362 },\\n        { \\\"id\\\": 2, \\\"score\\\": 0.871 }\\n    ],\\n    \\\"status\\\": \\\"ok\\\",\\n    \\\"time\\\": 0.000093972\\n}\\n```\\n\",\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    },\n    \"title\": \"Qdrant API\",\n    \"version\": \"0.4.2\"\n  },\n  \"openapi\": \"3.0.1\",\n  \"paths\": {\n    \"/collections\": {\n      \"get\": {\n        \"operationId\": \"get_collections\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"properties\": {\n                    \"result\": {\n                      \"$ref\": \"#/components/schemas/CollectionsResponse\"\n                    },\n                    \"status\": {\n                      \"enum\": [\n                        \"ok\"\n                      ],\n                      \"type\": \"string\"\n                    },\n                    \"time\": {\n                      \"description\": \"Time spent to process this request\",\n                      \"format\": \"float\",\n                      \"type\": \"number\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"description\": \"successful operation\"\n          },\n          \"default\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ErrorResponse\"\n                }\n              }\n            },\n            \"description\": \"error\"\n          }\n        },\n        \"summary\": \"Get list of existing collections\",\n        \"tags\": [\n          \"collections\"\n        ]\n      },\n      \"post\": {\n        \"operationId\": \"update_collections\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/StorageOperations\"\n              }\n            }\n          },\n          \"description\": \"Operation to perform on collections\"\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"properties\": {\n                    \"result\": {\n                      \"type\": \"boolean\"\n                    },\n                    \"status\": {\n                      \"enum\": [\n                        \"ok\"\n                      ],\n                      \"type\": \"string\"\n                    },\n                    \"time\": {\n                      \"description\": \"Time spent to process this request\",\n                      \"format\": \"float\",\n                      \"type\": \"number\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"description\": \"successful operation\"\n          },\n          \"default\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ErrorResponse\"\n                }\n              }\n            },\n            \"description\": \"error\"\n          }\n        },\n        \"summary\": \"Perform update operation on collections\",\n        \"tags\": [\n          \"collections\"\n        ]\n      }\n    },\n    \"/collections/{name}\": {\n      \"get\": {\n        \"operationId\": \"get_collection\",\n        \"parameters\": [\n          {\n            \"description\": \"Name of the collection to retrieve\",\n            \"in\": \"path\",\n            \"name\": \"name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"properties\": {\n                    \"result\": {\n                      \"$ref\": \"#/components/schemas/CollectionInfo\"\n                    },\n                    \"status\": {\n                      \"enum\": [\n                        \"ok\"\n                      ],\n                      \"type\": \"string\"\n                    },\n                    \"time\": {\n                      \"description\": \"Time spent to process this request\",\n                      \"format\": \"float\",\n                      \"type\": \"number\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"description\": \"successful operation\"\n          },\n          \"default\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ErrorResponse\"\n                }\n              }\n            },\n            \"description\": \"error\"\n          }\n        },\n        \"summary\": \"Get information about existing collection\",\n        \"tags\": [\n          \"collections\"\n        ]\n      },\n      \"post\": {\n        \"operationId\": \"update_points\",\n        \"parameters\": [\n          {\n            \"description\": \"Name of the collection to search in\",\n            \"in\": \"path\",\n            \"name\": \"name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"description\": \"Wait for changes to actually happen? Default: false\",\n            \"in\": \"query\",\n            \"name\": \"wait\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CollectionUpdateOperations\"\n              }\n            }\n          },\n          \"description\": \"Collection update operations\"\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"properties\": {\n                    \"result\": {\n                      \"$ref\": \"#/components/schemas/UpdateResult\"\n                    },\n                    \"status\": {\n                      \"enum\": [\n                        \"ok\"\n                      ],\n                      \"type\": \"string\"\n                    },\n                    \"time\": {\n                      \"description\": \"Time spent to process this request\",\n                      \"format\": \"float\",\n                      \"type\": \"number\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"description\": \"successful operation\"\n          },\n          \"default\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ErrorResponse\"\n                }\n              }\n            },\n            \"description\": \"error\"\n          }\n        },\n        \"summary\": \"Update points (vectors, payloads, indexes) in collection\",\n        \"tags\": [\n          \"points\"\n        ]\n      }\n    },\n    \"/collections/{name}/points\": {\n      \"post\": {\n        \"operationId\": \"get_points\",\n        \"parameters\": [\n          {\n            \"description\": \"Name of the collection to retrieve from\",\n            \"in\": \"path\",\n            \"name\": \"name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/PointRequest\"\n              }\n            }\n          },\n          \"description\": \"List of points to retrieve\"\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"properties\": {\n                    \"result\": {\n                      \"items\": {\n                        \"$ref\": \"#/components/schemas/Record\"\n                      },\n                      \"type\": \"array\"\n                    },\n                    \"status\": {\n                      \"enum\": [\n                        \"ok\"\n                      ],\n                      \"type\": \"string\"\n                    },\n                    \"time\": {\n                      \"description\": \"Time spent to process this request\",\n                      \"format\": \"float\",\n                      \"type\": \"number\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"description\": \"successful operation\"\n          },\n          \"default\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ErrorResponse\"\n                }\n              }\n            },\n            \"description\": \"error\"\n          }\n        },\n        \"summary\": \"Retrieve points by ids\",\n        \"tags\": [\n          \"points\"\n        ]\n      }\n    },\n    \"/collections/{name}/points/recommend\": {\n      \"post\": {\n        \"operationId\": \"recommend_points\",\n        \"parameters\": [\n          {\n            \"description\": \"Name of the collection to search in\",\n            \"in\": \"path\",\n            \"name\": \"name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RecommendRequest\"\n              }\n            }\n          },\n          \"description\": \"Request points based on positive and negative examples.\"\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"properties\": {\n                    \"result\": {\n                      \"items\": {\n                        \"$ref\": \"#/components/schemas/ScoredPoint\"\n                      },\n                      \"type\": \"array\"\n                    },\n                    \"status\": {\n                      \"enum\": [\n                        \"ok\"\n                      ],\n                      \"type\": \"string\"\n                    },\n                    \"time\": {\n                      \"description\": \"Time spent to process this request\",\n                      \"format\": \"float\",\n                      \"type\": \"number\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"description\": \"successful operation\"\n          },\n          \"default\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ErrorResponse\"\n                }\n              }\n            },\n            \"description\": \"error\"\n          }\n        },\n        \"summary\": \"Recommend points\",\n        \"tags\": [\n          \"points\"\n        ]\n      }\n    },\n    \"/collections/{name}/points/scroll\": {\n      \"post\": {\n        \"description\": \"Scroll request - paginate over all points which matches given condition\",\n        \"operationId\": \"scroll_points\",\n        \"parameters\": [\n          {\n            \"description\": \"Name of the collection to retrieve from\",\n            \"in\": \"path\",\n            \"name\": \"name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ScrollRequest\"\n              }\n            }\n          },\n          \"description\": \"Pagination and filter parameters\"\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"properties\": {\n                    \"result\": {\n                      \"$ref\": \"#/components/schemas/ScrollResult\"\n                    },\n                    \"status\": {\n                      \"enum\": [\n                        \"ok\"\n                      ],\n                      \"type\": \"string\"\n                    },\n                    \"time\": {\n                      \"description\": \"Time spent to process this request\",\n                      \"format\": \"float\",\n                      \"type\": \"number\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"description\": \"successful operation\"\n          },\n          \"default\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ErrorResponse\"\n                }\n              }\n            },\n            \"description\": \"error\"\n          }\n        },\n        \"summary\": \"Scroll points\",\n        \"tags\": [\n          \"points\"\n        ]\n      }\n    },\n    \"/collections/{name}/points/search\": {\n      \"post\": {\n        \"operationId\": \"search_points\",\n        \"parameters\": [\n          {\n            \"description\": \"Name of the collection to search in\",\n            \"in\": \"path\",\n            \"name\": \"name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/SearchRequest\"\n              }\n            }\n          },\n          \"description\": \"Search request with optional filtering\"\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"properties\": {\n                    \"result\": {\n                      \"items\": {\n                        \"$ref\": \"#/components/schemas/ScoredPoint\"\n                      },\n                      \"type\": \"array\"\n                    },\n                    \"status\": {\n                      \"enum\": [\n                        \"ok\"\n                      ],\n                      \"type\": \"string\"\n                    },\n                    \"time\": {\n                      \"description\": \"Time spent to process this request\",\n                      \"format\": \"float\",\n                      \"type\": \"number\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"description\": \"successful operation\"\n          },\n          \"default\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ErrorResponse\"\n                }\n              }\n            },\n            \"description\": \"error\"\n          }\n        },\n        \"summary\": \"Search points\",\n        \"tags\": [\n          \"points\"\n        ]\n      }\n    },\n    \"/collections/{name}/points/{id}\": {\n      \"get\": {\n        \"operationId\": \"get_point\",\n        \"parameters\": [\n          {\n            \"description\": \"Name of the collection to retrieve from\",\n            \"in\": \"path\",\n            \"name\": \"name\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"description\": \"Id of the point\",\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"properties\": {\n                    \"result\": {\n                      \"$ref\": \"#/components/schemas/Record\"\n                    },\n                    \"status\": {\n                      \"enum\": [\n                        \"ok\"\n                      ],\n                      \"type\": \"string\"\n                    },\n                    \"time\": {\n                      \"description\": \"Time spent to process this request\",\n                      \"format\": \"float\",\n                      \"type\": \"number\"\n                    }\n                  },\n                  \"type\": \"object\"\n                }\n              }\n            },\n            \"description\": \"successful operation\"\n          },\n          \"default\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ErrorResponse\"\n                }\n              }\n            },\n            \"description\": \"error\"\n          }\n        },\n        \"summary\": \"Retrieve point by id\",\n        \"tags\": [\n          \"points\"\n        ]\n      }\n    }\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:6333\"\n    }\n  ],\n  \"tags\": [\n    {\n      \"description\": \"Searchable collections of points.\",\n      \"name\": \"collections\"\n    },\n    {\n      \"description\": \"Float-point vectors with payload.\",\n      \"name\": \"points\"\n    }\n  ]\n}\n",
			"canonicalURL": "/github.com/qdrant/qdrant@850e937c2a883e87622b43b3603be9ee1aaf02af/-/blob/docs/redoc/v0.4.2/openapi.json",
			"externalURLs": [
				{
					"url": "https://github.com/qdrant/qdrant/blob/850e937c2a883e87622b43b3603be9ee1aaf02af/docs/redoc/v0.4.2/openapi.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/collections/{name}/points/recommend\": post: requestBody: contents: application/json: generate schema: field filter: anyOf: collect variants: oneOf[0]: field must: item: anyOf: collect variants: oneOf[0]: field geo_bounding_box: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"complex anyOf"
	]
}