{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "tool-tests/4-annotations-display/openapi.yaml",
			"byteSize": 22443,
			"content": "openapi: \"3.0.1\"\n\ninfo:\n  title: \"OpenWeatherMap API\"\n  description: \u003e\n    This is a generated connector from [Open Weather Map API version 2.5](https://openweathermap.org/) OpenAPI Specification. \n\n    The Open Weather Map API provides access to current weather data and weather forecast of any location worldwide including 200,000 cities by consuming the [`Current Weather Data`](https://openweathermap.org/current) and [`One Call`](https://openweathermap.org/api/one-call-api) API endpoints.  \n  version: \"2.5.2\"\n  termsOfService: \"https://openweathermap.org/terms\"\n  contact:\n    name: \"OpenWeatherMap API\"\n    url: \"https://openweathermap.org/api\"\n  license:\n    name: \"CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)\"\n    url: \"https://openweathermap.org/price\"\n  x-ballerina-display:\n    label: OpenWeatherMap\n    iconPath: \"icon.png\"\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials. \n    \n    Please create an account at https://openweathermap.org and an API key following [this guide](https://openweathermap.org/appid).  Choose a subscription that matches with your requirements.\nservers:\n- url: \"http://api.openweathermap.org/data/2.5/\"\n\npaths:\n  /weather:\n    get:\n      tags:\n      - Current Weather Data\n      summary: \"Access current weather data for any location. **Note**: All parameters are optional, but you must provide at least one parameter. Calling the API by city ID (using the `id` parameter) will provide the most precise location results.\"\n      description: \"Access current weather data for any location. **Note**: All parameters are optional, but you must provide at least one parameter. Calling the API by city ID (using the `id` parameter) will provide the most precise location results.\"\n      operationId: getCurretWeatherData\n      parameters:\n        - $ref: '#/components/parameters/cityName'\n        - $ref: '#/components/parameters/id'\n        - $ref: '#/components/parameters/lat'\n        - $ref: '#/components/parameters/lon'\n        - $ref: '#/components/parameters/zip'\n        - $ref: '#/components/parameters/units'\n        - $ref: '#/components/parameters/lang'\n        - $ref: '#/components/parameters/mode'\n      x-ballerina-display: \n        label: \"Current Weather\"\n      responses:\n        200:\n          description: Current weather data of the given location\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CurrentWeatherData'\n        404:\n          description: Not found response\n          content:\n            text/plain:\n              schema:\n                title: Weather not found\n                type: string\n                example: Not found\n  /onecall:\n    get:\n      tags:\n      - Weather Forecast\n      summary: \"Access to current weather, minute forecast for 1 hour, hourly forecast for 48 hours, daily forecast for 7 days and government weather alerts.\"\n      description: \"Access to current weather, minute forecast for 1 hour, hourly forecast for 48 hours, daily forecast for 7 days and government weather alerts.\"\n      operationId: getWeatherForecast\n      parameters:\n        - description: \"Latitude\"\n          in: query\n          name: lat\n          required: true\n          schema:\n            type: string \n          x-ballerina-display: \n            label: Latitude\n        - description: \"Longtitude\"\n          in: query\n          name: lon\n          required: true\n          schema:\n            type: string \n          x-ballerina-display: \n            label: Longtitude\n        - description: \"Exclude parts of the weather data from the API response. It should be a comma-delimited list (without spaces).\"\n          in: query\n          name: exclude\n          required: false\n          schema:\n            enum:\n                - 'current'\n                - 'minutely'\n                - 'hourly'\n                - 'daily'\n                - 'alerts'\n            type: string \n          x-ballerina-display: \n            label: Exclude\n        - description: \"For temperature in Fahrenheit and wind speed in miles/hour, use `units=imperial`. For temperature in Celsius and wind speed in meter/sec, use `units=metric`. Temperature in Kelvin and wind speed in meter/sec is used by default, so there is no need to use the units parameter in the API call if you want this.\"\n          in: query\n          name: units\n          required: false\n          schema:\n            type: string \n          x-ballerina-display: \n            label: Units\n        - description: 'Language'\n          in: query\n          name: lang\n          required: false\n          schema:\n            type: string \n          x-ballerina-display: \n            label: Language\n      x-ballerina-display: \n        label: \"Weather Forecast\"\n      responses:\n        200:\n          description: Weather forecast of the given location\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WeatherForecast'\n        404:\n          description: Not found response\n          content:\n            text/plain:\n              schema:\n                title: Weather not found\n                type: string\n                example: Not found\n\nsecurity:\n- app_id: []\n\ntags:\n  - name: Current Weather Data\n    description: \"Get current weather details\"\n  - name: Weather Forecast\n    description: \"Get data related to weather forecast\"\n\nexternalDocs:\n  description: API Documentation\n  url: https://openweathermap.org/api\n\ncomponents:\n  parameters:\n    cityName:\n      name: q\n      in: query\n      description: \"City name, or city name and country code. For the query value, type the city name and optionally the country code divided by comma; use ISO 3166 country codes.\"\n      schema:\n        type: string\n      x-ballerina-display: \n        label: \"CityName or StateCode or CountryCode\"\n    id:\n      name: id\n      in: query\n      description: \"City ID. Example: `2172797`. The List of city IDs can be downloaded [here](http://bulk.openweathermap.o/sample/).\"\n      schema:\n        type: string\n      x-ballerina-display: \n        label: \"City Id\"\n    lat:\n      name: lat\n      in: query\n      description: \"Latitude\"\n      schema:\n        type: string\n      x-ballerina-display: \n        label: \"Latitude\"\n\n    lon:\n      name: lon\n      in: query\n      description: \"Longtitude\"\n      schema:\n        type: string\n      x-ballerina-display: \n        label: \"Longitude\"\n\n    zip:\n      name: zip\n      in: query\n      description: \"Zip code. Search by zip code. Example: 95050,us.\"\n      schema:\n        type: string\n      x-ballerina-display: \n        label: \"Zip Code\"\n\n    units:\n      name: units\n      in: query\n      description: 'Temperature in Fahrenheit use `units=imperial`, temperature in Celsius use `units=metric`, temperature in `Kelvin` is used by default.'\n      schema:\n        type: string\n        enum: [standard, metric, imperial]\n        default: \"imperial\"\n      x-ballerina-display: \n        label: \"Units\"\n\n    lang:\n      name: lang\n      in: query\n      description: 'Language'\n      schema:\n        type: string\n        enum: [ar, bg, ca, cz, de, el, en, fa, fi, fr, gl, hr, hu, it, ja, kr, la, lt, mk, nl, pl, pt, ro, ru, se, sk, sl, es, tr, ua, vi, zh_cn, zh_tw]\n        default: \"en\"\n      x-ballerina-display: \n        label: \"Language\"\n\n    mode:\n      name: mode\n      in: query\n      description: \"Format of response. Possible values are `xml` and `html`. If mode parameter is empty the format is `json` by default.\"\n      schema:\n        type: string\n        enum: [json, xml, html]\n        default: \"json\"\n      x-ballerina-display: \n        label: \"Mode\"\n  schemas:\n    WeatherForecast:\n      type: object\n      description: \"Weather forecast data\"\n      properties:\n        lat:\n          type: number\n          description: Latitude\n        lon:\n          type: number\n          description: Longtitude\n        timezone:\n          type: string\n          description: Timezone name for the requested location\n        timezone_offset:\n          type: number\n          description: Shift in seconds from UTC\n        current:\n          $ref: '#/components/schemas/ForecastCurrent'\n          description: Current weather data\n        minutely:\n          type: array\n          items:\n            $ref: '#/components/schemas/Minutely'\n          description: Minutely weather forecast\n        hourly:\n          type: array\n          items:\n            $ref: '#/components/schemas/Hourly'\n          description: Hourly weather forecast\n        daily:\n          type: array\n          items:\n            $ref: '#/components/schemas/Daily'\n          description: Daily weather forecast\n        alerts:\n          type: array\n          items:\n             $ref: '#/components/schemas/Alerts'\n          description: Government weather alerts\n    Alerts:\n      description: Government weather alerts\n      type: object\n      properties:\n        sender_name:\n          type: string\n          description:  Name of the alert source.\n        event:\n          type: string\n          description: Alert event name\n        description:\n          type: string\n          description: Description of the alert\n        start:\n          type: number\n          description: Date and time of the start of the alert, Unix, UTC\n        end:\n          type: number\n          description: Date and time of the end of the alert, Unix, UTC\n        tags:\n          type: array\n          items:\n            type: string\n          description: Tags related to alerts\n    Temp:\n      type: object\n      description: Temperature data\n      properties:\n        day:\n          type: number\n          description: Day temperature.\n        min:\n          type: number\n          description: Min daily temperature.\n        max:\n          type: number\n          description: Max daily temperature.\n        night:\n          type: number\n          description: Night temperature.\n        eve:\n          type: number\n          description: Evening temperature.\n        morn:\n          type: number\n          description: Morning temperature\n    FeelsLike:\n      type: object\n      description: \"Human perception of temperature each time of the day\"\n      properties:\n        day:\n          type: number\n          description: Day temperature.\n        night:\n          type: number\n          description: Night temperature.\n        eve:\n          type: number\n          description: Evening temperature.\n        morn:\n          type: number\n          description: Morning temperature.\n    Daily:\n      type: object\n      description: \"Daily forecast weather data API response\"\n      properties:\n        dt:\n          type: number\n          description: Time of the forecasted data, Unix, UTC\n        temp:\n          $ref: '#/components/schemas/Temp'\n          description: Temperature data\n        feels_like:\n          $ref: '#/components/schemas/FeelsLike'\n          description: \"Temperature. This accounts for the human perception of weather.\"\n        moonrise:\n          type: number\n          description: The time of when the moon rises for this day, Unix, UTC\n        moonset:\n          type: number\n          description: The time of when the moon sets for this day, Unix, UTC\n        moon_phase:\n          type: number\n          description: \"Moon phase. 0 and 1 are 'new moon', 0.25 is 'first quarter moon', 0.5 is 'full moon' and 0.75 is 'last quarter moon.\"\n        pressure:\n          type: number\n          description: \"Atmospheric pressure on the sea level, hPa\"\n        humidity:\n          type: number\n          description: Humidity, %\n        dew_point:\n          type: number\n          description: \"Atmospheric temperature below which water droplets begin to condense and dew can form.\"\n        uvi:\n          type: number\n          description:  The maximum value of UV index for the day\n        clouds:\n          type: number\n          description: Cloudiness, %\n        visibility:\n          type: number\n          description: Visibility of the atmosphere\n        wind_deg:\n          type: number\n          description: Wind direction, degrees (meteorological)\n        wind_gust:\n          type: number\n          description: \"(where available) Wind gust. Units – default: metre/sec, metric: metre/sec, imperial: miles/hour.\"\n        pop:\n          type: number\n          description: Probability of precipitation\n        weather:\n          type: array\n          items:\n            $ref: '#/components/schemas/Weather'\n          description: More info Weather condition codes\n        rain:\n          type: number\n          description: where available) Precipitation volume, mm\n    Hourly:\n      type: object\n      description: \"Hourly forecast weather data API response\"\n      properties:\n        dt:\n          type: number\n          description: Time of the forecasted data, Unix, UTC\n        temp:\n          type: number\n          description: \"Temperature. Units – default: kelvin, metric: Celsius, imperial: Fahrenheit.\"\n        feels_like:\n          type: number\n          description: \"Temperature. This accounts for the human perception of weather.\"\n        pressure:\n          type: number\n          description: \"Atmospheric pressure on the sea level, hPa\"\n        humidity:\n          type: number\n          description: \"Humidity, %\"\n        dew_point:\n          type: number\n          description: \"Atmospheric temperature below which water droplets begin to condense and dew can form.\"\n        uvi:\n          type: number\n          description: \"UV index\"\n        clouds:\n          type: number\n          description: \"Cloudiness, %\"\n        visibility:\n          type: number\n          description: \"Average visibility, metres\"\n        wind_deg:\n          type: number\n          description: \"Wind direction, degrees (meteorological)\"\n        wind_gust:\n          type: number\n          description: \"(where available) Wind gust. Units – default: metre/sec, metric: metre/sec, imperial: miles/hour.\"\n        pop:\n          type: number\n          description: \"Probability of precipitatio\"\n        weather:\n          type: array\n          items:\n            $ref: '#/components/schemas/Weather'\n          description: More info Weather condition codes\n        rain:\n          $ref: '#/components/schemas/Rain'\n          description: Nature of the rain\n    Minutely:\n      type: object\n      properties: \n        dt:\n          type: number\n          description: Time of the forecasted data, unix, UTC\n        precipitation:\n          type: number\n          description: Precipitation volume, mm\n      description: \"Minute forecast weather data API response\"\n    ForecastCurrent:\n      type: object\n      description: Current weather data API response\n      properties: \n        dt:\n          type: number\n          description: Current time, Unix, UTC\n        sunrise:\n          type: number\n          description: Sunrise time, Unix, UTC\n        sunset:\n          type: number\n          description: Sunset time, Unix, UTC\n        temp:\n          type: number\n          description: \"Temperature. Units - default: kelvin, metric: Celsius, imperial: Fahrenheit.\"\n        feels_like: \n          type: number\n          description: \"Temperature. This temperature parameter accounts for the human perception of weather.\"\n        pressure:\n          type: number\n          description: \"Atmospheric pressure on the sea level, hPa\"\n        humidity:\n          type: number\n          description: \"Humidity, %\"\n        dew_point:\n          type: number\n          description: \"Atmospheric temperature below which water droplets begin to condense and dew can form.\"\n        uvi:\n          type: number\n          description: \"Current UV index\"\n        clouds:\n          type: number\n          description: \"Cloudiness, %\"\n        visibility:\n          type: number\n          description: Average visibility, metres\n        wind_speed:\n          type: number\n          description: \"Wind speed. Wind speed. Units – default: metre/sec, metric: metre/sec, imperial: miles/hour.\"\n        wind_deg:\n          type: number\n          description: Wind direction, degrees (meteorological)\n        weather:\n          type: array\n          items:\n            $ref: '#/components/schemas/Weather'\n          description: More info Weather condition codes\n        rain:\n          $ref: '#/components/schemas/Rain'\n          description: Nature of the rain\n        snow:\n          $ref: '#/components/schemas/Snow'\n          description: Nature of the Snow\n    CurrentWeatherData:\n      title: Successful response\n      description: Current weather data\n      type: object\n      properties:\n        coord:\n          $ref: '#/components/schemas/Coord'\n          description: City geo location\n        weather:\n          type: array\n          items:\n            $ref: '#/components/schemas/Weather'\n          description: More info Weather condition codes\n        base:\n          type: string\n          description: Internal parameter\n          example: cmc stations\n        main:\n          $ref: '#/components/schemas/Main'\n          description: Basic weather data\n        visibility:\n          type: integer\n          description: Visibility, meter\n          example: 16093\n        wind:\n          $ref: '#/components/schemas/Wind'\n          description: Nature of the wind\n        clouds:\n          $ref: '#/components/schemas/Clouds'\n          description: Nature of the clouds\n        rain:\n          $ref: '#/components/schemas/Rain'\n          description: Nature of the rain\n        snow:\n          $ref: '#/components/schemas/Snow'\n          description: Nature of the snow\n        dt:\n          type: integer\n          description: Time of data calculation, unix, UTC\n          format: int32\n          example: 1435658272\n        sys:\n          $ref: '#/components/schemas/Sys'\n          description: Internal data\n        id:\n          type: integer\n          description: City ID\n          format: int32\n          example: 2172797\n        name:\n          type: string\n          example: Cairns\n          description: City name\n        cod:\n          type: integer\n          description: Internal parameter\n          format: int32\n          example: 200\n    Coord:\n      title: Coord\n      type: object\n      description: City geo location\n      properties:\n        lon:\n          type: number\n          description: Longitude\n          example: 145.77000000000001\n        lat:\n          type: number\n          description: Latitude\n          example: -16.920000000000002\n    Weather:\n      title: Weather\n      type: object\n      description: Weather metadata \n      properties:\n        id:\n          type: integer\n          description: Weather condition id\n          format: int32\n          example: 803\n        main:\n          type: string\n          description: Group of weather parameters (Rain, Snow, Extreme etc.)\n          example: Clouds\n        description:\n          type: string\n          description: Weather condition within the group\n          example: broken clouds\n        icon:\n          type: string\n          description: Weather icon id\n          example: 04n\n    Main:\n      title: Main\n      type: object\n      description: Basic weather data\n      properties:\n        temp:\n          type: number\n          description: 'Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.'\n          example: 293.25\n        pressure:\n          type: integer\n          description: Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa\n          format: int32\n          example: 1019\n        humidity:\n          type: integer\n          description: Humidity, %\n          format: int32\n          example: 83\n        temp_min:\n          type: number\n          description: 'Minimum temperature at the moment.'\n          example: 289.81999999999999\n        temp_max:\n          type: number\n          description: 'Maximum temperature at the moment.'\n          example: 295.37\n        sea_level:\n          type: number\n          description: Atmospheric pressure on the sea level, hPa\n          example: 984\n        grnd_level:\n          type: number\n          description: Atmospheric pressure on the ground level, hPa\n          example: 990\n    Wind:\n      title: Wind\n      type: object\n      description: Nature of the wind\n      properties:\n        speed:\n          type: number\n          description: 'Wind speed. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour.'\n          example: 5.0999999999999996\n        deg:\n          type: integer\n          description: Wind direction, degrees (meteorological)\n          format: int32\n          example: 150\n    Clouds:\n      title: Clouds\n      type: object\n      description: Nature of the clouds\n      properties:\n        all:\n          type: integer\n          description: Cloudiness, %\n          format: int32\n          example: 75\n    Rain:\n      title: Rain\n      type: object\n      description: Nature of the rain\n      properties:\n        3h:\n          type: integer\n          description: Rain volume for the last 3 hours\n          format: int32\n          example: 3\n    Snow:\n      title: Snow\n      type: object\n      description: Snow volume information \n      properties:\n        3h:\n          type: number\n          description: Snow volume for the last 3 hours\n          example: 6\n    Sys:\n      title: Sys\n      type: object\n      description: System data\n      properties:\n        type:\n          type: integer\n          description: Internal parameter\n          format: int32\n          example: 1\n        id:\n          type: integer\n          description: Internal parameter\n          format: int32\n          example: 8166\n        message:\n          type: number\n          description: Internal parameter\n          example: 0.0166\n        country:\n          type: string\n          description: Country code (GB, JP etc.)\n          example: AU\n        sunrise:\n          type: integer\n          description: Sunrise time, unix, UTC\n          format: int32\n          example: 1435610796\n        sunset:\n          type: integer\n          description: Sunset time, unix, UTC\n          format: int32\n          example: 1435650870\n\n  securitySchemes:\n    app_id:\n      type: apiKey\n      description: Represents API Key `appid`\n      name: appid\n      in: query\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/tool-tests/4-annotations-display/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/tool-tests/4-annotations-display/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/onecall\": get: responses: 404: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}