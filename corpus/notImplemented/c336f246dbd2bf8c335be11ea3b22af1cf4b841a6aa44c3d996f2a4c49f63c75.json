{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/chabad360/covey"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi.yml",
			"byteSize": 28866,
			"content": "openapi: 3.0.3\ninfo:\n  title: Covey API\n  version: v0.1\n  description: Orchestration and management engine.\nservers:\n  - url: 'http://{host}:{port}/api/v1'\n    variables:\n      host:\n        description: Address of the Covey server.\n        default: localhost\n      port:\n        description: Port Covey is listening on.\n        default: '8080'\npaths:\n  /nodes:\n    summary: Group of nodes (and adding to it).\n    post:\n      summary: Add a new Node.\n      description: \u003e\n        Running this will SSH into the specified server (`{ip}:{port}`), using\n        the specified credentials. Covey will then proceed to install and start\n        the agent onto the server.\n      operationId: newNode\n      requestBody:\n        description: The information about the node to add.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Node'\n            examples:\n              newNode:\n                $ref: '#/components/examples/newNode'\n      responses:\n        '200':\n          $ref: '#/components/responses/node'\n        '401':\n          $ref: '#/components/responses/unauth'\n        '409':\n          description: A node with the specifed name exsists.\n      tags:\n        - nodes\n    get:\n      summary: Get a list of all node names.\n      description: ''\n      operationId: getNodes\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/expand'\n      responses:\n        '200':\n          description: Successfully retrieved nodes.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Array'\n                  - type: array\n                    items:\n                      $ref: '#/components/schemas/Node'\n              examples:\n                expandIsFalse:\n                  value:\n                    - node1\n                    - node2\n                expandIsTrue:\n                  $ref: '#/components/examples/getNodes'\n        '401':\n          $ref: '#/components/responses/unauth'\n      tags:\n        - nodes\n  '/nodes/{nodeID}':\n    summary: Get the information of an individual node.\n    parameters:\n      - in: path\n        name: nodeID\n        schema:\n          type: string\n        required: true\n        description: 'ID, short ID or name of the node to get.'\n    get:\n      summary: Get a node.\n      description: ''\n      operationId: getNode\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Node'\n              examples:\n                getNode:\n                  $ref: '#/components/examples/getNode'\n        '401':\n          $ref: '#/components/responses/unauth'\n        '404':\n          description: No such node exists.\n      tags:\n        - nodes\n    delete:\n      summary: Delete a node.\n      description: ''\n      operationId: deleteNode\n      parameters:\n        - in: path\n          name: nodeId\n          schema:\n            type: string\n          required: true\n          description: 'ID, short ID or name of the node to delete.'\n      responses:\n        '200':\n          description: Successfully deleted node.\n        '401':\n          $ref: '#/components/responses/unauth'\n        '404':\n          description: No such node exists.\n      tags:\n        - nodes\n  /tasks:\n    summary: Running things on nodes.\n    post:\n      summary: Add and run a new task.\n      description: ''\n      operationId: newTask\n      requestBody:\n        description: The task to run.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Task'\n            examples:\n              newTask:\n                $ref: '#/components/examples/newTask'\n      responses:\n        '200':\n          $ref: '#/components/responses/task'\n        '401':\n          $ref: '#/components/responses/unauth'\n      tags:\n        - tasks\n    get:\n      summary: Get a list of all tasks.\n      operationId: getTasks\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/expand'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Array'\n                  - type: array\n                    items:\n                      $ref: '#/components/schemas/Task'\n              examples:\n                expandIsFalse:\n                  value:\n                    - a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447\n                    - e258d248fda94c63753607f7c4494ee0fcbe92f1a76bfdac795c9d84101eb317\n                expandIsTrue:\n                  $ref: '#/components/examples/getTasks'\n        '401':\n          $ref: '#/components/responses/unauth'\n      tags:\n        - tasks\n  '/tasks/{taskID}':\n    summary: Get the information of an individual task.\n    parameters:\n      - in: path\n        name: taskID\n        schema:\n          type: string\n        required: true\n        description: 'ID or short ID of the task to get.'\n    get:\n      summary: Get a task.\n      description: ''\n      operationId: getTask\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n              examples:\n                getNode:\n                  $ref: '#/components/examples/getTask'\n        '401':\n          $ref: '#/components/responses/unauth'\n        '404':\n          description: No such task exists.\n      tags:\n        - tasks\n  /jobs:\n    description: All the jobs.\n    post:\n      summary: Add a job.\n      operationId: newJob\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Job'\n            examples:\n              newJob:\n                $ref: '#/components/examples/newJob'\n      responses:\n        '200':\n          $ref: '#/components/responses/job'\n        '401':\n          $ref: '#/components/responses/unauth'\n        '409':\n          description: A job with the specifed name exsists.\n      tags:\n        - jobs\n    get:\n      summary: List of all jobs (name).\n      operationId: getJobs\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/expand'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Array'\n                  - type: array\n                    items:\n                      $ref: '#/components/schemas/Job'\n              examples:\n                expandIsFalse:\n                  value:\n                    - update\n                    - backup\n                expandIsTrue:\n                  $ref: '#/components/examples/getJobs'\n      tags:\n        - jobs\n  '/jobs/{jobID}':\n    summary: Get the information of an individual job.\n    parameters:\n      - in: path\n        name: jobID\n        schema:\n          type: string\n        required: true\n        description: 'ID, short ID or name of the job.'\n    get:\n      summary: Get a job.\n      description: ''\n      operationId: getJob\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Job'\n              examples:\n                getNode:\n                  $ref: '#/components/examples/getJob'\n          links:\n            GetTaskFromJobHistory:\n              $ref: '#/components/links/GetTaskFromJobHistory'\n        '401':\n          $ref: '#/components/responses/unauth'\n        '404':\n          description: No such job exists.\n      tags:\n        - jobs\n    put:\n      summary: Update the job configuration.\n      operationId: updateJob\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Job'\n            examples:\n              newJob:\n                $ref: '#/components/examples/newJob'\n      responses:\n        '200':\n          $ref: '#/components/responses/job'\n        '401':\n          $ref: '#/components/responses/unauth'\n      tags:\n        - jobs\n    post:\n      summary: Run the job.\n      operationId: runJob\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Array'\n              example:\n                - a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447\n                - e258d248fda94c63753607f7c4494ee0fcbe92f1a76bfdac795c9d84101eb317\n          links:\n            GetTaskFromJob:\n              $ref: '#/components/links/GetTaskFromJob'\n        '401':\n          $ref: '#/components/responses/unauth'\n        '404':\n          description: No such job exists.\n      tags:\n        - jobs\n    delete:\n      summary: Delete a job.\n      description: ''\n      operationId: deleteJob\n      responses:\n        '200':\n          description: Successfully deleted job.\n        '401':\n          $ref: '#/components/responses/unauth'\n        '404':\n          description: No such job exists.\n      tags:\n        - jobs\n  /plugins:\n    description: All the plugins.\n    get:\n      summary: List of all plugins (name).\n      operationId: getPlugins\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        #        - $ref: '#/components/parameters/sort'\n        #        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/expand'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Array'\n                  - type: array\n                    items:\n                      $ref: '#/components/schemas/Plugin'\n              examples:\n                expandIsFalse:\n                  value:\n                    - shell\n                    - docker\n                expandIsTrue:\n                  $ref: '#/components/examples/getPlugins'\n        '401':\n          $ref: '#/components/responses/unauth'\n      tags:\n        - plugins\n  '/plugins/{pluginName}':\n    summary: Get the information of an individual plugin.\n    parameters:\n      - in: path\n        name: pluginName\n        schema:\n          type: string\n        required: true\n        description: 'The name of the plugin.'\n    get:\n      summary: Get a plugin.\n      description: ''\n      operationId: getPlugin\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n              examples:\n                getPlugin:\n                  $ref: '#/components/examples/getPlugin'\n        '401':\n          $ref: '#/components/responses/unauth'\n        '404':\n          description: No such plugin exists.\n      tags:\n        - plugins\n  '/plugins/{pluginName}/inputs':\n    summary: Get the inputs for a given plugin.\n    parameters:\n      - in: path\n        name: pluginName\n        schema:\n          type: string\n        required: true\n        description: 'Name of the plugin.'\n      - in: query\n        name: node\n        schema:\n          type: string\n        description: The node to retrive the inputs for. If empty, it will return generalized inputs for use in a job task.\n    get:\n      summary: Get the plugin inputs.\n      operationId: getPluginInputs\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Input'\n              examples:\n                getInputs:\n                  $ref: '#/components/examples/getInputs'\n        '401':\n          $ref: '#/components/responses/unauth'\n        '404':\n          description: No such plugin exists.\n      tags:\n        - plugins\n\ncomponents:\n  examples:\n    getNode:\n      value:\n        name: node1\n        id: a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447\n        ip: 192.168.1.100\n        port: '22'\n        username: root\n        created_at: '2020-06-29T23:39:10.071485063-07:00'\n        updated_at: '2020-06-29T23:39:10.071485063-07:00'\n    getNodes:\n      value:\n        - name: node1\n          id: a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447\n          ip: 192.168.1.100\n          port: '22'\n          username: root\n          created_at: '2020-06-29T23:39:10.071485063-07:00'\n          updated_at: '2020-06-29T23:39:10.071485063-07:00'\n        - name: node2\n          id: e258d248fda94c63753607f7c4494ee0fcbe92f1a76bfdac795c9d84101eb31\n          ip: 192.168.1.101\n          port: '22'\n          username: root\n          created_at: '2020-06-29T23:39:10.071485063-07:00'\n          updated_at: '2020-06-29T23:39:10.071485063-07:00'\n    newNode:\n      value:\n        name: node1\n        ip: 192.168.1.100\n        port: '22'\n        username: root\n        password: root\n    newTask:\n      value:\n        plugin: shell\n        node: node1\n        details:\n          command: echo hello world\n    getTasks:\n      value:\n        - id: a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447\n          state: 0\n          exit_code: 0\n          plugin: shell\n          node: node1\n          details:\n            command: echo hello \u0026\u0026 echo world\n          log:\n            - 'hello'\n            - 'world'\n          created_at: '2020-06-29T23:39:10.071485063-07:00'\n          updated_at: '2020-06-29T23:39:10.071485063-07:00'\n        - id: e258d248fda94c63753607f7c4494ee0fcbe92f1a76bfdac795c9d84101eb317\n          state: 0\n          exit_code: 0\n          plugin: shell\n          node: node1\n          details:\n            command: echo hello \u0026\u0026 echo world\n          log:\n            - hello world\n          created_at: '2020-06-29T23:39:10.071485063-07:00'\n          updated_at: '2020-06-30T23:39:10.071485063-07:00'\n    getTask:\n      value:\n        id: a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447\n        state: 0\n        exit_code: 0\n        plugin: shell\n        node: node1\n        details:\n          command: echo hello \u0026\u0026 echo world\n        log:\n          - 'hello'\n          - 'world'\n        created_at: '2020-06-29T23:39:10.071485063-07:00'\n        updated_at: '2020-06-29T23:39:10.071485063-07:00'\n    newJob:\n      value:\n        name: update\n        nodes:\n          - node1\n          - node2\n        cron: '0 0 1 1 *'\n        tasks:\n          update:\n            plugin: shell\n            details:\n              command: apt-get update\n          upgrade:\n            plugin: shell\n            details:\n              command: apt-get upgrade -y\n    getNewJob:\n      value:\n        id: a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447\n        name: update\n        nodes:\n          - node1\n          - node2\n        cron: '0 0 1 1 *'\n        tasks:\n          update:\n            plugin: shell\n            details:\n              command: apt-get update\n          upgrade:\n            plugin: shell\n            details:\n              command: apt-get upgrade -y\n    getJob:\n      value:\n        id: a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447\n        name: update\n        nodes:\n          - node1\n          - node2\n        cron: '0 0 1 1 *'\n        tasks:\n          update:\n            plugin: shell\n            details:\n              command: apt-get update\n          upgrade:\n            plugin: shell\n            details:\n              command: apt-get upgrade -y\n        created_at: '2020-06-29T23:39:10.071485063-07:00'\n        updated_at: '2020-06-29T23:39:10.071485063-07:00'\n    getJobs:\n      value:\n        - id: a948904f2f0f479b8f8197694b30184b0d2ed1c1cd2a1ec0fb85d299a192a447\n          name: update\n          nodes:\n            - node1\n            - node2\n          cron: '0 0 1 1 *'\n          tasks:\n            update:\n              plugin: shell\n              details:\n                command: apt-get update\n            upgrade:\n              plugin: shell\n              details:\n                command: apt-get upgrade -y\n          created_at: '2020-06-29T23:39:10.071485063-07:00'\n          updated_at: '2020-06-29T23:39:10.071485063-07:00'\n        - id: e258d248fda94c63753607f7c4494ee0fcbe92f1a76bfdac795c9d84101eb317\n          name: reboot\n          nodes:\n            - node1\n            - node2\n          cron: '0 0 1 1 *'\n          tasks:\n            update:\n              plugin: shell\n              details:\n                command: reboot\n          created_at: '2020-06-29T23:39:10.071485063-07:00'\n          updated_at: '2020-06-29T23:39:10.071485063-07:00'\n    getPlugin:\n      value:\n        plugin_path: internal/shell\n        plugin_properties:\n          name: shell\n          plugin_type: task\n          local_plugin: false\n          internal_plugin: true\n          description: Runs a shell command on a node.\n    getPlugins:\n      value:\n        - plugin_path: internal/shell\n          plugin_properties:\n            name: shell\n            plugin_type: task\n            local_plugin: false\n            internal_plugin: true\n            description: Runs a shell command on a node.\n        - plugin_path: /var/cache/covey/plugins/docker\n          plugin_properties:\n            name: docker\n            plugin_type: task\n            import_path: example.com/plugins/docker\n            local_plugin: false\n            internal_plugin: false\n            description: Runs docker commands on a node.\n            plugin_id: 00d151e7d392e68e2c756a6fc42640006ddc0a98d37dba3f90a7b73f63188bbd\n\n    getInputs:\n      value:\n        - name: command\n          label: Command\n          description: The command to run in the shell.\n          type: 0\n          required: true\n        - name: shell\n          label: Shell\n          description: The shell to run the command in.\n          type: 2\n          options:\n            - bash\n            - zsh\n          default: bash\n\n  links:\n    GetNodeByID:\n      operationId: getNode\n      parameters:\n        nodeId: '$response.body#/id'\n    GetNodeByName:\n      operationId: getNode\n      parameters:\n        nodeId: '$response.body#/name'\n    GetTask:\n      operationId: getTask\n      parameters:\n        taskId: '$response.body#/id'\n    GetJobByID:\n      operationId: getJob\n      parameters:\n        jobId: '$response.body#/id'\n    GetJobByName:\n      operationId: getJob\n      parameters:\n        jobId: '$response.body#/name'\n    GetTaskFromJobHistory:\n      operationId: getTask\n      parameters:\n        taskId: '$response.body#/task_history/1'\n    GetTaskFromJob:\n      operationId: getTask\n      parameters:\n        taskId: '$response.body#/1'\n\n  parameters:\n    offset:\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: integer\n        minimum: 0\n      description: The number of items to skip.\n    limit:\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 50\n        default: 20\n      description: The numbers of items to return.\n    sort:\n      in: query\n      name: sort\n      required: false\n      schema:\n        type: string\n        enum:\n          - asc\n          - desc\n        default: asc\n    sortby:\n      in: query\n      name: sortby\n      required: false\n      schema:\n        type: string\n        default: id\n    nodes:\n      in: query\n      name: nodes\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n      description: The nodes to filter the tasks by.\n    jobs:\n      in: query\n      name: jobs\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n      description: The jobs to filter the tasks by.\n    expand:\n      in: query\n      name: expand\n      required: false\n      schema:\n        type: boolean\n        default: false\n      description: Whether or not to expand the returned items (instead of just the ID).\n\n  schemas:\n    Node:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the node.\n          readOnly: true\n        name:\n          type: string\n          format: hostname\n          description: Name of the node.\n        ip:\n          type: string\n          format: ip\n          description: IP address of the node.\n        port:\n          type: string\n          description: SSH port of the node.\n          default: '22'\n        username:\n          type: string\n          description: Username used to SSH into the node.\n        password:\n          type: string\n          format: password\n          description: Password used for initial SSH connection.\n          writeOnly: true\n        created_at:\n          type: string\n          format: 'date-time'\n          description: The creation time of the task.\n          readOnly: true\n        updated_at:\n          type: string\n          format: 'date-time'\n          description: The last time the task was updated.\n          readOnly: true\n      required:\n        - id\n        - name\n        - ip\n        - username\n\n    Task:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The ID of the task.\n          readOnly: true\n        exit_code:\n          type: integer\n          description: \u003e\n            The exit code from the task.\n              * `0-256`: Ordinary exit code\n              * `257`: Task Running\n              * `258`: Task Queued\n          readOnly: true\n          minimum: 0\n          maximum: 258\n        state:\n          type: integer\n          enum: [0, 1, 2, 3, 6, 10, 11]\n          description: \u003e\n            The state of the task:\n              * `0`: Done\n              * `1`: Error\n              * `2`: Running\n              * `3`: Aborted\n              * `6`: Queued\n              * `10`: Other\n              * `11`: Internal Error\n          readOnly: true\n        plugin:\n          type: string\n          description: The plugin to use for the task.\n        node:\n          type: string\n          description: The node to run the task on.\n        details:\n          type: object\n          description: The argurments to provide to the plugin.\n          additionalProperties:\n            type: string\n        created_at:\n          type: string\n          format: 'date-time'\n          description: The creation time of the task.\n          readOnly: true\n        updated_at:\n          type: string\n          format: 'date-time'\n          description: The last time the task was updated.\n          readOnly: true\n      required:\n        - plugin\n        - node\n        - details\n    Job:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The ID of the job.\n          readOnly: true\n        name:\n          type: string\n          description: The name of the job.\n        nodes:\n          type: array\n          description: The nodes to run the job on.\n          items:\n            type: string\n        cron:\n          type: string\n          format: crontab\n          description: A crontab schedule for the the job.\n        tasks:\n          type: object\n          description: The tasks to run.\n          additionalProperties:\n            type: object\n            properties:\n              plugin:\n                type: string\n                description: The plugin to run the task with.\n              details:\n                type: object\n                description: The arguments to provide to the plugin.\n                additionalProperties:\n                  type: string\n        created_at:\n          type: string\n          format: 'date-time'\n          description: The creation time of the task.\n          readOnly: true\n        updated_at:\n          type: string\n          format: 'date-time'\n          description: The last time the task was updated.\n          readOnly: true\n      required:\n        - name\n        - nodes\n        - tasks\n    Array:\n      type: array\n      items:\n        type: string\n    Plugin:\n      type: object\n      properties:\n        plugin_path:\n          type: string\n          description: The path to the plugin zip file.\n          readOnly: true\n        plugin_properties:\n          type: object\n          readOnly: true\n          properties:\n            import_path:\n              type: string\n              description: The Go Module import path.\n              readOnly: true\n            plugin_type:\n              type: string\n              description: |\n                The type of the plugin:\n                  - `task`\n              readOnly: true\n            name:\n              type: string\n              description: The name of the plugin.\n              readOnly: true\n            local_plugin:\n              type: boolean\n              description: Whether the plugin is localy developed or not.\n              readOnly: true\n            internal_plugin:\n              type: boolean\n              description: Whether the plugin is provided internally or not.\n              readOnly: true\n            description:\n              type: string\n              description: Describes the intended function of the plugin.\n              readOnly: true\n            plugin_id:\n              type: string\n              description: A hash based ID of the plugin, changes from version to version.\n\n    Input:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name attribute for that input.\n          readOnly: true\n        label:\n          type: string\n          description: The label attached to that input.\n          readOnly: true\n        description:\n          type: string\n          description: The tooltip for the input.\n          readOnly: true\n        type:\n          type: integer\n          enum: [ 0, 1, 2, 3, 4 ]\n          description: |\n            The type of input:\n            - `0`: Text\n            - `1`: Number\n            - `2`: List\n            - `3`: Multiple\n            - `4`: Boolean\n          readOnly: true\n        default:\n          type: string\n          description: The default input value.\n          readOnly: true\n        required:\n          type: boolean\n          description: Whether or not the input is required.\n          readOnly: true\n        options:\n          description: The options for a `List` or a `Multiple` input.\n          type: array\n          items:\n            type: string\n\n  responses:\n    unauth:\n      description: Access token is missing or invalid.\n    node:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Node'\n          examples:\n            getNode:\n              $ref: '#/components/examples/getNode'\n      links:\n        GetNodeByID:\n          $ref: '#/components/links/GetNodeByID'\n        GetNodeByName:\n          $ref: '#/components/links/GetNodeByName'\n\n    task:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Task'\n          examples:\n            getNode:\n              $ref: '#/components/examples/getTask'\n      links:\n        GetTask:\n          $ref: '#/components/links/GetTask'\n\n    job:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Job'\n          examples:\n            getJob:\n              $ref: '#/components/examples/getNewJob'\n      links:\n        GetJobByID:\n          $ref: '#/components/links/GetJobByID'\n        GetJobByName:\n          $ref: '#/components/links/GetJobByName'\n\n  securitySchemes:\n    Token:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\nsecurity:\n  - Token: []\ntags:\n  - name: nodes\n    description: Management and info about nodes.\n  - name: tasks\n    description: Task creation and information.\n  - name: jobs\n    description: 'Job creation, management and more.'\n  - name: plugins\n    description: Plugin information.\n",
			"canonicalURL": "/github.com/chabad360/covey@dcead037a1bf6adcec813ce2044b867a13dd0169/-/blob/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/chabad360/covey/blob/dcead037a1bf6adcec813ce2044b867a13dd0169/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/plugins\": get: responses: 200: contents: application/json: generate schema: oneOf: oneOf GetPluginsOK: variant Array: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference"
	]
}