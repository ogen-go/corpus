{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sdmx-twg/sdmx-rest"
		},
		"file": {
			"name": "sdmx-rest.yaml",
			"size": 0,
			"path": "api/sdmx-rest.yaml",
			"byteSize": 27712,
			"content": "openapi: 3.0.0\ninfo:\n  version: '2.0.0'\n  title: 'SDMX RESTful API, v2.0.0'\n  description: |\n    The RESTful API for SDMX 3.0.\n    \n    For additional information, check the [documentation](https://github.com/sdmx-twg/sdmx-rest/tree/develop/v2_1/ws/rest/docs).\nservers:\n  - description: Mock implementation (just for demo purposes!)\n    url: https://localhost/\n\nx-commons:\n  common_responses: \u0026common_responses\n    '304':\n      $ref: '#/components/responses/304'\n    '400':\n      $ref: '#/components/responses/400'\n    '401':\n      $ref: '#/components/responses/401'\n    '403':\n      $ref: '#/components/responses/403'\n    '404':\n      $ref: '#/components/responses/404'\n    '406':\n      $ref: '#/components/responses/406'\n    '413':\n      $ref: '#/components/responses/413'\n    '414':\n      $ref: '#/components/responses/414'\n    '500':\n      $ref: '#/components/responses/500'\n    '501':\n      $ref: '#/components/responses/501'\n    '503':\n      $ref: '#/components/responses/503'\n\npaths:\n  /data/{context}/{agencyID}/{resourceID}/{version}/{key}:\n    get:\n      summary: 'Data queries'\n      tags: \n        - Data queries\n      description: |\n        Data queries allow **retrieving statistical data**. \n        \n        Entire datasets can be retrieved or individual observations, or anything in between, using filters on dimensions (including time), attributes and/or measures. \n        \n        All data matching a query can be retrieved or only the data that has changed since the last time the same query was performed. \n        \n        Using the _includeHistory_ parameter, it is also possible to retrieve previous versions of the data. \n        \n        Last but not least, the data retrieved can be packaged in different ways (as time series, cross-sections or as a table), in a variety of formats (JSON, XML, CSV, etc.).\n      parameters:\n        - $ref: '#/components/parameters/dataContext'\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/key'\n        - $ref: '#/components/parameters/c'\n        - $ref: '#/components/parameters/updatedAfter'\n        - $ref: '#/components/parameters/firstNObservations'\n        - $ref: '#/components/parameters/lastNObservations'\n        - $ref: '#/components/parameters/dimensionAtObservation'\n        - $ref: '#/components/parameters/attributes'\n        - $ref: '#/components/parameters/measures'\n        - $ref: '#/components/parameters/includeHistory'\n        - $ref: '#/components/parameters/accept-encoding'\n        - $ref: '#/components/parameters/accept-language'\n        - $ref: '#/components/parameters/if-modified-since'\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/200'\n\n  /availability/{context}/{agencyID}/{resourceID}/{version}/{key}/{componentID}:\n    get:\n      summary: 'Data availability queries'\n      tags: \n        - Data queries\n      description: |\n        See which data would match a query, without actually retrieving these data.\n\n        This can be used, for example, to build a data query form that enables users of the UI to create a data query by selecting dimension values. \n        For example the user is able to click 'Reporting Country' and then select the codes 'United Kingdom', 'Greece', and 'Switzerland'.\n\n        The query returns a `Constraint`, i.e. structural metadata, and is therefore similar to the other structural metadata queries but \n        the query itself is more akin to a data query.\n      parameters:\n        - $ref: '#/components/parameters/dataContext'\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/key'\n        - $ref: '#/components/parameters/componentID'\n        - $ref: '#/components/parameters/c'\n        - $ref: '#/components/parameters/mode'\n        - $ref: '#/components/parameters/acreferences'\n        - $ref: '#/components/parameters/updatedAfter'\n        - $ref: '#/components/parameters/accept-encoding'\n        - $ref: '#/components/parameters/accept-language'\n        - $ref: '#/components/parameters/if-modified-since'\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/200-struct'\n\n  /schema/{context}/{agencyID}/{resourceID}/{version}:\n    get:\n      summary: 'Data validity queries'\n      description: |\n        Data validity queries (aka schema queries) allow retrieving **the definition of data validity for a certain context**. \n        \n        The service must take into account the constraints that apply within that context (e.g. dataflow).\n        \n        This is typically used for **validation and/or communication purposes**, for example as a way to inform providers about the data they are expected to report.\n      tags: \n        - Data queries\n      parameters:\n        - $ref: '#/components/parameters/context'\n        - $ref: '#/components/parameters/agencyID'\n        - $ref: '#/components/parameters/resourceID'\n        - $ref: '#/components/parameters/version'\n        - $ref: '#/components/parameters/dimensionAtObservation'\n        - $ref: '#/components/parameters/explicitMeasure'\n        - $ref: '#/components/parameters/accept-encoding'\n        - $ref: '#/components/parameters/if-modified-since'\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/200-schemas'\n\n  /structure/{structureType}/{agencyID}/{resourceID}/{version}:\n    get:\n      summary: 'Structure queries'\n      tags: \n        - Structure queries\n      description: |\n        Structure queries allow **retrieving structural metadata**.\n\n        Structure queries in SDMX allow you to retrieve structural metadata at various levels of granularity, from all structural metadata available in the source to a single code from a particular version of a particular codelist maintained by a particular agency.\n      parameters:\n        - $ref: '#/components/parameters/structureType'\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n        - $ref: '#/components/parameters/accept-language'\n        - $ref: '#/components/parameters/if-modified-since'\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/200-struct'\n\n  /structure/{itemSchemeType}/{agencyID}/{resourceID}/{version}/{itemID}:\n    get:\n      summary: 'Item Scheme queries'\n      tags: \n        - Structure queries\n      description: |\n        Item queries extend structure queries by allowing to retrieve items in item schemes such as particular codes in a codelist.\n      parameters:\n        - $ref: '#/components/parameters/itemSchemeType'\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/items'\n        - $ref: '#/components/parameters/references'\n        - $ref: '#/components/parameters/structDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n        - $ref: '#/components/parameters/accept-language'\n        - $ref: '#/components/parameters/if-modified-since'\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/200-struct'\n\n  /metadata/structure/{structureType}/{agencyID}/{resourceID}/{version}:\n    get:\n      summary: 'Metadata queries (by structure)'\n      tags: \n        - Reference metadata queries\n      description: |\n        These queries enable clients to request all metadata sets which are reported against one or more structures.\n        \n        As such the syntax for defining which structures to find metadata for follows the same syntax as the structure queries.\n      parameters:\n        - $ref: '#/components/parameters/structureType'\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/metaDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n        - $ref: '#/components/parameters/accept-language'\n        - $ref: '#/components/parameters/if-modified-since'\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/200-meta'\n\n  /metadata/metadataflow/{agencyID}/{resourceID}/{version}/{providerID}:\n    get:\n      summary: 'Metadata queries (by metadataflow)'\n      tags: \n        - Reference metadata queries\n      description: |\n        These queries enable clients to find metadatasets by the collection (metadataflow), optionally filtered by the metadata provider.\n      parameters:\n        - $ref: '#/components/parameters/agencies'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/providers'\n        - $ref: '#/components/parameters/metaDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n        - $ref: '#/components/parameters/accept-language'\n        - $ref: '#/components/parameters/if-modified-since'\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/200-meta'\n\n  /metadata/metadataset/{providerID}/{resourceID}/{version}:\n    get:\n      summary: 'Metadata queries (by metadatasets)'\n      tags: \n        - Reference metadata queries\n      description: |\n        These queries enable clients to find metadatasets by the identification of the metadataset, enabling clients to checkout specific reports.\n      parameters:\n        - $ref: '#/components/parameters/providers'\n        - $ref: '#/components/parameters/resourceIDs'\n        - $ref: '#/components/parameters/versions'\n        - $ref: '#/components/parameters/metaDetail'\n        - $ref: '#/components/parameters/accept-encoding'\n        - $ref: '#/components/parameters/accept-language'\n        - $ref: '#/components/parameters/if-modified-since'\n      responses:\n        \u003c\u003c: *common_responses\n        '200':\n          $ref: '#/components/responses/200-meta'\ncomponents:\n  parameters:\n    dataContext:\n      in: path\n      name: context\n      description: The context for data retrieval. All possible contexts can be selected using `*`.\n      required: true\n      schema:\n        type: string\n        enum: [datastructure, dataflow, provisionagreement, \"*\"]\n    key:\n      in: path\n      name: key\n      description: |\n        The combination of dimension values identifying series or slices of the cube (for example `D.USD.EUR.SP00.A`).\n\n        Multiple values are possible. Wildcards are supported using `*` (`D.*.EUR.SP00.A`).\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\n          pattern: '^(\\*|\\S+)$'\n      style: simple\n    structureType:\n      in: path\n      name: structureType\n      description: The type of structural metadata (e.g. codelist, dataflow, etc.)\n      required: true\n      schema:\n        type: string\n        enum:\n          [\n            datastructure,\n            metadatastructure,\n            dataflow,\n            metadataflow,\n            provisionagreement,\n            structureset,\n            process,\n            categorisation,\n            dataconstraint,\n            metadataconstraint,\n            conceptscheme,\n            codelist,\n            categoryscheme,\n            hierarchy,\n            hierarchyassociation,\n            agencyscheme,\n            dataproviderscheme,\n            dataconsumerscheme,\n            organisationunitscheme,\n            transformationscheme,\n            rulesetscheme,\n            userdefinedoperatorscheme,\n            customtypescheme,\n            namepersonalisationscheme,\n            vtlmappingscheme,\n            valuelist,\n            structuremap,\n            representationmap,\n            conceptschememap,\n            categoryschememap,\n            organisationschememap,\n            reportingtaxonomymap,\n            \"*\",\n          ]\n    itemSchemeType:\n      in: path\n      name: itemSchemeType\n      description: The type of item scheme (e.g. codelist, agencyscheme, etc.)\n      required: true\n      schema:\n        type: string\n        enum:\n          [\n            conceptscheme,\n            codelist,\n            categoryscheme,\n            agencyscheme,\n            dataproviderscheme,\n            dataconsumerscheme,\n            organisationunitscheme,\n            transformationscheme,\n            rulesetscheme,\n            userdefinedoperatorscheme,\n            customtypescheme,\n            namepersonalisationscheme,\n            vtlmappingscheme,\n            valuelist,\n            \"*\",\n          ]\n    context:\n      in: path\n      name: context\n      description: The context for data validity retrieval.\n      required: true\n      schema:\n        type: string\n        enum:\n          [\n            datastructure,\n            metadatastructure,\n            dataflow,\n            metadataflow,\n            provisionagreement,\n          ]\n    agencyID:\n      in: path\n      name: agencyID\n      description: The maintainer of the artefact.\n      required: true\n      schema:\n        type: string\n        pattern: '^[A-Za-z][A-Za-z\\d_-]*(\\.[A-Za-z][A-Za-z\\d_-]*)*$'\n    resourceID:\n      in: path\n      name: resourceID\n      description: The artefact ID.\n      required: true\n      schema:\n        type: string\n        pattern: '^[A-Za-z\\d_@$-]+$'\n    version:\n      in: path\n      name: version\n      description: |\n        The version of the artefact.\n\n        `+` can be used to retrieve the latest stable version.\n\n        `~` can be used to retrieve the latest version, regardless of its status (stable, draft, etc.).\n      \n      required: true\n      schema:\n        type: string\n        pattern: '^\\+|~|(0|[1-9]\\d*[\\+~]?|[\\+~]?)\\.(0|[1-9]\\d*[\\+~]?|[\\+~]?)\\.?(0|[1-9]\\d*[\\+~]?|[\\+~]?)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'\n    agencies:\n      in: path\n      name: agencyID\n      description: |\n        The maintainer(s) of the artefacts.\n\n        Multiple values are possible and `*` can be used as shortcut to select all available maintainers.\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\n          pattern: '^\\*|[A-Za-z][A-Za-z\\d_-]*(\\.[A-Za-z][A-Za-z\\d_-]*)*$'\n      style: simple\n    providers:\n      in: path\n      name: providerID\n      description: | \n        The provider of metadata.\n\n        Multiple values are possible and `*` can be used as shortcut to select all available providers.\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\n          pattern: '^\\*|[A-Za-z][A-Za-z\\d_-]*(\\.[A-Za-z][A-Za-z\\d_-]*)*$'\n      style: simple\n    resourceIDs:\n      in: path\n      name: resourceID\n      description: |\n        The artefact ID(s).\n\n        Multiple values are possible and `*` can be used as shortcut to select all available artefacts.\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\n          pattern: '^\\*|[A-Za-z\\d_@$-]+$'\n      style: simple\n    versions:\n      in: path\n      name: version\n      description: |\n        The version(s) of the artefact.\n\n        Multiple values are possible and `*` can be used as shortcut to select all available artefacts.\n\n        `+` can be used to retrieve the latest stable version.\n\n        `~` can be used to retrieve the latest version, regardless of its status (stable, draft, etc.).\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\n          pattern: '^(\\*\\+|~|\\*|(0|[1-9]\\d*[\\+\\*~]?|[\\+\\*~]?)\\.(0|[1-9]\\d*[\\+\\*~]?|[\\+\\*~]?)\\.?(0|[1-9]\\d*[\\+\\*~]?|[\\+\\*~]?)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)$'\n      style: simple\n    items:\n      in: path\n      name: itemID\n      description: |\n        The id of the item to be returned. \n\n        Multiple values are possible and `*` can be used as shortcut to select all items.\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\n      style: simple\n    componentID:\n      in: path\n      name: componentID\n      description: |\n        The ID of the dimension for which to obtain availability information.\n\n        Multiple values are possible and `*` can be used as shortcut to select all available dimensions.\n      required: true\n      schema:\n        type: array\n        items:\n          type: string\n          pattern: '^\\*|[A-Za-z][A-Za-z\\d_-]*$'\n      style: simple\n    c:\n      in: query\n      name: c\n      description: |\n        Filter data by component value (e.g. c[FREQ]=A).\n\n        Multiple values are supported.\n\n        In addition, operators may be used:\n\n        Operator | Meaning | Note\n        -- | -- | --\n        eq | Equals | Default if no operator is specified and there is only one value (e.g. `c[FREQ]=M` is equivalent to `c[FREQ]=eq:M`)\n        ne | Not equal to |\n        lt | Less than |\n        le | Less than or equal to |\n        gt | Greater than |\n        ge | Greater than or equal to |\n        co | Contains |\n        nc | Does not contain |\n        sw | Starts with |\n        ew | Ends with |\n\n        Operators appear as prefix to the component value(s) and are separated from it by a `:` (e.g. `c[TIME_PERIOD]=ge:2020-01+le:2020-12`).\n      required: false\n      schema:\n        type: object\n      style: deepObject\n      explode: true\n    updatedAfter:\n      in: query\n      name: updatedAfter\n      description: |\n        The last time the query was performed by the client. \n        \n        If this parameter is used, the returned message should only include the dimension values for the data that have changed since that point in time (updates and revisions).\n      required: false\n      schema:\n        type: string\n        format: date-time\n    firstNObservations:\n      in: query\n      name: firstNObservations\n      description: The maximum number of observations to be returned for each of the matching series, starting from the first observation.\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n    lastNObservations:\n      in: query\n      name: lastNObservations\n      description: The maximum number of observations to be returned for each of the matching series, counting back from the most recent observation.\n      required: false\n      schema:\n        type: integer\n        minimum: 1\n    dimensionAtObservation:\n      in: query\n      name: dimensionAtObservation\n      description: |\n        The ID of the dimension to be attached at the observation level. \n        \n        This parameter allows the client to indicate how the data should be packaged by the service.\n      required: false\n      schema:\n        type: string\n        pattern: '^[A-Za-z][A-Za-z\\d_-]*$'\n    attributes:\n      in: query\n      name: attributes\n      description: |\n        The attributes to be returned. \n        \n        For example, it is possible to instruct the web service to return data only (i.e. no attributes).\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n      style: form\n      explode: false\n    measures:\n      in: query\n      name: measures\n      description: The measures to be returned. \n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n      style: form\n      explode: false\n    includeHistory:\n      in: query\n      name: includeHistory\n      description: |\n        This attribute allows retrieving previous versions of the data, as they were disseminated in the past (*history* or *timeline* functionality).\n      required: false\n      schema:\n        type: boolean\n        default: false\n    explicitMeasure:\n      in: query\n      name: explicitMeasure\n      description: For cross-sectional data validation, indicates whether observations are strongly typed.\n      required: false\n      schema:\n        type: boolean\n        default: false\n    structDetail:\n      in: query\n      name: detail\n      description: The desired amount of information to be returned. \n      required: false\n      schema:\n        type: string\n        enum:\n          [\n            full,\n            allstubs,\n            referencestubs,\n            allcompletestubs,\n            referencecompletestubs,\n            referencepartial,\n            raw\n          ]\n        default: full\n    metaDetail:\n      in: query\n      name: detail\n      description: The amount of information to be returned.\n      required: false\n      schema:\n        type: string\n        enum: [allstubs, full]\n        default: full\n    references:\n      in: query\n      name: references\n      description: |\n        Instructs the web service to return (or not) the artefacts referenced by the artefact to be returned (for example, the code lists and concepts used by the data structure definition matching the query), \n        as well as the artefacts that use the matching artefact (for example, the dataflows that use the data structure definition matching the query).\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            [\n              none,\n              parents,\n              parentsandsiblings,\n              ancestors,\n              children,\n              descendants,\n              all,\n              datastructure,\n              metadatastructure,\n              categoryscheme,\n              conceptscheme,\n              codelist,\n              hierarchy,\n              hierarchyassociation,\n              agencyscheme,\n              dataproviderscheme,\n              dataconsumerscheme,\n              organisationunitscheme,\n              dataflow,\n              metadataflow,\n              reportingtaxonomy,\n              provisionagreement,\n              structureset,\n              process,\n              categorisation,\n              dataconstraint,\n              metadataconstraint,\n              transformationscheme,\n              rulesetscheme,\n              userdefinedoperatorscheme,\n              customtypescheme,\n              namepersonalisationscheme,\n              namealiasscheme,\n              valuelist,\n              structuremap,\n              representationmap,\n              conceptschememap,\n              categoryschememap,\n              organisationschememap,\n              reportingtaxonomymap\n            ]\n          default: none\n      style: form\n      explode: false\n    mode:\n      in: query\n      name: mode\n      description: |\n        Instructs the web service to return a ContentConstraint which defines a Cube Region containing values which will be returned by executing the query (`exact`) vs a Cube Region showing what values remain valid selections that could be added to the data query (`available`).\n      required: false\n      schema:\n        type: string\n        enum: [exact, available]\n        default: exact\n    acreferences:\n      in: query\n      name: references\n      description: |\n        Instructs the web service to return (or not) the artefacts referenced by the ContentConstraint to be returned.\n\n        Multiple values are supported.\n      required: false\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            [\n              none,\n              all,\n              datastructure,\n              conceptscheme,\n              codelist,\n              dataproviderscheme,\n              dataflow,\n            ]\n          default: none\n      style: form\n      explode: false\n    accept-encoding:\n      in: header\n      name: Accept-Encoding\n      schema:\n        type: string\n        enum: [br, compress, deflate, exi, gzip, identity, pack200-gzip, zstd]\n        default: identity\n    accept-language:\n      in: header\n      name: Accept-Language\n      schema:\n        type: string\n    if-modified-since:\n      in: header\n      name: If-Modified-Since\n      schema:\n        type: string\n        format: date-time\n\n  responses:\n    \"200\":\n      description: OK\n      content:\n        application/vnd.sdmx.data+json;version=2.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.data+csv;version=2.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.data+xml;version=3.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.genericdata+xml;version=2.1:\n          schema:\n            type: string\n        application/vnd.sdmx.structurespecificdata+xml;version=2.1:\n          schema:\n            type: string\n        application/vnd.sdmx.generictimeseriesdata+xml;version=2.1:\n          schema:\n            type: string\n        application/vnd.sdmx.structurespecifictimeseriesdata+xml;version=2.1:\n          schema:\n            type: string\n        application/vnd.sdmx.data+csv;version=1.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.data+json;version=1.0.0:\n          schema:\n            type: string\n    \"200-schemas\":\n      description: OK\n      content:\n        application/vnd.sdmx.schema+xml;version=3.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.structure+xml;version=3.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.structure+json;version=2.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.schema+xml;version=2.1:\n          schema:\n            type: string\n        application/vnd.sdmx.structure+xml;version=2.1:\n          schema:\n            type: string\n        application/vnd.sdmx.structure+json;version=1.0.0:\n          schema:\n            type: string\n    \"200-struct\":\n      description: OK\n      content:\n        application/vnd.sdmx.structure+xml;version=3.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.structure+json;version=2.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.structure+xml;version=2.1:\n          schema:\n            type: string\n        application/vnd.sdmx.structure+json;version=1.0.0:\n          schema:\n            type: string\n    \"200-meta\":\n      description: OK\n      content:\n        application/vnd.sdmx.metadata+json;version=2.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.metadata+xml;version=3.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.metadata+csv;version=1.0.0:\n          schema:\n            type: string\n        application/vnd.sdmx.genericmetadata+xml;version=2.1:\n          schema:\n            type: string\n        application/vnd.sdmx.structurespecificmetadata+xml;version=2.1:\n          schema:\n            type: string\n    \"304\":\n      description: No changes\n    \"400\":\n      description: Bad syntax\n    \"401\":\n      description: Unauthorized\n    \"403\":\n      description: Forbidden\n    \"404\":\n      description: Not found\n    \"406\":\n      description: Not acceptable\n    \"413\":\n      description: Request entity too large\n    \"414\":\n      description: URI too long\n    \"500\":\n      description: Internal server error\n    \"501\":\n      description: Not implemented\n    \"503\":\n      description: Service unavailable\n",
			"canonicalURL": "/github.com/sdmx-twg/sdmx-rest@9db9cdf5bfe9327817b9f2508caaa15ab746bdf2/-/blob/api/sdmx-rest.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/sdmx-twg/sdmx-rest/blob/9db9cdf5bfe9327817b9f2508caaa15ab746bdf2/api/sdmx-rest.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/structure/{itemSchemeType}/{agencyID}/{resourceID}/{version}/{itemID}\": get: responses: 200: contents: unsupported content types: [application/vnd.sdmx.structure+json;version=1.0.0, application/vnd.sdmx.structure+json;version=2.0.0, application/vnd.sdmx.structure+xml;version=2.1, application/vnd.sdmx.structure+xml;version=3.0.0]",
	"NotImplemented": [
		"unsupported content types"
	]
}