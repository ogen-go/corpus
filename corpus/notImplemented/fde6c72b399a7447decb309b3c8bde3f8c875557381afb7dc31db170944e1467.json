{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/NCEAS/metadig-engine"
		},
		"file": {
			"name": "metadig-api-v2.3.3-swagger.yaml",
			"size": 0,
			"path": "docs/metadig-api-v2.3.3-swagger.yaml",
			"byteSize": 11732,
			"content": "openapi: 3.0.0\nservers:\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/gothub/metadig/v2.3.0\n  - url: 'https://virtserver.swaggerhub.com/mbjones/metadig/v2'\ninfo:\n  description: \u003e-\n    This API can be used to manage metadata and data quality services on the\n    MetaDIG system.\n  version: v2.3.3\n  title: MetaDIG API\n  contact:\n    email: slaughter@nceas.ucsb.edu\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: admins\n    description: Secured Admin-only calls\n  - name: developers\n    description: Operations available to regular developers\n  - name: public\n    description: Calls available to all users\npaths:\n  \"/checks\":\n    get:\n      tags:\n        - public\n      summary: lists registered checks\n      operationId: listChecks\n      description: List quality checks that have been registered in the system.\n      responses:\n        '200':\n          description: lists all registered checks\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Check'\n        '400':\n          description: bad input parameter\n  \"/checks/{id}\":\n    get:\n      tags:\n        - public\n      summary: retrieve a single check\n      operationId: getCheck\n      description: Retrieve a quality check defintion document.\n      parameters:\n        - name: id\n          in: path\n          description: the id of the check\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: the check definition\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Check'\n        '400':\n          description: unsupported encoding\n  \"/checks/{id}/run\":\n    post:\n      tags:\n        - admins\n      summary: runs the specified check\n      operationId: runCheck\n      description: Runs a check for a supplied metadata document\n      parameters:\n        - name: id\n          in: path\n          description: id of the check to run\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/mixed:\n            schema:\n              type: object\n              properties:\n                id:\n                  # default is text/plain\n                  type: string\n                  format: uuid\n                document:\n                  # need to declare XML format!\n                  description: metadata in XML format\n                  type: object\n                  properties: {}\n                systemMetadata:\n                  description: system metadata in XML format\n                  # default is application/octet-stream, need to declare an image type only!\n                  type: object\n                  format: properties {}\n            encoding:\n              document:\n                # require XML Content-Type in utf-8 encoding\n                contentType: application/xml; charset=utf-8\n              systemMetadata:\n                 # require XML Content-Type in utf-8 encoding\n                contentType: application/xml; charset=utf-8\n      responses:\n        '201':\n          description: check created\n        '400':\n          description: 'invalid input, object invalid'\n        '409':\n          description: an existing check already exists\n  \"/runs/{suite}/{id}\":\n    get:\n      tags:\n        - public\n      summary: retrieve a single quality suite\n      operationId: getRun\n      description: Retrieve a quality suite defintion document.\n      parameters:\n        - name: suite\n          in: path\n          description: the id of the suite\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: the id of the suite\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: the completed run for a suite and id\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Run'\n        '400':\n          description: unsupported encoding\n  \"/suites\":\n    get:\n      tags:\n        - public\n      summary: lists registered suites\n      operationId: listSuites\n      description: List quality suites that have been registered in the system.\n      responses:\n        '200':\n          description: returns the names of all registered suites\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Suite'\n  \"/suite/{suite}\":\n    get:\n      tags:\n        - public\n      summary: retrieve a single quality suite\n      operationId: getSuite\n      description: Retrieve a quality suite defintion document.\n      parameters:\n        - name: suite\n          in: path\n          description: the id of the suite\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: the suite definition\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Suite'\n        '400':\n          description: unsupported encoding\n  \"/suites/{suite}/run\":\n    post:\n      tags:\n        - admins\n      summary: runs the specified Suite\n      operationId: runSuite\n      description: Runs a Suite for a supplied metadata document\n      parameters:\n        - name: suite\n          in: path\n          description: id of the check to run\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/mixed:\n            schema:\n              type: object\n              properties:\n                priority:\n                  description: run priority (high, regular, low)\n                  type: string\n                document:\n                  # need to declare XML format!\n                  description: metadata in XML format\n                  type: object\n                  properties: {}\n                systemMetadata:\n                  description: system metadata in XML format\n                  # default is application/octet-stream, need to declare an image type only!\n                  type: object\n                  format: properties {}\n            encoding:\n              document:\n                # require XML Content-Type in utf-8 encoding\n                contentType: application/xml; charset=utf-8\n              systemMetadata:\n                 # require XML Content-Type in utf-8 encoding\n                contentType: application/xml; charset=utf-8\n      responses:\n        '201':\n          description: check created\n        '400':\n          description: 'invalid input, object invalid'\n        '409':\n          description: an existing check already exists\n  \"/scores/{suite}/{pid}\":\n    get:\n      tags:\n        - public\n      summary: retrieve an aggregated assessment report (graph)\n      operationId: retrieveReport\n      description: Retrieve a report (graph or CSV) of aggregated assessment scores \n      parameters:\n        - name: suite\n          in: path\n          description: the desired assessment suite  (e.g. \"FAIR-0.3.1\", \"knb-suite\")\n          required: true\n          schema:\n            type: string\n        - name: pid\n          in: path\n          description: the collection id to retrieve the assessment for (e.g. \"doi:10.18739/A23B5W875\", \"urn:node:KNB\", \"urn:node:CN\")\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: the success response\n          content:\n            image/png:\n              schema:\n                type: object\n            text/csv:\n              schema:\n                type: object\n    post:\n      tags:\n        - admins\n      summary: generate an aggregated report (graph)\n      operationId: generateReport\n      description: Generate a report (graph) of aggregated assessment scores\n      parameters:\n        - name: suite\n          in: path\n          description: the desired assessment suite  (e.g. \"FAIR-0.3.1\", \"knb-suite\")\n          required: true\n          schema:\n            type: string\n        - name: pid\n          in: path\n          description: the collection id to retrieve the assessment for (e.g. \"doi:10.18739/A23B5W875\", \"urn:node:KNB\", \"urn:node:CN\")\n          required: true\n          schema:\n            type: string\n        - name: node\n          in: query\n          description: The DataONE node to obtain and evaluate the Solr 'collectionQuery' field on (e.g. \"urn:node:CN\", \"urn:node:ARCTIC\")\n          required: true\n          schema:\n            type: string\n        - name: format\n          in: query\n          description: the format families to include in the assessment (e.g. \"eml\", \"eml,iso\")\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: request queued\ncomponents:\n  schemas:\n    Check:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: string\n          example: check.abstract.100.words.1\n        name:\n          type: string\n          example: Abstract length\n        description:\n          type: string\n          example: Abstract should be at least 100 words long\n        type:\n          type: string\n          example: discovery\n        level:\n          type: string\n          example: REQUIRED\n        environment:\n          type: string\n          example: rscript\n        code:\n          type: string\n          example: if (length(abstract) \u003c 200)  status \u003c- \"FAILURE\"}\n        selector:\n          type: string\n        dialect:\n          type: string\n    Run:\n      type: object\n      required:\n        - id\n        - name\n        - description\n        - check\n      properties:\n        id:\n          type: string\n          example: FAIR-suite-0.3.1\n        name:\n          type: string\n          example: The FAIR Suite v0.3.1\n        description:\n          type: string\n          example: This is the FAIR Assessment Suite\n        check:\n          type: string\n          example: check.identifier.is.present.1\n    Suite:\n      type: object\n      required:\n        - id\n        - name\n        - description\n        - check\n      properties:\n        id:\n          type: string\n          example: arctic.data.test.suite.1\n        name:\n          type: string\n          example: Arctic Data Center Quality Suite\n        description:\n          type: string\n          example: This is a provisional Arctic Data Center Quality Suite\n        check:\n          type: string\n          example: check.identifier.is.present.1\n    Metadata:\n      type: object\n    SystemMetadata:\n      type: object\n      required:\n        - serialVersion\n        - identifier\n        - formatId\n      properties:\n        identifier:\n          type: string\n          example: knb.1.1\n        serialVersion:\n          type: string\n          example: 1\n        formatId:\n          type: string\n          example: eml://ecoinformatics.org/eml-2.1.1\n        checksum:\n          type: string\n          example: '0775b5e25cd425398acd94b3512e51eb'\n        rightsHolder:\n          type: string\n          example: CN=Matt Jones A729,O=Google,C=US,DC=cilogon,DC=org\n        submitter:\n          type: string\n          example: uid=kepler,o=unaffiliated,dc=ecoinformatics,dc=org",
			"canonicalURL": "/github.com/NCEAS/metadig-engine@b615bf5b193e442cbe661334e3beb8b78711295f/-/blob/docs/metadig-api-v2.3.3-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/NCEAS/metadig-engine/blob/b615bf5b193e442cbe661334e3beb8b78711295f/docs/metadig-api-v2.3.3-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/suite/{suite}\": get: responses: 200: contents: unsupported content types: [application/xml]",
	"NotImplemented": [
		"unsupported content types"
	]
}