{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dancier/dancer"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi.yml",
			"byteSize": 14801,
			"content": "openapi: 3.0.2\ninfo:\n  title: Dancier\n  version: '1.0'\nservers:\n  - url: 'https://dancier.net'\n  - url: 'http://localhost:8080'\npaths:\n  /authentication/whoami:\n    get:\n      summary: information about the user\n      tags:\n        - IAM\n      responses:\n        '200':\n          description: \"basic information of the user\"\n          content:\n            application/json:\n              example:\n                \"roles\":\n                  - \"ROLE_USER\"\n                  - \"ROLE_HUMAN\"\n                \"emailAddress\": foo@bar.de\n              \n  /authentication/registrations:\n    post:\n      summary: starts the user registrations process, \n        the client need to have ROLE_HUMAN assigned \n      tags:\n        - IAM\n      requestBody:\n        description: email address and the password for the user\n        required: true\n        content:\n          application/json:\n            examples:\n              register_user:\n                $ref: '#/components/examples/register_user'\n            schema:\n              $ref: '#/components/schemas/register_user'\n      responses:\n        '201':\n          description: In case the account could be created. \n            The user still has to validate his email address.\n            An Email has been send out to the provided address.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/api_response\"\n              example:\n                \"success\": true\n                \"messages\":\n                  - User registrated successfully\n        '401':\n          description: In case the captche code was not present or the validation failed.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/api_response'\n              example:\n                \"success\": false\n                \"messages\":\n                  - \"Not authorized as a human: Token ist not valid. Maybe expired?\"\n        '409':\n          description: In case the provided email-adress already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/api_response'\n              example:\n                \"success\": false\n                \"messages\":\n                  - Email address already exist\n  /authentication/login:\n    post:\n      tags:\n        - IAM\n      summary: The customer will be logged in.\n      description:  It ist necessary that the customer has already\n       successfully validated his email-address.\n      requestBody:\n        description: attempt to login the user\n        required: true\n        content:\n          application/json:\n            examples:\n              login_user:\n                $ref: '#/components/examples/login_user'\n            schema:\n              $ref: '#/components/schemas/login_user'\n      responses:\n        '200':\n          description: In case the login was successfull.\n        '401':\n          description: In case the provided credentials were not correct.\n        '403':\n          description: in case we have not validated the email yet.\n  /authentication/loginAsHuman:\n    post:\n      tags:\n        - IAM\n      responses:\n        '200':\n          description: when the verficaton as a human succeded.\n            A jwt-token with ROLE_HUMAN has been set.\n        '401':\n          description: in case the validation failed.\n\n  /authentication/logout:\n    get:\n      tags:\n        - IAM\n      summary: log out the user\n      responses:\n        '200' : \n          description: This logs out the user. It resets the cookie. Any valid tokens are not affected.\n\n  /authentication/email-validations:\n    post:\n      tags:\n        - IAM\n      summary: creates email validation code and send it per mail\n      requestBody:\n        description: request to get a code send via email, so reset the password\n        required: true\n        content:\n          text/plain:\n            examples:\n              create_email_validation_code:\n                $ref: '#/components/examples/create_email_validation_code'\n            schema:\n              $ref: '#/components/schemas/create_email_validation_code'\n      responses:\n        '200':\n          description: will also be send, when no user is found to not reveal the existince of users\n  /authentication/email-validations/{emailValidationCode}:\n    put:\n      tags:\n        - IAM\n      parameters:\n        - in: path\n          name: emailValidationCode\n          schema:\n            type: string\n          required: true\n          description: ID of the user to got via mail\n      summary: validates the email address of a user\n      description: Validates the email address, that the user provided when he started \n        the registration process.\n        When he clicks on the link, that browser will be redirected, to the frontend,\n        that will extract the validation code and in turn will make\n        a request to this endpoint.\n        When the validation was successfull, the user will be \n        directly logged in, by the response setting a proper cookie.\n        In all other case the reason for failing will be returned.\n      responses:\n        '200':\n          description: In case the validation was successfully. \n            The response, also contains a login cookie.\n        '400':\n          description: in case of any problems like the code not known in the system, \n            outdated or any other problem like this.\n  /authentication/password-changes:\n    post:\n      tags:\n        - IAM\n      summary: send a link via mail to enable password reset\n      description: requests a code to be send to the user via email to reset \n        the passwort\n      requestBody:\n        required: true\n        content:\n          text/plain:\n            examples:\n              create_password_reset_code:\n                $ref: '#/components/examples/create_password_reset_code'\n            schema:\n                $ref: '#/components/schemas/create_password_reset_code'\n      responses:\n        '200':\n          description: mail was send\n  /authentication/password-changes/{validationCode}:\n    put:\n      summary: set the user password to the one provided\n      description: the link with the validationCode has been send to the \n        user. So we can be sure, das the link is used by the user and\n        change the password.\n      tags:\n        - IAM\n      parameters:\n        - in: path\n          name: validationCode\n          schema:\n            type: string\n          required: true\n          description: the code to check that it is really the user with access to the mail account\n      responses:\n        '200':\n          description: contains the new password\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/password_reset\"\n              example:\n                password: secret\n  /profile:\n    get:\n      summary: retrieves all the information that shows up in the profile\n      tags:\n        - Profile\n      responses:\n        '200':\n          description: the information for the profile of the looged in user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/get_profile\"\n    put:\n      summary: change profile information of the user\n      tags:\n        - Profile\n      requestBody:\n        description: The complete information what should be shown in the profile\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/change_profile'\n      responses:\n        '200':\n          description: indicates that the request was successfull\n  /profile/checkDancerNameAvailibility/{dancerName}:\n    get:\n      summary: check if a name is still free\n      tags:\n        - Profile\n      parameters:\n        - in: path\n          name: dancerName\n          schema:\n            type: string\n          required: true\n          description: is this name free?\n\n      responses:\n        '200':\n          description: true of false\n  /dances/:\n    get:\n      summary: retrieves a List of all dance names\n      tags:\n        - Dance\n      responses:\n        '200':\n          description: retrives an array of strings\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n\n  /recommendations:\n    get:\n      summary: retrieves all precomputes recommendations\n      tags:\n        - Recommendations\n      responses:\n        '200':\n          description: retrieves an potentially empty array\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/recommendable\"\n  /location/zipCode/{country}/{code}:\n    get:\n      summary: resolve code to location\n      tags:\n        - Location\n      parameters:\n        - in: path\n          name: country\n          schema:\n            type: string\n          required: true\n          description: country\n        - in: path\n          name: code\n          schema:\n            type: string\n          required: true\n          description: code\n\n      responses:\n        '200':\n          description: get geo coordinates and city from zip code\n  /images:\n    post:\n      summary: uploads a png image\n      tags:\n        - Images\n      responses:\n        '200':\n          description: image was uploaded correctly\n  /images/{hash}.png:\n    get:\n      summary: get image\n      tags:\n        - Images\n      parameters:\n        - in: path\n          name: hash\n          schema:\n            type: string\n          required: true\n          description: the sha256 hash of the original image\n      responses:\n        '200':\n          description: get it in orginal\n  /images/{hash}/{width}.png:\n    get:\n      summary: get scaled version\n      tags:\n        - Images\n      parameters:\n        - in: path\n          name: hash\n          schema:\n            type: string\n          required: true\n          description: the sha256 hash of the original image\n        - in: path\n          name: width\n          schema:\n            type: string\n          required: true\n          description: the desired width\n      responses:\n        '200':\n          description: get scaled version \n          \ncomponents:\n  securitySchemes:\n    jwt-token:\n      type: apiKey\n      in: cookie\n      name: jwt-token\n  examples:\n    register_user:\n      value:\n        \"email\": \"foo@bar.de\"\n        \"password\": \"secrect\"\n        \"acceptTermsAndConditions\": \"true\"\n    login_user:\n      value:\n        \"email\": \"foo@bar.de\"\n        \"password\": \"secret\"\n    create_email_validation_code:\n      value:\n        foo@bar.de\n    create_password_reset_code:\n      value:\n        foobar\n    change_profile:\n      value:\n        \"bla\": string\n  schemas:\n    gender:\n      type: string\n      enum:\n        - MALE\n        - FEMALE\n        - DIVERS\n        - NA\n    recommendable:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - DANCER\n            - SCHOOL\n        payload:\n          type: object\n          oneOf:\n            - $ref: \"#/components/schemas/recommended_dancer\"\n            - $ref: \"#/components/schemas/recommended_school\"\n    recommended_dancer:\n      type: object\n      properties:\n        name:\n          type: string\n    recommended_school:\n      type: object\n      properties:\n        name:\n          type: string\n        url:\n          type: string\n        supportedDances:\n          description: what can you learn/practise in this school\n          type: array\n          items:\n            type: string\n        country:\n          type: string\n          enum:\n            - GER\n        city:\n          type: string\n        zipCode:\n          type: string\n        profileImageHash:\n          type: string\n        \n    dance_profile:\n      type: object\n      properties:\n        dance:\n          type: string\n        level:\n          type: string\n          enum:\n            - NO_EXPERIENCE\n            - BASIC\n            - INTERMEDIATE\n            - ADVANCED\n            - PRO\n        leading:\n          type: string\n          enum:\n            - FOLLOW\n            - LEAD\n            - BOTH\n            - NA\n    change_profile:\n      type: object\n      properties:\n        size:\n          type: integer\n        aboutMe:\n          type: string\n        gender:\n          $ref: \"#/components/schemas/gender\"\n        dancerName:\n          type: string\n        birthDate:\n          type: string\n          format: date\n        zipCode:\n          type: string\n        country:\n          type: string\n          enum:\n            - GER\n        profileImageHash:\n          type: string\n        ableTo:\n          type: array\n          items:\n            $ref: \"#/components/schemas/dance_profile\"\n        wantsTo:\n          type: array\n          items:\n            $ref: \"#/components/schemas/dance_profile\"\n    get_profile:\n      type: object\n      properties:\n        id:\n          type: string\n        aboutMe:\n          type: string\n        size:\n          type: integer\n        gender:\n          $ref: \"#/components/schemas/gender\"\n        dancerName:\n          type: string\n        birthDate:\n          type: string\n          format: date\n        ableTo:\n          type: array\n          items:\n            $ref: '#/components/schemas/dance_profile'\n        wantsTo:\n          type: array\n          items:\n            $ref: '#/components/schemas/dance_profile'\n        email:\n          type: string\n        zipCode:\n          type: string\n        city:\n          type: string\n        country:\n          type: string\n          enum:\n            - GER\n        profileImageHash:\n          type: string\n    register_user:\n      type: object\n      properties:\n        \"email\":\n          type: string\n          maxLength: 100\n        \"password\":\n          type: string\n          minLength: 4\n          maxLength: 40\n        \"acceptTermsAndConditions\":\n          type: string\n          enum:\n            - \"true\"\n            - \"false\"\n    login_user:\n      type: object\n      properties:\n        \"email\":\n          type: string\n        \"password\":\n          type: string\n    password_reset:\n      type: object\n      properties:\n        \"password\":\n          type: string\n    create_email_validation_code:\n      type: string\n    create_password_reset_code:\n      type: string\n    api_response:\n      type: object\n      properties:\n        \"success\":\n          type: boolean\n        \"messages\":\n          type: array\n          items: {\n            type: string\n          }\n    login_response:\n      type: object\n      properties:\n        \"accessToken\":\n          type: string\n        \"tokenType\":\n          type: string",
			"canonicalURL": "/github.com/dancier/dancer@4f996a7dbb379cb6dd8ae60824c685f78ae875a0/-/blob/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/dancier/dancer/blob/4f996a7dbb379cb6dd8ae60824c685f78ae875a0/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/authentication/email-validations\": post: requestBody: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}