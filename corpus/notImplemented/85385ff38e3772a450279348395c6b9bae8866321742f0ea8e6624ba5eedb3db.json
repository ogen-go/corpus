{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/admin-ch/CovidCertificate-Apidoc"
		},
		"file": {
			"name": "api-docs.yaml",
			"size": 0,
			"path": "api-docs.yaml",
			"byteSize": 71326,
			"content": "openapi: 3.0.1\ninfo:\n  title: Covid Certificate API Gateway Service\n  description: Rest API for Covid Certificate API Gateway Service.\n  license:\n    name: Apache 2.0\n  version: 2.0.0\nservers:\n- url: https://ws.covidcertificate.bag.admin.ch\n  description: prod\n- url: https://ws.covidcertificate-a.bag.admin.ch\n  description: test\npaths:\n  /api/v1/covidcertificate/vaccination:\n    post:\n      tags:\n      - covid-certificate-generation-controller\n      summary: Creates a vaccine certificate for the given data.\n      description: Creates a vaccine certificate as an QR-Code and PDF. Performs an\n        integrity check for each request based on headers and body.\n      operationId: createVaccinationCertificate\n      parameters:\n      - name: X-Signature\n        in: header\n        description: \"Base64 encoded hash of the canonicalized body, generated with\\\n          \\ the `SHA256withRSA` algorithm signed with the private key of the certificate\\\n          \\ issued by \\\"SwissGov Regular CA 01\\\". See [documentation](https://github.com/admin-ch/CovidCertificate-Apidoc#content-signature)\\\n          \\ on Github.\"\n        required: true\n        schema:\n          type: string\n          format: Base64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VaccinationCertificateCreateDto'\n        required: true\n      responses:\n        \"403\":\n          description: \"All certificate creation endpoints can be toggled, when an\\\n            \\ endpoint is disabled, the backend respond with a HTTP 403 Forbidden\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                INVALID_BEARER:\n                  description: INVALID_BEARER\n                  value: \"{\\\"errorCode\\\": 492, \\\"errorMessage\\\": Invalid OTP}\"\n                MISSING_BEARER_JSON:\n                  description: MISSING_BEARER_JSON\n                  value: \"{\\\"errorCode\\\": 493, \\\"errorMessage\\\": Missing OTP}\"\n                INVALID_SIGNATURE:\n                  description: INVALID_SIGNATURE\n                  value: \"{\\\"errorCode\\\": 490, \\\"errorMessage\\\": Integrity check failed,\\\n                    \\ the body hash does not match the hash in the header}\"\n                SIGNATURE_PARSE_ERROR:\n                  description: SIGNATURE_PARSE_ERROR\n                  value: \"{\\\"errorCode\\\": 491, \\\"errorMessage\\\": Signature could not\\\n                    \\ be parsed}\"\n                INVALID_IDENTITY_USER:\n                  description: INVALID_IDENTITY_USER\n                  value: \"{\\\"errorCode\\\": 494, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user}\"\n                INVALID_IDENTITY_USER_ROLE:\n                  description: INVALID_IDENTITY_USER_ROLE\n                  value: \"{\\\"errorCode\\\": 495, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user role}\"\n                INVALID_OTP_LENGTH:\n                  description: INVALID_OTP_LENGTH\n                  value: \"{\\\"errorCode\\\": 496, \\\"errorMessage\\\": Invalid OTP length}\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                NO_PERSON_DATA:\n                  description: NO_PERSON_DATA\n                  value: \"{\\\"errorCode\\\": 452, \\\"errorMessage\\\": No person data was\\\n                    \\ specified}\"\n                INVALID_DATE_OF_BIRTH:\n                  description: INVALID_DATE_OF_BIRTH\n                  value: \"{\\\"errorCode\\\": 453, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Must be younger than 1900-01-01}\"\n                INVALID_DATE_OF_BIRTH_IN_FUTURE:\n                  description: INVALID_DATE_OF_BIRTH_IN_FUTURE\n                  value: \"{\\\"errorCode\\\": 489, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Date cannot be in the future}\"\n                INVALID_MEDICINAL_PRODUCT:\n                  description: INVALID_MEDICINAL_PRODUCT\n                  value: \"{\\\"errorCode\\\": 454, \\\"errorMessage\\\": Invalid medicinal\\\n                    \\ product}\"\n                INVALID_DOSES:\n                  description: INVALID_DOSES\n                  value: \"{\\\"errorCode\\\": 455, \\\"errorMessage\\\": Invalid number of\\\n                    \\ doses}\"\n                INVALID_VACCINATION_DATE:\n                  description: INVALID_VACCINATION_DATE\n                  value: \"{\\\"errorCode\\\": 456, \\\"errorMessage\\\": Invalid vaccination\\\n                    \\ date! Date cannot be in the future}\"\n                INVALID_COUNTRY_OF_VACCINATION:\n                  description: INVALID_COUNTRY_OF_VACCINATION\n                  value: \"{\\\"errorCode\\\": 457, \\\"errorMessage\\\": Invalid country of\\\n                    \\ vaccination}\"\n                INVALID_GIVEN_NAME:\n                  description: INVALID_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 458, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_GIVEN_NAME:\n                  description: INVALID_STANDARDISED_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 477, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ The standardised given name exceeds 80 chars}\"\n                INVALID_FAMILY_NAME:\n                  description: INVALID_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 459, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_FAMILY_NAME:\n                  description: INVALID_STANDARDISED_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 478, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ The standardised family name exceeds 80 chars}\"\n                INVALID_VACCINATION_INFO:\n                  description: INVALID_VACCINATION_INFO\n                  value: \"{\\\"errorCode\\\": 451, \\\"errorMessage\\\": Invalid vaccination\\\n                    \\ info! Exactly one element is expected in the array.}\"\n                INVALID_ADDRESS:\n                  description: INVALID_ADDRESS\n                  value: \"{\\\"errorCode\\\": 474, \\\"errorMessage\\\": Paper-based delivery\\\n                    \\ requires a valid address.}\"\n                DUPLICATE_DELIVERY_METHOD:\n                  description: DUPLICATE_DELIVERY_METHOD\n                  value: \"{\\\"errorCode\\\": 475, \\\"errorMessage\\\": Delivery method can\\\n                    \\ either be InApp or Mail, but not both.}\"\n                INVALID_APP_CODE:\n                  description: INVALID_APP_CODE\n                  value: \"{\\\"errorCode\\\": 479, \\\"errorMessage\\\": App code is in an\\\n                    \\ invalid format.}\"\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CovidCertificateCreateResponseDto'\n  /api/v1/covidcertificate/vaccination-tourist:\n    post:\n      tags:\n      - covid-certificate-generation-controller\n      summary: Creates a WHO vaccination-tourist certificate for the given data.\n      description: Creates a WHO vaccination-tourist certificate as an QR-Code and\n        PDF. Performs an integrity check for each request based on headers and body.\n      operationId: createVaccinationTouristCertificate\n      parameters:\n      - name: X-Signature\n        in: header\n        description: \"Base64 encoded hash of the canonicalized body, generated with\\\n          \\ the `SHA256withRSA` algorithm signed with the private key of the certificate\\\n          \\ issued by \\\"SwissGov Regular CA 01\\\". See [documentation](https://github.com/admin-ch/CovidCertificate-Apidoc#content-signature)\\\n          \\ on Github.\"\n        required: true\n        schema:\n          type: string\n          format: Base64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VaccinationTouristCertificateCreateDto'\n        required: true\n      responses:\n        \"403\":\n          description: \"All certificate creation endpoints can be toggled, when an\\\n            \\ endpoint is disabled, the backend respond with a HTTP 403 Forbidden\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                INVALID_BEARER:\n                  description: INVALID_BEARER\n                  value: \"{\\\"errorCode\\\": 492, \\\"errorMessage\\\": Invalid OTP}\"\n                MISSING_BEARER_JSON:\n                  description: MISSING_BEARER_JSON\n                  value: \"{\\\"errorCode\\\": 493, \\\"errorMessage\\\": Missing OTP}\"\n                INVALID_SIGNATURE:\n                  description: INVALID_SIGNATURE\n                  value: \"{\\\"errorCode\\\": 490, \\\"errorMessage\\\": Integrity check failed,\\\n                    \\ the body hash does not match the hash in the header}\"\n                SIGNATURE_PARSE_ERROR:\n                  description: SIGNATURE_PARSE_ERROR\n                  value: \"{\\\"errorCode\\\": 491, \\\"errorMessage\\\": Signature could not\\\n                    \\ be parsed}\"\n                INVALID_IDENTITY_USER:\n                  description: INVALID_IDENTITY_USER\n                  value: \"{\\\"errorCode\\\": 494, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user}\"\n                INVALID_IDENTITY_USER_ROLE:\n                  description: INVALID_IDENTITY_USER_ROLE\n                  value: \"{\\\"errorCode\\\": 495, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user role}\"\n                INVALID_OTP_LENGTH:\n                  description: INVALID_OTP_LENGTH\n                  value: \"{\\\"errorCode\\\": 496, \\\"errorMessage\\\": Invalid OTP length}\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                NO_PERSON_DATA:\n                  description: NO_PERSON_DATA\n                  value: \"{\\\"errorCode\\\": 452, \\\"errorMessage\\\": No person data was\\\n                    \\ specified}\"\n                INVALID_DATE_OF_BIRTH:\n                  description: INVALID_DATE_OF_BIRTH\n                  value: \"{\\\"errorCode\\\": 453, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Must be younger than 1900-01-01}\"\n                INVALID_DATE_OF_BIRTH_IN_FUTURE:\n                  description: INVALID_DATE_OF_BIRTH_IN_FUTURE\n                  value: \"{\\\"errorCode\\\": 489, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Date cannot be in the future}\"\n                INVALID_MEDICINAL_PRODUCT:\n                  description: INVALID_MEDICINAL_PRODUCT\n                  value: \"{\\\"errorCode\\\": 454, \\\"errorMessage\\\": Invalid medicinal\\\n                    \\ product}\"\n                INVALID_DOSES:\n                  description: INVALID_DOSES\n                  value: \"{\\\"errorCode\\\": 455, \\\"errorMessage\\\": Invalid number of\\\n                    \\ doses}\"\n                INVALID_VACCINATION_DATE:\n                  description: INVALID_VACCINATION_DATE\n                  value: \"{\\\"errorCode\\\": 456, \\\"errorMessage\\\": Invalid vaccination\\\n                    \\ date! Date cannot be in the future}\"\n                INVALID_COUNTRY_OF_VACCINATION:\n                  description: INVALID_COUNTRY_OF_VACCINATION\n                  value: \"{\\\"errorCode\\\": 457, \\\"errorMessage\\\": Invalid country of\\\n                    \\ vaccination}\"\n                INVALID_GIVEN_NAME:\n                  description: INVALID_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 458, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_GIVEN_NAME:\n                  description: INVALID_STANDARDISED_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 477, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ The standardised given name exceeds 80 chars}\"\n                INVALID_FAMILY_NAME:\n                  description: INVALID_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 459, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_FAMILY_NAME:\n                  description: INVALID_STANDARDISED_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 478, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ The standardised family name exceeds 80 chars}\"\n                INVALID_VACCINATION_INFO:\n                  description: INVALID_VACCINATION_INFO\n                  value: \"{\\\"errorCode\\\": 451, \\\"errorMessage\\\": Invalid vaccination\\\n                    \\ info! Exactly one element is expected in the array.}\"\n                INVALID_ADDRESS:\n                  description: INVALID_ADDRESS\n                  value: \"{\\\"errorCode\\\": 474, \\\"errorMessage\\\": Paper-based delivery\\\n                    \\ requires a valid address.}\"\n                DUPLICATE_DELIVERY_METHOD:\n                  description: DUPLICATE_DELIVERY_METHOD\n                  value: \"{\\\"errorCode\\\": 475, \\\"errorMessage\\\": Delivery method can\\\n                    \\ either be InApp or Mail, but not both.}\"\n                INVALID_APP_CODE:\n                  description: INVALID_APP_CODE\n                  value: \"{\\\"errorCode\\\": 479, \\\"errorMessage\\\": App code is in an\\\n                    \\ invalid format.}\"\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CovidCertificateCreateResponseDto'\n  /api/v1/covidcertificate/test:\n    post:\n      tags:\n      - covid-certificate-generation-controller\n      summary: Creates a test certificate for the given data.\n      description: Creates a test certificate as an QR-Code and PDF. Performs an integrity\n        check for each request based on headers and body.\n      operationId: createTestCertificate\n      parameters:\n      - name: X-Signature\n        in: header\n        description: \"Base64 encoded hash of the canonicalized body, generated with\\\n          \\ the `SHA256withRSA` algorithm signed with the private key of the certificate\\\n          \\ issued by \\\"SwissGov Regular CA 01\\\". See [documentation](https://github.com/admin-ch/CovidCertificate-Apidoc#content-signature)\\\n          \\ on Github.\"\n        required: true\n        schema:\n          type: string\n          format: Base64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TestCertificateCreateDto'\n        required: true\n      responses:\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                NO_PERSON_DATA:\n                  description: NO_PERSON_DATA\n                  value: \"{\\\"errorCode\\\": 452, \\\"errorMessage\\\": No person data was\\\n                    \\ specified}\"\n                INVALID_DATE_OF_BIRTH:\n                  description: INVALID_DATE_OF_BIRTH\n                  value: \"{\\\"errorCode\\\": 453, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Must be younger than 1900-01-01}\"\n                INVALID_DATE_OF_BIRTH_IN_FUTURE:\n                  description: INVALID_DATE_OF_BIRTH_IN_FUTURE\n                  value: \"{\\\"errorCode\\\": 489, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Date cannot be in the future}\"\n                INVALID_GIVEN_NAME:\n                  description: INVALID_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 458, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_GIVEN_NAME:\n                  description: INVALID_STANDARDISED_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 477, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ The standardised given name exceeds 80 chars}\"\n                INVALID_FAMILY_NAME:\n                  description: INVALID_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 459, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_FAMILY_NAME:\n                  description: INVALID_STANDARDISED_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 478, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ The standardised family name exceeds 80 chars}\"\n                INVALID_MEMBER_STATE_OF_TEST:\n                  description: INVALID_MEMBER_STATE_OF_TEST\n                  value: \"{\\\"errorCode\\\": 461, \\\"errorMessage\\\": Invalid member state\\\n                    \\ of test}\"\n                INVALID_TYP_OF_TEST:\n                  description: INVALID_TYP_OF_TEST\n                  value: \"{\\\"errorCode\\\": 462, \\\"errorMessage\\\": Invalid type of test\\\n                    \\ and manufacturer code combination! Must either be a PCR Test\\\n                    \\ type and no manufacturer code or give a manufacturer code and\\\n                    \\ the antigen test type code.}\"\n                INVALID_TEST_CENTER:\n                  description: INVALID_TEST_CENTER\n                  value: \"{\\\"errorCode\\\": 463, \\\"errorMessage\\\": Invalid testing center\\\n                    \\ or facility}\"\n                INVALID_SAMPLE_OR_RESULT_DATE_TIME:\n                  description: INVALID_SAMPLE_OR_RESULT_DATE_TIME\n                  value: \"{\\\"errorCode\\\": 464, \\\"errorMessage\\\": Invalid sample or\\\n                    \\ result date time! Sample date must be before current date and\\\n                    \\ before result date}\"\n                INVALID_LANGUAGE:\n                  description: INVALID_LANGUAGE\n                  value: \"{\\\"errorCode\\\": 469, \\\"errorMessage\\\": The given language\\\n                    \\ does not match any of the supported languages: de, it, fr!}\"\n                INVALID_TEST_INFO:\n                  description: INVALID_TEST_INFO\n                  value: \"{\\\"errorCode\\\": 460, \\\"errorMessage\\\": Invalid test info!\\\n                    \\ Exactly one element is expected in the array.}\"\n                DUPLICATE_DELIVERY_METHOD:\n                  description: DUPLICATE_DELIVERY_METHOD\n                  value: \"{\\\"errorCode\\\": 475, \\\"errorMessage\\\": Delivery method can\\\n                    \\ either be InApp or Mail, but not both.}\"\n                INVALID_APP_CODE:\n                  description: INVALID_APP_CODE\n                  value: \"{\\\"errorCode\\\": 479, \\\"errorMessage\\\": App code is in an\\\n                    \\ invalid format.}\"\n                INVALID_PRINT_FOR_TEST:\n                  description: INVALID_PRINT_FOR_TEST\n                  value: \"{\\\"errorCode\\\": 488, \\\"errorMessage\\\": Print is not available\\\n                    \\ for test certificates}\"\n        \"403\":\n          description: \"All certificate creation endpoints can be toggled, when an\\\n            \\ endpoint is disabled, the backend respond with a HTTP 403 Forbidden\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                INVALID_BEARER:\n                  description: INVALID_BEARER\n                  value: \"{\\\"errorCode\\\": 492, \\\"errorMessage\\\": Invalid OTP}\"\n                MISSING_BEARER_JSON:\n                  description: MISSING_BEARER_JSON\n                  value: \"{\\\"errorCode\\\": 493, \\\"errorMessage\\\": Missing OTP}\"\n                INVALID_SIGNATURE:\n                  description: INVALID_SIGNATURE\n                  value: \"{\\\"errorCode\\\": 490, \\\"errorMessage\\\": Integrity check failed,\\\n                    \\ the body hash does not match the hash in the header}\"\n                SIGNATURE_PARSE_ERROR:\n                  description: SIGNATURE_PARSE_ERROR\n                  value: \"{\\\"errorCode\\\": 491, \\\"errorMessage\\\": Signature could not\\\n                    \\ be parsed}\"\n                INVALID_IDENTITY_USER:\n                  description: INVALID_IDENTITY_USER\n                  value: \"{\\\"errorCode\\\": 494, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user}\"\n                INVALID_IDENTITY_USER_ROLE:\n                  description: INVALID_IDENTITY_USER_ROLE\n                  value: \"{\\\"errorCode\\\": 495, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user role}\"\n                INVALID_OTP_LENGTH:\n                  description: INVALID_OTP_LENGTH\n                  value: \"{\\\"errorCode\\\": 496, \\\"errorMessage\\\": Invalid OTP length}\"\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CovidCertificateCreateResponseDto'\n  /api/v1/covidcertificate/revoke:\n    post:\n      tags:\n      - covid-certificate-revocation-controller\n      summary: Revokes the certificate for the given UVCI.\n      description: Revokes a Covid certificate with a given UVCI. Performs an integrity\n        check for each request based on headers and body.\n      operationId: revokeCertificate\n      parameters:\n      - name: X-Signature\n        in: header\n        description: \"Base64 encoded hash of the canonicalized body, generated with\\\n          \\ the `SHA256withRSA` algorithm signed with the private key of the certificate\\\n          \\ issued by \\\"SwissGov Regular CA 01\\\". See [documentation](https://github.com/admin-ch/CovidCertificate-Apidoc#content-signature)\\\n          \\ on Github.\"\n        required: true\n        schema:\n          type: string\n          format: Base64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RevocationDto'\n        required: true\n      responses:\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                INVALID_BEARER:\n                  description: INVALID_BEARER\n                  value: \"{\\\"errorCode\\\": 492, \\\"errorMessage\\\": Invalid OTP}\"\n                MISSING_BEARER_JSON:\n                  description: MISSING_BEARER_JSON\n                  value: \"{\\\"errorCode\\\": 493, \\\"errorMessage\\\": Missing OTP}\"\n                INVALID_SIGNATURE:\n                  description: INVALID_SIGNATURE\n                  value: \"{\\\"errorCode\\\": 490, \\\"errorMessage\\\": Integrity check failed,\\\n                    \\ the body hash does not match the hash in the header}\"\n                SIGNATURE_PARSE_ERROR:\n                  description: SIGNATURE_PARSE_ERROR\n                  value: \"{\\\"errorCode\\\": 491, \\\"errorMessage\\\": Signature could not\\\n                    \\ be parsed}\"\n                INVALID_IDENTITY_USER:\n                  description: INVALID_IDENTITY_USER\n                  value: \"{\\\"errorCode\\\": 494, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user}\"\n                INVALID_IDENTITY_USER_ROLE:\n                  description: INVALID_IDENTITY_USER_ROLE\n                  value: \"{\\\"errorCode\\\": 495, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user role}\"\n                INVALID_OTP_LENGTH:\n                  description: INVALID_OTP_LENGTH\n                  value: \"{\\\"errorCode\\\": 496, \\\"errorMessage\\\": Invalid OTP length}\"\n        \"409\":\n          description: Conflict\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                DUPLICATE_UVCI:\n                  description: DUPLICATE_UVCI\n                  value: \"{\\\"errorCode\\\": 480, \\\"errorMessage\\\": Duplicate UVCI.}\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                INVALID_UVCI:\n                  description: INVALID_UVCI\n                  value: \"{\\\"errorCode\\\": 470, \\\"errorMessage\\\": Invalid UVCI format.}\"\n        \"201\":\n          description: CREATED\n  /api/v1/covidcertificate/revoke/mass-revocation:\n    post:\n      tags:\n      - covid-certificate-revocation-controller\n      summary: Executes a mass-revocation of the given UVCIs.\n      description: \"Revokes all revokable UVCIs of list of UVCIs. Performs checks\\\n        \\ if the UVCI is well formatted, known and not yet revoked.\"\n      operationId: certificateMassRevocationCheck\n      parameters:\n      - name: X-Signature\n        in: header\n        description: \"Base64 encoded hash of the canonicalized body, generated with\\\n          \\ the `SHA256withRSA` algorithm signed with the private key of the certificate\\\n          \\ issued by \\\"SwissGov Regular CA 01\\\". See [documentation](https://github.com/admin-ch/CovidCertificate-Apidoc#content-signature)\\\n          \\ on Github.\"\n        required: true\n        schema:\n          type: string\n          format: Base64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RevocationListDto'\n        required: true\n      responses:\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                INVALID_BEARER:\n                  description: INVALID_BEARER\n                  value: \"{\\\"errorCode\\\": 492, \\\"errorMessage\\\": Invalid OTP}\"\n                MISSING_BEARER_JSON:\n                  description: MISSING_BEARER_JSON\n                  value: \"{\\\"errorCode\\\": 493, \\\"errorMessage\\\": Missing OTP}\"\n                INVALID_SIGNATURE:\n                  description: INVALID_SIGNATURE\n                  value: \"{\\\"errorCode\\\": 490, \\\"errorMessage\\\": Integrity check failed,\\\n                    \\ the body hash does not match the hash in the header}\"\n                SIGNATURE_PARSE_ERROR:\n                  description: SIGNATURE_PARSE_ERROR\n                  value: \"{\\\"errorCode\\\": 491, \\\"errorMessage\\\": Signature could not\\\n                    \\ be parsed}\"\n                INVALID_IDENTITY_USER:\n                  description: INVALID_IDENTITY_USER\n                  value: \"{\\\"errorCode\\\": 494, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user}\"\n                INVALID_IDENTITY_USER_ROLE:\n                  description: INVALID_IDENTITY_USER_ROLE\n                  value: \"{\\\"errorCode\\\": 495, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user role}\"\n                INVALID_OTP_LENGTH:\n                  description: INVALID_OTP_LENGTH\n                  value: \"{\\\"errorCode\\\": 496, \\\"errorMessage\\\": Invalid OTP length}\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                INVALID_SIZE_OF_UVCI_LIST:\n                  description: INVALID_SIZE_OF_UVCI_LIST\n                  value: \"{\\\"errorCode\\\": 472, \\\"errorMessage\\\": Size of uvci list\\\n                    \\ is not valid. Max 100 uvcis allowed.}\"\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RevocationListResponseDto'\n  /api/v1/covidcertificate/recovery:\n    post:\n      tags:\n      - covid-certificate-generation-controller\n      summary: Creates a recovery certificate for the given data.\n      description: Creates a recovery certificate as an QR-Code and PDF. Performs\n        an integrity check for each request based on headers and body.\n      operationId: createRecoveryCertificate\n      parameters:\n      - name: X-Signature\n        in: header\n        description: \"Base64 encoded hash of the canonicalized body, generated with\\\n          \\ the `SHA256withRSA` algorithm signed with the private key of the certificate\\\n          \\ issued by \\\"SwissGov Regular CA 01\\\". See [documentation](https://github.com/admin-ch/CovidCertificate-Apidoc#content-signature)\\\n          \\ on Github.\"\n        required: true\n        schema:\n          type: string\n          format: Base64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RecoveryCertificateCreateDto'\n        required: true\n      responses:\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                NO_PERSON_DATA:\n                  description: NO_PERSON_DATA\n                  value: \"{\\\"errorCode\\\": 452, \\\"errorMessage\\\": No person data was\\\n                    \\ specified}\"\n                INVALID_DATE_OF_BIRTH:\n                  description: INVALID_DATE_OF_BIRTH\n                  value: \"{\\\"errorCode\\\": 453, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Must be younger than 1900-01-01}\"\n                INVALID_DATE_OF_BIRTH_IN_FUTURE:\n                  description: INVALID_DATE_OF_BIRTH_IN_FUTURE\n                  value: \"{\\\"errorCode\\\": 489, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Date cannot be in the future}\"\n                INVALID_GIVEN_NAME:\n                  description: INVALID_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 458, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_GIVEN_NAME:\n                  description: INVALID_STANDARDISED_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 477, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ The standardised given name exceeds 80 chars}\"\n                INVALID_FAMILY_NAME:\n                  description: INVALID_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 459, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_FAMILY_NAME:\n                  description: INVALID_STANDARDISED_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 478, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ The standardised family name exceeds 80 chars}\"\n                INVALID_DATE_OF_FIRST_POSITIVE_TEST_RESULT:\n                  description: INVALID_DATE_OF_FIRST_POSITIVE_TEST_RESULT\n                  value: \"{\\\"errorCode\\\": 466, \\\"errorMessage\\\": Invalid date of first\\\n                    \\ positive test result}\"\n                INVALID_COUNTRY_OF_TEST:\n                  description: INVALID_COUNTRY_OF_TEST\n                  value: \"{\\\"errorCode\\\": 467, \\\"errorMessage\\\": Invalid country of\\\n                    \\ test}\"\n                INVALID_LANGUAGE:\n                  description: INVALID_LANGUAGE\n                  value: \"{\\\"errorCode\\\": 469, \\\"errorMessage\\\": The given language\\\n                    \\ does not match any of the supported languages: de, it, fr!}\"\n                INVALID_RECOVERY_INFO:\n                  description: INVALID_RECOVERY_INFO\n                  value: \"{\\\"errorCode\\\": 465, \\\"errorMessage\\\": Invalid recovery\\\n                    \\ info! Exactly one element is expected in the array.}\"\n                INVALID_ADDRESS:\n                  description: INVALID_ADDRESS\n                  value: \"{\\\"errorCode\\\": 474, \\\"errorMessage\\\": Paper-based delivery\\\n                    \\ requires a valid address.}\"\n                DUPLICATE_DELIVERY_METHOD:\n                  description: DUPLICATE_DELIVERY_METHOD\n                  value: \"{\\\"errorCode\\\": 475, \\\"errorMessage\\\": Delivery method can\\\n                    \\ either be InApp or Mail, but not both.}\"\n                INVALID_APP_CODE:\n                  description: INVALID_APP_CODE\n                  value: \"{\\\"errorCode\\\": 479, \\\"errorMessage\\\": App code is in an\\\n                    \\ invalid format.}\"\n        \"403\":\n          description: \"All certificate creation endpoints can be toggled, when an\\\n            \\ endpoint is disabled, the backend respond with a HTTP 403 Forbidden\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                INVALID_BEARER:\n                  description: INVALID_BEARER\n                  value: \"{\\\"errorCode\\\": 492, \\\"errorMessage\\\": Invalid OTP}\"\n                MISSING_BEARER_JSON:\n                  description: MISSING_BEARER_JSON\n                  value: \"{\\\"errorCode\\\": 493, \\\"errorMessage\\\": Missing OTP}\"\n                INVALID_SIGNATURE:\n                  description: INVALID_SIGNATURE\n                  value: \"{\\\"errorCode\\\": 490, \\\"errorMessage\\\": Integrity check failed,\\\n                    \\ the body hash does not match the hash in the header}\"\n                SIGNATURE_PARSE_ERROR:\n                  description: SIGNATURE_PARSE_ERROR\n                  value: \"{\\\"errorCode\\\": 491, \\\"errorMessage\\\": Signature could not\\\n                    \\ be parsed}\"\n                INVALID_IDENTITY_USER:\n                  description: INVALID_IDENTITY_USER\n                  value: \"{\\\"errorCode\\\": 494, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user}\"\n                INVALID_IDENTITY_USER_ROLE:\n                  description: INVALID_IDENTITY_USER_ROLE\n                  value: \"{\\\"errorCode\\\": 495, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user role}\"\n                INVALID_OTP_LENGTH:\n                  description: INVALID_OTP_LENGTH\n                  value: \"{\\\"errorCode\\\": 496, \\\"errorMessage\\\": Invalid OTP length}\"\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CovidCertificateCreateResponseDto'\n  /api/v1/covidcertificate/recovery-rat:\n    post:\n      tags:\n      - covid-certificate-generation-controller\n      summary: Creates a Rapid-Antigen-Test (RAT) based recovery certificate for the\n        given data.\n      description: Creates a Rapid-Antigen-Test (RAT) based recovery certificate for\n        the given data in form of a Pdf document and a QR-Code image.\n      operationId: createRecoveryRatCertificate\n      parameters:\n      - name: X-Signature\n        in: header\n        description: \"Base64 encoded hash of the canonicalized body, generated with\\\n          \\ the `SHA256withRSA` algorithm signed with the private key of the certificate\\\n          \\ issued by \\\"SwissGov Regular CA 01\\\". See [documentation](https://github.com/admin-ch/CovidCertificate-Apidoc#content-signature)\\\n          \\ on Github.\"\n        required: true\n        schema:\n          type: string\n          format: Base64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RecoveryRatCertificateCreateDto'\n        required: true\n      responses:\n        \"403\":\n          description: \"All certificate creation endpoints can be toggled, when an\\\n            \\ endpoint is disabled, the backend respond with a HTTP 403 Forbidden\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                INVALID_BEARER:\n                  description: INVALID_BEARER\n                  value: \"{\\\"errorCode\\\": 492, \\\"errorMessage\\\": Invalid OTP}\"\n                MISSING_BEARER_JSON:\n                  description: MISSING_BEARER_JSON\n                  value: \"{\\\"errorCode\\\": 493, \\\"errorMessage\\\": Missing OTP}\"\n                INVALID_SIGNATURE:\n                  description: INVALID_SIGNATURE\n                  value: \"{\\\"errorCode\\\": 490, \\\"errorMessage\\\": Integrity check failed,\\\n                    \\ the body hash does not match the hash in the header}\"\n                SIGNATURE_PARSE_ERROR:\n                  description: SIGNATURE_PARSE_ERROR\n                  value: \"{\\\"errorCode\\\": 491, \\\"errorMessage\\\": Signature could not\\\n                    \\ be parsed}\"\n                INVALID_IDENTITY_USER:\n                  description: INVALID_IDENTITY_USER\n                  value: \"{\\\"errorCode\\\": 494, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user}\"\n                INVALID_IDENTITY_USER_ROLE:\n                  description: INVALID_IDENTITY_USER_ROLE\n                  value: \"{\\\"errorCode\\\": 495, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user role}\"\n                INVALID_OTP_LENGTH:\n                  description: INVALID_OTP_LENGTH\n                  value: \"{\\\"errorCode\\\": 496, \\\"errorMessage\\\": Invalid OTP length}\"\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                NO_PERSON_DATA:\n                  description: NO_PERSON_DATA\n                  value: \"{\\\"errorCode\\\": 452, \\\"errorMessage\\\": No person data was\\\n                    \\ specified}\"\n                INVALID_DATE_OF_BIRTH:\n                  description: INVALID_DATE_OF_BIRTH\n                  value: \"{\\\"errorCode\\\": 453, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Must be younger than 1900-01-01}\"\n                INVALID_DATE_OF_BIRTH_IN_FUTURE:\n                  description: INVALID_DATE_OF_BIRTH_IN_FUTURE\n                  value: \"{\\\"errorCode\\\": 489, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Date cannot be in the future}\"\n                INVALID_GIVEN_NAME:\n                  description: INVALID_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 458, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_GIVEN_NAME:\n                  description: INVALID_STANDARDISED_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 477, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ The standardised given name exceeds 80 chars}\"\n                INVALID_FAMILY_NAME:\n                  description: INVALID_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 459, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_FAMILY_NAME:\n                  description: INVALID_STANDARDISED_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 478, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ The standardised family name exceeds 80 chars}\"\n                INVALID_DATE_OF_FIRST_POSITIVE_TEST_RESULT:\n                  description: INVALID_DATE_OF_FIRST_POSITIVE_TEST_RESULT\n                  value: \"{\\\"errorCode\\\": 466, \\\"errorMessage\\\": Invalid date of first\\\n                    \\ positive test result}\"\n                INVALID_LANGUAGE:\n                  description: INVALID_LANGUAGE\n                  value: \"{\\\"errorCode\\\": 469, \\\"errorMessage\\\": The given language\\\n                    \\ does not match any of the supported languages: de, it, fr!}\"\n                MISSING_RECOVERY_RAT_INFO:\n                  description: MISSING_RECOVERY_RAT_INFO\n                  value: \"{\\\"errorCode\\\": 432, \\\"errorMessage\\\": Property recoveryRatInfo\\\n                    \\ is missing!}\"\n                INVALID_ADDRESS:\n                  description: INVALID_ADDRESS\n                  value: \"{\\\"errorCode\\\": 474, \\\"errorMessage\\\": Paper-based delivery\\\n                    \\ requires a valid address.}\"\n                DUPLICATE_DELIVERY_METHOD:\n                  description: DUPLICATE_DELIVERY_METHOD\n                  value: \"{\\\"errorCode\\\": 475, \\\"errorMessage\\\": Delivery method can\\\n                    \\ either be InApp or Mail, but not both.}\"\n                INVALID_APP_CODE:\n                  description: INVALID_APP_CODE\n                  value: \"{\\\"errorCode\\\": 479, \\\"errorMessage\\\": App code is in an\\\n                    \\ invalid format.}\"\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CovidCertificateCreateResponseDto'\n  /api/v1/covidcertificate/antibody:\n    post:\n      tags:\n      - covid-certificate-generation-controller\n      summary: Creates an antibody certificate for the given data.\n      description: Creates an antibody certificate as a QR-Code and PDF. Performs\n        an integrity check for each request based on headers and body.\n      operationId: createAntibodyCertificate\n      parameters:\n      - name: X-Signature\n        in: header\n        description: \"Base64 encoded hash of the canonicalized body, generated with\\\n          \\ the `SHA256withRSA` algorithm signed with the private key of the certificate\\\n          \\ issued by \\\"SwissGov Regular CA 01\\\". See [documentation](https://github.com/admin-ch/CovidCertificate-Apidoc#content-signature)\\\n          \\ on Github.\"\n        required: true\n        schema:\n          type: string\n          format: Base64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AntibodyCertificateCreateDto'\n        required: true\n      responses:\n        \"400\":\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                NO_PERSON_DATA:\n                  description: NO_PERSON_DATA\n                  value: \"{\\\"errorCode\\\": 452, \\\"errorMessage\\\": No person data was\\\n                    \\ specified}\"\n                INVALID_DATE_OF_BIRTH:\n                  description: INVALID_DATE_OF_BIRTH\n                  value: \"{\\\"errorCode\\\": 453, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Must be younger than 1900-01-01}\"\n                INVALID_DATE_OF_BIRTH_IN_FUTURE:\n                  description: INVALID_DATE_OF_BIRTH_IN_FUTURE\n                  value: \"{\\\"errorCode\\\": 489, \\\"errorMessage\\\": Invalid dateOfBirth!\\\n                    \\ Date cannot be in the future}\"\n                INVALID_GIVEN_NAME:\n                  description: INVALID_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 458, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_GIVEN_NAME:\n                  description: INVALID_STANDARDISED_GIVEN_NAME\n                  value: \"{\\\"errorCode\\\": 477, \\\"errorMessage\\\": Invalid given name!\\\n                    \\ The standardised given name exceeds 80 chars}\"\n                INVALID_FAMILY_NAME:\n                  description: INVALID_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 459, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ Must not exceed 80 chars}\"\n                INVALID_STANDARDISED_FAMILY_NAME:\n                  description: INVALID_STANDARDISED_FAMILY_NAME\n                  value: \"{\\\"errorCode\\\": 478, \\\"errorMessage\\\": Invalid family name!\\\n                    \\ The standardised family name exceeds 80 chars}\"\n                INVALID_SAMPLE_OR_RESULT_DATE_TIME:\n                  description: INVALID_SAMPLE_OR_RESULT_DATE_TIME\n                  value: \"{\\\"errorCode\\\": 464, \\\"errorMessage\\\": Invalid sample or\\\n                    \\ result date time! Sample date must be before current date and\\\n                    \\ before result date}\"\n                INVALID_LANGUAGE:\n                  description: INVALID_LANGUAGE\n                  value: \"{\\\"errorCode\\\": 469, \\\"errorMessage\\\": The given language\\\n                    \\ does not match any of the supported languages: de, it, fr!}\"\n                INVALID_ANTIBODY_INFO:\n                  description: INVALID_ANTIBODY_INFO\n                  value: \"{\\\"errorCode\\\": 497, \\\"errorMessage\\\": Invalid antibody\\\n                    \\ info! Exactly one element is expected in the array.}\"\n                INVALID_ADDRESS:\n                  description: INVALID_ADDRESS\n                  value: \"{\\\"errorCode\\\": 474, \\\"errorMessage\\\": Paper-based delivery\\\n                    \\ requires a valid address.}\"\n                DUPLICATE_DELIVERY_METHOD:\n                  description: DUPLICATE_DELIVERY_METHOD\n                  value: \"{\\\"errorCode\\\": 475, \\\"errorMessage\\\": Delivery method can\\\n                    \\ either be InApp or Mail, but not both.}\"\n                INVALID_APP_CODE:\n                  description: INVALID_APP_CODE\n                  value: \"{\\\"errorCode\\\": 479, \\\"errorMessage\\\": App code is in an\\\n                    \\ invalid format.}\"\n        \"403\":\n          description: \"All certificate creation endpoints can be toggled, when an\\\n            \\ endpoint is disabled, the backend respond with a HTTP 403 Forbidden\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RestError'\n              examples:\n                INVALID_BEARER:\n                  description: INVALID_BEARER\n                  value: \"{\\\"errorCode\\\": 492, \\\"errorMessage\\\": Invalid OTP}\"\n                MISSING_BEARER_JSON:\n                  description: MISSING_BEARER_JSON\n                  value: \"{\\\"errorCode\\\": 493, \\\"errorMessage\\\": Missing OTP}\"\n                INVALID_SIGNATURE:\n                  description: INVALID_SIGNATURE\n                  value: \"{\\\"errorCode\\\": 490, \\\"errorMessage\\\": Integrity check failed,\\\n                    \\ the body hash does not match the hash in the header}\"\n                SIGNATURE_PARSE_ERROR:\n                  description: SIGNATURE_PARSE_ERROR\n                  value: \"{\\\"errorCode\\\": 491, \\\"errorMessage\\\": Signature could not\\\n                    \\ be parsed}\"\n                INVALID_IDENTITY_USER:\n                  description: INVALID_IDENTITY_USER\n                  value: \"{\\\"errorCode\\\": 494, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user}\"\n                INVALID_IDENTITY_USER_ROLE:\n                  description: INVALID_IDENTITY_USER_ROLE\n                  value: \"{\\\"errorCode\\\": 495, \\\"errorMessage\\\": Invalid identity\\\n                    \\ user role}\"\n                INVALID_OTP_LENGTH:\n                  description: INVALID_OTP_LENGTH\n                  value: \"{\\\"errorCode\\\": 496, \\\"errorMessage\\\": Invalid OTP length}\"\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CovidCertificateCreateResponseDto'\n  /api/v1/valuesets/vaccines:\n    get:\n      tags:\n      - value-sets-controller\n      summary: Gets a list of all vaccines.\n      description: Gets a list of all vaccines based on the official list of the EU.\n        Performs an integrity check for each request based on headers and body.\n      operationId: vaccines\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VaccineDto'\n  /api/v1/valuesets/rapid-tests:\n    get:\n      tags:\n      - value-sets-controller\n      summary: Gets a list of all rapid tests.\n      description: Gets a list of all rapid tests based on the official list of the\n        EU. Performs an integrity check for each request based on headers and body.\n      operationId: rapidTests\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RapidTestDto'\n  /api/v1/valuesets/issuable-vaccines:\n    get:\n      tags:\n      - value-sets-controller\n      summary: Gets a list of all issuable vaccines.\n      description: Gets a list of all issuable vaccines accepted by the BAG based\n        on the official list of the EU. Performs an integrity check for each request\n        based on headers and body.\n      operationId: issuableVaccines\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IssuableVaccineDto'\n  /api/v1/valuesets/issuable-vaccines/{systemSource}:\n    get:\n      tags:\n      - value-sets-controller\n      summary: Gets a list of all issuable vaccines.\n      description: Gets a list of all issuable vaccines accepted by the BAG based\n        on the official list of the EU. Performs an integrity check for each request\n        based on headers and body.\n      operationId: issuableVaccines_1\n      parameters:\n      - name: systemSource\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IssuableVaccineDto'\n  /api/v1/valuesets/issuable-rapid-tests:\n    get:\n      tags:\n      - value-sets-controller\n      summary: Gets a list of all issuable rapid tests.\n      description: Gets a list of all issuable rapid tests accepted by the BAG based\n        on the official list of the EU. Performs an integrity check for each request\n        based on headers and body.\n      operationId: issuableRapidTests\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IssuableRapidTestDto'\n  /api/v1/valuesets/countries:\n    get:\n      tags:\n      - value-sets-controller\n      summary: Gets a list of all countryCodes for every language.\n      description: Gets a list of all countryCodes for every supported language. Performs\n        an integrity check for each request based on headers and body.\n      operationId: countryCodes\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CountryCodesDto'\n  /api/v1/valuesets/countries/{language}:\n    get:\n      tags:\n      - value-sets-controller\n      summary: Gets a list of all countryCodes for a specific language.\n      description: Gets a list of all countryCodes for a specific supported language.\n        Performs an integrity check for each request based on headers and body.\n      operationId: countryCodesByLanguage\n      parameters:\n      - name: language\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CountryCodeDto'\n  /api/v1/ping:\n    get:\n      tags:\n      - app-controller\n      operationId: hello\n      responses:\n        \"200\":\n          description: OK\n          content:\n            '*/*':\n              schema:\n                type: string\ncomponents:\n  schemas:\n    CovidCertificateAddressDto:\n      required:\n      - cantonCodeSender\n      - city\n      - streetAndNr\n      - zipCode\n      type: object\n      properties:\n        streetAndNr:\n          maxLength: 128\n          minLength: 1\n          type: string\n          description: Street and number of the certificate holder.\n          example: Musterweg 4b\n        zipCode:\n          maxLength: 4\n          minLength: 4\n          type: integer\n          format: int32\n          example: 3000\n        city:\n          maxLength: 128\n          minLength: 1\n          type: string\n          example: Bern\n        cantonCodeSender:\n          type: string\n          description: Abbreviation of the canton issuing the certificate. This will\n            be used as the sender of the paper based delivery.\n          example: BE\n      description: Address of the recipient. A printout of the certificate will be\n        sent to the certificate holder if this parameter is passed. The first line\n        of the address is automatically filled with the givenName and familyName from\n        the name attribute. Can not be combined with inAppDeliveryCode.\n    CovidCertificatePersonNameDto:\n      type: object\n      properties:\n        familyName:\n          type: string\n          description: \"family name of the covid certificate owner. Format: maxLength:\\\n            \\ 80 CHAR\"\n          example: Rochat\n        givenName:\n          type: string\n          description: \"first name of the covid certificate owner. Format: maxLength:\\\n            \\ 80 CHAR\"\n          example: Céline\n    VaccinationCertificateCreateDto:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/CovidCertificatePersonNameDto'\n        dateOfBirth:\n          type: string\n          description: \"birthdate of the covid certificate owner. Format: ISO 8601\\\n            \\ date without time (e.g. 1985-09-20) OR YYYY-MM (e.g. 1985-09) OR YYYY\\\n            \\ (e.g. 1985).\"\n          example: 1985-09-20\n        language:\n          type: string\n          description: \"language for the PDF (together with english). Accepted languages\\\n            \\ are: de, it, fr, rm\"\n          example: de\n        otp:\n          type: string\n        address:\n          $ref: '#/components/schemas/CovidCertificateAddressDto'\n        appCode:\n          maxLength: 9\n          minLength: 9\n          type: string\n          description: Code to deliver the certificate directly to the app. Can not\n            be combined with address.\n        vaccinationInfo:\n          type: array\n          items:\n            $ref: '#/components/schemas/VaccinationCertificateDataDto'\n    VaccinationCertificateDataDto:\n      type: object\n      properties:\n        medicinalProductCode:\n          type: string\n          description: name of the medicinal product as registered in the country.\n          example: EU/1/20/1507\n        numberOfDoses:\n          type: integer\n          description: number in a series of doses.\n          format: int32\n          example: 2\n        totalNumberOfDoses:\n          type: integer\n          description: total series of doses.\n          format: int32\n          example: 2\n        vaccinationDate:\n          type: string\n          description: \"date of vaccination. Format: ISO 8601 date without time.\"\n          format: date\n          example: 2021-05-14\n        countryOfVaccination:\n          type: string\n          description: \"the country in which the covid certificate owner has been\\\n            \\ vaccinated. Format: string (2 chars according to ISO 3166 Country Codes).\"\n          example: CH\n    RestError:\n      type: object\n      properties:\n        errorCode:\n          type: integer\n          format: int32\n        errorMessage:\n          type: string\n    CovidCertificateCreateResponseDto:\n      type: object\n      properties:\n        pdf:\n          type: string\n          format: byte\n        qrCode:\n          type: string\n          format: byte\n        uvci:\n          type: string\n        appDeliveryError:\n          $ref: '#/components/schemas/RestError'\n    VaccinationTouristCertificateCreateDto:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/CovidCertificatePersonNameDto'\n        dateOfBirth:\n          type: string\n          description: \"birthdate of the covid certificate owner. Format: ISO 8601\\\n            \\ date without time (e.g. 1985-09-20) OR YYYY-MM (e.g. 1985-09) OR YYYY\\\n            \\ (e.g. 1985).\"\n          example: 1985-09-20\n        language:\n          type: string\n          description: \"language for the PDF (together with english). Accepted languages\\\n            \\ are: de, it, fr, rm\"\n          example: de\n        otp:\n          type: string\n        address:\n          $ref: '#/components/schemas/CovidCertificateAddressDto'\n        appCode:\n          maxLength: 9\n          minLength: 9\n          type: string\n          description: Code to deliver the certificate directly to the app. Can not\n            be combined with address.\n        vaccinationTouristInfo:\n          type: array\n          items:\n            $ref: '#/components/schemas/VaccinationTouristCertificateDataDto'\n    VaccinationTouristCertificateDataDto:\n      type: object\n      properties:\n        medicinalProductCode:\n          type: string\n          description: name of the medicinal product as registered in the country.\n          example: EU/1/20/1507\n        numberOfDoses:\n          type: integer\n          description: number in a series of doses.\n          format: int32\n          example: 2\n        totalNumberOfDoses:\n          type: integer\n          description: total series of doses.\n          format: int32\n          example: 2\n        vaccinationDate:\n          type: string\n          description: \"date of vaccination. Format: ISO 8601 date without time.\"\n          format: date\n          example: 2021-05-14\n        countryOfVaccination:\n          type: string\n          description: \"the country in which the covid certificate owner has been\\\n            \\ vaccinated. Format: string (2 chars according to ISO 3166 Country Codes).\"\n          example: CH\n    TestCertificateCreateDto:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/CovidCertificatePersonNameDto'\n        dateOfBirth:\n          type: string\n          description: \"birthdate of the covid certificate owner. Format: ISO 8601\\\n            \\ date without time (e.g. 1985-09-20) OR YYYY-MM (e.g. 1985-09) OR YYYY\\\n            \\ (e.g. 1985).\"\n          example: 1985-09-20\n        language:\n          type: string\n          description: \"language for the PDF (together with english). Accepted languages\\\n            \\ are: de, it, fr, rm\"\n          example: de\n        otp:\n          type: string\n        appCode:\n          maxLength: 9\n          minLength: 9\n          type: string\n          description: Code to deliver the certificate directly to the app. Can not\n            be combined with address.\n        testInfo:\n          type: array\n          items:\n            $ref: '#/components/schemas/TestCertificateDataDto'\n    TestCertificateDataDto:\n      type: object\n      properties:\n        typeCode:\n          type: string\n          description: \"type of test. This field is only mandatory when it is a PCR\\\n            \\ test. If given with manufacturerCode as well, they must match otherwise\\\n            \\ there will be a 400 BAD REQUEST.\"\n          example: LP217198-3\n        manufacturerCode:\n          type: string\n          description: \"test manufacturer code. This should only be sent when it is\\\n            \\ not a PCR test, otherwise there will be a 400 BAD REQUEST.\"\n          example: \"1232\"\n        sampleDateTime:\n          type: string\n          description: \"date and time of the test sample collection. Format: ISO 8601\\\n            \\ date incl. time.\"\n          format: date-time\n          example: 2020-09-24T17:29:41Z\n        testingCentreOrFacility:\n          type: string\n          description: \"name of centre or facility. Format: string, maxLength: 80\\\n            \\ CHAR.\"\n          example: Walk-in-Lyss AG\n        memberStateOfTest:\n          type: string\n          description: \"the country in which the covid certificate owner has been\\\n            \\ tested. Format: string (2 chars according to ISO 3166 Country Codes).\"\n          example: CH\n    RevocationDto:\n      type: object\n      properties:\n        uvci:\n          type: string\n          description: UVCI of certificate to be revoked.\n          example: urn:uvci:01:CH:97DAB5E31B589AF3CAE2F53F\n        fraud:\n          type: boolean\n        otp:\n          type: string\n    RevocationListDto:\n      type: object\n      properties:\n        uvcis:\n          type: array\n          description: Multiple UVCI with fraud flag of certificate to be revoked.\n          items:\n            $ref: '#/components/schemas/UvciForRevocationDto'\n        otp:\n          type: string\n    UvciForRevocationDto:\n      type: object\n      properties:\n        uvci:\n          type: string\n          description: UVCI of certificate to be revoked.\n        fraud:\n          type: boolean\n          description: Flag to indicate if certificate is revoked due to fraud reasons.\n      description: Multiple UVCI with fraud flag of certificate to be revoked.\n    RevocationListResponseDto:\n      type: object\n      properties:\n        uvcisToErrorMessage:\n          type: object\n          additionalProperties:\n            type: string\n        revokedUvcis:\n          type: array\n          items:\n            type: string\n    RecoveryCertificateCreateDto:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/CovidCertificatePersonNameDto'\n        dateOfBirth:\n          type: string\n          description: \"birthdate of the covid certificate owner. Format: ISO 8601\\\n            \\ date without time (e.g. 1985-09-20) OR YYYY-MM (e.g. 1985-09) OR YYYY\\\n            \\ (e.g. 1985).\"\n          example: 1985-09-20\n        language:\n          type: string\n          description: \"language for the PDF (together with english). Accepted languages\\\n            \\ are: de, it, fr, rm\"\n          example: de\n        otp:\n          type: string\n        address:\n          $ref: '#/components/schemas/CovidCertificateAddressDto'\n        appCode:\n          maxLength: 9\n          minLength: 9\n          type: string\n          description: Code to deliver the certificate directly to the app. Can not\n            be combined with address.\n        recoveryInfo:\n          type: array\n          items:\n            $ref: '#/components/schemas/RecoveryCertificateDataDto'\n    RecoveryCertificateDataDto:\n      type: object\n      properties:\n        dateOfFirstPositiveTestResult:\n          type: string\n          description: \"date when the sample for the test was collected that led to\\\n            \\ positive test obtained through a procedure established by a public health\\\n            \\ authority. Format: ISO 8601 date without time.\"\n          format: date\n          example: 2021-10-03\n        countryOfTest:\n          type: string\n          description: \"the country in which the covid certificate owner has been\\\n            \\ tested. Format: string (2 chars according to ISO 3166 Country Codes).\"\n          example: CH\n    RecoveryRatCertificateCreateDto:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/CovidCertificatePersonNameDto'\n        dateOfBirth:\n          type: string\n          description: \"birthdate of the covid certificate owner. Format: ISO 8601\\\n            \\ date without time (e.g. 1985-09-20) OR YYYY-MM (e.g. 1985-09) OR YYYY\\\n            \\ (e.g. 1985).\"\n          example: 1985-09-20\n        language:\n          type: string\n          description: \"language for the PDF (together with english). Accepted languages\\\n            \\ are: de, it, fr, rm\"\n          example: de\n        otp:\n          type: string\n        appCode:\n          maxLength: 9\n          minLength: 9\n          type: string\n          description: Code to deliver the certificate directly to the app. Can not\n            be combined with address.\n        testInfo:\n          type: array\n          items:\n            $ref: '#/components/schemas/RecoveryRatCertificateDataDto'\n    RecoveryRatCertificateDataDto:\n      type: object\n      properties:\n        typeCode:\n          type: string\n          description: type of test. This field is optional if manufacturer code is\n            present otherwise it must be LP217198-3 (RAPID-ANTIGEN-TEST).\n          example: LP217198-3\n        manufacturerCode:\n          type: string\n          description: \"test manufacturer code. This should only be sent when it is\\\n            \\ not a PCR test, otherwise there will be a 400 BAD REQUEST.\"\n          example: \"1232\"\n        sampleDateTime:\n          type: string\n          description: \"date and time of the test sample collection, can't be before\\\n            \\ 2022-01-24. Format: ISO 8601 date incl. time.\"\n          format: date-time\n          example: 2022-01-24T17:29:41Z\n        testingCentreOrFacility:\n          type: string\n          description: \"name of centre or facility. Format: string, maxLength: 80\\\n            \\ CHAR.\"\n          example: Walk-in-Lyss AG\n        memberStateOfTest:\n          type: string\n          description: \"the country in which the covid certificate owner has been\\\n            \\ tested. Format: string (2 chars according to ISO 3166 Country Codes).\"\n          example: CH\n    AntibodyCertificateCreateDto:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/CovidCertificatePersonNameDto'\n        dateOfBirth:\n          type: string\n          description: \"birthdate of the covid certificate owner. Format: ISO 8601\\\n            \\ date without time (e.g. 1985-09-20) OR YYYY-MM (e.g. 1985-09) OR YYYY\\\n            \\ (e.g. 1985).\"\n          example: 1985-09-20\n        language:\n          type: string\n          description: \"language for the PDF (together with english). Accepted languages\\\n            \\ are: de, it, fr, rm\"\n          example: de\n        otp:\n          type: string\n        address:\n          $ref: '#/components/schemas/CovidCertificateAddressDto'\n        appCode:\n          maxLength: 9\n          minLength: 9\n          type: string\n          description: Code to deliver the certificate directly to the app. Can not\n            be combined with address.\n        antibodyInfo:\n          type: array\n          items:\n            $ref: '#/components/schemas/AntibodyCertificateDataDto'\n    AntibodyCertificateDataDto:\n      type: object\n      properties:\n        sampleDate:\n          type: string\n          description: \"date when the sample for the test was collected that led to\\\n            \\ serology positive test obtained through a procedure established by a\\\n            \\ public health authority. Format: ISO 8601 date without time.\"\n          format: date\n          example: 2021-10-03\n        testingCenterOrFacility:\n          maxLength: 80\n          type: string\n          description: ' the Swissmedic authorization number (mandatory) of the laboratory\n            + name of the laboratory (optional).'\n          example: \"512345-123456789, SwissLabTest Center Zürich\"\n    VaccineDto:\n      type: object\n      properties:\n        productCode:\n          type: string\n          description: Code of vaccination as string.\n          example: EU/1/20/1507\n        productDisplay:\n          type: string\n          description: Display name of vaccination as string.\n          example: Spikevax (previously COVID-19 Vaccine Moderna)\n        prophylaxisCode:\n          type: string\n          description: Code of prophylaxis type as string.\n          example: \"1119349007\"\n        prophylaxisDisplay:\n          type: string\n          description: Display name of prophylaxis type as string.\n          example: SARS-CoV-2 mRNA vaccine\n        authHolderCode:\n          type: string\n          description: Code of authorization holder as string.\n          example: ORG-100031184\n        authHolderDisplay:\n          type: string\n          description: Display name of authorization holder as string.\n          example: Moderna Biotech Spain S.L.\n        issuable:\n          type: string\n          description: \"This attribute tells us if a vaccine is issuable in CH_ONLY,\\\n            \\ CH_AND_ABROAD or ABROAD_ONLY.\"\n          example: CH_AND_ABROAD\n        active:\n          type: boolean\n          description: If vaccination is accepted by the BAG and the EU.\n          example: true\n    RapidTestDto:\n      type: object\n      properties:\n        code:\n          type: string\n          description: Code of rapid test as string.\n          example: \"1232\"\n        display:\n          type: string\n          description: Manufacturer and display name of rapid test as string.\n          example: \"Abbott Rapid Diagnostics, Panbio Covid-19 Ag Rapid Test\"\n        validUntil:\n          type: string\n          description: Deadline after which the rapid-test can no longer be used to\n            establish a certificate.\n          format: date-time\n          example: 2022-01-06T00:00:00+01:00\n        active:\n          type: boolean\n          description: If rapid test is accepted by the BAG and the EU.\n          example: true\n    IssuableVaccineDto:\n      type: object\n      properties:\n        productCode:\n          type: string\n          description: Code of vaccination as string.\n          example: EU/1/20/1507\n        productDisplay:\n          type: string\n          description: Display name of vaccination as string.\n          example: Spikevax (previously COVID-19 Vaccine Moderna)\n        prophylaxisCode:\n          type: string\n          description: Code of prophylaxis type as string.\n          example: \"1119349007\"\n        prophylaxisDisplay:\n          type: string\n          description: Display name of prophylaxis type as string.\n          example: SARS-CoV-2 mRNA vaccine\n        authHolderCode:\n          type: string\n          description: Code of authorization holder as string.\n          example: ORG-100031184\n        authHolderDisplay:\n          type: string\n          description: Display name of authorization holder as string.\n          example: Moderna Biotech Spain S.L.\n        issuable:\n          type: string\n          description: \"This attribute tells us if a vaccine is issuable in CH_ONLY,\\\n            \\ CH_AND_ABROAD or ABROAD_ONLY.\"\n          example: CH_AND_ABROAD\n    IssuableRapidTestDto:\n      type: object\n      properties:\n        code:\n          type: string\n          description: Code of rapid test as string.\n          example: \"1232\"\n        display:\n          type: string\n          description: Manufacturer and display name of rapid test as string.\n          example: \"Abbott Rapid Diagnostics, Panbio Covid-19 Ag Rapid Test\"\n        validUntil:\n          type: string\n          description: Deadline after which the rapid-test can no longer be used to\n            establish a certificate.\n          format: date-time\n          example: 2022-01-06T00:00:00+01:00\n    CountryCodeDto:\n      type: object\n      properties:\n        display:\n          type: string\n        lang:\n          type: string\n        active:\n          type: boolean\n        version:\n          type: string\n        system:\n          type: string\n        short:\n          type: string\n    CountryCodesDto:\n      type: object\n      properties:\n        de:\n          type: array\n          items:\n            $ref: '#/components/schemas/CountryCodeDto'\n        en:\n          type: array\n          items:\n            $ref: '#/components/schemas/CountryCodeDto'\n        fr:\n          type: array\n          items:\n            $ref: '#/components/schemas/CountryCodeDto'\n        it:\n          type: array\n          items:\n            $ref: '#/components/schemas/CountryCodeDto'\n        rm:\n          type: array\n          items:\n            $ref: '#/components/schemas/CountryCodeDto'\n",
			"canonicalURL": "/github.com/admin-ch/CovidCertificate-Apidoc@76525933eb6f59dd033fd00318739cf598922a67/-/blob/api-docs.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/admin-ch/CovidCertificate-Apidoc/blob/76525933eb6f59dd033fd00318739cf598922a67/api-docs.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v1/ping\": get: responses: 200: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}