{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DMGT-TECH/the-usher-server"
		},
		"file": {
			"name": "the-usher-openapi-spec.yaml",
			"size": 0,
			"path": "server/the-usher-openapi-spec.yaml",
			"byteSize": 29808,
			"content": "openapi: 3.0.3\ninfo:\n  title: The Usher\n  description: |\n    The Usher server allows a business to authorize an identified user for access to resources or services offered by the business.\n  contact:\n    name: The Usher Support Page\n    url: https://github.com/DMGT-TECH/the-usher-server/issues\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\n  version: 1.0.0\nexternalDocs:\n  description: GitHub Repository\n  url: https://github.com/DMGT-TECH/the-usher-server\nservers:\n    - url: https://localhost:3001\n    - url: https://o07e9wdidk.execute-api.us-east-1.amazonaws.com/prod\ntags:\n- name: Server Configuration\n  description: This API endpoint allows setting up initial top-level admin personas, who must subsequently access the other endpoints with a valid ID token.\n- name: Self APIs\n  description: The Self APIs are the main APIs accessed by a client application that a persona has logged in to.\n- name: Admin APIs\n  description: APIs that provide access to top-level Usher Related data\n- name: Client Admin APIs\n  description: APIs that provide access to client specific data and operations\n\n#Default security scheme:\nsecurity:\n  - bearerSelfAuth: []\n\npaths:\n  /:\n    get:\n      operationId: getConfiguration\n      'x-swagger-router-controller': 'endpoint_root'\n      summary: Returns basic information about this server.\n      description: This endpoint returns a JSON object with URIs for an authenticated persona to obtain an access token, and for an API or client application to get this server's JSON Web Key Set (JWKS).\n      security:\n        #any authenticated user\n        - bearerSelfAuth: []\n        - bearerAdminAuth: []\n      tags:\n        - Server Configuration\n      responses:\n        '200':\n          description: On success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerConfig'\n        default:\n          $ref: '#/components/responses/Default'\n\n  /.well-known/jwks.json:\n    get:\n      'x-swagger-router-controller': 'endpoint_jwksjson'\n      operationId: getJwks\n      summary: Returns this serverâ€™s public key in JSON Web Key Set (JWKS) format.\n      tags:\n        - Server Configuration\n      description: \"Returns public key information that can be used to verify the signature on tokens (JWTs) issued by this server.\"\n      security: [] # public endpoint\n      responses:\n        '200':\n          description: On success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Jwks'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        default:\n          $ref: '#/components/responses/Default'\n\n  /self/clients:\n    get:\n      operationId: getSelfClients\n      'x-swagger-router-controller': 'endpoint_self_clients'\n      tags:\n        - Self APIs\n      security:\n        - bearerSelfAuth: []\n      summary: List all of the client applications for which currently logged-in persona has at least one role or permission.\n      parameters:\n        - $ref: '#/components/parameters/userContextParam'\n      responses:\n        '200':\n          description: On success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ArrayOfClients'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        default:\n          $ref: '#/components/responses/Default'\n\n\n  /self/roles:\n    get:\n      operationId: getSelfRoles\n      'x-swagger-router-controller': 'endpoint_self_roles'\n      tags:\n      - Self APIs\n      security:\n        - bearerSelfAuth: []\n      summary: List entitled roles for the currently logged-in persona for the client application(s).\n      description: |-\n        Returns the list of roles assigned to this persona and for the group(s) of which they are a member.\n      parameters:\n        - $ref: '#/components/parameters/clientIdParam'\n        - $ref: '#/components/parameters/userContextParam'\n        - $ref: '#/components/parameters/payloadFormatParam'\n      responses:\n        '200':\n          description: On success return a list of granted roles.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionOfRoles'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        default:\n          $ref: '#/components/responses/Default'\n\n  /self/permissions:\n    get:\n      operationId: getSelfPermissions\n      'x-swagger-router-controller': 'endpoint_self_permissions'\n      tags:\n      - Self APIs\n      security:\n        - bearerSelfAuth: []\n      summary: List entitled permissions for the currently logged-in persona for the client application(s).\n      description: |-\n        Returns the list of permissions assigned to this persona and for the group(s) of which they are a member. \u003cP\u003e\n      parameters:\n        - $ref: '#/components/parameters/clientIdParam'\n        - $ref: '#/components/parameters/userContextParam'\n        - $ref: '#/components/parameters/payloadFormatParam'\n      responses:\n        '200':\n          description: On success return a list of granted permissions.\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: '#/components/schemas/CollectionOfPermissions'\n                  - $ref: '#/components/schemas/DictionaryOfPermissions'\n                  - $ref: '#/components/schemas/ArrayOfPermissions'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        default:\n          $ref: '#/components/responses/Default'\n\n  /self/scope:\n    get:\n      'x-swagger-router-controller': 'endpoint_self_scopes'\n      tags:\n      - Self APIs\n      security:\n        - bearerSelfAuth: []\n      summary: List the granted roles and permissions of the currently logged-in persona for the client application.\n      description: |-\n        Returns a list of permissions and roles assigned to this persona and for the group(s) of which they are a member.  A smaller scope than what was requested may be returned.\n      operationId: listSelfScopes\n      parameters:\n        - $ref: '#/components/parameters/clientIdParam'\n        - $ref: '#/components/parameters/userContextParam'\n        - $ref: '#/components/parameters/scopeParam'\n        - $ref: '#/components/parameters/payloadFormatParam'\n      responses:\n        '200':\n          description: On success, returns a keyed list of granted entitlements.\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: '#/components/schemas/CollectionOfScope'\n                  - $ref: '#/components/schemas/DictionaryOfScope'\n                  - $ref: '#/components/schemas/ArrayOfScope'\n                  - $ref: '#/components/schemas/HierarchyOfScope'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        default:\n          $ref: '#/components/responses/Default'\n\n\n  /self/token:\n    post:\n      'x-swagger-router-controller': 'endpoint_self_token'\n      operationId: issueSelfToken  #  https://tools.ietf.org/html/rfc7523#section-2.1\n      summary: Issue an access token (JWT) containing permissions for the logged-in persona to cover the requested scope.\n      description: |\n        Returns, in the response body (not in the header), a signed JWT access token with the requested scope, if granted.  May return a smaller scope if fewer entitlements were granted to the persona. Requires a signed access token from the Persona Authorization (identity) server (e.g., Auth0, Cognito, or Azure AD) containing the **sub** claim and possibly a **groups** claim if individual personas are not being managed on this server for the given client application.\n\n        Use this endpoint if the scope need to be passed to a publicly accessible resource server.\n      tags:\n        - Self APIs\n      security:\n        - bearerSelfAuth: []\n      parameters:\n        - $ref: '#/components/parameters/clientIdParam'\n        - $ref: '#/components/parameters/userContextParam'\n        - $ref: '#/components/parameters/scopeParam'\n        - $ref: '#/components/parameters/lifetimeParam'\n      responses:\n        '200':\n          description: Returns a signed JWT containing the following JSON payload.\n          headers:\n            X-OAuth-Scopes:\n              schema:\n                type: string\n              description: The scopes the token has authorized.\n            X-Accepted-OAuth-Scopes:\n              schema:\n                type: string\n              description: The scopes that the action checks for.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '415':\n          $ref: '#/components/responses/UnsupportedMediaType'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        default:\n          $ref: '#/components/responses/Default'\n\n\n  /self/refresh_token:\n    post:\n      'x-swagger-router-controller': 'endpoint_self_refresh_token'\n      operationId: issueSelfRefreshToken\n      summary: Issue a refreshed access token (JWT) containing permissions for the logged-in persona to cover the requested scope.\n      description: \"Returns, in the response body (not in the header), a signed JWT access token with the requested scope, if granted.  May return a smaller scope if fewer entitlements were granted to the persona. Requires a non-expired refresh token issued by The Usher's \u003cb\u003e/self/token\u003c/b\u003e endpoint.\"\n      tags:\n        - Self APIs\n      security: [] # public endpoint\n      parameters:\n        - name: client_id\n          description: Unique identifier for the client.\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/EntityNameDef'\n        - $ref: '#/components/parameters/userContextParam'\n        - name: grant_type\n          schema:\n            type: string\n            maxLength: 13\n            minLength: 13\n            pattern: '\\brefresh_token\\b'\n          in: query\n          required: true\n          description: \"Value MUST be set to \\\"refresh_token\\\"\"\n        - name: refresh_token\n          schema:\n            type: string\n            maxLength: 36\n            minLength: 36\n            pattern: '^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4{1}[a-fA-F0-9]{3}-[89abAB]{1}[a-fA-F0-9]{3}-[a-fA-F0-9]{12}$'\n          in: query\n          required: true\n          description: \"The refresh_token issued to the client returned in the response from \u003cb\u003e/self/token\u003c/b\u003e\"\n      responses:\n        '200':\n          description: Returns a signed JWT containing the following JSON payload.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '415':\n          $ref: '#/components/responses/UnsupportedMediaType'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        default:\n          $ref: '#/components/responses/Default'\n\n  /roles:\n    get:\n      'x-swagger-router-controller': 'endpoint_roles'\n      operationId: getRoles\n      summary: Get a List of Roles for a given Client\n      tags:\n        - Admin APIs\n      security:\n        - bearerAdminAuth: []\n      parameters:\n        - $ref: '#/components/parameters/clientIdQueryParam'\n      responses:\n        200:\n          description: The List of Roles\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionOfRoles'\n        400:\n          $ref: '#/components/responses/BadRequest'\n    post:\n      'x-swagger-router-controller': 'endpoint_roles'\n      operationId: createRole\n      summary: Create a new Role for a given Client\n      tags:\n        - Admin APIs\n      security:\n        - bearerAdminAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                client_id:\n                  type: string\n                name:\n                  type: string\n                description:\n                  type: string\n              required:\n                - client_id\n                - name\n      responses:\n        201:\n          description: The newly created Role\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n        400:\n          $ref: '#/components/responses/BadRequest'\n\n  /roles/{role_key}:\n    parameters:\n      - $ref: '#/components/parameters/roleKeyPathParam'\n    get:\n      'x-swagger-router-controller': 'roles/role_key'\n      operationId: getRole\n      tags:\n        - Admin APIs\n      security:\n        - bearerAdminAuth: []\n      responses:\n        200:\n          description: Return a Role for the given key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n        404:\n          $ref: '#/components/responses/NotFound'\n    patch:\n      'x-swagger-router-controller': 'roles/role_key'\n      operationId: patchRole\n      tags:\n        - Admin APIs\n      security:\n        - bearerAdminAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                description:\n                  type: string\n      responses:\n        204:\n          description: OK if the Role is updated\n        404:\n          $ref: '#/components/responses/NotFound'\n    delete:\n      'x-swagger-router-controller': 'roles/role_key'\n      operationId: deleteRole\n      tags:\n        - Admin APIs\n      security:\n        - bearerAdminAuth: []\n      responses:\n        204:\n          description: OK if the Role is deleted\n        404:\n          $ref: '#/components/responses/NotFound'\n\n\n  /clients/{client_id}:\n    get:\n      tags:\n        - Client Admin APIs\n      security:\n        - bearerClientAdminAuth: []\n      parameters:\n        - $ref: '#/components/parameters/clientIdPathParam'\n      responses:\n        200:\n          description: Return details for the given Client object\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /clients/{client_id}/roles:\n    parameters:\n      - $ref: '#/components/parameters/clientIdPathParam'\n    get:\n      'x-swagger-router-controller': 'clients/roles'\n      operationId: listClientRoles\n      summary: Return a list of Roles for the given Client\n      tags:\n        - Client Admin APIs\n      security:\n        - bearerClientAdminAuth: []\n      responses:\n        200:\n          description: Return list of Roles for given Client object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CollectionOfRoles'\n    post:\n      'x-swagger-router-controller': 'clients/roles'\n      operationId: createClientRole\n      summary: Create a new Role for the given Client\n      tags:\n        - Client Admin APIs\n      security:\n        - bearerClientAdminAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                description:\n                  type: string\n              required:\n                - name\n      responses:\n        201:\n          description: Return the newly created Role\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n\n  /sessions:\n    delete:\n      operationId: invalidateSession\n      'x-swagger-router-controller': 'endpoint_invalidate_session'\n      summary: Invalidate an ongoing session for a persona.\n      tags:\n        - Admin APIs\n      security:\n        - bearerAdminAuth: []\n      parameters:\n        - name: sub\n          in: query\n          schema:\n            $ref: '#/components/schemas/EntityNameDef'\n          required: true\n        - name: ucx\n          in: query\n          schema:\n            $ref: '#/components/schemas/EntityNameDef'\n          required: false\n        - name: iss\n          in: query\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: 'Success: The session was invalidated.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Success'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '429':\n          $ref: '#/components/responses/TooManyRequests'\n        default:\n          $ref: '#/components/responses/Default'\n\ncomponents:\n\n  parameters:\n  #---------------------\n    clientIdPathParam:\n      name: client_id\n      description: Unique identifier for client.\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/EntityNameDef'\n      examples:\n        Client ID:\n          value: datalake-api\n    # client_id\n    clientIdParam:\n      name: client_id\n      description: Unique identifier for the client.\n      in: header\n      required: true\n      schema:\n        $ref: '#/components/schemas/EntityNameDef'\n      examples:\n        Example 1 (client application ID):\n          value: Newsletter+Application\n        Example 2 (top-level):\n          value: the-usher\n        Example 3 (all client applications where persona has a role):\n          value: \"*\"\n    # client_id as query param\n    clientIdQueryParam:\n      name: client_id\n      description: Unique identifier for the client.\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/EntityNameDef'\n    roleKeyPathParam:\n      name: role_key\n      description: The unique role identifier\n      in: path\n      required: true\n      schema:\n        type: integer\n    # user_context\n    userContextParam:\n      name: user_context\n      in: header\n      required: false\n      schema:\n        $ref: '#/components/schemas/EntityNameDef'\n    # scope\n    scopeParam:\n      name: scope\n      description: |-\n        Requested scope (optional). Space-separated list of permissions the client application wishes to have granted for this persona.\n        If this is not specified, then all entitled permissions are **granted**.\n      in: query\n      required: false\n      schema:\n        type: string\n        pattern: '[0-9a-zA-Z-_ :]+'\n      examples:\n        Example 1 (Scope):\n          value: app:read app:create\n    # lifetime\n    lifetimeParam:\n      name: lifetime\n      description: How long this token should be valid, in seconds.\n      in: query\n      required: false\n      schema:\n        type: string\n        pattern: '[0-9]{1,5}'\n    # payload format\n    payloadFormatParam:\n      name: payload_format\n      description: The JSON format for returning the payload\n      in: header\n      required: false\n      schema:\n        type: string\n        enum:\n          - dictionary\n          - array\n          - collection\n          - hierarchy\n\n  schemas:\n#---------------------\n# Entities\n\n# BASE DEFINITIONS\n    EntityNameDef:\n      type: string\n      maxLength: 50\n      pattern: '[0-9a-zA-Z-_:\\*]{1,50}'\n    EntityDescriptionDef:\n      type: string\n      maxLength: 100\n      pattern: '[0-9a-zA-Z-_:\\*]{1,100}'\n\n\n# ROLES\n#---------------------\n    Role:\n      type: object\n      properties:\n        key:\n          type: integer\n          minimum: 1\n          format: int32\n        clientkey:\n          type: integer\n          minimum: 1\n          format: int32\n        name:\n          $ref: '#/components/schemas/EntityNameDef'\n        description:\n          type: string\n          nullable: true # Can't use shared schema with nullable in 3.0.x\n          maxLength: 100\n      required:\n        - key\n        - clientkey\n        - name\n      example:\n        name: usher:admim\n#---------------------\n    CollectionOfRoles:\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/Role'\n\n# PERMISSIONS\n#---------------------\n    Permission:\n      type: object\n      properties:\n        permission:\n          $ref: '#/components/schemas/EntityNameDef'\n        description:\n          $ref: '#/components/schemas/EntityDescriptionDef'\n      required:\n        - permission\n#---------------------\n    ArrayOfPermissions:\n      type: array\n      items:\n        type: array\n        items:\n          $ref: '#/components/schemas/EntityNameDef'\n#---------------------\n    CollectionOfPermissions:\n      type: array\n      items:\n        $ref: '#/components/schemas/Permission'\n#---------------------\n    DictionaryOfPermissions:\n      type: object\n      additionalProperties: false\n      properties:\n        permission:\n          type: array\n          items:\n            $ref: '#/components/schemas/EntityNameDef'\n\n# CLIENTS\n#---------------------\n    Client:\n      type: object\n      properties:\n        client_id:\n          $ref: '#/components/schemas/EntityNameDef'\n        clientname:\n          $ref: '#/components/schemas/EntityNameDef'\n        description:\n          $ref: '#/components/schemas/EntityDescriptionDef'\n        secret:\n          type: string\n          maxLength: 50\n      required:\n        - client_id\n        - clientname\n      example:\n        client_id: newsletter-app\n        clientname: The Newsletter App\n        description: Application for reading the newsletter on a mobile device\n        secret: secretphraseused\n#---------------------\n    ArrayOfClients:\n      type: array\n      items:\n        $ref: '#/components/schemas/Client'\n      example:\n        - client_id: the-usher\n          clientname: The Usher\n          description: This Resource Authorization Server\n        - client_id: client-app1\n          clientname: Client Application 1\n          description: An application for calling data APIs\n          secret: shhhhhhhhhhhhhh\n        - client_id: client-app2\n          clientname: Client Application 2\n\n# SCOPE\n#---------------------\n    ArrayOfScope:\n      type: array\n      items:\n        type: array\n        items: {}\n#---------------------\n    CollectionOfScope:\n      type: array\n      items:\n        type: object\n        additionalProperties: false\n        properties:\n          role:\n            $ref: '#/components/schemas/EntityNameDef'\n          permission:\n            type: array\n            items:\n              $ref: '#/components/schemas/EntityNameDef'\n#---------------------\n    DictionaryOfScope:\n      type: object\n      additionalProperties: false\n      properties:\n        role:\n          type: array\n          items:\n            $ref: '#/components/schemas/EntityNameDef'\n        permission:\n          type: array\n          items:\n            type: array\n            items:\n              $ref: '#/components/schemas/EntityNameDef'\n#---------------------\n    HierarchyOfScope:\n      type: array\n      items:\n          type: object\n          properties:\n            role:\n              $ref: '#/components/schemas/EntityNameDef'\n            permission:\n              type: array\n              items:\n                $ref: '#/components/schemas/EntityNameDef'\n# TOKEN\n#---------------------\n    Token:\n      type: object\n      additionalProperties: false\n      properties:\n          token_type:\n            type: string\n          access_token:\n            type: string\n          refresh_token:\n            type: string\n          expires_in:\n            type: integer\n            format: int32\n      required:\n        - token_type\n        - access_token\n        - refresh_token\n        - expires_in\n      example:\n        \"Example Access Token\":\n          token_type: \"Bearer\"\n          access_token: \"OPAQUE TOKEN\"\n          refresh_token: \"2550f150-b75a-459b-8d98-19961b651892\"\n          expires_in: 3600\n\n# KEYS\n#---------------------\n    Key:\n      type: object\n      additionalProperties: false\n      properties:\n        kty:\n          type: string\n        kid:\n          type: string\n        use:\n          type: string\n        alg:\n          type: string\n        n:\n          type: string\n        e:\n          type: string\n\n# JWKS\n#---------------------\n    Jwks:\n      type: object\n      additionalProperties: false\n      properties:\n        keys:\n          type: array\n          maxItems: 1\n          items:\n            $ref: '#/components/schemas/Key'\n      required:\n        - keys\n      example:\n        {\"keys\":[\n          {\n            \"kid\":\"2020-02-12A\",\n            \"kty\":\"RSA\",\n            \"alg\":\"RS256\",\n            \"use\":\"sig\",\n            \"key_ops\": \"verify\",\n            \"n\":\"2kVO54uvOhDfpn3SUrWA-iaVhlBry6MgiUImReN_4jpYf-aBA-f0mgDmF-708bspPluzGjG6KRDg0UtGl3PpndyZk9PDAxgHbdzY6bRwHLchxB7RW4NYF4CgScqAQ38HbFmUQlQOj-V_Xadb_PSUoV-acM0aGjBig-t5mRSvdoedg1nF9Lt4eJ-1DV0lw-xS5XHKzzS0s9aJtwUuR38Iem3tF5k_o71cvnbKM9T_kQhASn9RGloS9LXgjWsChNiyP0KgMLINdYo3x-hdUbpZCiit0b3fvJQIsX2BXeOcgtEGuTNcxYPdbLMD5wA7TLzSFWrkJ0ZemVAuSilOyfaHdw\",\n            \"e\":\"AQAB\",\n        }]}\n\n# CONFIG\n#---------------------\n    ServerConfig:\n      type: object\n      additionalProperties: false\n      properties:\n        token_endpoint:\n          type: string\n        jwks_uri:\n          type: string\n        the-usher-package-version:\n          type: string\n          maxLength: 40\n          pattern: '^[\\d]+\\.[\\d]+\\.[\\d]+$'\n      required:\n        - token_endpoint\n        - jwks_uri\n        - the-usher-package-version\n      example:\n        token_endpoint: $SERVER_URL/self/token\n        jwks_uri: $SERVER_URL/.well-known/jwks.json\n        the-usher-package-version: 1.2.0\n\n# RESPONSE SCHEMAS\n#---------------------\n    # Success response body\n    Success:\n      type: object\n      additionalProperties: false\n      properties:\n        code:\n          type: integer\n          minimum: 200\n          maximum: 299\n        message:\n          type: string\n      required:\n        - code\n        - message\n\n    # Error response body\n    Error:\n      type: object\n      additionalProperties: false\n      properties:\n        code:\n          type: integer\n          minimum: 100\n          maximum: 600\n        message:\n          type: string\n          pattern: '.'\n      required:\n        - code\n        - message\n\n  securitySchemes:\n    bearerSelfAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    bearerAdminAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    bearerClientAdminAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n  responses:\n\n    BadRequest:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 400\n            message: Bad Request\n\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 401\n            message: Unauthorized\n\n    Forbidden:\n      description: The server understood the request but refuses to authorize it\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 403\n            message: Forbidden\n\n    NotFound:\n      description: The specified resource was not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 404\n            message: Not Found\n\n    UnsupportedMediaType:\n      description: The request entity has a media type which the server or resource does not support\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 415\n            message: Unsupported Media Type\n\n    TooManyRequests:\n      description: The user has sent too many requests in a given amount of time\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            code: 429\n            message: Too Many Requests\n    Default:\n      description: Unexpected error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n",
			"canonicalURL": "/github.com/DMGT-TECH/the-usher-server@bb2768a3c590af57a79088ae4486d7765ba508a1/-/blob/server/the-usher-openapi-spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/DMGT-TECH/the-usher-server/blob/bb2768a3c590af57a79088ae4486d7765ba508a1/server/the-usher-openapi-spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/self/permissions\": get: responses: 200: contents: application/json: generate schema: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"complex anyOf"
	]
}