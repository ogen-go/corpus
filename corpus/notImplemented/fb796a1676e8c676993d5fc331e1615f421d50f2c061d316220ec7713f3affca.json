{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/wikipathways.org/1.0/openapi.yaml",
			"byteSize": 25561,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://webservice.wikipathways.org\ninfo:\n  title: WikiPathways Webservices\n  version: \"1.0\"\n  x-origin:\n    - format: swagger\n      url: http://webservice.wikipathways.org/index.php?swagger\n      version: \"2.0\"\n  x-providerName: wikipathways.org\npaths:\n  /createPathway:\n    post:\n      description: \"createPathwayCreate a new pathway on the wiki with the given GPML code.\u003cbr\u003eNote: To create/modify pathways via the web service, you need to have an account with web service write permissions. Please contact us to request write access for the web service.\"\n      parameters:\n        - description: The GPML code for the new pathway\n          in: query\n          name: gpml\n          required: true\n          schema:\n            type: string\n        - description: The authentication info\n          in: query\n          name: auth\n          required: true\n          schema:\n            type: string\n        - description: The user name\n          in: query\n          name: username\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - All functions\n        - Write (create/update/delete)\n  /findInteractions:\n    get:\n      description: findInteractionsFind interactions defined in WikiPathways pathways.\n      parameters:\n        - description: The name of an entity to find interactions for (e.g. 'P53')\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Search\n        - All functions\n  /findPathwaysByLiterature:\n    get:\n      description: findPathwaysByLiterature\n      parameters:\n        - description: The query, can be a pubmed id, author name or title keyword.\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Search\n        - All functions\n  /findPathwaysByText:\n    get:\n      description: findPathwaysByText\n      parameters:\n        - description: The query, e.g. 'apoptosis'\n          in: query\n          name: query\n          required: true\n          schema:\n            type: string\n        - description: Optional, limit the query by species. Leave\n          in: query\n          name: species\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - All functions\n        - Search\n  /findPathwaysByXref:\n    get:\n      description: findPathwaysByXref\n      parameters:\n        - description: string\n          explode: false\n          in: query\n          name: ids\n          required: true\n          schema:\n            items: {}\n            type: array\n          style: form\n        - description: string\n          explode: false\n          in: query\n          name: codes\n          required: false\n          schema:\n            items: {}\n            type: array\n          style: form\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - All functions\n        - Search\n  /getColoredPathway:\n    get:\n      description: getColoredPathwayGet a colored image version of the pathway.\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - description: The revision of the pathway (use '0' for most recent)\n          in: query\n          name: revision\n          required: true\n          schema:\n            type: string\n        - description: string\n          explode: false\n          in: query\n          name: graphId\n          required: true\n          schema:\n            items: {}\n            type: array\n          style: form\n        - description: string\n          explode: false\n          in: query\n          name: color\n          required: true\n          schema:\n            items: {}\n            type: array\n          style: form\n        - description: The image type (One of 'svg', 'pdf' or 'png').\n          in: query\n          name: fileType\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - All functions\n        - Download\n  /getCurationTagHistory:\n    get:\n      description: getCurationTagHistory\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - description: Only include history from after the given date\n          in: query\n          name: timestamp\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - All functions\n        - History\n        - Curation tags\n  /getCurationTags:\n    get:\n      description: getCurationTagsGet all curation tags for the given tag name. Use this method if you want to find all pathways that are tagged with a specific curation tag.\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - All functions\n        - Pathway information\n        - Curation tags\n  /getCurationTagsByName:\n    get:\n      description: getCurationTagsByNameGet all curation tags for the given tag name. Use this method if you want to find all pathways that are tagged with a specific curation tag.\n      parameters:\n        - description: The tag name\n          in: query\n          name: tagName\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - All functions\n        - Pathway list\n        - Curation tags\n  /getOntologyTermsByPathway:\n    get:\n      description: getOntologyTermsByPathway\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Pathway information\n        - Curation tags\n        - All functions\n  /getPathway:\n    get:\n      description: getPathway\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - description: The revision number of the pathway (use 0 for most recent)\n          in: query\n          name: revision\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Pathway information\n        - All functions\n  /getPathwayAs:\n    get:\n      description: getPathwayAsDownload a pathway in the specified file format.\n      parameters:\n        - description: The file type to convert to, e.g.\n          in: query\n          name: fileType\n          required: true\n          schema:\n            type: string\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - description: The revision number of the pathway (use 0 for most recent)\n          in: query\n          name: revision\n          required: false\n          schema:\n            type: integer\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Download\n        - All functions\n  /getPathwayHistory:\n    get:\n      description: getPathwayHistoryGet the revision history of a pathway.\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - description: Limit by time, only history items after the given\n          in: query\n          name: timestamp\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - History\n        - All functions\n  /getPathwayInfo:\n    get:\n      description: getPathwayInfoGet some general info about the pathway, such as the name, species, without downloading the GPML.\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Pathway information\n        - All functions\n  /getPathwaysByOntologyTerm:\n    get:\n      description: getPathwaysByOntologyTerm\n      parameters:\n        - description: The Ontology term\n          in: query\n          name: term\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Pathway list\n        - Ontology tags\n        - All functions\n  /getPathwaysByParentOntologyTerm:\n    get:\n      description: getPathwaysByParentOntologyTerm\n      parameters:\n        - description: The Ontology term\n          in: query\n          name: term\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Pathway list\n        - Ontology tags\n        - All functions\n  /getRecentChanges:\n    get:\n      description: \"getRecentChangesGet the recently changed pathways.\u003cbr\u003eNote: the recent changes table only retains items for a limited time (2 months), so there is no guarantee that you will get all changes when the timestamp points to a date that is more than 2 months in the past.\"\n      parameters:\n        - description: Get the changes after this time\n          in: query\n          name: timestamp\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - History\n        - All functions\n  /getUserByOrcid:\n    get:\n      description: getUserByOrcid\n      parameters:\n        - description: string\n          in: query\n          name: orcid\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - User management\n        - All functions\n  /getXrefList:\n    get:\n      description: getXrefList\n      parameters:\n        - description: The pathway identifier.\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - description: The database code to translate to (e.g. 'S' for UniProt).\n          in: query\n          name: code\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Download\n        - All functions\n  /listOrganisms:\n    get:\n      description: listOrganisms\n      parameters:\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Organism list\n        - All functions\n  /listPathways:\n    get:\n      description: listPathways\n      parameters:\n        - description: The organism to filter by (optional)\n          in: query\n          name: organism\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Pathway list\n        - All functions\n  /login:\n    get:\n      description: loginStart a logged in session, using an existing WikiPathways account. This function will return an authentication code that can be used to excecute methods that need authentication (e.g. updatePathway).\n      parameters:\n        - description: The usernameset_include_path(get_include_path().PATH_SEPARATOR.realpath('../includes').PATH_SEPARATOR.realpath('../').PATH_SEPARATOR);\n          in: query\n          name: name\n          required: true\n          schema:\n            type: string\n        - description: The password\n          in: query\n          name: pass\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - User management\n        - All functions\n  /removeCurationTag:\n    get:\n      description: removeCurationTagRemove a curation tag from a pathway.\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - description: The name of the tag to apply\n          in: query\n          name: tagName\n          required: true\n          schema:\n            type: string\n        - description: The authentication data\n          in: query\n          name: auth\n          required: true\n          schema:\n            type: string\n        - description: The user name\n          in: query\n          name: username\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - All functions\n        - Search\n  /removeOntologyTag:\n    get:\n      description: removeOntologyTag\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - description: The ontology term identifier in the ontology\n          in: query\n          name: termId\n          required: true\n          schema:\n            type: string\n        - description: The authentication key\n          in: query\n          name: auth\n          required: true\n          schema:\n            type: string\n        - description: The username\n          in: query\n          name: user\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Write (create/update/delete)\n        - Ontology tags\n        - All functions\n  /saveCurationTag:\n    get:\n      description: saveCurationTag\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - description: The name of the tag to apply\n          in: query\n          name: tagName\n          required: true\n          schema:\n            type: string\n        - description: string\n          in: query\n          name: text\n          required: true\n          schema:\n            type: string\n        - description: The revision this tag applies to\n          in: query\n          name: revision\n          required: true\n          schema:\n            type: integer\n        - description: The authentication key\n          in: query\n          name: auth\n          required: true\n          schema:\n            type: string\n        - description: The user name\n          in: query\n          name: username\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - All functions\n        - Write (create/update/delete)\n        - Curation tags\n  /saveOntologyTag:\n    get:\n      description: saveOntologyTag\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - description: The ontology term to apply\n          in: query\n          name: term\n          required: true\n          schema:\n            type: string\n        - description: The identifier of the term in the ontology\n          in: query\n          name: termId\n          required: true\n          schema:\n            type: string\n        - description: The authentication key\n          in: query\n          name: auth\n          required: true\n          schema:\n            type: string\n        - description: The username\n          in: query\n          name: user\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Write (create/update/delete)\n        - Ontology tags\n        - All functions\n  /updatePathway:\n    get:\n      description: \"updatePathwayUpdate a pathway on the wiki with the given GPML code.\u003cbr\u003eNote: To create/modify pathways via the web service, you need to have an account with web service write permissions. Please contact us to request write access for the web service.\"\n      parameters:\n        - description: The pathway identifier\n          in: query\n          name: pwId\n          required: true\n          schema:\n            type: string\n        - description: A description of the modifications\n          in: query\n          name: description\n          required: true\n          schema:\n            type: string\n        - description: The updated GPML code\n          in: query\n          name: gpml\n          required: true\n          schema:\n            type: string\n        - description: The revision the GPML code is based on\n          in: query\n          name: revision\n          required: true\n          schema:\n            type: integer\n        - description: The authentication key\n          in: query\n          name: auth\n          required: true\n          schema:\n            type: string\n        - description: The username\n          in: query\n          name: username\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: format\n          required: false\n          schema:\n            default: xml\n            enum:\n              - json\n              - xml\n              - html\n              - dump\n              - jpg\n              - pdf\n            type: string\n      responses:\n        \"200\":\n          description: everything ok\n      tags:\n        - Write (create/update/delete)\n        - All functions\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/wikipathways.org/1.0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/wikipathways.org/1.0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: \"graphId\": any type parameter not implemented",
	"NotImplemented": [
		"any type parameter"
	]
}