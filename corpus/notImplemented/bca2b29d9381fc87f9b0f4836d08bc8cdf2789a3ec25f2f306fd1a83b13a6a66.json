{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/codingsoo/REST_Go"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "services/cwa-verification/openapi.yaml",
			"byteSize": 7541,
			"content": "openapi: 3.0.1\ninfo:\n  title: cwa-verification-server\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0\n  version: 1.2.0-SNAPSHOT\nservers:\n  - url: http://localhost:50116\n    description: Generated server url\npaths:\n  /version/v1/tan:\n    post:\n      tags:\n        - external-tan-controller\n      summary: Generates a Tan\n      description: Generates a TAN on input of Registration Token. With the TAN one can submit his Diagnosis keys\n      operationId: generateTan\n      parameters:\n        - name: cwa-fake\n          in: header\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegistrationToken'\n        required: true\n      responses:\n        '201':\n          description: Registration Token is valid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeferredResultResponseEntityTan'\n        '400':\n          description: Registration Token does not exist\n        '500':\n          description: Internal Server Error\n  /version/v1/testresult:\n    post:\n      tags:\n        - external-test-state-controller\n      summary: COVID-19 test result for given RegistrationToken\n      description: Gets the result of COVID-19 Test. If the RegistrationToken belongs to a TeleTan the result is always positive\n      operationId: getTestState\n      parameters:\n        - name: cwa-fake\n          in: header\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegistrationToken'\n        required: true\n      responses:\n        '200':\n          description: Testresult retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeferredResultResponseEntityTestResult'\n        '400':\n          description: Bad Request\n        '500':\n          description: Internal Server Error\n  /version/v1/registrationToken:\n    post:\n      tags:\n        - external-token-controller\n      summary: Get registration Token\n      description: Get a registration token by providing a SHA-256 hasehd GUID or a teleTAN\n      operationId: generateRegistrationToken\n      parameters:\n        - name: cwa-fake\n          in: header\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegistrationTokenRequest'\n        required: true\n      responses:\n        '201':\n          description: registration token generated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeferredResultResponseEntityRegistrationToken'\n        '400':\n          description: GUID/TeleTAN already exists.\n        '500':\n          description: Internal Server Error\n  /version/v1/tan/teletan:\n    post:\n      tags:\n        - internal-tan-controller\n      summary: Request generation of a teleTAN\n      description: A teleTAN is a human readable TAN with 7 characters which is supposed to be issued via call line\n      operationId: createTeleTan\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          schema:\n            $ref: '#/components/schemas/AuthorizationToken'\n      responses:\n        '201':\n          description: TeleTan created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TeleTan'\n        '400':\n          description: Bad Request\n        '500':\n          description: Internal Server Error\n  /version/v1/tan/verify:\n    post:\n      tags:\n        - internal-tan-controller\n      summary: Verify provided Tan\n      description: The provided Tan is verified to be formerly issued by the verification server\n      operationId: verifyTan\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tan'\n        required: true\n      responses:\n        '200':\n          description: Tan is valid an formerly issued by the verification server\n          content:\n            '*/*':\n              schema:\n                type: object\n        '400':\n          description: Bad Request\n        '404':\n          description: Tan could not be verified\n          content:\n            '*/*':\n              schema:\n                type: object\n        '500':\n          description: Internal Server Error\ncomponents:\n  schemas:\n    RegistrationToken:\n      required:\n        - registrationToken\n      type: object\n      properties:\n        registrationToken:\n          pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$\n          type: string\n        responsePadding:\n          type: string\n      description: The registration token model.\n    DeferredResultHandler:\n      type: object\n    DeferredResultResponseEntityTan:\n      type: object\n      properties:\n        resultHandler:\n          $ref: '#/components/schemas/DeferredResultHandler'\n        result:\n          type: object\n        resultInternal:\n          type: boolean\n          writeOnly: true\n        setOrExpired:\n          type: boolean\n        errorResult:\n          type: boolean\n          writeOnly: true\n    DeferredResultResponseEntityTestResult:\n      type: object\n      properties:\n        resultHandler:\n          $ref: '#/components/schemas/DeferredResultHandler'\n        result:\n          type: object\n        resultInternal:\n          type: boolean\n          writeOnly: true\n        setOrExpired:\n          type: boolean\n        errorResult:\n          type: boolean\n          writeOnly: true\n    RegistrationTokenRequest:\n      type: object\n      properties:\n        key:\n          type: string\n        keyDob:\n          type: string\n          description: Only used in conjunction with keyType == GUID. The hashed GUID consists of concat('x', substring(sha256_hex(concat(test-id-uuid, DateOfBirth.format(DDMMYYYY))), 1) - e.g. concat('x', substring(sha256_hex('7bb41672-7de4-44c3-b751-4258e59f3e2508051992')), 1)) --\u003e x3712193bd35d40f03ee497ea7e4ea8278d8fcc8a2287843bb0ab36939d222b4\n        keyType:\n          type: string\n          enum:\n            - GUID\n            - TELETAN\n      description: The registration token request model.\n    DeferredResultResponseEntityRegistrationToken:\n      type: object\n      properties:\n        resultHandler:\n          $ref: '#/components/schemas/DeferredResultHandler'\n        result:\n          type: object\n        resultInternal:\n          type: boolean\n          writeOnly: true\n        setOrExpired:\n          type: boolean\n        errorResult:\n          type: boolean\n          writeOnly: true\n    AuthorizationToken:\n      required:\n        - token\n      type: object\n      properties:\n        token:\n          type: string\n      description: The bearer jwt token header model.\n    TeleTan:\n      type: object\n      properties:\n        value:\n          type: string\n      description: The teleTAN model.\n    Tan:\n      required:\n        - tan\n      type: object\n      properties:\n        tan:\n          pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$\n          type: string\n        responsePadding:\n          type: string\n      description: The transaction number model.\n",
			"canonicalURL": "/github.com/codingsoo/REST_Go@ed67007a3d9cc852de4c47d395991f602a381c67/-/blob/services/cwa-verification/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/codingsoo/REST_Go/blob/ed67007a3d9cc852de4c47d395991f602a381c67/services/cwa-verification/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/version/v1/tan/verify\": post: responses: 200: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}