{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/contiamo/openapi-generator-go"
		},
		"file": {
			"name": "source_without_responses_component.yaml",
			"size": 0,
			"path": "pkg/filters/testdata/source_without_responses_component.yaml",
			"byteSize": 19543,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: developer@contiamo.com\n  description: Fields API\n  title: Fields Service\n  version: 0.2.0\ncomponents:\n  schemas:\n    CreateCustomFieldRequest:\n      properties:\n        description:\n          description: |\n            A description of the purpose of this field\n          maxLength: 255\n          type: string\n        displayName:\n          description: |\n            A nice human-readable name for that field\n          type: string\n        filterable:\n          default: false\n          description: |\n            Should this field show up as a filter in the catalog\n          type: boolean\n        hideIfEmpty:\n          default: false\n          description: |\n            Should this field be hidden when its value is empty\n          type: boolean\n        maxValue:\n          nullable: true\n          type: number\n        minValue:\n          nullable: true\n          type: number\n        name:\n          description: |\n            A nice computer-readable name for that field usable in postgres\n          type: string\n        searchable:\n          default: false\n          description: |\n            Should this field be used in the catalog fuzzy search\n          type: boolean\n        type:\n          $ref: \"#/components/schemas/FieldType\"\n        validValues:\n          items:\n            type: string\n          type: array\n      required:\n        - type\n        - name\n        - filterable\n        - searchable\n        - hideIfEmpty\n      type: object\n    FieldError:\n      properties:\n        key:\n          type: string\n        message:\n          type: string\n        type:\n          $ref: \"#/components/schemas/FieldErrorType\"\n      required:\n        - type\n        - key\n        - message\n      type: object\n    FieldErrorResponse:\n      description: Error message that contains detailed information about certain parameters being incorrect\n      properties:\n        errors:\n          items:\n            $ref: \"#/components/schemas/FieldError\"\n          type: array\n      required:\n        - errors\n      type: object\n    FieldErrorType:\n      description: The type of the field error response\n      enum:\n        - FieldError\n      type: string\n    FieldKind:\n      description: |\n        The source type of the field.\n\n        - System fields are non-editable default fields.  These can not be modified for deleted.\n\n        - Configurable fields are editable default fields. These can be modified but not deleted.\n\n        - Custom are user defined fields. These are fully defined by the user.\n      enum:\n        - system\n        - configurable\n        - custom\n      readOnly: true\n      type: string\n    FieldSpec:\n      properties:\n        description:\n          description: |\n            A description of the purpose of this field\n          maxLength: 255\n          type: string\n        displayName:\n          description: |\n            A nice human-readable name for that field\n          type: string\n        filterable:\n          default: false\n          description: |\n            Should this field show up as a filter in the catalog\n          type: boolean\n        hideIfEmpty:\n          default: false\n          description: |\n            Should this field be hidden when the value is empty\n          type: boolean\n        inherited:\n          default: false\n          description: |\n            Indicates that this field may be inherited from the parent resource\n          type: boolean\n        key:\n          description: |\n            lookup key for the field on the specific response types in dot notation.\n            Examples:\n              `name` -\u003e name is found toplevel of the instance object, i.e. `obj.name`\n              `properties.category` -\u003e category is found in the properties subobject, i.e. `obj.properties.category`\n          type: string\n        kind:\n          $ref: \"#/components/schemas/FieldKind\"\n        maxValue:\n          nullable: true\n          type: number\n        minValue:\n          nullable: true\n          type: number\n        name:\n          description: |\n            A nice computer-readable name for that field usable in postgres\n          type: string\n        searchable:\n          default: false\n          description: |\n            Should this field be used in the catalog fuzzy search\n          type: boolean\n        type:\n          $ref: \"#/components/schemas/FieldType\"\n        validValues:\n          items:\n            type: string\n          type: array\n      required:\n        - name\n        - key\n        - type\n        - kind\n        - filterable\n        - searchable\n        - description\n        - hideIfEmpty\n        - inherited\n      type: object\n    FieldSpecUpdateRequest:\n      properties:\n        description:\n          description: |\n            A description of the purpose of this field\n          maxLength: 255\n          type: string\n        displayName:\n          description: |\n            A nice human-readable name for that field\n          type: string\n        filterable:\n          default: false\n          description: |\n            Should this field show up as a filter in the catalog\n          type: boolean\n        kind:\n          $ref: \"#/components/schemas/FieldKind\"\n        maxValue:\n          nullable: true\n          type: number\n        minValue:\n          nullable: true\n          type: number\n        name:\n          description: |\n            A nice computer-readable name for that field usable in postgres\n          type: string\n        searchable:\n          default: false\n          description: |\n            Should this field be used in the catalog fuzzy search\n          type: boolean\n        type:\n          $ref: \"#/components/schemas/FieldType\"\n        validValues:\n          items:\n            type: string\n          type: array\n      required:\n        - name\n        - type\n        - kind\n        - filterable\n        - searchable\n        - description\n      type: object\n    FieldType:\n      description: |\n        The data type of the field:\n\n        - `text` is an arbitrary string\n\n        - `multitext` is an arbitrary array of strings\n\n        - `select` a value which can be selected from a list\n\n        - `multiselect` is a `select` with multiple selected values, represented as an array\n\n        - `boolean` is `true` or `false` value\n\n        - `date` is a date string in `yyyy-mm-dd` format, e.g. `2019-08-21`\n\n        - `datetime` is an RFC3339 datetime string, e.g. `2019-08-21T11:54:30.369917Z`\n\n        - `number` is a numeric value, described by RFC8259, section 6.\n\n        - `link` is a link object with a displayed text and URL, e.g. `{\"displayText\": \"text\", \"url\": \"http://example.com\"}`. Only absolute URLs with HTTP/HTTPS protocol are allowed.\n      enum:\n        - text\n        - multitext\n        - select\n        - multiselect\n        - boolean\n        - date\n        - datetime\n        - number\n        - link\n      type: string\n    FieldsResponse:\n      description: |\n        The `fields` will contain all of the custom metadata fields as well as the system fields,\n        in order.\n      properties:\n        fields:\n          items:\n            $ref: \"#/components/schemas/FieldSpec\"\n          type: array\n      required:\n        - fields\n      type: object\n    GeneralError:\n      properties:\n        message:\n          type: string\n        type:\n          $ref: \"#/components/schemas/GeneralErrorType\"\n      required:\n        - type\n        - message\n      type: object\n    GeneralErrorResponse:\n      description: General error response that usually has a very generic message\n      properties:\n        errors:\n          items:\n            $ref: \"#/components/schemas/GeneralError\"\n          type: array\n      required:\n        - errors\n      type: object\n    GeneralErrorType:\n      description: The type of the general error response\n      enum:\n        - GeneralError\n      type: string\n    PageInfo:\n      description: Contains the pagination metadata for a response\n      properties:\n        current:\n          description: The current page number using 1-based array indexing\n          type: integer\n        itemCount:\n          description: Total number of items\n          type: integer\n        itemsPerPage:\n          description: |\n            Maximum items that can be on the page. They may be different from\n            the requested number of times\n          type: integer\n        unfilteredItemCount:\n          description: Item count if filters were not applied\n          type: integer\n      required:\n        - itemCount\n        - itemsPerPage\n        - unfilteredItemCount\n        - current\n      type: object\n    PagedCustomFieldResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/FieldSpec\"\n          type: array\n        page:\n          $ref: \"#/components/schemas/PageInfo\"\n      required:\n        - page\n        - data\n      type: object\n    ResourceKind:\n      description: A list of supported resource kinds\n      enum:\n        - datasource\n        - table\n        - column\n        - usecase\n        - bireport\n        - glossaryitem\n        - application\n        - pipeline\n        - api\n        - model\n        - stream\n        - filestorage\n      type: string\n    SearchCategory:\n      description: A value that describes which resource kinds (`ResourceKind`) to include in the search response.\n      enum:\n        - data\n        - bi\n        - usecase\n        - glossary\n        - application\n        - pipeline\n        - api\n        - model\n        - stream\n        - filestorage\n      type: string\n    UpdateCustomFieldRequest:\n      properties:\n        description:\n          description: |\n            A description of the purpose of this field\n          maxLength: 255\n          nullable: true\n          type: string\n        displayName:\n          description: |\n            A nice human-readable name for that field\n          nullable: true\n          type: string\n        filterable:\n          description: |\n            Should this field show up as a filter in the catalog\n          nullable: true\n          type: boolean\n        hideIfEmpty:\n          description: |\n            Should this field be hidden when its value is empty\n          nullable: true\n          type: boolean\n        maxValue:\n          nullable: true\n          type: number\n        minValue:\n          nullable: true\n          type: number\n        searchable:\n          description: |\n            Should this field be used in the catalog fuzzy search\n          nullable: true\n          type: boolean\n        validValues:\n          items:\n            type: string\n          nullable: true\n          type: array\n      type: object\n    UpdateFieldSetRequest:\n      properties:\n        fields:\n          items:\n            description: A list of custom field names in display order\n            type: string\n          type: array\n      required:\n        - fields\n      type: object\n    UpdateFieldsRequest:\n      description: |\n        The `fields` array should contain all of the fields in the desired order.\n\n        Additionally, we require all field specifications _must_ contain the following fields:\n\n          *   `category`\n      properties:\n        fields:\n          items:\n            $ref: \"#/components/schemas/FieldSpecUpdateRequest\"\n          type: array\n      required:\n        - fields\n      type: object\n  securitySchemes:\n    doubleCookieAuth:\n      description: Cookie value set during login, automatically sent by the browser\n      in: header\n      name: double-cookie\n      type: apiKey\n    doubleCookieHeader:\n      in: header\n      name: X-Double-Cookie\n      type: apiKey\n    tokenAuth:\n      bearerFormat: Personal Access Token or Service Account Token\n      scheme: bearer\n      type: http\n    oidc:\n      type: openIdConnect\n      openIdConnectUrl: /auth/.well-known/openid-configuration\npaths:\n  /api/v1/{projectId}/fields/{entityClassId}:\n    get:\n      description: |\n        This returns the fields spec for the specified entity type.\n      operationId: GetFields\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FieldsResponse\"\n          description: Here are the fields\n      summary: Get Current Fields Spec\n      tags:\n        - fields\n      x-handler-group: Fields\n    parameters:\n      - description: UUID of the project\n        in: path\n        name: projectId\n        required: true\n        schema:\n          format: uuid\n          type: string\n      - description: Identifier of the entity class\n        in: path\n        name: entityClassId\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ResourceKind\"\n    put:\n      description: |\n        This updates the fields spec used to validate catalog entries\n      operationId: UpdateFields\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateFieldsRequest\"\n        description: The fields spec to set\n        required: true\n      responses:\n        \"204\":\n          description: Successfully updated the schema\n      summary: Update the current field spec\n      tags:\n        - fields\n      x-handler-group: Fields\n  /api/v2/{projectId}/field-sets:\n    get:\n      description: |\n        This returns the merged field-set for a list of resource kinds\n      operationId: GetMergedFieldSets\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FieldsResponse\"\n          description: Here are the fields\n      summary: Get combined/merged fields-set\n      tags:\n        - fields\n      x-handler-group: FieldsV2\n    parameters:\n      - description: UUID of the project\n        in: path\n        name: projectId\n        required: true\n        schema:\n          format: uuid\n          type: string\n      - description: The category is a predefined collection of `kinds` that are used to filter search results, must be set if `kinds` is omitted or empty\n        in: query\n        name: category\n        required: false\n        schema:\n          $ref: \"#/components/schemas/SearchCategory\"\n      - description: A specific list of Resource kinds. Must be set if `category` is empty or omitted.\n        explode: false\n        in: query\n        name: kinds\n        required: false\n        schema:\n          items:\n            $ref: \"#/components/schemas/ResourceKind\"\n          type: array\n        style: form\n  /api/v2/{projectId}/field-sets/{resourceKind}:\n    get:\n      description: |\n        This returns the fields spec for the specified entity type.\n      operationId: GetFieldSet\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FieldsResponse\"\n          description: Here are the fields\n      summary: Get Current Fields Spec\n      tags:\n        - fields\n      x-handler-group: FieldsV2\n    parameters:\n      - description: UUID of the project\n        in: path\n        name: projectId\n        required: true\n        schema:\n          format: uuid\n          type: string\n      - description: Identifier of the entity class\n        in: path\n        name: resourceKind\n        required: true\n        schema:\n          $ref: \"#/components/schemas/ResourceKind\"\n    put:\n      description: |\n        This updates the fields spec used to validate catalog entries, use this to assign or unassign\n        custom fields to the FieldSet. You can also use this to reoder the custom fields.\n      operationId: UpdateFieldSet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateFieldSetRequest\"\n        description: The fields spec to set\n        required: true\n      responses:\n        \"204\":\n          description: Successfully updated the schema\n      summary: Update the current field spec assignments or order\n      tags:\n        - fields\n      x-handler-group: FieldsV2\n  /api/v2/{projectId}/fields:\n    get:\n      operationId: ListCustomFields\n      parameters:\n        - description: Search fields by name and description\n          in: query\n          name: search\n          schema:\n            type: string\n        - description: Filter the response to only those unassigned for the named kind\n          in: query\n          name: unassigned\n          schema:\n            $ref: \"#/components/schemas/ResourceKind\"\n        - description: The current set of paged results to display, based on a 1-based array index\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n        - description: Maximum items to return in the response per page\n          in: query\n          name: pageSize\n          required: false\n          schema:\n            default: 20\n            maximum: 100\n            minimum: 5\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PagedCustomFieldResponse\"\n          description: Here are the fields\n      summary: List the available custom Fields\n      tags:\n        - fields\n      x-handler-group: FieldsV2\n    parameters:\n      - description: UUID of the project\n        in: path\n        name: projectId\n        required: true\n        schema:\n          format: uuid\n          type: string\n    post:\n      operationId: CreateCustomField\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreateCustomFieldRequest\"\n        description: The fields spec to set\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FieldSpec\"\n          description: Successfully create the Field\n      summary: Create new custom Field\n      tags:\n        - fields\n      x-handler-group: FieldsV2\n  /api/v2/{projectId}/fields/{fieldName}:\n    delete:\n      operationId: DeleteCustomField\n      responses:\n        \"204\":\n          description: Field successfully deleted\n      summary: Delete a field\n      tags:\n        - fields\n      x-handler-group: FieldsV2\n    parameters:\n      - description: UUID of the project\n        in: path\n        name: projectId\n        required: true\n        schema:\n          format: uuid\n          type: string\n      - description: Name of the field\n        in: path\n        name: fieldName\n        required: true\n        schema:\n          type: string\n    patch:\n      operationId: UpdateCustomField\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateCustomFieldRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FieldSpec\"\n          description: Field successfully updated\n      summary: Update a field\n      tags:\n        - fields\n      x-handler-group: FieldsV2\n\nsecurity:\n  - tokenAuth: []\n  - oidc: []\nservers:\n  - description: Locally running\n    url: http://localhost:{port}\n    variables:\n      port:\n        default: \"9191\"\n  - description: Production environment\n    url: https://cloud.example.com/{tenantId}\n    variables:\n      tenantId:\n        default: demo\ntags:\n  - description: Endpoints for managing the catalog structure\n    name: fields\n",
			"canonicalURL": "/github.com/contiamo/openapi-generator-go@bf0225ad6fe0798dffca43f08fe80078956acef3/-/blob/pkg/filters/testdata/source_without_responses_component.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/contiamo/openapi-generator-go/blob/bf0225ad6fe0798dffca43f08fe80078956acef3/pkg/filters/testdata/source_without_responses_component.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v2/{projectId}/field-sets\": get: security: security \"oidc\" (index 1): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}