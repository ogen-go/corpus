{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wso2/identity-api-server"
		},
		"file": {
			"name": "configs.yaml",
			"size": 0,
			"path": "components/org.wso2.carbon.identity.api.server.configs/org.wso2.carbon.identity.api.server.configs.v1/src/main/resources/configs.yaml",
			"byteSize": 22590,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"1.0.0\"\n  title: 'WSO2 Identity Server - Configurations API Definition'\n  description: 'This document specifies a **RESTful API** for **WSO2 Identity Server Configurations**'\n  contact:\n    name: WSO2\n    url: 'http://wso2.com/products/identity-server/'\n    email: architecture@wso2.org\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nsecurity:\n  - OAuth2: []\n  - BasicAuth: []\npaths:\n  /configs:\n    get:\n      tags:\n        - Server Configs\n      summary: Retrieve Server Configs\n      operationId: getConfigs\n      description: |\n        Retrieve Server Configs\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerConfig'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - Server Configs\n      summary: Patch Server Configs\n      description: |\n        Patch Server Configs. Patch operation is supported only for primary attributes (homeRealmIdentifier, idleSessionTimeoutPeriod and rememberMePeriod)\n      operationId: patchConfigs\n      responses:\n        '200':\n          description: Successful response\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchRequest'\n        required: true\n  /configs/provisioning/inbound/scim:\n    get:\n      tags:\n        - Server Inbound SCIM\n      summary: Retrieve Server Inbound SCIM configs\n      operationId: getInboundScimConfigs\n      description: |\n        Retrieve Server Inbound SCIM Configs\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScimConfig'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - Server Inbound SCIM\n      summary: Update Server Inbound SCIM configs\n      operationId: updateInboundScimConfigs\n      description: |\n        Update Server Inbound SCIM configs\n      responses:\n        '200':\n          description: Successful Response\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScimConfig'\n        required: true\n  /configs/authenticators:\n    get:\n      tags:\n        - Local Authenticators\n      summary: List local authenticators in the server\n      operationId: listAuthenticators\n      description: |\n        List available local authenticators of the server\n      parameters:\n        - $ref: '#/components/parameters/typeQueryParam'\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticatorListResponse'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '501':\n          description: Not Implemented\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /configs/authenticators/{authenticator-id}:\n    get:\n      tags:\n        - Local Authenticators\n      summary: Get authenticator by ID\n      operationId: getAuthenticator\n      description: |\n        By passing in the appropriate authenticator ID, you can retrieve authenticator details\n      parameters:\n        - name: authenticator-id\n          in: path\n          description: ID of an authenticator\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authenticator'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /configs/cors:\n    get:\n      tags:\n        - CORS\n      summary: Retrieve the tenant CORS configuration.\n      operationId: getCORSConfiguration\n      description: Retrieve the tenant CORS configuration.\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CORSConfig'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      tags:\n        - CORS\n      summary: Patch the tenant CORS configuration.\n      operationId: patchCORSConfiguration\n      description: A JSONPatch as defined by RFC 6902.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CORSPatchRequest'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /configs/home-realm-identifiers:\n    get:\n      tags:\n        - Home Realm Identifiers\n      summary: Retrieve the Home Realm Identifiers.\n      operationId: getHomeRealmIdentifiers\n      description: Retrieve the Home Realm Identifiers.\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HomeRealmIdentifiers'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /configs/schemas:\n    get:\n      tags:\n        - Schemas\n      summary: Retrieve Schemas supported By Server.\n      operationId: getSchemas\n      description: |\n        Retrieve Schemas supported by Server.\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SchemaListItem'\n\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /configs/schemas/{schema-id}:\n    get:\n      tags:\n        - Schemas\n      summary: Get Schema by ID\n      operationId: getSchema\n      description: |\n        By passing in the appropriate schema ID, you can retrieve attributes of a schema supported by the Server.\n      parameters:\n        - name: schema-id\n          in: path\n          description: Schema ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Schema'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '500':\n          description: Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\nservers:\n  - url: 'https://localhost:9443/t/{tenant-domain}/api/server/v1'\n    variables:\n      tenant-domain:\n        default: carbon.super\ncomponents:\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    OAuth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: 'https://localhost:9443/oauth2/authorize'\n          tokenUrl: 'https://localhost:9443/oauth2/token'\n          scopes: {}\n  parameters:\n    typeQueryParam:\n      in: query\n      name: type\n      required: false\n      description: |\n        Type of authenticators. Can be either 'LOCAL' or 'REQUEST_PATH'\n      schema:\n        type: string\n  schemas:\n    Error:\n      type: object\n      properties:\n        code:\n          type: string\n          example: AAA-00000\n        message:\n          type: string\n          example: Some Error Message\n        description:\n          type: string\n          example: Some Error Description\n        traceId:\n          type: string\n          example: e0fbcfeb-3617-43c4-8dd0-7b7d38e13047\n    ServerConfig:\n      type: object\n      properties:\n        homeRealmIdentifiers:\n          type: array\n          description: \"The home realm identifier for the resident identity provider\"\n          items:\n            type: string\n            example: \"localhost\"\n        realmConfig:\n          readOnly: true\n          $ref: '#/components/schemas/RealmConfig'\n        idleSessionTimeoutPeriod:\n          type: string\n          description: \"The idle session timeout in minutes\"\n          example: \"15\"\n          default: \"15\"\n        rememberMePeriod:\n          type: string\n          description: \"The remember me period in minutes\"\n          example: \"20160\"\n          default: \"20160\"\n        provisioning:\n          $ref: '#/components/schemas/ProvisioningConfig'\n        authenticators:\n          $ref: '#/components/schemas/AuthenticatorListResponse'\n        cors:\n          $ref: '#/components/schemas/CORSConfig'\n    RealmConfig:\n      type: object\n      properties:\n        adminUser:\n            type: string\n            description: \"Username of the super admin user in the system.\"\n            example: \"admin\"\n            readOnly: true\n        adminRole:\n            type: string\n            description: \"Name of the super admin role in the system.\"\n            example: \"Internal/admin\"\n            readOnly: true\n        everyoneRole:\n            type: string\n            description: \"Name of the everyone role in the system.\"\n            example: \"Internal/everyone\"\n            readOnly: true\n    ProvisioningConfig:\n      type: object\n      properties:\n        inbound:\n          $ref: '#/components/schemas/InboundConfig'\n    InboundConfig:\n      type: object\n      properties:\n        scim:\n          $ref: '#/components/schemas/ScimConfig'\n    ScimConfig:\n      type: object\n      properties:\n        provisioningUserstore:\n          type: string\n          description: \"userstore domain name to inbound provision users and groups. This property becomes only applicable if the enableProxyMode config is set to false\"\n          default: \"PRIMARY\"\n          example: \"PRIMARY\"\n        enableProxyMode:\n          type: boolean\n          description: \"If this property is set to true, Users/Groups are not provisioned to the user store. They are only outbound provisioned\"\n          example: false\n          default: false\n    AuthenticatorListResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/AuthenticatorListItem'\n    AuthenticatorListItem:\n      type: object\n      properties:\n        id:\n          type: string\n          example: QmFzaWNBdXRoZW50aWNhdG9y\n          readOnly: true\n        name:\n          type: string\n          example: BasicAuthenticator\n        displayName:\n          type: string\n          example: basic\n        isEnabled:\n          type: boolean\n          default: true\n          example: true\n        type:\n          type: string\n          enum:\n            - LOCAL\n            - REQUEST_PATH\n        tags:\n          type: array\n          items:\n            type: string\n          example: [2FA,MFA]\n          readOnly: true\n        self:\n          type: string\n          example: /t/carbon.super/api/server/v1/configs/authenticators/QmFzaWNBdXRoZW50aWNhdG9y\n    Authenticator:\n      type: object\n      properties:\n        id:\n          type: string\n          example: QmFzaWNBdXRoZW50aWNhdG9y\n          readOnly: true\n        name:\n          type: string\n          example: BasicAuthenticator\n        displayName:\n          type: string\n          example: basic\n        isEnabled:\n          type: boolean\n          default: true\n        type:\n          type: string\n          enum:\n            - LOCAL\n            - REQUEST_PATH\n        tags:\n          type: array\n          items:\n            type: string\n          example: [2FA,MFA]\n          readOnly: true\n        properties:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthenticatorProperty'\n      required:\n        - name\n        - displayName\n    AuthenticatorProperty:\n      required:\n        - key\n      type: object\n      properties:\n        key:\n          type: string\n          example: AuthMechanism\n        value:\n          type: string\n          example: basic\n    PatchRequest:\n      type: array\n      items:\n        $ref: '#/components/schemas/Patch'\n    Patch:\n      description: A JSONPatch as defined by RFC 6902. Patch operation is supported only for root level attributes of ServerConfig.\n      required:\n        - operation\n        - path\n      properties:\n        operation:\n          type: string\n          description: The operation to be performed\n          enum:\n            - ADD\n            - REMOVE\n            - REPLACE\n          example: REPLACE\n        path:\n          type: string\n          description: A JSON-Pointer\n          example: '/idleSessionTimeoutPeriod'\n        value:\n          type: string\n          description: The value to be used within the operations\n          example: '30'\n    CORSConfig:\n      type: object\n      properties:\n        allowGenericHttpRequests:\n          type: boolean\n          description: If true, generic HTTP requests must be allowed to pass through the filter. Else, only valid and accepted CORS must be allowed (strict CORS filtering).\n          example: true\n        allowAnyOrigin:\n          type: boolean\n          description: If true the CORS valve must allow requests from any origin, else the origin whitelist must be consulted.\n          example: false\n        allowSubdomains:\n          type: boolean\n          description: If true, the CORS valve must allow requests from any origin which is a subdomain origin of the allowed origins.\n          example: false\n        supportedMethods:\n          type: array\n          description: The supported HTTP methods. Requests for methods not included here must be refused by the CORS filter with an HTTP 405 \\\"Method not allowed\\\" response.\n          items:\n            type: string\n            example: GET\n        supportAnyHeader:\n          type: boolean\n          description: If true the CORS valve must support any requested header, else the supported headers list must be consulted.\n          example: false\n        supportedHeaders:\n          type: array\n          description: The names of the supported author request headers.\n          items:\n            type: string\n            example: Content-Type\n        exposedHeaders:\n          type: array\n          description: The non-simple response headers that the web browser should expose to the author of the CORS request.\n          items:\n            type: string\n            example: X-Custom-1\n        supportsCredentials:\n          type: boolean\n          description: Whether user credentials, such as cookies, HTTP authentication or client-side certificates, are supported.\n          example: true\n        maxAge:\n          type: number\n          description: Indicates how long the results of a preflight request can be cached by the web client, in seconds. If -1 then unspecified.\n          example: 3600\n    CORSPatchRequest:\n      type: array\n      items:\n        $ref: '#/components/schemas/CORSPatch'\n    CORSPatch:\n      type: object\n      required:\n        - operation\n        - path\n        - value\n      properties:\n        operation:\n          type: string\n          description: The operation to be performed.\n          enum:\n            - ADD\n            - REMOVE\n            - REPLACE\n          example: ADD\n        path:\n          type: string\n          description: A JSON-Pointer\n          example: '/allowGenericHttpRequests'\n        value:\n          type: string\n          description: The value to be used within the operations.\n          example: '30'\n    HomeRealmIdentifiers:\n      type: array\n      description: The list of home realm identifiers.\n      items:\n        type: string\n        example: localhost\n    SchemaListItem:\n      type: object\n      properties:\n        id:\n          type: string\n          example: \"b0fbcfeb-3617-43c4-8dd0-7b7d38e13047\"\n        name:\n          type: string\n          example: \"urn:ietf:params:scim:schemas:core:2.0\"\n        self:\n          type: string\n          example: \"/t/carbon.super/api/server/v1/configs/schemas/123e4567-e89b-12d3-a456-556642440000\"\n    Schema:\n      type: object\n      properties:\n        id:\n          type: string\n          example: \"b0fbcfeb-3617-43c4-8dd0-7b7d38e13047\"\n        name:\n          type: string\n          example: \"urn:ietf:params:scim:schemas:core:2.0\"\n        attributes:\n          type: array\n          description: \"list of attributes available in a schema\"\n          items:\n            type: string\n            example: \"urn:ietf:params:scim:schemas:core:2.0:id\"\n",
			"canonicalURL": "/github.com/wso2/identity-api-server@1c81f70117e6130228ac537f8526ad3655061b43/-/blob/components/org.wso2.carbon.identity.api.server.configs/org.wso2.carbon.identity.api.server.configs.v1/src/main/resources/configs.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/wso2/identity-api-server/blob/1c81f70117e6130228ac537f8526ad3655061b43/components/org.wso2.carbon.identity.api.server.configs/org.wso2.carbon.identity.api.server.configs.v1/src/main/resources/configs.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/configs/cors\": get: security: security \"OAuth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}