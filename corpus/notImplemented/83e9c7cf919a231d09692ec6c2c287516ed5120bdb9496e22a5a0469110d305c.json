{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/networknt/model-config"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "rest/oauth2_merged/openapi.yaml",
			"byteSize": 24014,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: OAuth2 Services Merged into a Monolithic App\n  description: OAuth2 Services with all endpoints in one API.\n  contact:\n    email: stevehu@gmail.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n  - url: 'http://oauth2.networknt.com/'\n  - url: 'https://oauth2.networknt.com/'    \npaths:\n  /oauth2/client:\n    post:\n      description: Return a client object\n      operationId: createClient\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n      security:\n        - light_oauth2:\n            - oauth.client.w\n      requestBody:\n        $ref: '#/components/requestBodies/Client'\n    put:\n      description: Return the updated client\n      operationId: updateClient\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n      security:\n        - light_oauth2:\n            - oauth.client.w\n      requestBody:\n        $ref: '#/components/requestBodies/Client'\n    get:\n      description: Return all clients\n      operationId: getAllClient\n      parameters:\n        - name: page\n          in: query\n          description: Page number\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: pageSize\n          in: query\n          description: Pag size\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: clientName\n          in: query\n          description: Partial clientName for filter\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Client'\n      security:\n        - light_oauth2:\n            - oauth.client.r\n  '/oauth2/client/{clientId}':\n    delete:\n      description: Delete a client by Id\n      operationId: deleteClient\n      parameters:\n        - name: clientId\n          in: path\n          description: Client Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid clientId supplied\n        '404':\n          description: Client not found\n      security:\n        - light_oauth2:\n            - oauth.client.w\n    get:\n      description: Get a client by Id\n      operationId: getClient\n      parameters:\n        - name: clientId\n          in: path\n          description: Client Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n        '400':\n          description: Invalid clientId supplied\n        '404':\n          description: Client not found\n      security:\n        - light_oauth2:\n            - oauth.client.r\n            - oauth.client.w\n  /oauth2/code:\n    get:\n      description: Return 302 redirect with authorization code\n      operationId: getAuthCode\n      parameters:\n        - name: Authorization\n          description: 'encoded username:password mandatory if Basic Authentication is used'\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: response_type\n          in: query\n          description: The response type for authorization code\n          required: true\n          schema:\n            type: string\n            enum:\n              - code\n        - name: client_id\n          in: query\n          description: The client id for authorization code\n          required: true\n          schema:\n            type: string\n        - name: redirect_uri\n          in: query\n          description: The redirect uri for authorization code\n          required: false\n          schema:\n            type: string\n        - name: username\n          in: query\n          description: The user name for authorization code\n          required: false\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for authorization code in clear text\n          required: false\n          schema:\n            type: string\n        - name: state\n          in: query\n          description: to prevent cross-site request forgery\n          required: false\n          schema:\n            type: string\n        - name: scope\n          in: query\n          description: scope of the request\n          required: false\n          schema:\n            type: string\n        - name: code_challenge\n          in: query\n          description: PKCE code challenge\n          required: false\n          schema:\n            type: string\n        - name: code_challenge_method\n          in: query\n          description: PKCE code challenge method\n          required: false\n          schema:\n            type: string\n      responses:\n        '302':\n          description: Successful Operation\n    post:\n      description: Return 302 redirect with authorization code\n      operationId: postAuthCode\n      responses:\n        '302':\n          description: Successful Operation\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                j_username:\n                  description: User name\n                  type: string\n                j_password:\n                  description: Password\n                  type: string\n                response_type:\n                  description: Response type\n                  type: string\n                  enum:\n                    - code\n                client_id:\n                  description: Client Id\n                  type: string\n                redirect_uri:\n                  description: Redirect Uri\n                  type: string\n                state:\n                  description: to prevent cross-site request forgery\n                  type: string\n                scope:\n                  description: scope of the request\n                  type: string\n                code_challenge:\n                  description: PKCE code challenge\n                  type: string\n                code_challenge_method:\n                  description: PKCE code challenge method\n                  type: string\n              required:\n                - j_username\n                - j_password\n                - response_type\n                - client_id\n  '/oauth2/key/{keyId}':\n    get:\n      description: Get a key by Id\n      operationId: getKeyById\n      parameters:\n        - name: keyId\n          in: path\n          description: Key Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Key'\n        '400':\n          description: Invalid keyId supplied\n        '404':\n          description: Key not found\n      security:\n        - light_oauth2:\n            - oauth.key.r\n            - oauth.key.w\n  /oauth2/refresh_token:\n    get:\n      description: Return all refresh tokens\n      operationId: getAllRefreshToken\n      parameters:\n        - name: page\n          in: query\n          description: Page number\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: pageSize\n          in: query\n          description: Pag size\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: userId\n          in: query\n          description: Partial userId for filter\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RefreshToken'\n      security:\n        - light_oauth2:\n            - oauth.refresh_token.r\n  '/oauth2/refresh_token/{refreshToken}':\n    delete:\n      description: Delete a refresh token\n      operationId: deleteRefreshToken\n      parameters:\n        - name: refreshToken\n          in: path\n          description: Refresh Token\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid refresh token supplied\n        '404':\n          description: Refresh token not found\n      security:\n        - light_oauth2:\n            - oauth.refresh_token.w\n    get:\n      description: Get a refresh token\n      operationId: getRefreshToken\n      parameters:\n        - name: refreshToken\n          in: path\n          description: Refresh token\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefreshToken'\n        '400':\n          description: Invalid refresh token supplied\n        '404':\n          description: Refresh token not found\n      security:\n        - light_oauth2:\n            - oauth.refresh_token.r\n            - oauth.refresh_token.w\n  /oauth2/service:\n    post:\n      description: Return a service object\n      operationId: createService\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n      security:\n        - light_oauth2:\n            - oauth.service.w\n      requestBody:\n        $ref: '#/components/requestBodies/Service'\n    put:\n      description: Return the updated service\n      operationId: updateService\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n      security:\n        - light_oauth2:\n            - oauth.service.w\n      requestBody:\n        $ref: '#/components/requestBodies/Service'\n    get:\n      description: Return all services\n      operationId: getAllService\n      parameters:\n        - name: page\n          in: query\n          description: Page number\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: pageSize\n          in: query\n          description: Pag size\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: serviceId\n          in: query\n          description: Partial serviceId for filter\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Service'\n      security:\n        - light_oauth2:\n            - oauth.service.r\n  '/oauth2/service/{serviceId}':\n    delete:\n      description: Delete a service by Id\n      operationId: deleteService\n      parameters:\n        - name: serviceId\n          in: path\n          description: Service Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid serviceId supplied\n        '404':\n          description: Service not found\n      security:\n        - light_oauth2:\n            - oauth.service.w\n    get:\n      description: Get a service by Id\n      operationId: getService\n      parameters:\n        - name: serviceId\n          in: path\n          description: Service Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n        '400':\n          description: Invalid serviceId supplied\n        '404':\n          description: Service not found\n      security:\n        - light_oauth2:\n            - oauth.service.r\n            - oauth.service.w\n  /oauth2/token:\n    post:\n      description: JSON object that contains access token\n      operationId: postToken\n      parameters:\n        - name: authorization\n          description: encoded client_id and client_secret pair\n          in: header\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful Operation\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                grant_type:\n                  type: string\n                  enum:\n                    - authorization_code\n                    - client_credentials\n                    - password\n                    - refresh_token\n                    - client_authenticated_user\n                client_id:\n                  description: \u003e-\n                    used as alternative to authentication header for client\n                    authentication\n                  type: string\n                client_secret:\n                  description: \u003e-\n                    used as alternative to authentication header for client\n                    authentication\n                  type: string\n                code:\n                  description: used in authorization_code to specify the code\n                  type: string\n                username:\n                  description: mandatory in password grant type\n                  type: string\n                password:\n                  description: mandatory in password grant type\n                  type: string\n                scope:\n                  description: used by all flows to specify scope in the access token\n                  type: string\n                redirect_uri:\n                  description: used in authorization code if code endpoint with rediret_uri\n                  type: string\n                refresh_token:\n                  description: refresh token used to get another access token\n                  type: string\n                code_verifier:\n                  description: PKCE code verifier\n                  type: string\n              required:\n                - grant_type\n  /oauth2/user:\n    get:\n      description: Return all users\n      operationId: getAllUsers\n      parameters:\n        - name: page\n          in: query\n          description: Page number\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: pageSize\n          in: query\n          description: Pag size\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: userId\n          in: query\n          description: Partial userId for filter\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n      security:\n        - light_oauth2:\n            - oauth.user.r\n    post:\n      description: Return a user object\n      operationId: createUser\n      responses:\n        '200':\n          description: Successful response\n      security:\n        - light_oauth2:\n            - oauth.user.w\n      requestBody:\n        $ref: '#/components/requestBodies/User'\n    put:\n      description: Return the updated user\n      operationId: updateUser\n      responses:\n        '200':\n          description: Successful response\n      security:\n        - light_oauth2:\n            - oauth.user.w\n      requestBody:\n        $ref: '#/components/requestBodies/User'\n  '/oauth2/user/{userId}':\n    delete:\n      description: Delete a user by Id\n      operationId: deleteUser\n      parameters:\n        - name: userId\n          in: path\n          description: User Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid userId supplied\n        '404':\n          description: User not found\n      security:\n        - light_oauth2:\n            - oauth.user.w\n    get:\n      description: Get a user by Id\n      operationId: getUser\n      parameters:\n        - name: userId\n          in: path\n          description: User Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid userId supplied\n        '404':\n          description: User not found\n      security:\n        - light_oauth2:\n            - oauth.user.r\n            - oauth.user.w\n  '/oauth2/password/{userId}':\n    post:\n      description: Reset Password\n      operationId: resetPassword\n      parameters:\n        - name: userId\n          in: path\n          description: User Id\n          required: true\n          schema:\n            type: string\n      responses:\n        '404':\n          description: User not found\n      security:\n        - light_oauth2:\n            - oauth.user.w\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Password'\n        description: Password object that needs to be added\n        required: true\ncomponents:\n  requestBodies:\n    User:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/User'\n      description: User object that needs to be added\n      required: true\n    Client:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Client'\n      description: Client object that needs to be added\n      required: true\n    Service:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Service'\n      description: Service object that needs to be added\n      required: true\n  securitySchemes:\n    light_oauth2:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'http://localhost:8888/oauth2/code'\n          scopes:\n            oauth.client.w: write oauth client\n            oauth.client.r: read oauth client\n            oauth.key.w: write key\n            oauth.key.r: read key\n            oauth.refresh_token.w: write oauth refresh token\n            oauth.refresh_token.r: read oauth refresh token\n            oauth.service.w: write oauth service\n            oauth.service.r: read oauth service\n            oauth.user.w: write user\n            oauth.user.r: read user\n  schemas:\n    Client:\n      type: object\n      required:\n        - clientType\n        - clientProfile\n        - clientName\n        - clientDesc\n        - ownerId\n        - scope\n      properties:\n        clientId:\n          type: string\n          description: a unique client id\n        clientSecret:\n          type: string\n          description: client secret\n        clientType:\n          type: string\n          description: client type\n          enum:\n            - confidential\n            - public\n            - trusted\n            - external\n        clientProfile:\n          type: string\n          description: client profile\n          enum:\n            - webserver\n            - browser\n            - mobile\n            - service\n            - batch\n        clientName:\n          type: string\n          description: client name\n        clientDesc:\n          type: string\n          description: client description\n        ownerId:\n          type: string\n          description: client owner id\n        scope:\n          type: string\n          description: client scope separated by space\n        customClaim:\n          type: string\n          description: custom claim string in JSON format\n        redirectUri:\n          type: string\n          description: redirect uri\n        createDt:\n          type: string\n          format: date-time\n          description: create date time\n        updateDt:\n          type: string\n          format: date-time\n          description: update date time\n    Key:\n      type: object\n      required:\n        - keyId\n        - certificate\n      properties:\n        keyId:\n          type: string\n          description: a unique id\n        certificate:\n          type: string\n          description: certificate\n    RefreshToken:\n      type: object\n      required:\n        - refreshToken\n        - userId\n        - clientId\n      properties:\n        refreshToken:\n          type: string\n          description: refresh token\n        userId:\n          type: string\n          description: user id\n        clientId:\n          type: string\n          description: client id\n        scope:\n          type: string\n          description: service scopes separated by space\n    Service:\n      type: object\n      required:\n        - serviceId\n        - serviceName\n        - serviceType\n        - scope\n      properties:\n        serviceId:\n          type: string\n          description: a unique service id\n        serviceType:\n          type: string\n          description: service type\n          enum:\n            - ms\n            - api\n        serviceName:\n          type: string\n          description: service name\n        serviceDesc:\n          type: string\n          description: service description\n        ownerId:\n          type: string\n          description: service owner userId\n        scope:\n          type: string\n          description: service scopes separated by space\n        createDt:\n          type: string\n          format: date-time\n          description: create date time\n        updateDt:\n          type: string\n          format: date-time\n          description: update date time\n    User:\n      type: object\n      required:\n        - userId\n        - userType\n        - firstName\n        - lastName\n        - email\n      properties:\n        userId:\n          type: string\n          description: a unique id\n        userType:\n          type: string\n          description: user type\n          enum:\n            - admin\n            - employee\n            - customer\n            - partner\n        firstName:\n          type: string\n          description: first name\n        lastName:\n          type: string\n          description: last name\n        email:\n          type: string\n          description: email address\n        password:\n          type: string\n          format: password\n          description: password\n        passwordConfirm:\n          type: string\n          format: password\n          description: password confirm\n        createDt:\n          type: string\n          format: date-time\n          description: create date time\n        updateDt:\n          type: string\n          format: date-time\n          description: update date time\n    Password:\n      type: object\n      required:\n        - password\n        - newPassword\n        - newPasswordConfirm\n      properties:\n        password:\n          type: string\n          format: password\n          description: existing password\n        newPassword:\n          type: string\n          format: password\n          description: new password\n        newPasswordConfirm:\n          type: string\n          format: password\n          description: new password confirm",
			"canonicalURL": "/github.com/networknt/model-config@3fea561d7982c217c1d5d35c1193eac78a7fdcef/-/blob/rest/oauth2_merged/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/networknt/model-config/blob/3fea561d7982c217c1d5d35c1193eac78a7fdcef/rest/oauth2_merged/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/oauth2/key/{keyId}\": get: security: security \"light_oauth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}