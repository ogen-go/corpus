{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "aiception.com-1.0.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/aiception.com-1.0.0-swagger.yaml",
			"byteSize": 8607,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    x-twitter: AIception\n  description: Here you can play \u0026 test \u0026 prototype all the endpoints using just your\n    browser! Go ahead!\n  title: AIception Interactive\n  version: 1.0.0\n  x-apisguru-categories:\n    - machine_learning\n  x-logo:\n    url: https://twitter.com/AIception/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://aiception.com/static/swagger.json\n      version: \"2.0\"\n  x-providerName: aiception.com\nsecurity:\n  - UserSecurity: []\ntags:\n  - description: Everything about AIception vision API\n    externalDocs:\n      description: Find out more\n      url: https://aiception.com\n    name: vision\n  - description: What will you make?\n    name: creative\n  - description: Speech to text, text to speech, natural language processing\n    externalDocs:\n      description: Find out more\n      url: https://aiception.com\n    name: language\npaths:\n  /adult_content:\n    post:\n      description: Creates a new adult_content task that tells the if the image has nudity\n        or sexual content.\n      requestBody:\n        $ref: \"#/components/requestBodies/Body\"\n      responses:\n        \"201\":\n          description: Task succesfully created.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"400\":\n          description: Task could not be created.\n      summary: Image contains nudity or sexually explicit content? [ image_url -\u003e id ]\n      tags:\n        - vision\n  \"/adult_content/{taskId}\":\n    get:\n      description: Gets the adult_content task.\n      parameters:\n        - description: An internal id for the task\n          in: path\n          name: taskId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The contents of the adult_content task.\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"404\":\n          description: The Task does not exists.\n      summary: Gets the adult_content task [ id -\u003e adult content task ]\n      tags:\n        - vision\n  /artistic_image:\n    post:\n      description: Given an image content and a style image create a new stylized image of\n        the content.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                async:\n                  default: true\n                  type: boolean\n                image_url:\n                  type: string\n                style_url:\n                  type: string\n              required:\n                - image_url\n                - style_url\n        description: The content image and the style image\n        required: true\n      responses:\n        \"201\":\n          description: Task succesfully created.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"400\":\n          description: Task could not be created.\n      summary: Create an artistic image [ image_url, style_url -\u003e id ]\n      tags:\n        - creative\n  \"/artistic_image/{taskId}\":\n    get:\n      description: The artistic_image will have the urls of the stylized images.\n      parameters:\n        - description: An internal id for the task\n          in: path\n          name: taskId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The contents of the artistic_image task.\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"404\":\n          description: The Task does not exists.\n      summary: Gets a artistic image by task id [ id -\u003e artistic image task ]\n      tags:\n        - creative\n  /detect_object:\n    post:\n      description: Creates a new detect object task that recognizes the object in the image.\n      requestBody:\n        $ref: \"#/components/requestBodies/Body\"\n      responses:\n        \"201\":\n          description: Task succesfully created.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"400\":\n          description: Task could not be created.\n      summary: What is that object? [ image_url -\u003e id ]\n      tags:\n        - vision\n  \"/detect_object/{taskId}\":\n    get:\n      description: Gets the detect_object task.\n      parameters:\n        - description: An internal id for the task\n          in: path\n          name: taskId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The contents of the detect_object task.\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"404\":\n          description: The Task does not exists.\n      summary: Gets the detect_object task [ id -\u003e detect object task]\n      tags:\n        - vision\n  /face:\n    post:\n      description: Get a list of all the locations of the faces in the image.\n      requestBody:\n        $ref: \"#/components/requestBodies/Body\"\n      responses:\n        \"201\":\n          description: Task succesfully created.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"400\":\n          description: Task could not be created.\n      summary: Find all faces in the image [ image_url -\u003e id ]\n      tags:\n        - vision\n  \"/face/{taskId}\":\n    get:\n      description: Gets the face task.\n      parameters:\n        - description: An internal id for the task\n          in: path\n          name: taskId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The contents of the face task.\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"404\":\n          description: The Task does not exists.\n      summary: Gets the face task [ id -\u003e face task ]\n      tags:\n        - vision\n  /face_age:\n    post:\n      description: Creates a new face age task that approximates the age of the person in\n        the image.\n      requestBody:\n        $ref: \"#/components/requestBodies/Body\"\n      responses:\n        \"201\":\n          description: Task succesfully created.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"400\":\n          description: Task could not be created.\n      summary: How old is the person in the image? [ image_url -\u003e id ]\n      tags:\n        - vision\n  \"/face_age/{taskId}\":\n    get:\n      description: Gets the face_age task.\n      parameters:\n        - description: An internal id for the task\n          in: path\n          name: taskId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The contents of the face_age task.\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Task\"\n        \"404\":\n          description: The Task does not exists.\n      summary: Gets the face_age task [ id -\u003e face age task ]\n      tags:\n        - vision\nservers:\n  - url: https://aiception.com/api/v2.1\ncomponents:\n  requestBodies:\n    Body:\n      content:\n        application/json:\n          schema:\n            properties:\n              async:\n                default: true\n                type: boolean\n              image_url:\n                type: string\n            required:\n              - image_url\n      description: The image to analyze\n      required: true\n  securitySchemes:\n    UserSecurity:\n      type: http\n      scheme: basic\n  schemas:\n    AgeAnswer:\n      properties:\n        max:\n          type: integer\n        min:\n          type: integer\n        score:\n          type: number\n    Person:\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        username:\n          type: string\n      required:\n        - username\n    Persons:\n      items:\n        $ref: \"#/components/schemas/Person\"\n      type: array\n    Task:\n      properties:\n        answer:\n          description: The answer you are looking for.\n          readOnly: true\n          type: number\n        image_url:\n          description: The url of the image that will be processed.\n          type: string\n        this_url:\n          description: Use this url to get this task.\n          readOnly: true\n          type: string\n      required:\n        - image_url\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/aiception.com-1.0.0-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/aiception.com-1.0.0-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/artistic_image/{taskId}\": get: responses: 200: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}