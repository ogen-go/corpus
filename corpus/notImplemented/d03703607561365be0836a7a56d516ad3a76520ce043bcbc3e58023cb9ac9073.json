{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/AlvaroIsrael/gobarber-app"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "gobarber-backend/swagger.yaml",
			"byteSize": 27770,
			"content": "openapi: 3.0.0\ninfo:\n  version: 0.1.0\n  title: GoBarber API\n  description: GoBarber API for https://gobarberapp.net\n  termsOfService: 'https://github.com/AlvaroIsrael/gobarber-app/blob/master/gobarber-backend/README.md'\n  contact:\n    email: israel.nunes.leite@gmail.com\n  license:\n    name: MIT\n    url: 'https://github.com/AlvaroIsrael/gobarber-app/blob/master/gobarber-backend/LICENSE.md'\n\nservers:\n  - url: http://localhost:3333/api/v1\n    description: Development server\n  - url: https://localhost:3333/api/v1\n    description: Development server\n  - url: https://backend.gobarberapp.net/api/v1\n    description: Production server\n\ntags:\n  - name: Files\n    description: Operations about files.\n  - name: Appointments\n    description: Operations about appointments.\n  - name: Providers\n    description: Operations about providers.\n  - name: Users\n    description: Operations about users.\n  - name: Sessions\n    description: Operations about sessions.\n    externalDocs:\n      description: Find out more at\n      url: 'https://github.com/AlvaroIsrael/gobarber-app'\n  - name: Password\n    description: Operations about password recovery.\n  - name: Profile\n    description: Operations about password reset.\n  - name: Docs\n    description: Information about app routes using swagger.\n\ncomponents:\n  securitySchemes:\n    JWT:\n      description: 'JWT Bearer'\n      type: apiKey\n      name: Authorization\n      in: header\n  schemas:\n    Appointments:\n      required:\n        - provider_id\n        - date\n      properties:\n        provider_id:\n          type: string\n        date:\n          type: string\n      example:\n        provider_id: '4129c527-67c1-4fc4-a091-526011d74a48'\n        date: '2021-03-09 09:00:00'\n    Users:\n      required:\n        - name\n        - email\n        - password\n      properties:\n        name:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n      example:\n        name: 'Go Barber User'\n        example: 'docs@gobarberapp.net'\n        password: 'pass321456'\n    Sessions:\n      required:\n        - email\n        - password\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n      example:\n        email: 'docs@gobarberapp.net'\n        password: 'pass321456'\n    InternalServerError:\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example:\n        status: 'error'\n        message: 'Internal server error.'\n    UnauthorizedError:\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example:\n        status: 'error'\n        message: 'Missing JWT token.'\n    MailAreadyUsedError:\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example:\n        status: 'error'\n        message: 'Email already used.'\n    AppointmentAlreadyBookedError:\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example:\n        status: 'error'\n        message: 'This appointment is already booked.'\n    AppointmentPastDateError:\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example:\n        status: 'error'\n        message: 'You cant create an appointment on a past date.'\n    AppointmentWithYourselfError:\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example:\n        status: 'error'\n        message: 'You cant create an appointment with yourself.'\n    AppointmentOutOfBoundariesError:\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example:\n        status: 'error'\n        message: 'You can only create appointments between 8am and 5pm.'\n    ResetPasswordTokenDoesNotExistError:\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example:\n        status: 'error'\n        message: 'User token does not exist'\n    ResetPasswordTokenExpiredError:\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      example:\n        status: 'error'\n        message: 'Token has expired'\n    ValidationError:\n      properties:\n        statusCode:\n          type: integer\n        error:\n          type: string\n        message:\n          type: string\n        validation:\n          type: object\n          properties:\n            body:\n              type: object\n              properties:\n                source:\n                  type: string\n                keys:\n                  type: array\n                message:\n                  type: string\n      example:\n        statusCode: 400\n        error: 'Bad Request'\n        message: 'celebrate request validation failed'\n        validation: {\n          body: {\n            source: 'body',\n            keys: [ 'validated field' ],\n            message: 'validated field is required',\n          }\n        }\n\npaths:\n  /docs:\n    get:\n      tags:\n        - Docs\n      summary: Exhibits a web page with all api documented by swagger.\n      description: 'Exhibits a web page with all api documented by swagger.'\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '200':\n          description: When all parameters are ok.\n          content:\n            text/html:\n              example:\n                text/html:\n                  value: '\u003c!DOCTYPE html\u003e\u003chtml lang=\"en\"\u003e\u003chead\u003e\u003cmeta charset=\"UTF-8\"\u003e\u003ctitle\u003eSwagger UI\u003c/title\u003e\u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./swagger-ui.css\" \u003e\u003clink rel=\"icon\" type=\"image/png\" href=\"./favicon-32x32.png\" sizes=\"32x32\" /\u003e\u003clink rel=\"icon\" type=\"image/png\" href=\"./favicon-16x16.png\" sizes=\"16x16\" /\u003e\u003c/head\u003e\u003cbody\u003e\u003cdiv id=\"swagger-ui\"\u003e\u003c/div\u003e\u003cscript src=\"./swagger-ui-bundle.js\"\u003e\u003c/script\u003e\u003cscript src=\"./swagger-ui-standalone-preset.js\"\u003e\u003c/script\u003e\u003cscript src=\"./swagger-ui-init.js\"\u003e\u003c/script\u003e\u003c/body\u003e\u003c/html\u003e'\n      security: [ ]\n\n  /password/reset:\n    post:\n      tags:\n        - Password\n      summary: Resets a password.\n      description: 'Resets a password.'\n      requestBody:\n        description: New Password\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                password:\n                  type: string\n                passwordConfirmation:\n                  type: string\n                token:\n                  type: string\n            example: {\n              password: '12312345',\n              passwordConfirmation: '12312345',\n              token: 'd1d1bfbc-f150-4e2f-89bc-979cfdeac181',\n            }\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResetPasswordTokenDoesNotExistError'\n        '400':\n          description: When validation error occurs.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/ResetPasswordTokenDoesNotExistError'\n                  - $ref: '#/components/schemas/ResetPasswordTokenExpiredError'\n              examples:\n                ResetPasswordTokenDoesNotExistError:\n                  value:\n                    status: 'error'\n                    message: 'User token does not exist'\n                ResetPasswordTokenExpiredError:\n                  value:\n                    status: 'error'\n                    message: 'Token has expired'\n        '200':\n          description: When all parameters are ok.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  day:\n                    type: integer\n                  available:\n                    type: boolean\n              example: {\n                password: '12312345',\n                passwordConfirmation: '12312345',\n                token: 'd1d1bfbc-f150-4e2f-89bc-979cfdeac181',\n              }\n        '204':\n          description: When a email is successfully send.\n      security: [ ]\n\n  /password/forgot:\n    post:\n      tags:\n        - Password\n      summary: Sends a email with a password recovery link.\n      description: 'Sends a email with a password recovery link.'\n      requestBody:\n        description: New Appointment\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n            example:\n              email: 'team@gobarberapp.net'\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '204':\n          description: When a email is successfully send.\n      security: [ ]\n\n  /providers/{provider_id}/month-availability:\n    get:\n      tags:\n        - Providers\n      summary: Return an array of days in a month clear for a new appointment.\n      description: 'Return an array of days in a month clear for a new appointment.'\n      parameters:\n        - in: path\n          name: provider_id\n          description: An uuid of a provider.\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: month\n          schema:\n            type: integer\n          description: A month's number.\n        - in: query\n          name: year\n          schema:\n            type: integer\n          description: A year's number.\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '200':\n          description: When all parameters are ok.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  day:\n                    type: integer\n                  available:\n                    type: boolean\n              examples:\n                With data return:\n                  value: [ {\n                    day: 1,\n                    available: true,\n                  }, {\n                    day: 2,\n                    available: false,\n                  }, ]\n                Without data return:\n                  value: [ ]\n        '401':\n          description: When not authenticated (missing JWT token).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n      security: [ { JWT: [ ] } ]\n\n  /providers/{provider_id}/day-availability:\n    get:\n      tags:\n        - Providers\n      summary: Return an array of hours clear for a new appointment at a specific day.\n      description: 'Return an array of hours clear for a new appointment at a specific day.'\n      parameters:\n        - in: path\n          name: provider_id\n          description: An uuid of a provider.\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: day\n          schema:\n            type: integer\n          description: A day of the month.\n        - in: query\n          name: month\n          schema:\n            type: integer\n          description: A month's number.\n        - in: query\n          name: year\n          schema:\n            type: integer\n          description: A year's number.\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '200':\n          description: When all parameters are ok.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  hour:\n                    type: integer\n                  available:\n                    type: boolean\n              examples:\n                With data return:\n                  value: [ {\n                    hour: 8,\n                    available: true,\n                  }, {\n                    hour: 9,\n                    available: false,\n                  }, ]\n                Without data return:\n                  value: [ ]\n        '401':\n          description: When not authenticated (missing JWT token).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n      security: [ { JWT: [ ] } ]\n\n  /providers:\n    get:\n      tags:\n        - Providers\n      summary: Return a list of providers registered at the app.\n      description: 'Return an array of all providers.'\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '200':\n          description: When all parameters are ok.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  name:\n                    type: string\n                  email:\n                    type: string\n                  avatar:\n                    type: string\n                    nullable: true\n                  created_at:\n                    type: string\n                  updated_at:\n                    type: string\n                  avatar_url:\n                    type: string\n                    nullable: true\n              examples:\n                With data return:\n                  value: [ {\n                    id: '4129c527-67c1-4fc4-a091-526011d74a48',\n                    name: 'Team Go Barber',\n                    email: 'team4@gobarberapp.net',\n                    avatar: null,\n                    created_at: '2021-03-07T21:31:27.465Z',\n                    updated_at: '2021-03-07T21:31:27.465Z',\n                    avatar_url: null,\n                  }, ]\n                Without data return:\n                  value: [ ]\n        '401':\n          description: When not authenticated (missing JWT token).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n      security: [ { JWT: [ ] } ]\n\n  /appointments/me:\n    get:\n      tags:\n        - Appointments\n      summary: Return an array of all appointments.\n      description: 'Return an array of all appointments.'\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '200':\n          description: When all parameters are ok.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  provider_id:\n                    type: string\n                  user_id:\n                    type: string\n                  date:\n                    type: string\n                  created_at:\n                    type: string\n                  updated_at:\n                    type: string\n                  user:\n                    type: object\n                    properties:\n                      id:\n                        type: string\n                      name:\n                        type: string\n                      email:\n                        type: string\n                      avatar:\n                        type: string\n                      created_at:\n                        type: string\n                      updated_at:\n                        type: string\n                      avatar_url:\n                        type: string\n              examples:\n                With data return:\n                  value:\n                    [ {\n                      \"id\": \"21ae27fc-e3ab-437e-afc5-93bddea31456\",\n                      \"provider_id\": \"16463316-155d-43b8-841d-263a74613c64\",\n                      \"user_id\": \"dc25e16e-451c-40ce-8464-4508e318e7ac\",\n                      \"date\": \"2021-02-25T16:00:00.000Z\",\n                      \"created_at\": \"2021-02-24T23:36:50.552Z\",\n                      \"updated_at\": \"2021-02-24T23:36:50.552Z\",\n                      \"user\": {\n                        \"id\": \"dc25e16e-451c-40ce-8464-4508e318e7ac\",\n                        \"name\": \"Alvaro Israel 2\",\n                        \"email\": \"team4@gobarberapp.net\",\n                        \"avatar\": \"f5631562cfaa03a9cdb9-8402007.png\",\n                        \"created_at\": \"2021-02-24T02:03:16.094Z\",\n                        \"updated_at\": \"2021-02-24T03:01:12.273Z\",\n                        \"avatar_url\": \"https://s3.amazonaws.com/gobarberapp.net/f5631562cfaa03a9cdb9-8402007.png\",\n                      }\n                    }, ]\n                Without data return:\n                  value: [ ]\n        '401':\n          description: When not authenticated (missing JWT token).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n      security: [ { JWT: [ ] } ]\n\n  /appointments:\n    post:\n      tags:\n        - Appointments\n      summary: Return info from newly created appointment.\n      description: 'Return a json object for a newly created appointment.'\n      requestBody:\n        description: New Appointment\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Appointments'\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '400':\n          description: When validation error occurs.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        '404':\n          description: When business logic violation occurs.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/AppointmentAlreadyBookedError'\n                  - $ref: '#/components/schemas/AppointmentPastDateError'\n                  - $ref: '#/components/schemas/AppointmentWithYourselfError'\n                  - $ref: '#/components/schemas/AppointmentOutOfBoundariesError'\n              examples:\n                AppointmentAlreadyBookedError:\n                  value:\n                    status: 'error'\n                    message: 'This appointment is already booked.'\n                AppointmentPastDateError:\n                  value:\n                    status: 'error'\n                    message: 'You cant create an appointment on a past date.'\n                AppointmentWithYourselfError:\n                  value:\n                    status: 'error'\n                    message: 'You cant create an appointment with yourself.'\n                AppointmentOutOfBoundariesError:\n                  value:\n                    status: 'error'\n                    message: 'You can only create appointments between 8am and 5pm.'\n        '401':\n          description: When not authenticated (missing JWT token).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '200':\n          description: When all parameters are ok.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                  provider_id:\n                    type: string\n                  user_id:\n                    type: string\n                  date:\n                    type: string\n                  created_at:\n                    type: string\n                  updated_at:\n                    type: string\n                example: {\n                  id: 'a0a1ff30-b0a6-452a-a3d8-3f7f82d37105',\n                  provider_id: '4129c527-67c1-4fc4-a091-526011d74a48',\n                  user_id: 'e35b89dd-5a2b-4c95-a8e1-e7276636a259',\n                  date: '2021-03-09T10:00:00.000Z',\n                  created_at: '2021-03-09T00:43:30.125Z',\n                  updated_at: '2021-03-09T00:43:30.125Z',\n                }\n      security: [ { JWT: [ ] } ]\n\n  /users:\n    post:\n      tags:\n        - Users\n      summary: Return info from newly created user.\n      description: 'Return a json object info from newly created user.'\n      requestBody:\n        description: New User\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Users'\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '400':\n          description: When validation error occurs.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        '404':\n          description: When email is already used.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MailAreadyUsedError'\n        '200':\n          description: When all parameters are ok.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  name:\n                    type: string\n                  email:\n                    type: string\n                  id:\n                    type: string\n                  created_at:\n                    type: string\n                  updated_at:\n                    type: string\n                  avatar_url:\n                    type: string\n                    nullable: true\n                    example: 'https://gobarberapp.net/4dfcbdea62cdcbc5ba8d-8402007.png'\n                example: {\n                  name: 'Go Barber Team',\n                  email: 'team@gobarberapp.net',\n                  id: 'dc25e16e-451c-40ce-8464-4508e318e7ac',\n                  created_at: '2021-02-24T02:03:16.094Z',\n                  updated_at: '2021-02-24T02:03:16.094Z',\n                  avatar_url: null,\n                }\n      security: [ ]\n\n  /users/avatar:\n    patch:\n      tags:\n        - Users\n      summary: Updates user avatar.\n      description: 'Updates a user avatar with an image url.'\n      requestBody:\n        description: Select an image to upload.\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                avatar:\n                  type: string\n                  format: binary\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '401':\n          description: When not authenticated (missing JWT token).\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnauthorizedError'\n        '200':\n          description: When avatar user is successfully updated.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    type: object\n                    properties:\n                      id:\n                        type: string\n                      name:\n                        type: string\n                      email:\n                        type: string\n                      avatar:\n                        type: string\n                      created_at:\n                        type: string\n                      updated_at:\n                        type: string\n                      avatar_url:\n                        type: string\n                  token:\n                    type: string\n                example:\n                  user: {\n                    id: '16463316-155d-43b8-841d-263a74613c64',\n                    name: 'Go Barber',\n                    email: 'test@gobarberapp.net',\n                    avatar: '4dfcbdea62cdcbc5ba8d-8402007.png',\n                    created_at: '2021-02-17T19:20:48.506Z',\n                    updated_at: '2021-02-20T23:27:28.342Z',\n                    avatar_url: 'https://gobarberapp.net/4dfcbdea62cdcbc5ba8d-8402007.png',\n                  }\n      security: [ { JWT: [ ] } ]\n\n  /sessions:\n    post:\n      tags:\n        - Sessions\n      summary: Return a JWT token for an authenticated user.\n      description: 'Return a json object containing user info and JWT token after user authenticated itself in the app.'\n      requestBody:\n        description: New Session\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Sessions'\n      responses:\n        '500':\n          description: When something goes boing in the server.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalServerError'\n        '400':\n          description: When validation error occurs.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationError'\n        '200':\n          description: When all parameters are ok.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    type: object\n                    properties:\n                      id:\n                        type: string\n                      name:\n                        type: string\n                      email:\n                        type: string\n                      avatar:\n                        type: string\n                      created_at:\n                        type: string\n                      updated_at:\n                        type: string\n                      avatar_url:\n                        type: string\n                  token:\n                    type: string\n                example:\n                  user: {\n                    id: '16463316-155d-43b8-841d-263a74613c64',\n                    name: 'Go Barber',\n                    email: 'test@gobarberapp.net',\n                    avatar: '4dfcbdea62cdcbc5ba8d-8402007.png',\n                    created_at: '2021-02-17T19:20:48.506Z',\n                    updated_at: '2021-02-20T23:27:28.342Z',\n                    avatar_url: 'https://gobarberapp.net/4dfcbdea62cdcbc5ba8d-8402007.png',\n                  }\n                  name: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MTM5MjQ0NzIsImV4cCI6MTYxNDAxMDg3Miwic3ViIjoiMTY0NjMzMTYtMTU1ZC00M2I4LTg0MWQtMjYzYTc0NjEzYzY0In0.kjKz3eBXMJcUpchM2wSXTTSVrAbLRO_tAF2166-vh4o'\n      security: [ ]\n",
			"canonicalURL": "/github.com/AlvaroIsrael/gobarber-app@595867a3ea5edff6145b5cfc1ee54b390351aae8/-/blob/gobarber-backend/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/AlvaroIsrael/gobarber-app/blob/595867a3ea5edff6145b5cfc1ee54b390351aae8/gobarber-backend/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/appointments\": post: responses: 404: contents: application/json: generate schema: oneOf: oneOf AppointmentsPostNotFound: variant AppointmentPastDateError: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference",
		"unsupported content types"
	]
}