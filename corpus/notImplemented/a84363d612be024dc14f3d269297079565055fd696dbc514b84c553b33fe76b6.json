{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/egorsmkv/openapi3-generator"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "misc/api.yaml",
			"byteSize": 5544,
			"content": "components:\n  requestBodies:\n    CreatePetRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CreatePetBody'\n      description: JSON object with data to create a new pet\n      required: true\n    UpdatePetRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UpdatePetBody'\n      description: JSON object with data to update a pet\n      required: true\n  schemas:\n    ApiError:\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n      required:\n      - code\n      - message\n      type: object\n    CategorySchema:\n      properties:\n        id:\n          description: ID\n          example: 1\n          readOnly: true\n          type: integer\n        name:\n          description: Name\n          example: Pug dogs\n          type: string\n        size:\n          description: Number of elements in the category\n          example: 20\n          format: int64\n          type: integer\n      required:\n      - name\n      type: object\n    CreatePetBody:\n      properties:\n        name:\n          type: string\n      required:\n      - name\n      type: object\n    PetSchema:\n      properties:\n        categories:\n          description: Has these categories\n          items:\n            $ref: '#/components/schemas/CategorySchema'\n          type: array\n        created_at:\n          description: When this item was created\n          format: date-time\n          readOnly: true\n          title: Created At\n          type: string\n        name:\n          type: string\n      type: object\n    UpdatePetBody:\n      properties:\n        categories:\n          items:\n            $ref: '#/components/schemas/CategorySchema'\n          type: array\n        name:\n          type: string\n      type: object\n  securitySchemes:\n    Bearer:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\nexternalDocs:\n  description: More docs about this API\n  url: http://docs.example.com\ninfo:\n  contact:\n    email: support@example.com\n    name: API Support\n    url: http://example.com/support\n  description: This is a simple project that demonstrates the OpenAPI 3 Generator\n    project\n  license:\n    name: MIT\n    url: https://en.wikipedia.org/wiki/MIT_License\n  termsOfService: http://example.com/terms/\n  title: Simple API\n  version: 1.0.0\nopenapi: 3.0.3\npaths:\n  /ping:\n    get:\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: string\n          description: It must be a PONG\n      summary: Ping our API\n      tags:\n      - default\n  /tests/long-uri:\n    get:\n      responses:\n        '414':\n          description: Request URI too large.\n        default:\n          content:\n            text/plain:\n              schema:\n                type: string\n          description: Unexpected error\n      summary: If the URI is long then throw an error\n      tags:\n      - default\n  /category/{id}:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategorySchema'\n          description: Information about a category\n      tags:\n      - categories\n    parameters:\n    - description: Identifier of a category\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n  /pet/{id}:\n    get:\n      operationId: getPet\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PetSchema'\n          description: An object a Pet\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiError'\n          description: An object does not exist\n      security:\n      - Bearer: []\n      summary: Get a pet\n      tags:\n      - pets\n    parameters:\n    - description: Identifier of a Pet\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n    patch:\n      operationId: patchPet\n      requestBody:\n        $ref: '#/components/requestBodies/UpdatePetRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PetSchema'\n          description: Response an object of updated pet\n      security:\n      - Bearer: []\n      summary: Update a pet\n      tags:\n      - pets\n    post:\n      operationId: postPet\n      requestBody:\n        $ref: '#/components/requestBodies/CreatePetRequest'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PetSchema'\n          description: A pet is created\n      security:\n      - Bearer: []\n      summary: Create a pet\n      tags:\n      - pets\nservers:\n- description: Production server\n  url: https://production.example.com\n- description: Stage server for a customer\n  url: https://{customer}.stage.example.com:{port}\n  variables:\n    port:\n      default: '8001'\n      description: A customer identifier\n      enum:\n      - '8001'\n      - '443'\n    username:\n      default: mark\n      description: A customer identifier\n- description: Development server\n  url: http://localhost:8000\ntags:\n- description: Everything about your Pets\n  externalDocs:\n    description: Find out more\n    url: http://swagger.io\n  name: pets\n- description: Everything about categories\n  name: categories\n- description: Basic paths\n  name: default\n",
			"canonicalURL": "/github.com/egorsmkv/openapi3-generator@d39196ee52504d5931be7e76fd99a6397c233a62/-/blob/misc/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/egorsmkv/openapi3-generator/blob/d39196ee52504d5931be7e76fd99a6397c233a62/misc/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/ping\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}