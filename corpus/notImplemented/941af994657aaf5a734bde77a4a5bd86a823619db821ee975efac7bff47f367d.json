{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenBankingUK/directory-api-specs"
		},
		"file": {
			"name": "directory-api-swagger.yaml",
			"size": 0,
			"path": "directory-api-swagger.yaml",
			"byteSize": 200094,
			"content": "openapi: 3.0.0\ninfo:\n  title: Open Banking Directory API\n  version: 2.0.0\n  description: OB Tech Directory API\nservers:\n  - url: https://matls-dirapi.openbanking.org.uk\n    description: Production\n  - url: https://matls-dirapi.openbankingtest.org.uk\n    description: Sandbox\npaths:\n  '/v2.1/organisation':\n    post:\n      summary: Enrol a eIDAS QWAC/QSeal-bearing participant\n      description: Enrol an eIDAS QWAC/QSealC certificate-bearing participant onto the Open Banking Directory. Currenty only TPPs can use this enrolment endpoint.Enrol an eIDAS QWAC/QSeal certificate-bearing participant onto the Open Banking Directory.\n      tags:\n        - Organisations v2.1\n      requestBody:\n        $ref: '#/components/requestBodies/Enrol'\n      responses:\n        '201':\n          $ref: '#/components/responses/Enrol201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/Enrol400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get all organisations that the client is authorised to retrieve\n      description: Note that this was not in the original design but is included to inform the client\n      tags:\n        - Organisations v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/OrganisationsGetFromSCIM200OKResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '403':\n          $ref: '#/components/responses/403ForbiddenResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n  '/v2.1/organisation/{OrganisationId}':\n    get:\n      summary: Get the given organisation's details\n      tags:\n        - Organisations v2.1\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/OrganisationGetFromSCIM200OKResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '403':\n          $ref: '#/components/responses/403ForbiddenResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n  '/v2.1/organisation/{OrganisationId}/contact/{ContactType}':\n    put:\n      summary: Update the business or the technical contacts for the given organisation\n      tags:\n        - Contacts v2.1\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/ContactType'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      requestBody:\n        $ref: '#/components/requestBodies/Contact'\n      responses:\n        '200':\n          $ref: '#/components/responses/Contact200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the business or the technical contacts for the given organisation\n      x-PingAccessResourceName: OrganisationContactGET\n      x-PingAccessRuleType: uk.org.openbanking.policy.RequestHostOverride\n      x-PingAccessRuleTarget: obdorgcontacts.{environment}\n      tags:\n        - Contacts v2.1\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/ContactType'\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/Contact200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2.1/organisation/{OrganisationId}/software-statement':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n    post:\n      summary: Create a software statement\n      tags:\n        - Software Statements v2.1\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      requestBody:\n        $ref: '#/components/requestBodies/SoftwareStatement'\n      responses:\n        '201':\n          $ref: '#/components/responses/SoftwareStatement201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get all software statements for the given organisation\n      tags:\n        - Software Statements v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementsGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2.1/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary: Get a software statement\n      tags:\n        - Software Statements v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatement201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    put:\n      summary: Activate or deactive a software statement\n      tags:\n        - Software Statements v2.1\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n      requestBody:\n        $ref: '#/components/requestBodies/SoftwareStatementState'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementUpdated200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2.1/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}/redirect-uri':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    post:\n      summary: Add a redirect URI to the given Software Statement\n      tags:\n        - Software Statement Redirect URIs v2.1\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n      requestBody:\n        $ref: '#/components/requestBodies/SoftwareStatementRedirectURI'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementUpdated200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '409':\n          $ref: '#/components/responses/409ConflictResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2.1/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}/software-statement-assertion':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary:\n        Retrieve the software statement assertion for the given SoftwareStatementID.\n      description: |\n        # Depending on the type of participant, one of the following pre-conditions must be met in order to generate an SSA:\n         * EU TPPs NOT on the TPR  must hold at least one eIDAS certificate.\n         * EU TPPs on the TPR must hold at least one eIDAS or OB certiticate.\n         * UK TPPs on the TPR must hold at least one OB certificate.\n        The response body is a signed JWT and the values found in the header and the payload of the SSA are specified below\n        # Terminology\n          This specification uses the terms \"access token\", \"authorization code\", \"authorization endpoint\", \"authorization grant\", \"authorization server\", \"client\", \"client identifier\", \"client secret\", \"grant type\", \"protected resource\", \"redirection URI\", \"refresh token\", \"resource owner\", \"resource server\", \"response type\", and \"token endpoint\" defined by OAuth 2.0 [RFC6749] and uses the term \"Claim\" defined by JSON Web Token (JWT) [RFC7519].\n          * __Account Servicing Payment Services Provider (ASPSP)__ -- An organisation managing customer accounts (and operating banking APIs).\n          * __Primary Technical Contact__ -- The person at the TPP who creates an SSA and invokes a registration mechanism. This is an example of an [RFC7591] Client Developer.\n          * __OB Organisation ID__ -- The unique identifier for each OpenBanking participant. Both TPPs and ASPSPs have OB Organisation IDs.\n          * __OpenBanking Directory__ -- An implementation of a [PSD2] competent authority; acts as an Identity Provider, certificate authority, and registry governing the participants in the UK OpenBanking API scheme.\n          * __ASPSP Registration Endpoint__ -- OAuth 2.0 \u0026 [RFC7591] compliant endpoint, exact value is discoverable from the [OIDCD] openid-configuration file of the ASPSP.\n          * __Software Statement Assertion (SSA)__ -- An implementation of an [RFC7591] software statement, signed by the OpenBanking Directory.\n          * __Trusted Third Party (TPP)__ -- An organization working to initiate payments or consume account information with/from an ASPSP.\n          * __TPP Client Software__ -- software implementing an OAuth2 client, interacting with an ASPSP registration endpoint.\n        # Software Statement Assertion (SSA)\n          The SSA is a JSON Web Token (JWT) containing client metadata about an instance of TPP client software. The JWT is issued and signed by the OpenBanking Directory.\n        ## SSA Payload\n          The payload of an OpenBanking SSA MUST be a compliant software statement according to [RFC7591]. The SSA MUST also be a compliant JWT according to [RFC7519]. The following metadata profiles the metadata in [RFC7591] and [RFC7519]:\n          | Metadata | Description | Source Specification |\n          |----------|-------------|----------------------|\n          |`software_id`|Unique Identifier for TPP Client Software|[RFC7591]|\n          |`iss`|SSA Issuer|[RFC7519]|\n          |`iat`|Time SSA issued|[RFC7519]|\n          |`jti`|JWT ID|[RFC7519]|\n          The following software metadata is additionally defined for this profile:\n          |Metadata |Description |Field Size |Default values |\n          |---------|------------|-----------|---------------|\n          |`software_client_id`|The Client ID Registered at OB used to access OB resources|Base62 GUID (22 chars)| |\n          |`software_client_description`|Human-readable detailed description of the client|Max256Text| |\n          |`software_client_name`|Human-readable Software Name|Max40Text| |\n          |`software_client_uri`|The website or resource root uri|Max256Text| |\n          |`software_version`|The version number of the software should a TPP choose to register and / or maintain it|decimal| |\n          |`software_environment`|Requested additional field to avoid certificate check|Max256Text| |\n          |`software_jwks_endpoint`|Contains all active signing and network certs for the software|Max256Text| |\n          |`software_jwks_revoked_endpoint`|Contains all revoked signing and network certs for the software|Max256Text| |\n          |`software_logo_uri`|Link to the TPP logo. Note, ASPSPs are not obliged to display images hosted by third parties|Max256Text| |\n          |`software_mode`|ASPSP Requested additional field to indicate that this software is `Test` or `Live` the default is `Live`. Impact and support for `Test` software is up to the ASPSP.|Max40Text| |\n          |`software_on_behalf_of_org`|A reference to fourth party organsiation resource on the OB Directory if the registering TPP is acting on behalf of another.|Max40Text| |\n          |`software_policy_uri`|A link to the software's policy page|Max256Text| |\n          |`software_redirect_uris`|Registered client callback endpoints as registered with Open Banking|A string array of Max256Text items|\n          |`software_roles`|A multi value list of PSD2 roles that this software is authorized to perform.|A string array of Max256Text items| |\n          |`software_tos_uri`|A link to the software's terms of service page|Max256Text| |\n          The following Organisational metadata is defined for this profile:\n          |Metadata |Description |Field Size | Default values |\n          |---------|------------|-----------|----------------|\n          |`organisation_competent_authority_claims`|Authorisations granted to the organsiation by an NCA|CodeList {`AISP`, `PISP`, `CBPII`, `ASPSP`}| |\n          |`org_status`|Included to cater for voluntary withdrawal from OB scenarios|`Active`, `Revoked`, or `Withdrawn`| |\n          |`org_id`|The Unique TPP or ASPSP ID held by OpenBanking.|Max35Text| |\n          |`org_name`|Legal Entity Identifier or other known organisation name|Max140Text| |\n          |`org_contacts`|JSON array of objects containing a triplet of name, email, and phone number|Each item Max256Text| |\n          |`org_jwks_endpoint`|Contains all active signing and network certs for the organisation|Max256Text| |\n          |`org_jwks_revoked_endpoint`|Contains all revoked signing and network certs for the organisation|Max256Text| |\n        ## SSA header\n          The SSA header MUST comply with [RFC7519].\n          |Metadata |Description |Comments |\n          |---------|------------|---------|\n          |`typ`|MUST be set to `JWT`| |\n          |`alg`|MUST be set to `ES256` or `PS256`| |\n          |`kid`|The kid will be kept the same as the `x5t` parameter. (X.509 Certificate SHA-1 Thumbprint) of the signing certificate.| |\n          ### Example SSA\n          The elements defined in the software statement will consist of the following values.\n          *Note that there are inconsistent applications of booleans or \"Active\" strings in the current data model.*\n          *Note that there are inconsistent applications of status flags case sensitivity.*\n          *The attributes required to be displayed by ASPSPs.*\n        ```\n        {\n          \"typ\": \"JWT\",\n          \"alg\": \"ES256\",\n          \"kid\": \"ABCD1234\"\n        }\n        {\n          \"iss\": \"OpenBanking Ltd\",\n          \"iat\": 1492756331,\n          \"jti\": \"id12345685439487678\",\n          \"software_environment\": \"production\",\n          \"software_mode\": \"live\",\n          \"software_id\": \"65d1f27c-4aea-4549-9c21-60e495a7a86f\",\n          \"software_client_id\": \"OpenBanking TPP Client Unique ID\",\n          \"software_client_name\": \"Amazon Prime Movies\",\n          \"software_client_description\": \"Amazon Prime Movies is a moving streaming service\",\n          \"software_version\": \"2.2\",\n          \"software_client_uri\": \"https://prime.amazon.com\",\n          \"software_redirect_uris\": [\n            \"https://prime.amazon.com/cb\",\n            \"https://prime.amazon.co.uk/cb\"\n          ],\n          \"software_roles\": [\n            \"PISP\",\n            \"AISP\"\n          ],\n          \"organisation_competent_authority_claims\": {\n            \"authority_id\": \"FMA\", // Austrian Financial Market Authority\n            \"registration_id\": \"111111\",\n            \"status\": \"Active\",\n            \"authorisations\":  [\n              {\n                \"member_state\": \"GB\",\n                \"roles\": [\n                  \"PISP\",\n                  \"AISP\"\n                ]\n              },\n              {\n                \"member_state\": \"IR\",\n                \"roles\": [\n                  \"PISP\"\n                ]\n              }\n            ]\n          },\n          \"software_logo_uri\": \"https://prime.amazon.com/logo.png\",\n          \"org_status\": \"Active\",\n          \"org_id\": \"Amazon TPPID\",\n          \"org_name\": \"OpenBanking TPP Registered Name\",\n          \"org_contacts\": [\n            {\n              \"name\": \"contact name\",\n              \"email\": \"contact@contact.com\",\n              \"phone\": \"+447890130558\"\n              \"type\": \"business\"\n            },\n            {\n              \"name\": \"contact name\",\n              \"email\": \"contact@contact.com\",\n              \"phone\": \"+447890130558\",\n              \"type\": \"technical\"\n            }\n          ],\n          \"org_jwks_endpoint\": \"https://jwks.openbanking.org.uk/org_id/org_id.jkws\",\n          \"org_jwks_revoked_endpoint\": \"https://jwks.openbanking.org.uk/org_id/revoked/org_id.jkws\",\n          \"software_jwks_endpoint\": \"https://jwks.openbanking.org.uk/org_id/software_id.jkws\",\n          \"software_jwks_revoked_endpoint\": \"https://jwks.openbanking.org.uk/org_id/revoked/software_id.jkws\",\n          \"software_policy_uri\": \"https://tpp.com/policy.html\",\n          \"software_tos_uri\": \"https://tpp.com/tos.html\",\n          \"software_on_behalf_of_org\": \"Acme Ltd\"\n        }\n        {\n          Signature\n        }\n        ```\n        # Automated Client Registration\n        A TPP MAY use automated client registration to submit an SSA to an ASPSP in exchange for client credentials for use as a client against an OAuth 2.0 Authorization Server. It is RECOMMENDED for ASPSPs to support the automated client registration mechanism. A large number of claims that OpenID Connect OPs could support as part of the RFC7591 request are detailed [https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata) and should be followed if not explicitly referenced in the Software Statement Assertion claim set.\n        ## Request Validation\n        Prior to issuing a client registration response, the ASPSP MUST perform the following checks\n        * The ASPSP SHOULD check whether the TPP that initiated the TLS connection is the same TPP as listed in the SSA.\n        * In the case where a gateway or other piece of infrastructure pre-terminates the MATLS channel in front of the registration endpoint, the certificate used to initiate the connection or some part of that certificate (such as DN \u0026 Issuer) SHOULD be made available to the ASPSP for validation against the claims in the SSA.\n        * The registration request MUST be signed with a key contained in the JWKS referenced in the SSA included with the request. This ensures that a holder-of-key proof-of-possession is performed proving that the TPP app was the originally intended recipient of the SSA when the OB issued it.\n        * The SSA MUST be validated according to [RFC7519], including validation of the signature and validity window.\n        JWT signature must be validated, this involves retrieving the jwks keyset for both the OB and the TPP. The OB keystore location will be published as part of the directory specification, The TPP's will be included in the software statement.\n        ### SSA Lifetime\n        The SSA's Lifetime / Validity period is not defined by Open Banking. ASPSPs in the Open Banking ecosystem are required to implement pragmatic time ranges in which to accept an SSA. For example, an ASPSP that has implemented Dynamic Client Registration may choose to accept SSA's that were issued no earlier than 1 minute prior to their presentation however ASPSPs that only support manual registration may need to accept SSAs that were issued 30 minutes prior as the elapsed time period between generation and use between these two flows is expected to differ significantly.\n      tags:\n        - Software Statement Assertions v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementAssertion200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2.1/organisation/{OrganisationId}/certificate':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary: Get the certificates for the given organisation\n      tags:\n        - Organisation Certificates v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2.1/organisation/{OrganisationId}/certificate/{OrganisationCertificateType}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n      - $ref: '#/components/parameters/OrganisationCertificateType'\n    post:\n      summary: Store or create a new certificate of the given OrganisationCertificateType for the given organisation\n      tags:\n        - Organisation Certificates v2.1\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n        - $ref: '#/components/parameters/OrganisationCertificateType'\n      requestBody:\n        $ref: '#/components/requestBodies/CertificateOrCSROrJWS'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '201':\n          $ref: '#/components/responses/CertificateOrKey201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the certificates of the given OrganisationCertificateType for the given oranisation\n      tags:\n        - Organisation Certificates v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2.1/organisation/{OrganisationId}/certificate/kid/{CertificateOrKeyId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/CertificateOrKeyId'\n    get:\n      summary: Retrieve a certificate with the given CertificateOrKeyId\n      tags:\n        - Organisation Certificates v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateOrKeyGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    delete:\n      summary: Revoke or remove a certificate with the given CertificateOrKeyId\n      tags:\n        - Organisation Certificates v2.1\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '204':\n          $ref: '#/components/responses/204NoContentResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2.1/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary: Get certificates for the given software statement\n      tags:\n        - Software Statement Certificates v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2.1/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate/{SoftwareStatementCertificateOrKeyType}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n      - $ref: '#/components/parameters/SoftwareStatementCertificateOrKeyType'\n    post:\n      summary: Add a key or create a new certificate for the given software statement\n      tags:\n        - Software Statement Certificates v2.1\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n      requestBody:\n        $ref: '#/components/requestBodies/CSROrKey'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '201':\n          $ref: '#/components/responses/CertificateOrKey201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the certificates of the given type for the given software statement\n      tags:\n        - Software Statement Certificates v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2.1/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate/{OrganisationAssociativeCertificateType}/{CertificateOrKeyId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n      - $ref: '#/components/parameters/OrganisationAssociativeCertificateType'\n      - $ref: '#/components/parameters/CertificateOrKeyId'\n    put:\n      summary: Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\n      tags:\n        - Certificate Associations v2.1\n      requestBody:\n        $ref: '#/components/requestBodies/CertificateOrKeyAssociation'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateAssociatedWithASoftwareStatement200AcceptedResponse'\n        '204':\n          $ref: '#/components/responses/204NoContentResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '409':\n          $ref: '#/components/responses/409ConflictResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the certificate of the given type and ID for the given software statement\n      tags:\n        - Software Statement Certificates v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateOrKeyGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2.1/organisation/{OrganisationId}/authorisation-server':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n    get:\n      summary: Get all Authorisation Servers for the given organisation\n      tags:\n        - Authorisation Servers v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/AuthorisationServersResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    post:\n      summary: Create an Authorisation Server for the given organisation\n      tags:\n        - Authorisation Servers v2.1\n      requestBody:\n        $ref: '#/components/requestBodies/AuthorisationServer'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '201':\n          $ref: '#/components/responses/AuthorisationServerResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2.1/organisation/{OrganisationId}/authorisation-server/{AuthorisationServerId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/AuthorisationServerId'\n    get:\n      summary: Get .well-known entity\n      tags:\n        - Authorisation Servers v2.1\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/AuthorisationServerResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    put:\n      summary: Update .well-known entity\n      tags:\n        - Authorisation Servers v2.1\n      requestBody:\n        $ref: '#/components/requestBodies/AuthorisationServer'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '202':\n          $ref: '#/components/responses/AuthorisationServer202AcceptedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    delete:\n      summary: Delete an Authorisation Server\n      tags:\n        - Authorisation Servers v2.1\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '204':\n          $ref: '#/components/responses/204NoContentResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2.1/certificate/validate':\n    post:\n      summary: Validate certificate\n      tags:\n        - Certificate Validation v2.1\n      requestBody:\n        $ref: '#/components/requestBodies/CertificateValidationRequestBody'\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateValidationServerResponseV2.1'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2/organisation':\n    post:\n      summary: Enrol a eIDAS QWAC/QSeal-bearing participant\n      description: Enrol an eIDAS QWAC/QSealC certificate-bearing participant onto the Open Banking Directory. Currenty only TPPs can use this enrolment endpoint.Enrol an eIDAS QWAC/QSeal certificate-bearing participant onto the Open Banking Directory.\n      tags:\n        - Organisations\n      requestBody:\n        $ref: '#/components/requestBodies/Enrol'\n      responses:\n        '201':\n          $ref: '#/components/responses/Enrol201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/Enrol400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get all organisations that the client is authorised to retrieve\n      description: Note that this was not in the original design but is included to inform the client\n      tags:\n        - Organisations\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/OrganisationsGetFromSCIM200OKResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '403':\n          $ref: '#/components/responses/403ForbiddenResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n  '/v2/organisation/{OrganisationId}':\n    get:\n      summary: Get the given organisation's details\n      tags:\n        - Organisations\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/OrganisationGetFromSCIM200OKResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '403':\n          $ref: '#/components/responses/403ForbiddenResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n  '/v2/organisation/{OrganisationId}/contact/{ContactType}':\n    put:\n      summary: Update the business or the technical contacts for the given organisation\n      tags:\n        - Contacts\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/ContactType'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      requestBody:\n        $ref: '#/components/requestBodies/Contact'\n      responses:\n        '200':\n          $ref: '#/components/responses/Contact200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the business or the technical contacts for the given organisation\n      x-PingAccessResourceName: OrganisationContactGET\n      x-PingAccessRuleType: uk.org.openbanking.policy.RequestHostOverride\n      x-PingAccessRuleTarget: obdorgcontacts.{environment}\n      tags:\n        - Contacts\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/ContactType'\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/Contact200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2/organisation/{OrganisationId}/software-statement':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n    post:\n      summary: Create a software statement\n      tags:\n        - Software Statements\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      requestBody:\n        $ref: '#/components/requestBodies/SoftwareStatement'\n      responses:\n        '201':\n          $ref: '#/components/responses/SoftwareStatement201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get all software statements for the given organisation\n      tags:\n        - Software Statements\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementsGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary: Get a software statement\n      tags:\n        - Software Statements\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatement201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    put:\n      summary: Activate or deactive a software statement\n      tags:\n        - Software Statements\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n      requestBody:\n        $ref: '#/components/requestBodies/SoftwareStatementState'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementUpdated200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}/redirect-uri':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    post:\n      summary: Add a redirect URI to the given Software Statement\n      tags:\n        - Software Statement Redirect URIs\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n      requestBody:\n        $ref: '#/components/requestBodies/SoftwareStatementRedirectURI'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementUpdated200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '409':\n          $ref: '#/components/responses/409ConflictResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}/software-statement-assertion':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary:\n        Retrieve the software statement assertion for the given SoftwareStatementID.\n      description: |\n        # Depending on the type of participant, one of the following pre-conditions must be met in order to generate an SSA:\n         * EU TPPs NOT on the TPR  must hold at least one eIDAS certificate.\n         * EU TPPs on the TPR must hold at least one eIDAS or OB certiticate.\n         * UK TPPs on the TPR must hold at least one OB certificate.\n        The response body is a signed JWT and the values found in the header and the payload of the SSA are specified below\n        # Terminology\n          This specification uses the terms \"access token\", \"authorization code\", \"authorization endpoint\", \"authorization grant\", \"authorization server\", \"client\", \"client identifier\", \"client secret\", \"grant type\", \"protected resource\", \"redirection URI\", \"refresh token\", \"resource owner\", \"resource server\", \"response type\", and \"token endpoint\" defined by OAuth 2.0 [RFC6749] and uses the term \"Claim\" defined by JSON Web Token (JWT) [RFC7519].\n          * __Account Servicing Payment Services Provider (ASPSP)__ -- An organisation managing customer accounts (and operating banking APIs).\n          * __Primary Technical Contact__ -- The person at the TPP who creates an SSA and invokes a registration mechanism. This is an example of an [RFC7591] Client Developer.\n          * __OB Organisation ID__ -- The unique identifier for each OpenBanking participant. Both TPPs and ASPSPs have OB Organisation IDs.\n          * __OpenBanking Directory__ -- An implementation of a [PSD2] competent authority; acts as an Identity Provider, certificate authority, and registry governing the participants in the UK OpenBanking API scheme.\n          * __ASPSP Registration Endpoint__ -- OAuth 2.0 \u0026 [RFC7591] compliant endpoint, exact value is discoverable from the [OIDCD] openid-configuration file of the ASPSP.\n          * __Software Statement Assertion (SSA)__ -- An implementation of an [RFC7591] software statement, signed by the OpenBanking Directory.\n          * __Trusted Third Party (TPP)__ -- An organization working to initiate payments or consume account information with/from an ASPSP.\n          * __TPP Client Software__ -- software implementing an OAuth2 client, interacting with an ASPSP registration endpoint.\n        # Software Statement Assertion (SSA)\n          The SSA is a JSON Web Token (JWT) containing client metadata about an instance of TPP client software. The JWT is issued and signed by the OpenBanking Directory.\n        ## SSA Payload\n          The payload of an OpenBanking SSA MUST be a compliant software statement according to [RFC7591]. The SSA MUST also be a compliant JWT according to [RFC7519]. The following metadata profiles the metadata in [RFC7591] and [RFC7519]:\n          | Metadata | Description | Source Specification |\n          |----------|-------------|----------------------|\n          |`software_id`|Unique Identifier for TPP Client Software|[RFC7591]|\n          |`iss`|SSA Issuer|[RFC7519]|\n          |`iat`|Time SSA issued|[RFC7519]|\n          |`jti`|JWT ID|[RFC7519]|\n          The following software metadata is additionally defined for this profile:\n          |Metadata |Description |Field Size |Default values |\n          |---------|------------|-----------|---------------|\n          |`software_client_id`|The Client ID Registered at OB used to access OB resources|Base62 GUID (22 chars)| |\n          |`software_client_description`|Human-readable detailed description of the client|Max256Text| |\n          |`software_client_name`|Human-readable Software Name|Max40Text| |\n          |`software_client_uri`|The website or resource root uri|Max256Text| |\n          |`software_version`|The version number of the software should a TPP choose to register and / or maintain it|decimal| |\n          |`software_environment`|Requested additional field to avoid certificate check|Max256Text| |\n          |`software_jwks_endpoint`|Contains all active signing and network certs for the software|Max256Text| |\n          |`software_jwks_revoked_endpoint`|Contains all revoked signing and network certs for the software|Max256Text| |\n          |`software_logo_uri`|Link to the TPP logo. Note, ASPSPs are not obliged to display images hosted by third parties|Max256Text| |\n          |`software_mode`|ASPSP Requested additional field to indicate that this software is `Test` or `Live` the default is `Live`. Impact and support for `Test` software is up to the ASPSP.|Max40Text| |\n          |`software_on_behalf_of_org`|A reference to fourth party organsiation resource on the OB Directory if the registering TPP is acting on behalf of another.|Max40Text| |\n          |`software_policy_uri`|A link to the software's policy page|Max256Text| |\n          |`software_redirect_uris`|Registered client callback endpoints as registered with Open Banking|A string array of Max256Text items|\n          |`software_roles`|A multi value list of PSD2 roles that this software is authorized to perform.|A string array of Max256Text items| |\n          |`software_tos_uri`|A link to the software's terms of service page|Max256Text| |\n          The following Organisational metadata is defined for this profile:\n          |Metadata |Description |Field Size | Default values |\n          |---------|------------|-----------|----------------|\n          |`organisation_competent_authority_claims`|Authorisations granted to the organsiation by an NCA|CodeList {`AISP`, `PISP`, `CBPII`, `ASPSP`}| |\n          |`org_status`|Included to cater for voluntary withdrawal from OB scenarios|`Active`, `Revoked`, or `Withdrawn`| |\n          |`org_id`|The Unique TPP or ASPSP ID held by OpenBanking.|Max35Text| |\n          |`org_name`|Legal Entity Identifier or other known organisation name|Max140Text| |\n          |`org_contacts`|JSON array of objects containing a triplet of name, email, and phone number|Each item Max256Text| |\n          |`org_jwks_endpoint`|Contains all active signing and network certs for the organisation|Max256Text| |\n          |`org_jwks_revoked_endpoint`|Contains all revoked signing and network certs for the organisation|Max256Text| |\n        ## SSA header\n          The SSA header MUST comply with [RFC7519].\n          |Metadata |Description |Comments |\n          |---------|------------|---------|\n          |`typ`|MUST be set to `JWT`| |\n          |`alg`|MUST be set to `ES256` or `PS256`| |\n          |`kid`|The kid will be kept the same as the `x5t` parameter. (X.509 Certificate SHA-1 Thumbprint) of the signing certificate.| |\n          ### Example SSA\n          The elements defined in the software statement will consist of the following values.\n          *Note that there are inconsistent applications of booleans or \"Active\" strings in the current data model.*\n          *Note that there are inconsistent applications of status flags case sensitivity.*\n          *The attributes required to be displayed by ASPSPs.*\n        ```\n        {\n          \"typ\": \"JWT\",\n          \"alg\": \"ES256\",\n          \"kid\": \"ABCD1234\"\n        }\n        {\n          \"iss\": \"OpenBanking Ltd\",\n          \"iat\": 1492756331,\n          \"jti\": \"id12345685439487678\",\n          \"software_environment\": \"production\",\n          \"software_mode\": \"live\",\n          \"software_id\": \"65d1f27c-4aea-4549-9c21-60e495a7a86f\",\n          \"software_client_id\": \"OpenBanking TPP Client Unique ID\",\n          \"software_client_name\": \"Amazon Prime Movies\",\n          \"software_client_description\": \"Amazon Prime Movies is a moving streaming service\",\n          \"software_version\": \"2.2\",\n          \"software_client_uri\": \"https://prime.amazon.com\",\n          \"software_redirect_uris\": [\n            \"https://prime.amazon.com/cb\",\n            \"https://prime.amazon.co.uk/cb\"\n          ],\n          \"software_roles\": [\n            \"PISP\",\n            \"AISP\"\n          ],\n          \"organisation_competent_authority_claims\": {\n            \"authority_id\": \"FMA\", // Austrian Financial Market Authority\n            \"registration_id\": \"111111\",\n            \"status\": \"Active\",\n            \"authorisations\":  [\n              {\n                \"member_state\": \"GB\",\n                \"roles\": [\n                  \"PISP\",\n                  \"AISP\"\n                ]\n              },\n              {\n                \"member_state\": \"IR\",\n                \"roles\": [\n                  \"PISP\"\n                ]\n              }\n            ]\n          },\n          \"software_logo_uri\": \"https://prime.amazon.com/logo.png\",\n          \"org_status\": \"Active\",\n          \"org_id\": \"Amazon TPPID\",\n          \"org_name\": \"OpenBanking TPP Registered Name\",\n          \"org_contacts\": [\n            {\n              \"name\": \"contact name\",\n              \"email\": \"contact@contact.com\",\n              \"phone\": \"+447890130558\"\n              \"type\": \"business\"\n            },\n            {\n              \"name\": \"contact name\",\n              \"email\": \"contact@contact.com\",\n              \"phone\": \"+447890130558\",\n              \"type\": \"technical\"\n            }\n          ],\n          \"org_jwks_endpoint\": \"https://jwks.openbanking.org.uk/org_id/org_id.jkws\",\n          \"org_jwks_revoked_endpoint\": \"https://jwks.openbanking.org.uk/org_id/revoked/org_id.jkws\",\n          \"software_jwks_endpoint\": \"https://jwks.openbanking.org.uk/org_id/software_id.jkws\",\n          \"software_jwks_revoked_endpoint\": \"https://jwks.openbanking.org.uk/org_id/revoked/software_id.jkws\",\n          \"software_policy_uri\": \"https://tpp.com/policy.html\",\n          \"software_tos_uri\": \"https://tpp.com/tos.html\",\n          \"software_on_behalf_of_org\": \"Acme Ltd\"\n        }\n        {\n          Signature\n        }\n        ```\n        # Automated Client Registration\n        A TPP MAY use automated client registration to submit an SSA to an ASPSP in exchange for client credentials for use as a client against an OAuth 2.0 Authorization Server. It is RECOMMENDED for ASPSPs to support the automated client registration mechanism. A large number of claims that OpenID Connect OPs could support as part of the RFC7591 request are detailed [https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata) and should be followed if not explicitly referenced in the Software Statement Assertion claim set.\n        ## Request Validation\n        Prior to issuing a client registration response, the ASPSP MUST perform the following checks\n        * The ASPSP SHOULD check whether the TPP that initiated the TLS connection is the same TPP as listed in the SSA.\n        * In the case where a gateway or other piece of infrastructure pre-terminates the MATLS channel in front of the registration endpoint, the certificate used to initiate the connection or some part of that certificate (such as DN \u0026 Issuer) SHOULD be made available to the ASPSP for validation against the claims in the SSA.\n        * The registration request MUST be signed with a key contained in the JWKS referenced in the SSA included with the request. This ensures that a holder-of-key proof-of-possession is performed proving that the TPP app was the originally intended recipient of the SSA when the OB issued it.\n        * The SSA MUST be validated according to [RFC7519], including validation of the signature and validity window.\n        JWT signature must be validated, this involves retrieving the jwks keyset for both the OB and the TPP. The OB keystore location will be published as part of the directory specification, The TPP's will be included in the software statement.\n        ### SSA Lifetime\n        The SSA's Lifetime / Validity period is not defined by Open Banking. ASPSPs in the Open Banking ecosystem are required to implement pragmatic time ranges in which to accept an SSA. For example, an ASPSP that has implemented Dynamic Client Registration may choose to accept SSA's that were issued no earlier than 1 minute prior to their presentation however ASPSPs that only support manual registration may need to accept SSAs that were issued 30 minutes prior as the elapsed time period between generation and use between these two flows is expected to differ significantly.\n      tags:\n        - Software Statement Assertions\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementAssertion200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2/organisation/{OrganisationId}/certificate':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary: Get the certificates for the given organisation\n      tags:\n        - Organisation Certificates\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2/organisation/{OrganisationId}/certificate/{OrganisationCertificateType}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n      - $ref: '#/components/parameters/OrganisationCertificateType'\n    post:\n      summary: Store or create a new certificate of the given OrganisationCertificateType for the given organisation\n      tags:\n        - Organisation Certificates\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n        - $ref: '#/components/parameters/OrganisationCertificateType'\n      requestBody:\n        $ref: '#/components/requestBodies/CertificateOrCSROrJWS'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '201':\n          $ref: '#/components/responses/CertificateOrKey201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the certificates of the given OrganisationCertificateType for the given oranisation\n      tags:\n        - Organisation Certificates\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2/organisation/{OrganisationId}/certificate/kid/{CertificateOrKeyId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/CertificateOrKeyId'\n    get:\n      summary: Retrieve a certificate with the given CertificateOrKeyId\n      tags:\n        - Organisation Certificates\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateOrKeyGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    delete:\n      summary: Revoke or remove a certificate with the given CertificateOrKeyId\n      tags:\n        - Organisation Certificates\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '204':\n          $ref: '#/components/responses/204NoContentResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary: Get certificates for the given software statement\n      tags:\n        - Software Statement Certificates\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate/{SoftwareStatementCertificateOrKeyType}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n      - $ref: '#/components/parameters/SoftwareStatementCertificateOrKeyType'\n    post:\n      summary: Add a key or create a new certificate for the given software statement\n      tags:\n        - Software Statement Certificates\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n      requestBody:\n        $ref: '#/components/requestBodies/CSROrKey'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '201':\n          $ref: '#/components/responses/CertificateOrKey201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the certificates of the given type for the given software statement\n      tags:\n        - Software Statement Certificates\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2/organisation/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate/{OrganisationAssociativeCertificateType}/{CertificateOrKeyId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n      - $ref: '#/components/parameters/OrganisationAssociativeCertificateType'\n      - $ref: '#/components/parameters/CertificateOrKeyId'\n    put:\n      summary: Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\n      tags:\n        - Certificate Associations\n      requestBody:\n        $ref: '#/components/requestBodies/CertificateOrKeyAssociation'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateAssociatedWithASoftwareStatement200AcceptedResponse'\n        '204':\n          $ref: '#/components/responses/204NoContentResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '409':\n          $ref: '#/components/responses/409ConflictResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the certificate of the given type and ID for the given software statement\n      tags:\n        - Software Statement Certificates\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateOrKeyGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/v2/organisation/{OrganisationId}/authorisation-server':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n    get:\n      summary: Get all Authorisation Servers for the given organisation\n      tags:\n        - Authorisation Servers\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/AuthorisationServersResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    post:\n      summary: Create an Authorisation Server for the given organisation\n      tags:\n        - Authorisation Servers\n      requestBody:\n        $ref: '#/components/requestBodies/AuthorisationServer'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '201':\n          $ref: '#/components/responses/AuthorisationServerResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2/organisation/{OrganisationId}/authorisation-server/{AuthorisationServerId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/AuthorisationServerId'\n    get:\n      summary: Get .well-known entity\n      tags:\n        - Authorisation Servers\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/AuthorisationServerResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    put:\n      summary: Update .well-known entity\n      tags:\n        - Authorisation Servers\n      requestBody:\n        $ref: '#/components/requestBodies/AuthorisationServer'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '202':\n          $ref: '#/components/responses/AuthorisationServer202AcceptedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    delete:\n      summary: Delete an Authorisation Server\n      tags:\n        - Authorisation Servers\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '204':\n          $ref: '#/components/responses/204NoContentResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/v2/certificate/validate':\n    post:\n      summary: Validate certificate\n      tags:\n        - Certificate Validation\n      requestBody:\n        $ref: '#/components/requestBodies/CertificateValidationRequestBody'\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateValidationServerResponseV2'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/organisation/{OrganisationType}':\n    post:\n      summary: Enrol a eIDAS QWAC/QSeal-bearing participant\n      description: Enrol an eIDAS QWAC/QSeal certificate-bearing participant onto the Open Banking Directory. Currenty only TPPs can use this enrolment endpoint, so please set `OrganisationType` to `tpp`\n      tags:\n        - Organisations (Legacy)\n      parameters:\n        - $ref: '#/components/parameters/OrganisationTypeForQSealOnboarding'\n      requestBody:\n        $ref: '#/components/requestBodies/Enrol'\n      responses:\n        '201':\n          $ref: '#/components/responses/Enrol201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/Enrol400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get all organisations that the client is authorised to retrieve\n      description: Note that this was not in the original design but is included to inform the client\n      tags:\n        - Organisations (Legacy)\n      parameters:\n        - $ref: '#/components/parameters/OrganisationType'\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/OrganisationsGetFromSCIM200OKResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n  '/organisation/{OrganisationType}/{OrganisationId}':\n    get:\n      summary: Get the given organisation's details\n      tags:\n        - Organisations (Legacy)\n      parameters:\n        - $ref: '#/components/parameters/OrganisationType'\n        - $ref: '#/components/parameters/OrganisationId'\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/OrganisationGetFromSCIM200OKResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n  '/organisation/{OrganisationType}/{OrganisationId}/contact/{ContactType}':\n    put:\n      summary: Update the business or the technical contacts for the given organisation\n      tags:\n        - Contacts (Legacy)\n      parameters:\n        - $ref: '#/components/parameters/OrganisationType'\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/ContactType'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      requestBody:\n        $ref: '#/components/requestBodies/Contact'\n      responses:\n        '200':\n          $ref: '#/components/responses/Contact200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the business or the technical contacts for the given organisation\n      x-PingAccessResourceName: OrganisationContactGET\n      x-PingAccessRuleType: uk.org.openbanking.policy.RequestHostOverride\n      x-PingAccessRuleTarget: obdorgcontacts.{environment}\n      tags:\n        - Contacts (Legacy)\n      parameters:\n        - $ref: '#/components/parameters/OrganisationType'\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/ContactType'\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/Contact200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/organisation/{OrganisationType}/{OrganisationId}/software-statement':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n    post:\n      summary: Create a software statement.\n      tags:\n        - Software Statements (Legacy)\n      parameters:\n        - $ref: '#/components/parameters/OrganisationType'\n        - $ref: '#/components/parameters/OrganisationId'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      requestBody:\n        $ref: '#/components/requestBodies/SoftwareStatement'\n      responses:\n        '201':\n          $ref: '#/components/responses/SoftwareStatement201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get all software statements for the given organisation\n      tags:\n        - Software Statements (Legacy)\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementsGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary: Get a software statement\n      tags:\n        - Software Statements (Legacy)\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatement201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    put:\n      summary: Update a software statement\n      tags:\n        - Software Statements (Legacy)\n      parameters:\n        - $ref: '#/components/parameters/OrganisationType'\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n      requestBody:\n        $ref: '#/components/requestBodies/SoftwareStatementState'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementUpdated200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}/redirect-uri':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    post:\n      summary: Add a redirect URI to the given Software Statement\n      tags:\n        - Software Statement Redirect URIs (Legacy)\n      parameters:\n        - $ref: '#/components/parameters/OrganisationType'\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n      requestBody:\n        $ref: '#/components/requestBodies/SoftwareStatementRedirectURI'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementUpdated200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '409':\n          $ref: '#/components/responses/409ConflictResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}/software-statement-assertion':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary:\n        Get a Software Statement Assertion for the given SoftwareStatementID.\n      description: |\n        The response body is a signed JWT and the values found in the header and the payload of the SSA are specified below\n        # Terminology\n          This specification uses the terms \"access token\", \"authorization code\", \"authorization endpoint\", \"authorization grant\", \"authorization server\", \"client\", \"client identifier\", \"client secret\", \"grant type\", \"protected resource\", \"redirection URI\", \"refresh token\", \"resource owner\", \"resource server\", \"response type\", and \"token endpoint\" defined by OAuth 2.0 [RFC6749] and uses the term \"Claim\" defined by JSON Web Token (JWT) [RFC7519].\n          * __Account Servicing Payment Services Provider (ASPSP)__ -- An organisation managing customer accounts (and operating banking APIs).\n          * __Primary Technical Contact__ -- The person at the TPP who creates an SSA and invokes a registration mechanism. This is an example of an [RFC7591] Client Developer.\n          * __OB Organisation ID__ -- The unique identifier for each OpenBanking participant. Both TPPs and ASPSPs have OB Organisation IDs.\n          * __OpenBanking Directory__ -- An implementation of a [PSD2] competent authority; acts as an Identity Provider, certificate authority, and registry governing the participants in the UK OpenBanking API scheme.\n          * __ASPSP Registration Endpoint__ -- OAuth 2.0 \u0026 [RFC7591] compliant endpoint, exact value is discoverable from the [OIDCD] openid-configuration file of the ASPSP.\n          * __Software Statement Assertion (SSA)__ -- An implementation of an [RFC7591] software statement, signed by the OpenBanking Directory.\n          * __Trusted Third Party (TPP)__ -- An organization working to initiate payments or consume account information with/from an ASPSP.\n          * __TPP Client Software__ -- software implementing an OAuth2 client, interacting with an ASPSP registration endpoint.\n        # Software Statement Assertion (SSA)\n          The SSA is a JSON Web Token (JWT) containing client metadata about an instance of TPP client software. The JWT is issued and signed by the OpenBanking Directory.\n        ## SSA Payload\n          The payload of an OpenBanking SSA MUST be a compliant software statement according to [RFC7591]. The SSA MUST also be a compliant JWT according to [RFC7519]. The following metadata profiles the metadata in [RFC7591] and [RFC7519]:\n          | Metadata | Description | Source Specification |\n          |----------|-------------|----------------------|\n          |`software_id`|Unique Identifier for TPP Client Software|[RFC7591]|\n          |`iss`|SSA Issuer|[RFC7519]|\n          |`iat`|Time SSA issued|[RFC7519]|\n          |`jti`|JWT ID|[RFC7519]|\n          The following software metadata is additionally defined for this profile:\n          |Metadata |Description |Field Size |Default values |\n          |---------|------------|-----------|---------------|\n          |`software_client_id`|The Client ID Registered at OB used to access OB resources|Base62 GUID (22 chars)| |\n          |`software_client_description`|Human-readable detailed description of the client|Max256Text| |\n          |`software_client_name`|Human-readable Software Name|Max40Text| |\n          |`software_client_uri`|The website or resource root uri|Max256Text| |\n          |`software_version`|The version number of the software should a TPP choose to register and / or maintain it|string| |\n          |`software_environment`|Requested additional field to avoid certificate check|Max256Text| |\n          |`software_jwks_endpoint`|Contains all active signing and network certs for the software|Max256Text| |\n          |`software_jwks_revoked_endpoint`|Contains all revoked signing and network certs for the software|Max256Text| |\n          |`software_logo_uri`|Link to the TPP logo. Note, ASPSPs are not obliged to display images hosted by third parties|Max256Text| |\n          |`software_mode`|ASPSP Requested additional field to indicate that this software is `Test` or `Live` the default is `Live`. Impact and support for `Test` software is up to the ASPSP.|Max40Text| |\n          |`software_on_behalf_of_org`|A reference to fourth party organsiation resource on the OB Directory if the registering TPP is acting on behalf of another.|Max40Text| |\n          |`software_policy_uri`|A link to the software's policy page|Max256Text| |\n          |`software_redirect_uris`|Registered client callback endpoints as registered with Open Banking|A string array of Max256Text items|\n          |`software_roles`|A multi value list of PSD2 roles that this software is authorized to perform.|A string array of Max256Text items| |\n          |`software_tos_uri`|A link to the software's terms of service page|Max256Text| |\n          The following Organisational metadata is defined for this profile:\n          |Metadata |Description |Field Size | Default values |\n          |---------|------------|-----------|----------------|\n          |`organisation_competent_authority_claims`|Authorisations granted to the organsiation by an NCA|CodeList {`AISP`, `PISP`, `CBPII`, `ASPSP`}| |\n          |`org_status`|Included to cater for voluntary withdrawal from OB scenarios|`Active`, `Revoked`, or `Withdrawn`| |\n          |`org_id`|The Unique TPP or ASPSP ID held by OpenBanking.|Max35Text| |\n          |`org_name`|Legal Entity Identifier or other known organisation name|Max140Text| |\n          |`org_contacts`|JSON array of objects containing a triplet of name, email, and phone number|Each item Max256Text| |\n          |`org_jwks_endpoint`|Contains all active signing and network certs for the organisation|Max256Text| |\n          |`org_jwks_revoked_endpoint`|Contains all revoked signing and network certs for the organisation|Max256Text| |\n        ## SSA header\n          The SSA header MUST comply with [RFC7519].\n          |Metadata |Description |Comments |\n          |---------|------------|---------|\n          |`typ`|MUST be set to `JWT`| |\n          |`alg`|MUST be set to `ES256` or `PS256`| |\n          |`kid`|The kid will be kept the same as the `x5t` parameter. (X.509 Certificate SHA-1 Thumbprint) of the signing certificate.| |\n          ### Example SSA\n          The elements defined in the software statement will consist of the following values.\n          *Note that there are inconsistent applications of booleans or \"Active\" strings in the current data model.*\n          *Note that there are inconsistent applications of status flags case sensitivity.*\n          *The attributes required to be displayed by ASPSPs.*\n        ```\n        {\n          \"typ\": \"JWT\",\n          \"alg\": \"ES256\",\n          \"kid\": \"ABCD1234\"\n        }\n        {\n          \"iss\": \"OpenBanking Ltd\",\n          \"iat\": 1492756331,\n          \"jti\": \"id12345685439487678\",\n          \"software_environment\": \"production\",\n          \"software_mode\": \"live\",\n          \"software_id\": \"65d1f27c-4aea-4549-9c21-60e495a7a86f\",\n          \"software_client_id\": \"OpenBanking TPP Client Unique ID\",\n          \"software_client_name\": \"Amazon Prime Movies\",\n          \"software_client_description\": \"Amazon Prime Movies is a moving streaming service\",\n          \"software_version\": \"2.2\",\n          \"software_client_uri\": \"https://prime.amazon.com\",\n          \"software_redirect_uris\": [\n            \"https://prime.amazon.com/cb\",\n            \"https://prime.amazon.co.uk/cb\"\n          ],\n          \"software_roles\": [\n            \"PISP\",\n            \"AISP\"\n          ],\n          \"organisation_competent_authority_claims\": {\n            \"authority_id\": \"FMA\", // Austrian Financial Market Authority\n            \"registration_id\": \"111111\",\n            \"status\": \"Active\",\n            \"authorisations\":  [\n              {\n                \"member_state\": \"GB\",\n                \"roles\": [\n                  \"PISP\",\n                  \"AISP\"\n                ]\n              },\n              {\n                \"member_state\": \"IR\",\n                \"roles\": [\n                  \"PISP\"\n                ]\n              }\n            ]\n          },\n          \"software_logo_uri\": \"https://prime.amazon.com/logo.png\",\n          \"org_status\": \"Active\",\n          \"org_id\": \"Amazon TPPID\",\n          \"org_name\": \"OpenBanking TPP Registered Name\",\n          \"org_contacts\": [\n            {\n              \"name\": \"contact name\",\n              \"email\": \"contact@contact.com\",\n              \"phone\": \"+447890130558\"\n              \"type\": \"business\"\n            },\n            {\n              \"name\": \"contact name\",\n              \"email\": \"contact@contact.com\",\n              \"phone\": \"+447890130558\",\n              \"type\": \"technical\"\n            }\n          ],\n          \"org_jwks_endpoint\": \"https://jwks.openbanking.org.uk/org_id/org_id.jkws\",\n          \"org_jwks_revoked_endpoint\": \"https://jwks.openbanking.org.uk/org_id/revoked/org_id.jkws\",\n          \"software_jwks_endpoint\": \"https://jwks.openbanking.org.uk/org_id/software_id.jkws\",\n          \"software_jwks_revoked_endpoint\": \"https://jwks.openbanking.org.uk/org_id/revoked/software_id.jkws\",\n          \"software_policy_uri\": \"https://tpp.com/policy.html\",\n          \"software_tos_uri\": \"https://tpp.com/tos.html\",\n          \"software_on_behalf_of_org\": \"Acme Ltd\"\n        }\n        {\n          Signature\n        }\n        ```\n        # Automated Client Registration\n        A TPP MAY use automated client registration to submit an SSA to an ASPSP in exchange for client credentials for use as a client against an OAuth 2.0 Authorization Server. It is RECOMMENDED for ASPSPs to support the automated client registration mechanism. A large number of claims that OpenID Connect OPs could support as part of the RFC7591 request are detailed [https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata) and should be followed if not explicitly referenced in the Software Statement Assertion claim set.\n        ## Request Validation\n        Prior to issuing a client registration response, the ASPSP MUST perform the following checks\n        * The ASPSP SHOULD check whether the TPP that initiated the TLS connection is the same TPP as listed in the SSA.\n        * In the case where a gateway or other piece of infrastructure pre-terminates the MATLS channel in front of the registration endpoint, the certificate used to initiate the connection or some part of that certificate (such as DN \u0026 Issuer) SHOULD be made available to the ASPSP for validation against the claims in the SSA.\n        * The registration request MUST be signed with a key contained in the JWKS referenced in the SSA included with the request. This ensures that a holder-of-key proof-of-possession is performed proving that the TPP app was the originally intended recipient of the SSA when the OB issued it.\n        * The SSA MUST be validated according to [RFC7519], including validation of the signature and validity window.\n        JWT signature must be validated, this involves retrieving the jwks keyset for both the OB and the TPP. The OB keystore location will be published as part of the directory specification, The TPP's will be included in the software statement.\n        ### SSA Lifetime\n        The SSA's Lifetime / Validity period is not defined by Open Banking. ASPSPs in the Open Banking ecosystem are required to implement pragmatic time ranges in which to accept an SSA. For example, an ASPSP that has implemented Dynamic Client Registration may choose to accept SSA's that were issued no earlier than 1 minute prior to their presentation however ASPSPs that only support manual registration may need to accept SSAs that were issued 30 minutes prior as the elapsed time period between generation and use between these two flows is expected to differ significantly.\n      tags:\n        - Software Statement Assertions (Legacy)\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/SoftwareStatementAssertion200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/organisation/{OrganisationType}/{OrganisationId}/certificate':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary: Get the certificates for the given organisation\n      tags:\n        - Organisation Certificates (Legacy)\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/organisation/{OrganisationType}/{OrganisationId}/certificate/{OrganisationCertificateType}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n      - $ref: '#/components/parameters/OrganisationCertificateType'\n    post:\n      summary: Store or create a new certificate of the given OrganisationCertificateType for the given organisation\n      tags:\n        - Organisation Certificates (Legacy)\n      parameters:\n        - $ref: '#/components/parameters/OrganisationType'\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n        - $ref: '#/components/parameters/OrganisationCertificateType'\n      requestBody:\n        $ref: '#/components/requestBodies/CertificateOrCSROrJWS'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '201':\n          $ref: '#/components/responses/CertificateOrKey201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the certificates of the given OrganisationCertificateType for the given oranisation\n      tags:\n        - Organisation Certificates (Legacy)\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/organisation/{OrganisationType}/{OrganisationId}/certificate/kid/{CertificateOrKeyId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/CertificateOrKeyId'\n    get:\n      summary: Retrieve a certificate with the given CertificateOrKeyId\n      tags:\n        - Organisation Certificates (Legacy)\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateOrKeyGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    delete:\n      summary: Revoke or remove a certificate with the given CertificateOrKeyId\n      tags:\n        - Organisation Certificates (Legacy)\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '204':\n          $ref: '#/components/responses/204NoContentResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n    get:\n      summary: Get certificates for the given software statement\n      tags:\n        - Software Statement Certificates (Legacy)\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate/{SoftwareStatementCertificateOrKeyType}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n      - $ref: '#/components/parameters/SoftwareStatementCertificateOrKeyType'\n    post:\n      summary: Add a key or create a new certificate for the given software statement\n      tags:\n        - Software Statement Certificates (Legacy)\n      parameters:\n        - $ref: '#/components/parameters/OrganisationId'\n        - $ref: '#/components/parameters/SoftwareStatementId'\n      requestBody:\n        $ref: '#/components/requestBodies/CSROrKey'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '201':\n          $ref: '#/components/responses/CertificateOrKey201CreatedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the certificates of the given type for the given software statement\n      tags:\n        - Software Statement Certificates (Legacy)\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate/{OrganisationAssociativeCertificateType}/{CertificateOrKeyId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/SoftwareStatementId'\n      - $ref: '#/components/parameters/OrganisationAssociativeCertificateType'\n      - $ref: '#/components/parameters/CertificateOrKeyId'\n    put:\n      summary: Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\n      tags:\n        - Certificate Associations (Legacy)\n      requestBody:\n        $ref: '#/components/requestBodies/CertificateOrKeyAssociation'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateAssociatedWithASoftwareStatement200AcceptedResponse'\n        '204':\n          $ref: '#/components/responses/204NoContentResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '409':\n          $ref: '#/components/responses/409ConflictResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    get:\n      summary: Get the certificate of the given type and ID for the given software statement\n      tags:\n        - Software Statement Certificates (Legacy)\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateOrKeyGet200OKResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n\n  '/organisation/{OrganisationType}/{OrganisationId}/authorisation-server':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n    get:\n      summary: Get all Authorisation Servers for the given organisation\n      tags:\n        - Authorisation Servers (Legacy)\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/AuthorisationServersResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    post:\n      summary: Create an Authorisation Server for the given organisation\n      tags:\n        - Authorisation Servers (Legacy)\n      requestBody:\n        $ref: '#/components/requestBodies/AuthorisationServer'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '201':\n          $ref: '#/components/responses/AuthorisationServerResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/organisation/{OrganisationType}/{OrganisationId}/authorisation-server/{AuthorisationServerId}':\n    parameters:\n      - $ref: '#/components/parameters/OrganisationType'\n      - $ref: '#/components/parameters/OrganisationId'\n      - $ref: '#/components/parameters/AuthorisationServerId'\n    get:\n      summary: Get .well-known entity\n      tags:\n        - Authorisation Servers (Legacy)\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/AuthorisationServerResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    put:\n      summary: Update .well-known entity\n      tags:\n        - Authorisation Servers (Legacy)\n      requestBody:\n        $ref: '#/components/requestBodies/AuthorisationServer'\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '202':\n          $ref: '#/components/responses/AuthorisationServer202AcceptedResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n    delete:\n      summary: Delete an Authorisation Server\n      tags:\n        - Authorisation Servers (Legacy)\n      security:\n        - OAuth2SecurityReadWriteOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n            - TPPManage\n      responses:\n        '204':\n          $ref: '#/components/responses/204NoContentResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\n  '/certificate/validate':\n    post:\n      summary: Validate certificate\n      tags:\n        - Certificate Validation (Legacy)\n      requestBody:\n        $ref: '#/components/requestBodies/CertificateValidationRequestBody'\n      security:\n        - OAuth2SecurityReadOps:\n            - ASPSPReadAccess\n            - TPPReadAccess\n      responses:\n        '200':\n          $ref: '#/components/responses/CertificateValidationServerResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequestResponse'\n        '401':\n          $ref: '#/components/responses/401UnauthorizedResponse'\n        '404':\n          $ref: '#/components/responses/404NotFoundResponse'\n        '406':\n          $ref: '#/components/responses/406NotAcceptableResponse'\n        '500':\n          $ref: '#/components/responses/500InternalServerErrorResponse'\n        '502':\n          $ref: '#/components/responses/502BadGatewayResponse'\ncomponents:\n  parameters:\n    AuthorisationServerId:\n      name: AuthorisationServerId\n      description: The authorisation server Id\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/AuthorisationServerIdSchema'\n    CertificateOrKeyId:\n      name: CertificateOrKeyId\n      description: The certificate or key Id\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/CertificateOrKeyIdSchema'\n    CertificateTypeForValidation:\n      name: CertificateType\n      description: Type of certificate\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/CertificateTypeForValidationSchema'\n    CertificateType:\n      name: CertificateType\n      description: Type of certificate\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/CertificateTypeSchema'\n    ContactType:\n      name: ContactType\n      description: The contact type\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/ContactTypeSchema'\n    OrganisationTypeForQSealOnboarding:\n      name: OrganisationType\n      description: OB Organisation Type\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/OrganisationTypeForQSealOnboardingSchema'\n    OrganisationType:\n      name: OrganisationType\n      description: OB Organisation Type\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/OrganisationTypeSchema'\n    OrganisationCertificateType:\n      name: OrganisationCertificateType\n      description: The certificate type\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/OrganisationCertificateTypeSchema'\n    OrganisationAssociativeCertificateType:\n      name: OrganisationAssociativeCertificateType\n      description: The certificate type that can be associated with a software statement\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/OrganisationAssociativeCertificateTypeSchema'\n    OrganisationId:\n      name: OrganisationId\n      description: The organsation ID\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/OrganisationIdSchema'\n    SoftwareStatementCertificateOrKeyType:\n      name: SoftwareStatementCertificateOrKeyType\n      description: The certificate or key type that can be associated with a software statement\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/SoftwareStatementCertificateOrKeyTypeSchema'\n    SoftwareStatementId:\n      name: SoftwareStatementId\n      description: The software statement ID\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/SoftwareStatementIdSchema'\n  requestBodies:\n    AuthorisationServer:\n      description: Properties to create/update authorisation server\n      required: true\n      content:\n        application/vnd.openbanking.directory.authorisationserver-v2+json:\n          schema:\n            $ref: '#/components/schemas/AuthorisationServerRequestSchema'\n    Contact:\n      description: Properties to update business/technical contacts\n      required: true\n      content:\n        application/vnd.openbanking.directory.orgcontacts-v2+json:\n          schema:\n            $ref: '#/components/schemas/ContactSchema'\n    CertificateOrCSROrJWS:\n      description: |\n        * __PEM file__ -- when the request `Content-Type` header is set to  `application/x-pem-file` the contents of the PEM file will differ depending upon `OrganisationCertificateType`. If `OrganisationCertificateType` is set to `qwac`, `qseal` then the PEM file should contain a *QWAC* or a *QSEAL* certificate respectively; if `OrganisationCertificateType` is set to `obwac` or `obseal` then the PEM file should contain a Certificate Signing Request (CSR) for an OB-issued *OBWAC* or *OBSEAL* certificate respectively.\n        * __Signed JWT__ -- when the request `Content-Type` header is set to `application/jwt` the body of the signed JWT will contain a CSR or a certificate.\n        ### Requesting a Certificate using a signed JWT\n        The header `kid` claim is the ID of the QSeal certificate assigned to it by the OB JWKS store.\n        The body `csr` claim is the CSR in the DER format.\n        ```\n        {\n          \"typ\": \"JWT\",\n          \"alg\": \"ES256\",\n          \"kid\": \"ABCD1234\",\n        }\n        {\n          \"csr\": \"string\"\n        }\n        ```\n        ### Uploaing a Certificate using a signed JWT\n        The header `kid` claim is the ID of the QSeal certificate assigned to it by the OB JWKS store.\n        The body `x5c` claim is the array of certificate, issuer certificate, and root certificate in the DER format.\n        ```\n        {\n          \"typ\": \"JWT\",\n          \"alg\": \"ES256\",\n          \"kid\": \"ABCD1234\",\n        }\n        {\n          \"x5c\": [\"qseal\", \"issuer certificate\", \"root certificate\"]\n        }\n        ```\n        EXAMPLE REQUEST PAYLOAD USING SIGNED JWT REQUESTS\n        ```\n        POST /organisation/tpp/123456789012345678/certificate/obwac HTTP/1.1\n        Content-Type: application/jwt\n        Accept: application/json\n        Host: matls-dirapi.openbanking.org.uk\n        eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IkFCQ0QxMjM0IiwieDVjIjpbInFzZWFsYyIsImlzc3VlciBjZXJ0aWZpY2F0ZSIsInJvb3QgY2VydGlmaWNhdGUiXX0.eyJyZWRpcmVjdF91cmlzIjpbInN0cmluZyJdLCJ0b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZCI6InN0cmluZyIsImdyYW50X3R5cGVzIjpbInN0cmluZyJdLCJyZXNwb25zZV90eXBlcyI6WyJzdHJpbmcibSwiY2xpZW50X25hbWUiOiJzdHJpbmciLCJjbGllbnRfdXJpIjoic3RyaW5nIiwibG9nb191cmkiOiJzdHJpbmciLCJzY29wZSI6InN0cmluZyIsImNvbnRhY3RzIjpbInVzZXJAZXhhbXBsZS5jb20iXSwidG9zX3VyaSI6InN0cmluZyIsInBvbGljeV91cmkiOiJzdHJpbmciLCJqd2tzX3VyaSI6InN0cmluZyIsImp3a3MiOnt9LCJzb2Z0d2FyZV9pZCI6InN0cmluZyIsInNvZnR3YXJlX3ZlcnNpb24iOiJzdHJpbmcifQ.lMsADSHkFGUw5PtgdEqXslYArzqf6tbg0lo0kCitOUA\n        ```\n      required: true\n      content:\n        application/x-pem-file:\n          schema:\n            $ref: '#/components/schemas/CertificateOrKeyOrJWTSchema'\n        application/jwt:\n          schema:\n            $ref: '#/components/schemas/CertificateOrKeyOrJWTSchema'\n    CSROrKey:\n      description: PEM file -- the contents of the PEM file will differ depending upon *SoftwareStatementCertificateOrKeyType*. If *SoftwareStatementCertificateOrKeyType* is set to *obsigning* or *obtransport* then the PEM file should contain a Certificate Signing Request (CSR) for an OB signing or OB transport certificate respectively; if *SoftwareStatementCertificateOrKeyType* is set to *sigkey*, *enckey* then the PEM file should contain a public signing or encryption key respectively.\n      required: true\n      content:\n        application/x-pem-file:\n          schema:\n            $ref: '#/components/schemas/CertificateOrKeyOrJWTSchema'\n    CertificateOrKeyAssociation:\n      description: Certificate or Key Association Payload\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CertificateOrKeyAssociationSchema'\n    CertificateValidationRequestBody:\n      description: Certificate Validation Payload\n      required: true\n      content:\n        application/x-pem-file:\n          schema:\n            $ref: '#/components/schemas/CertificateValidationSchema'\n    Enrol:\n      description: |\n        The payload submitted when a TPP attempts to enrol with an eIDAS QWAC or QSeal certificate. It's format and contents will depend on the value of the `Content-Type` header:  TPP onto the Open Banking Directory (required fields to be validated). For eIDAS QSeal-bearing TPPs use a signed JWT (JWS).\n        * __application/json__ -- a JSON payload for QWAC onboarding.\n        * __application/jwt__ -- a signed JWT (JWS) for QSeal onboarding.\n        * __application/jose__ -- same as __application/jwt__.\n        ## QWAC-based Onboarding\n        Set `Content-Type` to `application/json` and send the payload conforming to the schema.\n        EXAMPLE REQUEST PAYLOAD FOR QWAC-BASED ONBOARDING\n        ```\n        POST /organisation/tpp HTTP/1.1\n        Content-Type: application/json\n        Accept: application/json\n        Host: matls-dirapi.openbanking.org.uk\n        {\n          \"client_name\": \"string\",\n          \"scope\": \"string\",\n          \"token_endpoint_auth_method\": \"string\",\n          \"tls_client_auth_subject_dn\": \"string\",\n          \"grant_types\": [\n            \"string\"\n          ],\n          \"token_endpoint_auth_signing_alg\": \"string\"\n        }\n        ```\n        ## QSeal-based Onboarding\n        Set `Content-Type` to `application/jwt` or `application/jose` and send the payload conforming to the schema as a signed JWT.\n        The QSeal, the issuing certificate, and the root certificate (all in DER format) must be used as the items of the array, which forms the value of the `x5c` claim in the JWT header.\n        The JWT MUST be signed using the private key associated with the QSeal listed in the `x5c` claim in the header.\n        ```\n        {\n          \"typ\": \"JWT\",\n          \"alg\": \"ES256\",\n          \"kid\": \"ABCD1234\",\n          \"x5c\": [\"qseal\", \"issuer certificate\", \"root certificate\"]\n        }\n        {\n          \"client_name\": \"string\",\n          \"scope\": \"string\",\n          \"token_endpoint_auth_method\": \"string\",\n          \"tls_client_auth_subject_dn\": \"string\",\n          \"grant_types\": [\n            \"string\"\n          ],\n          \"token_endpoint_auth_signing_alg\": \"string\"\n        }\n        ```\n        EXAMPLE REQUEST PAYLOAD FOR QSeal-BASED ONBOARDING\n        ```\n        POST /organisation/tpp HTTP/1.1\n        Content-Type: application/jwt | application/jose\n        Accept: application/json\n        Host: matls-dirapi.openbanking.org.uk\n        eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IkFCQ0QxMjM0IiwieDVjIjpbInFzZWFsYyIsImlzc3VlciBjZXJ0aWZpY2F0ZSIsInJvb3QgY2VydGlmaWNhdGUiXX0.eyJyZWRpcmVjdF91cmlzIjpbInN0cmluZyJdLCJ0b2tlbl9lbmRwb2ludF9hdXRoX21ldGhvZCI6InN0cmluZyIsImdyYW50X3R5cGVzIjpbInN0cmluZyJdLCJyZXNwb25zZV90eXBlcyI6WyJzdHJpbmciXSwiY2xpZW50X25hbWUiOiJzdHJpbmciLCJjbGllbnRfdXJpIjoic3RyaW5nIiwibG9nb191cmkiOiJzdHJpbmciLCJzY29wZSI6InN0cmluZyIsImNvbnRhY3RzIjpbInVzZXJAZXhhbXBsZS5jb20iXSwidG9zX3VyaSI6InN0cmluZyIsInBvbGljeV91cmkiOiJzdHJpbmciLCJqd2tzX3VyaSI6InN0cmluZyIsImp3a3MiOnt9LCJzb2Z0d2FyZV9pZCI6InN0cmluZyIsInNvZnR3YXJlX3ZlcnNpb24iOiJzdHJpbmcifQ.lMsADSHkFGUw5PtgdEqXslYArzqf6tbg0lo0kCitOUA\n        ```\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EnrolSchema'\n        application/jwt:\n          schema:\n            $ref: '#/components/schemas/QSealOnboardingSchema'\n        application/jose:\n          schema:\n            $ref: '#/components/schemas/QSealOnboardingSchema'\n    SoftwareStatement:\n      description: Software Statement payload\n      required: true\n      content:\n        application/vnd.openbanking.directory.softwarestatement-v2+json:\n          schema:\n            $ref: '#/components/schemas/SoftwareStatementCreateSchema'\n    SoftwareStatementRedirectURI:\n      description: 'Redirect Uri''s for the registered piece of software. May be overridden by the RFC7591 payload. This field is searchable and is not included as part of the response payload when unassigned.'\n      required: true\n      content:\n        text/plain:\n          schema:\n            $ref: '#/components/schemas/SoftwareStatementRedirectURISchema'\n    SoftwareStatementState:\n      description: Payload used to deactivate/reactivate a Software Statement\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SoftwareStatementStateSchema'\n  responses:\n    201CreatedResponse:\n      description: Created\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    204NoContentResponse:\n      description: No Content\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    400BadRequestResponse:\n      description: Bad Request\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    401UnauthorizedResponse:\n      description: Unauthorized\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    403ForbiddenResponse:\n      description: Forbidden\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    404NotFoundResponse:\n      description: Not found\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    406NotAcceptableResponse:\n      description: Not Acceptable\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    409ConflictResponse:\n      description: Conflict\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    502BadGatewayResponse:\n      description: Bad Gateway\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    500InternalServerErrorResponse:\n      description: Internal Server Error\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    AuthorisationServerResponse:\n      description: OK\n      content:\n        application/vnd.openbanking.directory.authorisationserver-v2+json:\n          schema:\n            $ref: '#/components/schemas/AuthorisationServerSchema'\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    AuthorisationServer202AcceptedResponse:\n      description: Accepted\n      content:\n        application/vnd.openbanking.directory.authorisationserver-v2+json:\n          schema:\n            $ref: '#/components/schemas/AuthorisationServerSchema'\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    AuthorisationServersResponse:\n      description: OK\n      content:\n        application/vnd.openbanking.directory.authorisationserver-list-v2+json:\n          schema:\n            $ref: '#/components/schemas/AuthorisationServersSchema'\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    CertificatesOrKeysGet200OKResponse:\n      description: OK\n      content:\n        application/jwk-set+json:\n          schema:\n            $ref: '#/components/schemas/CertificatesOrKeysGetSchema'\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    CertificateOrKeyGet200OKResponse:\n      description: OK\n      content:\n        application/jwk+json:\n          schema:\n            $ref: '#/components/schemas/CertificateOrKeyGetSchema'\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n    CertificateOrKey201CreatedResponse:\n      description: Created\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/jwk+json:\n          schema:\n            $ref: '#/components/schemas/CertificateOrKeyGetSchema'\n    CertificateOrKey202AcceptedResponse:\n      description: Accepted\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/jwk+json:\n          schema:\n            $ref: '#/components/schemas/CertificateOrKeyGetSchema'\n    CertificateAssociatedWithASoftwareStatement200AcceptedResponse:\n      description: OK\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/jwk+json:\n          schema:\n            $ref: '#/components/schemas/CertificateOrKeyGetSchema'\n    CertificateValidationServerResponse:\n      description: OK\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CertificateValidationResponseSchema'\n    CertificateValidationServerResponseV2.1:\n      description: OK\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CertificateValidationResponseSchemaV2.1'\n    CertificateValidationServerResponseV2:\n      description: OK\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CertificateValidationResponseSchemaV2'\n    CertificateTypeValidationOKResponse:\n      description: OK\n    CertificateTypeValidation400Response:\n      description: 400 Bad Request\n    Contact200OKResponse:\n      description: OK\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/vnd.openbanking.directory.orgcontacts-v2+json:\n          schema:\n            $ref: '#/components/schemas/ContactSchema'\n    Enrol201CreatedResponse:\n      description: Created\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Enrol201CreatedResponseSchema'\n    Enrol400BadRequestResponse:\n      description: Bad Request\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Enrol400BadRequestResponseSchema'\n    OrganisationsGetFromSCIM200OKResponse:\n      description: |\n        List of the organisation - Schema in scim-swagger.json\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/scim+json:\n          schema:\n            $ref: '#/components/schemas/OrganisationsGetFromSCIM200OKResponseSchema'\n    OrganisationGetFromSCIM200OKResponse:\n      description: |\n        Full details of the organisation - Schema in scim-swagger.json\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/scim+json:\n          schema:\n            $ref: '#/components/schemas/OrganisationGetFromSCIM200OKResponseSchema'\n    SoftwareStatementsGet200OKResponse:\n      description: OK\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/vnd.openbanking.directory.softwarestatement-list-v2+json:\n          schema:\n            $ref: '#/components/schemas/SoftwareStatementsSchema'\n    SoftwareStatementAssertion200OKResponse:\n      description: OK\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/jws+json:\n          schema:\n            $ref: '#/components/schemas/SoftwareStatementAssertionSchema'\n    SoftwareStatement201CreatedResponse:\n      description: Created\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/vnd.openbanking.directory.softwarestatement-v2+json:\n          schema:\n            $ref: '#/components/schemas/SoftwareStatementSchema'\n    SoftwareStatementUpdated200OKResponse:\n      description: OK\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/vnd.openbanking.directory.softwarestatement-v2+json:\n          schema:\n            $ref: '#/components/schemas/SoftwareStatementSchema'\n    SoftwareStatementGet200OKResponse:\n      description: Get the software statements with the given id\n      headers:\n        OB-Request-Id:\n          schema:\n            $ref: '#/components/schemas/UniqueRequestIdSchema'\n      content:\n        application/vnd.openbanking.directory.softwarestatement-v2+json:\n          schema:\n            $ref: '#/components/schemas/SoftwareStatementSchema'\n  schemas:\n    AuthorisationSchema:\n      type: object\n      properties:\n        Active:\n          type: boolean\n        MemberState:\n          type: string\n          description: 'Member state. This field is searchable.'\n          enum: [ 'AT','BE','BG','CY','CZ','DE','DK','EE','EL','ES','FI','FR','GB','GG','GI','GR','HR','HU','IE','IM','IS','IT','JE','LI','LT','LU','LV','MT','NL','NO','PL','PT','RO','SE','SI','SK' ]\n        Psd2Role:\n          type: string\n          enum: [ 'ASPSP', 'AISP', 'PISP', 'CBPII' ]\n          description: \u003e\n            Psd2 Role in which institution authorised. This field is searchable.\n              * `AISP` - Account Information Service Provider\n              * `ASPSP` - Account Servicing Payment Service Provider\n              * `CBPII` - Card-Based Payment Instrument Issuer\n              * `PISP` - Payment Initiation Service Provider\n      required:\n        - Active\n        - MemberState\n        - Psd2Role\n    AuthorisationAuthoritySchema:\n      type: object\n      properties:\n        AuthorityId:\n          type: string\n          maxLength: 255\n          description: 'Authority identifier. This field is searchable.'\n        AuthorizationDomain:\n          type: string\n          enum: [ 'PSD2', 'Pay.UK', 'CD' ]\n          description: 'Authorisation Domain. This field is searchable.'\n        MemberState:\n          type: string\n          description: 'Member state. This field is searchable.'\n          enum: [ 'AT','BE','BG','CY','CZ','DE','DK','EE','EL','ES','FI','FR','GB','GG','GI','GR','HR','HU','IE','IM','IS','IT','JE','LI','LT','LU','LV','MT','NL','NO','PL','PT','RO','SE','SI','SK' ]\n        RegistrationId:\n          type: string\n          maxLength: 255\n          description: 'Registration Id with the principle authority. This field is searchable.'\n        X509OrganisationIdentifier:\n          type: array\n          items:\n            type: string\n            maxLength: 255\n      required:\n        - AuthorityId\n        - RegistrationId\n        - X509OrganisationIdentifier\n    AuthorisationDomainStatusSchema:\n      type: object\n      properties:\n        AuthorizationDomain:\n          type: string\n          enum: [ 'PSD2', 'Pay.UK', 'CD' ]\n          description: 'Authorisation Domain. This field is searchable.'\n        Status:\n          type: string\n          enum: [ 'Active', 'Withdrawn', 'Revoked', 'Suspended', 'Requested', 'Rejected' ]\n          description: \u003e\n            Indicates whether authorisation domain is active. This field is searchable.\n            * `Active` - participant can take actions in ecosystem in authorisation domains that he is assigned to.\n            * `Withdrawn` - revocation initiated by participants\n            * `Revoked` - participant can't take actions in ecosystem because of privileges loss\n            * `Suspended` - temporary revocation, available only in COP authorisation domain\n            * `Requested` - set after dynamic client registration, to be confirmed by CRM\n            * `Rejected` - dynamic client registration rejected\n    AuthorisationDomainStatusRootSchema:\n      type: object\n      properties:\n        Status:\n          description: Status of an organisation in a particular authorisation domain.\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthorisationDomainStatusSchema'\n    AuthorisationServerRequestSchema:\n      type: object\n      properties:\n        AuthorizationDomain:\n          type: string\n          description: Authorisation Domain for which the authorisation server is created.\n          enum: [ 'PSD2', 'Pay.UK', 'CD' ]\n        AutoRegistrationSupported:\n          type: boolean\n          description: 'Authorisation Server supports auto-registration. This field is searchable.'\n        BaseApiDNSUri:\n          description: 'Points to the Open Banking APIs V39 required. This field is searchable.'\n          type: string\n          format: uri\n          maxLength: 2000\n        CustomerFriendlyDescription:\n          description: 'Customer orientated description. This field is searchable and is not included as part of the response payload when unassigned.'\n          type: string\n          maxLength: 255\n        CustomerFriendlyLogoUri:\n          description: 'uri from which a TPP can retrieve a certified logo V39 required. This field is searchable.'\n          type: string\n          format: uri\n          maxLength: 255\n        CustomerFriendlyName:\n          type: string\n          maxLength: 255\n          description: 'Certified name. This field is searchable and is not included as part of the response payload when unassigned.'\n        DeveloperPortalUri:\n          description: URI for TPP developer testing V39 required. This field is searchable.\n          type: string\n          format: uri\n          maxLength: 255\n        TermsOfService:\n          description: 'Uri from which the terms of service can be retrieved V39 required. This field is searchable.'\n          type: string\n          format: uri\n          maxLength: 255\n        OpenIDConfigEndPointUri:\n          description: Uri used for Oauth2.0 OpenId Configuration V39 required. This field is searchable.\n          type: string\n          format: uri\n          maxLength: 255\n        PayloadSigningCertLocation:\n          description: 'The location which is used for signing certificates V39 required. This field is searchable.'\n          type: string\n          format: uri\n          maxLength: 255\n        EISCDId:\n          type: array\n          items:\n            type: string\n            description: 'Confirmation of payee bank identifier V37 was CoPBankIdentifier. Allowed lengths: 4, 6, 14. This field is searchable and is not included as part of the response payload when unassigned.'\n        ParentAuthorisationServerId:\n          type: string\n          maxLength: 22\n          description: Authorisation Server Id of Parent Authorisation server, used for app to app linking. This field is searchable and is not included as part of the response payload when unassigned.\n        ApiResourceDiscoveryEndpoint:\n          description: An RFC-3986-compliant URI. This field is searchable and is not included as part of the response payload when unassigned.\n          type: string\n          format: uri\n          maxLength: 256\n      required:\n        - AuthorizationDomain\n        - AutoRegistrationSupported\n        - BaseApiDNSUri\n        - CustomerFriendlyLogoUri\n        - DeveloperPortalUri\n        - TermsOfService\n        - OpenIDConfigEndPointUri\n        - PayloadSigningCertLocation\n        - EISCDId\n    AuthorisationV11Schema:\n      type: object\n      properties:\n        Active:\n          type: boolean\n        AuthorityId:\n          type: string\n          maxLength: 255\n          description: 'Authority identifier. This field is searchable.'\n        AuthorizationDomain:\n          type: string\n          description: Authorisation Domain for which the authorisation server is created.\n          enum: [ 'PSD2', 'Pay.UK', 'CD' ]\n        MemberState:\n          type: string\n          description: 'Member state. This field is searchable.'\n          enum: [ 'AT','BE','BG','CY','CZ','DE','DK','EE','EL','ES','FI','FR','GB','GG','GI','GR','HR','HU','IE','IM','IS','IT','JE','LI','LT','LU','LV','MT','NL','NO','PL','PT','RO','SE','SI','SK' ]\n        Role:\n          type: string\n          enum: [ 'COPRequester', 'COPResponder', 'AISP', 'ASPSP', 'CBPII', 'PISP', 'CD_AISP', 'CD_ASPSP', 'CD_CBPII' ]\n          description: \u003e\n            Roles for which this software statement can be used. It contains roles from one domain only. If list of roles contains ASPSP role, then any other role cannot be present. This field is searchable.\n            Meaning of values:\n              * `COPRequester` - Confirmation of Payee Requester\n              * `COPResponder` - Confirmation of Payee Responder\n              * `AISP` - Account Information Service Provider\n              * `ASPSP` - Account Servicing Payment Service Provider\n              * `CBPII` - Card-Based Payment Instrument Issuer\n              * `PISP` - Payment Initiation Service Provider\n              * `CD_AISP` - Crown Dependencies Account Information Service Provider\n              * `CD_ASPSP` - Crown Dependencies Account Servicing Payment Service Provider\n              * `CD_CBPII` - Crown Dependencies Card-Based Payment Instrument Issuer\n    CertificateValidationResponseSchema:\n      type: object\n      properties:\n        data:\n          type: object\n          properties:\n            certificate:\n              type: object\n              properties:\n                type:\n                  type: string\n                  enum: [ 'obwac', 'obseal', 'qwac', 'qseal', 'obsigning' , 'obtransport' ]\n                eidas_profile:\n                  type: string\n                qtsp_name:\n                  type: string\n                qtsp_uri:\n                  type: string\n                roles:\n                  type: array\n                  items:\n                    type: string\n                    enum: [ 'COPRequester', 'COPResponder', 'AISP', 'ASPSP', 'CBPII', 'PISP', 'CD_AISP', 'CD_ASPSP', 'CD_CBPII' ]\n                    description: \u003e\n                      Roles for which this software statement can be used. It contains roles from one domain only. If list of roles contains ASPSP role, then any other role cannot be present. This field is searchable.\n                      Meaning of values:\n                        * `COPRequester` - Confirmation of Payee Requester\n                        * `COPResponder` - Confirmation of Payee Responder\n                        * `AISP` - Account Information Service Provider\n                        * `ASPSP` - Account Servicing Payment Service Provider\n                        * `CBPII` - Card-Based Payment Instrument Issuer\n                        * `PISP` - Payment Initiation Service Provider\n                        * `CD_AISP` - Crown Dependencies Account Information Service Provider\n                        * `CD_ASPSP` - Crown Dependencies Account Servicing Payment Service Provider\n                        * `CD_CBPII` - Crown Dependencies Card-Based Payment Instrument Issuer\n                valid_eidas_certificate:\n                  type: boolean\n                valid_obietf_certificate:\n                  type: boolean\n                expired:\n                  type: boolean\n                revoked:\n                  type: boolean\n              required:\n                - type\n                - eidas_profile\n                - qtsp_name\n                - qtsp_uri\n                - roles\n                - valid_eidas_certificate\n                - valid_obietf_certificate\n                - expired\n                - revoked\n                - check_failed\n            organisation:\n              type: object\n              properties:\n                onboarded_to_open_banking:\n                  type: boolean\n                org_name:\n                  type: string\n                  maxLength: 255\n                passports:\n                  type: object\n                  properties:\n                    nca_name:\n                      type: object\n                      properties:\n                        permission_country:\n                          type: array\n                          items:\n                            type: object\n                            properties:\n                              permission_type:\n                                type: string\n                              permissions:\n                                type: array\n                                items:\n                                  type: object\n                                  properties:\n                                    code:\n                                      type: string\n                                    permission:\n                                      type: string\n                              roles:\n                                type: array\n                                items:\n                                  type: string\n                        roles:\n                          type: array\n                          items:\n                            type: string\n                competent_authority_claims:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      authorisation_domain:\n                        type: string\n                        description: Authorisation Domain for which the authorisation server is created.\n                        enum: [ 'PSD2', 'Pay.UK', 'CD' ]\n                      authority_id:\n                        type: string\n                        maxLength: 255\n                      registration_id:\n                        type: string\n                        maxLength: 255\n                      status:\n                        type: string\n                        enum: [ 'Active', 'Withdrawn', 'Revoked', 'Suspended', 'Requested', 'Rejected' ]\n                        description: \u003e\n                          * `Active` - participant can take actions in ecosystem in authorisation domains that he is assigned to.\n                          * `Withdrawn` - revocation initiated by participants\n                          * `Revoked` - participant can't take actions in ecosystem because of privileges loss\n                          * `Suspended` - temporary revocation, available only in COP authorisation domain\n                          * `Requested` - set after dynamic client registration, to be confirmed by CRM\n                          * `Rejected` - dynamic client registration rejected\n                      authorisations:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/AuthorisationSchema'\n                software_statements:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      software_id:\n                        type: string\n                        maxLength: 22\n              required:\n                - onboarded_to_open_banking\n                - org_name\n                - passports\n                - competent_authority_claims\n                - software_statements\n    CertificateValidationResponseSchemaV2.1:\n      type: object\n      properties:\n        data:\n          type: object\n          properties:\n            certificate:\n              type: object\n              properties:\n                type:\n                  type: string\n                  enum: [ 'obwac', 'obseal', 'qwac', 'qseal', 'obsigning' , 'obtransport' ]\n                eidas_profile:\n                  type: string\n                qtsp_name:\n                  type: string\n                qtsp_uri:\n                  type: string\n                roles:\n                  type: array\n                  items:\n                    type: string\n                    enum: [ 'COPRequester', 'COPResponder', 'AISP', 'ASPSP', 'CBPII', 'PISP', 'CD_AISP', 'CD_ASPSP', 'CD_CBPII' ]\n                    description: \u003e\n                      Meaning of values:\n                        * `COPRequester` - Confirmation of Payee Requester\n                        * `COPResponder` - Confirmation of Payee Responder\n                        * `AISP` - Account Information Service Provider\n                        * `ASPSP` - Account Servicing Payment Service Provider\n                        * `CBPII` - Card-Based Payment Instrument Issuer\n                        * `PISP` - Payment Initiation Service Provider\n                        * `CD_AISP` - Crown Dependencies Account Information Service Provider\n                        * `CD_ASPSP` - Crown Dependencies Account Servicing Payment Service Provider\n                        * `CD_CBPII` - Crown Dependencies Card-Based Payment Instrument Issuer\n                valid_eidas_certificate:\n                  type: boolean\n                valid_obietf_certificate:\n                  type: boolean\n                expired:\n                  type: boolean\n                revoked:\n                  type: boolean\n                check_failed:\n                  type: boolean\n              required:\n                - type\n                - eidas_profile\n                - qtsp_name\n                - qtsp_uri\n                - roles\n                - valid_eidas_certificate\n                - valid_obietf_certificate\n                - expired\n                - revoked\n                - check_failed\n            organisation:\n              type: object\n              properties:\n                onboarded_to_open_banking:\n                  type: boolean\n                org_name:\n                  type: string\n                  maxLength: 255\n                passports:\n                  type: object\n                  properties:\n                    nca_name:\n                      type: object\n                      properties:\n                        permission_country:\n                          type: array\n                          items:\n                            type: object\n                            properties:\n                              permission_type:\n                                type: string\n                              permissions:\n                                type: array\n                                items:\n                                  type: object\n                                  properties:\n                                    code:\n                                      type: string\n                                    permission:\n                                      type: string\n                              roles:\n                                type: array\n                                items:\n                                  type: string\n                        roles:\n                          type: array\n                          items:\n                            type: string\n                competent_authority_claims:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      authorisation_domain:\n                        type: string\n                        description: Authorisation Domain for which the authorisation server is created.\n                        enum: [ 'PSD2', 'Pay.UK', 'CD' ]\n                      authority_id:\n                        type: string\n                        maxLength: 255\n                      registration_id:\n                        type: string\n                        maxLength: 255\n                      status:\n                        type: string\n                        enum: [ 'Active', 'Withdrawn', 'Revoked', 'Suspended', 'Requested', 'Rejected' ]\n                        description: \u003e\n                          * `Active` - participant can take actions in ecosystem in authorisation domains that he is assigned to.\n                          * `Withdrawn` - revocation initiated by participants\n                          * `Revoked` - participant can't take actions in ecosystem because of privileges loss\n                          * `Suspended` - temporary revocation, available only in COP authorisation domain\n                          * `Requested` - set after dynamic client registration, to be confirmed by CRM\n                          * `Rejected` - dynamic client registration rejected\n                      authorisations:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/AuthorisationSchema'\n                software_statements:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      software_id:\n                        type: string\n                        maxLength: 22\n              required:\n                - onboarded_to_open_banking\n                - org_name\n                - passports\n                - competent_authority_claims\n                - software_statements\n    CertificateValidationResponseSchemaV2:\n      type: object\n      properties:\n        data:\n          type: object\n          properties:\n            certificate:\n              type: object\n              properties:\n                type:\n                  type: string\n                  enum: [ 'obwac', 'obseal', 'qwac', 'qseal', 'obsigning' , 'obtransport' ]\n                eidas_profile:\n                  type: string\n                qtsp_name:\n                  type: string\n                qtsp_uri:\n                  type: string\n                roles:\n                  type: array\n                  items:\n                    type: string\n                    enum: [ 'COPRequester', 'COPResponder', 'AISP', 'ASPSP', 'CBPII', 'PISP', 'CD_AISP', 'CD_ASPSP', 'CD_CBPII' ]\n                    description: \u003e\n                      Roles for which this software statement can be used. It contains roles from one domain only. If list of roles contains ASPSP role, then any other role cannot be present. This field is searchable.\n                      Meaning of values:\n                        * `COPRequester` - Confirmation of Payee Requester\n                        * `COPResponder` - Confirmation of Payee Responder\n                        * `AISP` - Account Information Service Provider\n                        * `ASPSP` - Account Servicing Payment Service Provider\n                        * `CBPII` - Card-Based Payment Instrument Issuer\n                        * `PISP` - Payment Initiation Service Provider\n                        * `CD_AISP` - Crown Dependencies Account Information Service Provider\n                        * `CD_ASPSP` - Crown Dependencies Account Servicing Payment Service Provider\n                        * `CD_CBPII` - Crown Dependencies Card-Based Payment Instrument Issuer\n                valid_eidas_certificate:\n                  type: boolean\n                valid_obietf_certificate:\n                  type: boolean\n                expired:\n                  type: boolean\n                revoked:\n                  type: boolean\n              required:\n                - type\n                - eidas_profile\n                - qtsp_name\n                - qtsp_uri\n                - roles\n                - valid_eidas_certificate\n                - valid_obietf_certificate\n                - expired\n                - revoked\n                - check_failed\n            organisation:\n              type: object\n              properties:\n                onboarded_to_open_banking:\n                  type: boolean\n                org_name:\n                  type: string\n                  maxLength: 255\n                passports:\n                  type: object\n                  properties:\n                    nca_name:\n                      type: object\n                      properties:\n                        permission_country:\n                          type: array\n                          items:\n                            type: object\n                            properties:\n                              permission_type:\n                                type: string\n                              permissions:\n                                type: array\n                                items:\n                                  type: object\n                                  properties:\n                                    code:\n                                      type: string\n                                    permission:\n                                      type: string\n                              roles:\n                                type: array\n                                items:\n                                  type: string\n                        roles:\n                          type: array\n                          items:\n                            type: string\n                competent_authority_claims:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      authorisation_domain:\n                        type: string\n                        description: Authorisation Domain for which the authorisation server is created.\n                        enum: [ 'PSD2', 'Pay.UK', 'CD' ]\n                      authority_id:\n                        type: string\n                        maxLength: 255\n                      registration_id:\n                        type: string\n                        maxLength: 255\n                      status:\n                        type: string\n                        enum: [ 'Active', 'Withdrawn', 'Revoked', 'Suspended', 'Requested', 'Rejected' ]\n                        description: \u003e\n                          * `Active` - participant can take actions in ecosystem in authorisation domains that he is assigned to.\n                          * `Withdrawn` - revocation initiated by participants\n                          * `Revoked` - participant can't take actions in ecosystem because of privileges loss\n                          * `Suspended` - temporary revocation, available only in COP authorisation domain\n                          * `Requested` - set after dynamic client registration, to be confirmed by CRM\n                          * `Rejected` - dynamic client registration rejected\n                      authorisations:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/AuthorisationSchema'\n                software_statements:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      software_id:\n                        type: string\n                        maxLength: 22\n              required:\n                - onboarded_to_open_banking\n                - org_name\n                - passports\n                - competent_authority_claims\n                - software_statements\n    AuthorisationServerSchema:\n      type: object\n      properties:\n        Id:\n          type: string\n          maxLength: 22\n          description: 'Authorisation Server Id V39 required. This field is searchable.'\n        AuthorizationDomain:\n          type: string\n          description: 'Authorisation Domain for which the authorisation server is created.This field is searchable.'\n          enum: [ 'PSD2', 'Pay.UK', 'CD' ]\n        AutoRegistrationSupported:\n          type: boolean\n          description: 'Authorisation Server supports auto-registration. This field is searchable.'\n        BaseApiDNSUri:\n          description: 'Points to the Open Banking APIs V39 required. This field is searchable.'\n          type: string\n          format: uri\n          maxLength: 256\n        CustomerFriendlyDescription:\n          type: string\n          maxLength: 255\n          description: 'Customer orientated description. This field is searchable and is not included as part of the response payload when unassigned.'\n        CustomerFriendlyLogoUri:\n          description: 'uri from which a TPP can retrieve a certified logo V39 required. This field is searchable.'\n          type: string\n          format: uri\n          maxLength: 2000\n        CustomerFriendlyName:\n          type: string\n          maxLength: 255\n          description: 'Certified name. This field is searchable and is not included as part of the response payload when unassigned.'\n        DeveloperPortalUri:\n          description: URI for TPP developer testing V39 required. This field is searchable.\n          type: string\n          format: uri\n          maxLength: 2000\n        TermsOfService:\n          description: 'Uri from which the terms of service can be retrieved V39 required. This field is searchable.'\n          type: string\n          format: uri\n          maxLength: 2000\n        OpenIDConfigEndPointUri:\n          description: Uri used for Oauth2.0 OpenId Configuration V39 required. This field is searchable.\n          type: string\n          format: uri\n          maxLength: 2000\n        PayloadSigningCertLocation:\n          description: 'The location which is used for signing certificates V39 required. This field is searchable.'\n          type: string\n          format: uri\n          maxLength: 255\n        EISCDId:\n          type: array\n          items:\n            type: string\n            description: 'Confirmation of payee bank identifier V37 was CoPBankIdentifier. Allowed lengths: 4, 6, 14. This field is searchable and is not included as part of the response payload when unassigned.'\n        ParentAuthorisationServerId:\n          type: string\n          maxLength: 255\n          description: Authorisation Server Id of Parent Authorisation server, used for app to app linking. This field is searchable and is not included as part of the response payload when unassigned.\n        ApiResourceDiscoveryEndpoint:\n          description: An RFC-3986-compliant URI. This field is searchable and is not included as part of the response payload when unassigned.\n          type: string\n          format: uri\n          maxLength: 2000\n      required:\n        - Id\n        - AutoRegistrationSupported\n        - BaseApiDNSUri\n        - CustomerFriendlyLogoUri\n        - DeveloperPortalUri\n        - TermsOfService\n        - OpenIDConfigEndPointUri\n        - PayloadSigningCertLocation\n        - EISCDId\n    AuthorisationServersSchema:\n      type: array\n      items:\n        $ref: '#/components/schemas/AuthorisationServerSchema'\n    AuthorisationServerIdSchema:\n      type: string\n      maxLength: 22\n    CertificateOrKeyOrJWTSchema:\n      type: string\n    CertificateOrKeyIdSchema:\n      type: string\n      maxLength: 255\n    CertificateOrKeyAssociationSchema:\n      type: object\n      properties:\n        associate:\n          type: boolean\n    CertificatesOrKeysGetSchema:\n      type: object\n      properties:\n        keys:\n          type: array\n          items:\n            $ref: '#/components/schemas/CertificateOrKeyGetSchema'\n    CertificateOrKeyGetSchema:\n      type: object\n      properties:\n        obOrganisationId:\n          description: Open Banking Organization Identifier. This field is searchable.\n          type: string\n          readOnly: true\n        Associations:\n          description: Array of Software Statement Ids that the certificate is associated with\n          type: array\n          items:\n            $ref: '#/components/schemas/SoftwareStatementIdSchema'\n        status:\n          type: string\n        expiryDateTime:\n          type: string\n          format: date-time\n        e:\n          type: string\n        keyType:\n          type: string\n          maxLength: 255\n        kid:\n          type: string\n          maxLength: 255\n        kty:\n          type: string\n        n:\n          type: string\n        use:\n          type: string\n        x5c:\n          type: array\n          items:\n            description: A PKIX certificate [RFC5280]\n            type: string\n        x5t:\n          type: string\n        x5t#S256:\n          type: string\n        x5u:\n          type: string\n      required:\n        - obOrganisationId\n        - Associations\n        - status\n        - keyType\n        - kid\n    CertificateValidationSchema:\n      type: string\n    CompetentAuthoritySchema:\n      type: object\n      properties:\n        AuthorisationAuthorities:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthorisationAuthoritySchema'\n        Authorisations:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthorisationV11Schema'\n    CompetentAuthorityClaimSchema:\n      type: object\n      properties:\n        Authorisations:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthorisationSchema'\n        AuthorityId:\n          type: string\n          maxLength: 255\n          description: 'Authority identifier. This field is searchable.'\n        EtsiIdentifier:\n          type: string\n          description: 'European Telecommunications Standards Institute Organization Identifier. This field is searchable and is not included as part of the response payload when unassigned. '\n        MemberState:\n          type: string\n          description: 'Member state. This field is searchable.'\n          enum: [ 'AT','BE','BG','CY','CZ','DE','DK','EE','EL','ES','FI','FR','GB','GG','GI','GR','HR','HU','IE','IM','IS','IT','JE','LI','LT','LU','LV','MT','NL','NO','PL','PT','RO','SE','SI','SK' ]\n        RegistrationId:\n          type: string\n          maxLength: 255\n          description: 'Registration Id with the principle authority. This field is searchable.'\n      required:\n        - RegistrationId\n        - EtsiIdentifier\n    ContactSchema:\n      type: object\n      properties:\n        EmailAddress:\n          type: string\n          description: The validation standard you can find under https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1\n        PhoneNumber:\n          type: string\n      required:\n        - EmailAddress\n        - PhoneNumber\n    CertificateTypeForValidationSchema:\n      type: string\n      enum: [ 'obwac', 'obseal', 'qwac', 'qseal', 'obsigning' , 'obtransport' ]\n    OrganisationAssociativeCertificateTypeSchema:\n      type: string\n      enum: [ 'obwac', 'obseal', 'qwac', 'qseal' ]\n    CertificateTypeSchema:\n      type: string\n      enum: [ 'obwac', 'obseal', 'qwac', 'qseal', 'obsigning' , 'obtransport' ]\n    ContactTypeSchema:\n      type: string\n      enum: [ 'Business', 'PBC', 'PTC', 'Registered', 'Technical' ]\n      description: \u003e\n        Meaning of values:\n          * `Business` - Business\n          * `PBC` - Primary Business Contact\n          * `PTC` - Primary Technical Contact\n          * `Registered` - Registered\n          * `Technical` - Technical\n    EmailAddressSchema:\n      type: object\n      description: The validation standard you can find under https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1\n      properties:\n        Name:\n          type: string\n          description: 'A name of a person or an office to which this email belongs. This field is not searchable.'\n          maxLength: 255\n        Primary:\n          type: boolean\n          description: 'Indicator to show is this is the primary email address. This field is not searchable. '\n        Type:\n          type: string\n          description: 'Type of email address. This field is not searchable. '\n        Value:\n          type: string\n          description: 'Value of email address. This field is not searchable. The format of the email address must comply with standards defined here -\u003e https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1 '\n          maxLength: 255\n      required:\n        - Name\n        - Primary\n        - Type\n        - Value\n    EnrolSchema:\n      type: object\n      properties:\n        redirect_uris:\n          type: array\n          items:\n            description: An RFC-3986-compliant URI\n            type: string\n            format: uri\n            maxLength: 255\n        token_endpoint_auth_method:\n          type: string\n        token_endpoint_auth_signing_alg:\n          type: string\n        tls_client_auth_subject_dn:\n          type: string\n          enum: [ 'client_secret_post', 'client_secret_basic', 'client_secret_jwt', 'private_key_jwt', 'none' ]\n        grant_types:\n          type: array\n          items:\n            type: string\n        response_types:\n          type: array\n          items:\n            type: string\n        client_name:\n          type: string\n        client_uri:\n          description: An RFC-3986-compliant URI\n          type: string\n          format: uri\n        logo_uri:\n          description: An RFC-3986-compliant URI\n          type: string\n          format: uri\n          maxLength: 2000\n        scope:\n          type: string\n        contacts:\n          type: array\n          items:\n            type: string\n            format: email\n            maxLength: 255\n        tos_uri:\n          description: An RFC-3986-compliant URI\n          type: string\n          format: uri\n          maxLength: 2000\n        policy_uri:\n          description: An RFC-3986-compliant URI\n          type: string\n          format: uri\n          maxLength: 2000\n        jwks_uri:\n          description: An RFC-3986-compliant URI\n          type: string\n          format: uri\n        jwks:\n          type: array\n          description: Client's JSON Web Key Set [RFC7517] document value\n          items:\n            description: A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.\n            type: object\n            properties:\n              e:\n                type: string\n              n:\n                type: string\n              kty:\n                type: string\n        software_id:\n          type: string\n          maxLength: 255\n        software_version:\n          type: string\n      required:\n        - client_name\n        - token_endpoint_auth_method\n        - tls_client_auth_subject_dn\n        - grant_types\n        - token_endpoint_auth_signing_alg\n    Enrol201CreatedResponseSchema:\n      description: \u003e-\n        A JSON object DCR response returned when client gets created.\n      type: object\n      properties:\n        client_id:\n          description: Client ID assigned by Open Banking Directory\n          type: string\n          minLength: 18\n          maxLength: 18\n        client_id_issued_at:\n          description: Timestamp\n          type: integer\n        client_secret_expires_at:\n          description: Timestamp\n          type: integer\n        ob_org_id:\n          description: Organization ID assigned by Open Banking Directory\n          type: string\n          minLength: 18\n          maxLength: 18\n        token_endpoint_auth_method:\n          description: client_secret_post\n          type: string\n        grant_types:\n          description: client_credentials\n          type: array\n          items:\n            type: string\n        scope:\n          description: ASPSPFullAccess\n          type: string\n        client_name:\n          description: ORG name ar per eIDAS certificate\n          type: string\n        jwks_uri:\n          description: An RFC-3986-compliant URI string referencing the client's JSON Web Key (JWK) Set\n          type: string\n          format: uri\n      required:\n        - client_id\n        - client_id_issued_at\n        - client_secret_expires_at\n        - ob_org_id\n        - token_endpoint_auth_method\n        - grant_types\n        - scope\n        - client_name\n        - jwks_uri\n    Enrol400BadRequestResponseSchema:\n      type: object\n      properties:\n        error:\n          description: Error type\n          type: string\n          enum: [ 'invalid_redirect_uri', 'invalid_client_metadata', 'invalid_software_statement', 'unapproved_software_statement' ]\n        error_description:\n          description: A more detailed error description\n          type: string\n    LegalAuthorityClaimSchema:\n      type: object\n      properties:\n        RegisteredId:\n          type: string\n          description: 'Company Registration Id. This field is searchable.'\n        RegisteredName:\n          type: string\n          description: 'Company Registered Name. This field is searchable.'\n        RegistrationAuthorityId:\n          type: string\n          description: 'Identification of registering Authority. This field is searchable.'\n          readOnly: true\n      required:\n        - RegisteredId\n        - RegisteredName\n        - RegistrationAuthorityId\n    LegalAuthorityClaimRootSchema:\n      type: object\n      properties:\n        LegalAuthorityClaims:\n          type: array\n          items:\n            $ref: '#/components/schemas/LegalAuthorityClaimSchema'\n    MetaSchema:\n      type: object\n      properties:\n        location:\n          type: string\n        resourceType:\n          type: string\n    OrganisationSchema:\n      type: object\n      properties:\n        CreateTimestamp:\n          type: string\n          description: Creation Timestamp.\n        EmailAddresses:\n          type: array\n          description: 'Email addresses associated with the organization. This field is not included as part of the response payload when unassigned'\n          items:\n            $ref: '#/components/schemas/EmailAddressSchema'\n        ModifyTimestamp:\n          type: string\n          description: Modification Timestamp.\n        OBAuthorisationState:\n          type: string\n          maxLength: 255\n          description: 'OB Participant Authorisation State. This field is not searchable'\n        OBOrganisationId:\n          type: string\n          maxLength: 255\n          description: Open Banking Organization Identifier. This field is searchable.\n          readOnly: true\n        OrganisationCommonName:\n          type: string\n          maxLength: 255\n          description: The common name of the organization. This field is searchable\n        PersonalAccountRoles:\n          type: array\n          description: Individuals who have authorised access to the organization. This field is not included as part of the response payload when unassigned.\n          items:\n            $ref: '#/components/schemas/PersonalAccountRoleSchema'\n        PhoneNumbers:\n          type: array\n          description: Phone numbers by which an organization can be contacted. This field is not included as part of the response payload when unassigned.\n          items:\n            $ref: '#/components/schemas/PhoneNumberSchema'\n        PostalAddresses:\n          type: array\n          items:\n            $ref: '#/components/schemas/PostalAddressSchema'\n        status:\n          type: string\n          enum: [ 'PBC', 'PTC', 'Registered' ]\n          description: \u003e\n            Organization status. This field is not searchable\n            Meaning of values:\n              * `PBC` - Primary Business Contact\n              * `PTC` - Primary Technical Contact\n              * `Registered` - Registered\n      required:\n        - OBOrganisationId\n        - OrganisationCommonName\n        - status\n    OrganisationCertificateTypeSchema:\n      type: string\n      enum: [ 'qwac', 'qseal', 'obwac', 'obseal' ]\n    OrganisationTypeForQSealOnboardingSchema:\n      type: string\n      enum: [ 'tpp' ]\n    OrganisationTypeSchema:\n      type: string\n      enum: [ 'aspsp', 'tpp' ]\n    OrganisationIdSchema:\n      type: string\n      maxLength: 255\n    OrganisationsGetFromSCIM200OKResponseSchema:\n      type: object\n      properties:\n        Resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrganisationGetFromSCIM200OKResponseSchema'\n        itemsPerPage:\n          type: integer\n          format: int32\n          description: An integer indicating the maximum number of query results per page.\n        schemas:\n          type: array\n          items:\n            type: string\n        startIndex:\n          type: integer\n          format: int32\n          description: An integer indicating the 1-based index of the first query result.\n        totalResults:\n          type: integer\n          format: int32\n    OrganisationGetFromSCIM200OKResponseSchema:\n      type: object\n      properties:\n        AuthorisationServers:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthorisationServerSchema'\n        id:\n          type: string\n        meta:\n          $ref: '#/components/schemas/MetaSchema'\n        schemas:\n          type: array\n          items:\n            type: string\n        'urn:openbanking:authorisationdomainstatus:1.0':\n          $ref: '#/components/schemas/AuthorisationDomainStatusRootSchema'\n        'urn:openbanking:competentauthorityclaims:1.0':\n          $ref: '#/components/schemas/CompetentAuthorityClaimSchema'\n        'urn:openbanking:legalauthorityclaims:1.0':\n          $ref: '#/components/schemas/LegalAuthorityClaimRootSchema'\n        'urn:openbanking:organisation:1.0':\n          $ref: '#/components/schemas/OrganisationSchema'\n        'urn:openbanking:softwarestatement:1.0':\n          $ref: '#/components/schemas/SoftwareStatementRootSchema'\n        'urn:trustframework:competentauthorityclaims:1.1':\n          $ref: '#/components/schemas/CompetentAuthoritySchema'\n    PersonalAccountRoleSchema:\n      type: object\n      properties:\n        AuthorizationDomain:\n          type: string\n          description: 'Authorisation Domain for which the authorisation server is created.This field is searchable.'\n          enum: [ 'PSD2', 'Pay.UK', 'CD' ]\n        Role:\n          type: string\n          enum: [ 'PBC', 'PTC', 'SBC', 'STC' ]\n          description: \u003e\n            Role which the individual holds. This field is searchable.\n            Meaning of values:\n              * `PBC` - Primary Business Contact\n              * `PTC` - Primary Technical Contact\n              * `SBC` - Secondary Business Contact\n              * `STC` - Secondary Technical Contact\n        UserName:\n          type: string\n          maxLength: 255\n          description: 'User''s name, email address or other identifying label. This field is searchable.'\n      required:\n        - AuthorizationDomain\n        - Role\n        - UserName\n    PhoneNumberSchema:\n      type: object\n      properties:\n        Name:\n          type: string\n          maxLength: 255\n          description: 'A name of a person or an office to which this phone number belongs. This field is not searchable.'\n        Type:\n          type: string\n          enum: [ 'Business', 'PBC', 'PTC', 'Registered', 'Technical' ]\n          description: \u003e\n            Meaning of values:\n              * `Business` - Business\n              * `PBC` - Primary Business Contact\n              * `PTC` - Primary Technical Contact\n              * `Registered` - Registered\n              * `Technical` - Technical\n        Value:\n          type: string\n          maxLength: 255\n          description: 'Value of phone number through which the organization can be contacted. This field is not searchable.'\n        Verified:\n          type: boolean\n          description: 'Flag to show that the phone number has been verified. This field is not searchable. '\n      required:\n        - Name\n        - Type\n        - Value\n        - Verified\n    PostalAddressSchema:\n      type: object\n      properties:\n        AddressLine2:\n          type: string\n          maxLength: 255\n          description: 'Additional address line. This field is not searchable and is not included as part of the response payload when unassigned'\n        Country:\n          type: string\n          description: 'Address Country in full. This field is not searchable.'\n          enum: [ 'Austria', 'Belgium', 'Bulgaria', 'Cyprus', 'Czechia', 'Germany', 'Denmark', 'Estonia', 'Hellenic Republic', 'Spain', 'Finland', 'France', 'United Kingdom', 'Guernsey', 'Gibraltar', 'Greece', 'Croatia', 'Hungary', 'Ireland', 'Isle of Man', 'Iceland', 'Italy', 'Jersey', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Latvia', 'Malta', 'Netherlands', 'Norway', 'Poland', 'Portugal', 'Romania', 'Sweden', 'Slovenia', 'Slovakia' ]\n        County:\n          type: string\n        Name:\n          type: string\n          maxLength: 255\n          description: 'Name of addressee. This field is not searchable. '\n        PostCode:\n          type: string\n          description: 'Post or ZIP Code. This field is not searchable. '\n        Primary:\n          type: boolean\n          description: 'Flag to indicate that this is the primary contact address. This field is not searchable. '\n        StreetAddress:\n          type: string\n          maxLength: 255\n          description: 'Street Address, including building number. This field is not searchable. '\n        Town:\n          type: string\n          description: 'Postal Town. This field is not searchable. '\n          maxLength: 255\n        Type:\n          type: string\n          maxLength: 255\n          description: 'Type of postal address. This field is not searchable. '\n      required:\n        - Country\n        - Name\n        - PostCode\n        - Primary\n        - StreetAddress\n        - Town\n        - Type\n    QSealOnboardingSchema:\n      type: string\n      description: A signed JWT (JWS)\n    SoftwareStatementCertificateOrKeyTypeSchema:\n      type: string\n      enum: [ 'obtransport', 'obsigning', 'sigkey', 'enckey' ]\n    SoftwareStatementCreateSchema:\n      type: object\n      properties:\n        AuthorizationDomain:\n          type: string\n          description: Authorisation Domain for which the software statement is created.\n          enum: [ 'PSD2', 'Pay.UK', 'CD' ]\n        ClientName:\n          type: string\n          description: Software Statement client name\n          maxLength: 40\n        Description:\n          type: string\n          description: Software Statement description\n          maxLength: 256\n        OnBehalfOfObOrganisation:\n          type: string\n          description: 'The organization on whom this software statement is behalf of Altered from reference to string, 10/11/2017. This field is searchable. '\n          maxLength: 40\n        PolicyUri:\n          type: string\n          format: uri\n          description: An optional document containing a link to a Policy document governing the privacy information policy of for the application. Purely to be displayed a PSU at a ASPSP if the ASPSP supports it. Optional for the TPP to provide. This field is searchable\n          maxLength: 256\n          readOnly: true\n        ClientUri:\n          type: string\n          format: uri\n          description: 'The “home page” or other wise recognisable url of the application (oath client). This field is searchable. '\n          maxLength: 256\n        LogoUri:\n          type: string\n          format: uri\n          description: The Software Statement RFC-3986-compliant logo URI\n          maxLength: 255\n        RedirectUri:\n          type: array\n          items:\n            description: An RFC-3986-compliant URI\n            type: string\n            format: uri\n            maxLength: 255\n          description: The Software Statement redirect URIs\n        Roles:\n          type: array\n          items:\n            type: string\n            enum: [ 'COPRequester', 'COPResponder', 'AISP', 'ASPSP', 'CBPII', 'PISP', 'CD_AISP', 'CD_ASPSP', 'CD_CBPII' ]\n          description: \u003e\n            Roles for which this software statement can be used. It contains roles from one domain only. If list of roles contains ASPSP role, then any other role cannot be present. This field is searchable.\n            Meaning of values:\n              * `COPRequester` - Confirmation of Payee Requester\n              * `COPResponder` - Confirmation of Payee Responder\n              * `AISP` - Account Information Service Provider\n              * `ASPSP` - Account Servicing Payment Service Provider\n              * `CBPII` - Card-Based Payment Instrument Issuer\n              * `PISP` - Payment Initiation Service Provider\n              * `CD_AISP` - Crown Dependencies Account Information Service Provider\n              * `CD_ASPSP` - Crown Dependencies Account Servicing Payment Service Provider\n              * `CD_CBPII` - Crown Dependencies Card-Based Payment Instrument Issuer\n        TermsOfServiceUri:\n          type: string\n          format: uri\n          description: 'An optional document containing a link to a Terms of Service document governing the terms of service for the application. Purely to be displayed a PSU at a ASPSP if the ASPSP supports it. Optional for the TPP to provide. This field is searchable.'\n          maxLength: 256\n          readOnly: true\n        Version:\n          type: number\n          description: Software Statement version as provided by the organization's PTC. This field is not searchable.\n          readOnly: true\n      description: Schema defining attributes of Participants', Account Payment Service Providers' and Third Party Providers' records in ecosystem\n      required:\n        - ClientName\n        - Description\n        - OnBehalfOfObOrganisation\n        - PolicyUri\n        - ClientUri\n        - LogoUri\n        - RedirectUri\n        - TermsOfServiceUri\n        - Version\n    SoftwareStatementSchema:\n      type: object\n      properties:\n        Active:\n          type: boolean\n          description: 'Flag to show if software statement is active. This field is searchable.'\n        AuthorizationDomain:\n          type: string\n          description: Authorisation Domain for which the software statement is created. This field is searchable.\n          enum: [ 'PSD2', 'Pay.UK', 'CD' ]\n          readOnly: true\n        ClientId:\n          type: string\n          description: 'Requested Client Id - note that OB will issue a set of credentials with this clientid for this given piece of software. ASPSPs are not obliged to honour this requested clientid. This field is searchable'\n          maxLength: 22\n        ClientName:\n          type: string\n          description: 'Human readable client name. May be localised. This field is searchable.'\n          maxLength: 40\n        Description:\n          type: string\n          description: 'Description of the unique instance of this piece of software. If only one instance of a piece of software is to be registered then this should be the same as the SoftwareDescription. This field is searchable.'\n          maxLength: 256\n        Id:\n          $ref: '#/components/schemas/SoftwareStatementIdSchema'\n        Mode:\n          type: string\n          enum: [ 'Live', 'Not Live' ]\n          description: 'A flag to identify if a piece of software should have access to production PSU accounts. This field has been added at the request of an ASPSP to allow BETA or Non Production testing against production platforms. The default for this system should be ''Live''. This field is searchable.'\n          maxLength: 8\n        ObClientCreated:\n          type: boolean\n          description: An indicator to show if the client has been created in Open Banking. This field is searchable.\n        OnBehalfOfObOrganisation:\n          type: string\n          description: 'The organization on whom this software statement is behalf of Altered from reference to string, 10/11/2017. This field is searchable. '\n          maxLength: 40\n        PolicyUri:\n          type: string\n          format: uri\n          description: An optional document containing a link to a Policy document governing the privacy information policy of for the application. Purely to be displayed a PSU at a ASPSP if the ASPSP supports it. Optional for the TPP to provide. This field is searchable\n          maxLength: 256\n          readOnly: true\n        ClientUri:\n          type: string\n          format: uri\n          description: 'The “home page” or other wise recognisable url of the application (oath client). This field is searchable. '\n          maxLength: 256\n        LogoUri:\n          type: string\n          format: uri\n          description: The Software Statement logo RFC-3986-compliant URI\n          maxLength: 256\n        RedirectUri:\n          type: array\n          items:\n            type: string\n            format: uri\n          description: 'Redirect Uri''s for the registered piece of software. May be overridden by the RFC7591 payload. This field is searchable and is not included as part of the response payload when unassigned.'\n          maxLength: 256\n        Roles:\n          type: array\n          items:\n            type: string\n            enum: [ 'COPRequester', 'COPResponder', 'AISP', 'ASPSP', 'CBPII', 'PISP', 'CD_AISP', 'CD_ASPSP', 'CD_CBPII' ]\n          description: \u003e\n            Roles for which this software statement can be used. It contains roles from one domain only. If list of roles contains ASPSP role, then any other role cannot be present. This field is searchable.\n            Meaning of values:\n              * `COPRequester` - Confirmation of Payee Requester\n              * `COPResponder` - Confirmation of Payee Responder\n              * `AISP` - Account Information Service Provider\n              * `ASPSP` - Account Servicing Payment Service Provider\n              * `CBPII` - Card-Based Payment Instrument Issuer\n              * `PISP` - Payment Initiation Service Provider\n              * `CD_AISP` - Crown Dependencies Account Information Service Provider\n              * `CD_ASPSP` - Crown Dependencies Account Servicing Payment Service Provider\n              * `CD_CBPII` - Crown Dependencies Card-Based Payment Instrument Issuer\n        SigningKeyIds:\n          type: array\n          items:\n            type: string\n          description: The list of signing certificate Ids\n        TermsOfServiceUri:\n          type: string\n          format: uri\n          description: 'An optional document containing a link to a Terms of Service document governing the terms of service for the application. Purely to be displayed a PSU at a ASPSP if the ASPSP supports it. Optional for the TPP to provide. This field is searchable.'\n          maxLength: 256\n        TransportKeyIds:\n          type: array\n          items:\n            type: string\n          description: The list of transport certificate Ids\n        Version:\n          type: number\n          description: Software Statement version as provided by the organization's PTC. This field is not searchable.\n          readOnly: true\n      description: Schema defining attributes of Participants', Account Payment Service Providers' and Third Party Providers' records in ecosystem\n      required:\n        - Active\n        - ClientId\n        - ClientName\n        - ClientUri\n        - Description\n        - Id\n        - LogoUri\n        - ObClientCreated\n        - PolicyUri\n        - RedirectUri\n        - TermsOfServiceUri\n        - Version\n    SoftwareStatementAssertionSchema:\n      type: string\n      description: A signed JWT (JWS)\n    SoftwareStatementsSchema:\n      type: array\n      items:\n        $ref: '#/components/schemas/SoftwareStatementSchema'\n      description: The list of Software Statements\n    SoftwareStatementIdSchema:\n      type: string\n      description: Software Statement Id\n      maxLength: 22\n    SoftwareStatementStateSchema:\n      type: object\n      properties:\n        Active:\n          type: boolean\n      description: Software Statement State\n    SoftwareStatementRedirectURISchema:\n      description: Array of Redirection RFC-3986-compliant URI values used by the Client, as supplied by the client\n      type: array\n      items:\n        type: string\n        format: uri\n        maxLength: 255\n        minItems: 1\n    UniqueRequestIdSchema:\n      type: string\n      description: Unique Request Id. Give it to the Support Desk if you eve need help with a request that does not work the way you expected.\n    SoftwareStatementRootSchema:\n      type: object\n      properties:\n        SoftwareStatements:\n          type: array\n          items:\n            $ref: '#/components/schemas/SoftwareStatementSchema'\n  securitySchemes:\n    OAuth2SecurityReadOps:\n      description: This API uses OAuth 2 with the client credentials grant flow\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: https://sso.openbanking.me.uk/as/token.oauth2\n          scopes:\n            TPPReadAccess: Retrieve or Search for Third Party Providers\n            ASPSPReadAccess: Read ASPSP Records\n    OAuth2SecurityReadWriteOps:\n      description: This API uses OAuth 2 with the client credentials grant flow\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: https://sso.openbanking.me.uk/as/token.oauth2\n          scopes:\n            TPPReadAccess: Retrieve or Search for Third Party Providers\n            TPPManage: Modify Your Third Third Party Provider Record\n            ASPSPReadAccess: Read ASPSP Records\n",
			"canonicalURL": "/github.com/OpenBankingUK/directory-api-specs@bd2c6978fb94d82d4895b8ce18f3289f030064f1/-/blob/directory-api-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenBankingUK/directory-api-specs/blob/bd2c6978fb94d82d4895b8ce18f3289f030064f1/directory-api-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v2/certificate/validate\": post: requestBody: contents: unsupported content types: [application/x-pem-file]",
	"NotImplemented": [
		"oauth2 security",
		"unsupported content types"
	]
}