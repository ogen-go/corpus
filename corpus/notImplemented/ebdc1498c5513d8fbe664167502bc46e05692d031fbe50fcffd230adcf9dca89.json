{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/all-of-us/workbench"
		},
		"file": {
			"name": "jira.yaml",
			"size": 0,
			"path": "api/src/main/resources/jira.yaml",
			"byteSize": 30249,
			"content": "# This file provide the end points for jira interactions\n#\n# Copied from https://developer.atlassian.com/cloud/jira/platform/swagger-v3.v3.json\n# The following updates were applied:\n#  - Only the relevant subset of endpoints/models were copied\n#  - all tags switch to \"Jira\", to consolidate the client interface\n#  - some unused fields were dropped, in particular where they depended on another high\n#    complexity model\n#  - remove all \"read-only: true\"; this removed the ability to manipulate models for testing\n---\nopenapi: 3.0.1\ninfo:\n  title: The Jira Cloud platform REST API\n  description: Jira Cloud platform REST API documentation\n  termsOfService: http://atlassian.com/terms/\n  contact:\n    email: ecosystem@atlassian.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1001.0.0-SNAPSHOT\nservers:\n  - url: https://precisionmedicineinitiative.atlassian.net\n\n##########################################################################################\n## PATHS\n##########################################################################################\n\npaths:\n  \"/rest/api/3/issue\":\n    post:\n      tags:\n        - jira\n      summary: Create issue\n      description: |-\n        Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.\n\n        The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.\n\n        Creating a subtask differs from creating an issue as follows:\n\n         *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).\n         *  `parent` must contain the ID or key of the parent issue.\n\n        In a next-gen project any issue may be made a child providing that the parent and child are members of the same project. In a classic project the parent field is only valid for subtasks.\n\n        **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.\n      operationId: createIssue\n      parameters:\n        - name: updateHistory\n          in: query\n          description: Whether the project in which the issue is created is added to the\n            user's **Recently viewed** project list, as shown under **Projects** in Jira.\n            When provided, the issue type and request type are added to the user's history\n            for a project. These values are then used to provide defaults on the issue\n            create screen.\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/IssueUpdateDetails\"\n        required: true\n      responses:\n        '201':\n          description: Returned if the request is successful.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/CreatedIssue\"\n              example: '{\"jiraId\":\"10000\",\"key\":\"ED-24\",\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/10000\",\"transition\":{\"status\":200,\"errorCollection\":{\"errorMessages\":[],\"errors\":{}}}}'\n        '400':\n          description: |-\n            Returned if the request:\n\n             *  is missing required fields.\n             *  contains invalid field values.\n             *  contains fields that cannot be set for the issue type.\n             *  is by a user who does not have the necessary permission.\n             *  is to create a subtype in a project different that of the parent issue.\n             *  is for a subtask when the option to create subtasks is disabled.\n             *  is invalid for any other reason.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ErrorCollection\"\n              example: '{\"errorMessages\":[\"Field ''priority'' is required\"],\"errors\":{}}'\n        '401':\n          description: Returned if the authentication credentials are incorrect or missing.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ErrorCollection\"\n        '403':\n          description: Returned if the user does not have the necessary permission.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ErrorCollection\"\n      deprecated: false\n      security:\n        - basicAuth: [ ]\n        - OAuth2:\n            - write:jira-work\n        - { }\n      x-atlassian-connect-scope: WRITE\n  \"/rest/api/3/issue/{issueIdOrKey}/comment\":\n    post:\n      tags:\n        - jira\n      summary: Add comment\n      description: |-\n        Adds a comment to an issue.\n\n        This operation can be accessed anonymously.\n\n        **[Permissions](#permissions) required:**\n\n         *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.\n         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n      operationId: addComment\n      parameters:\n        - name: issueIdOrKey\n          in: path\n          description: The ID or key of the issue.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/Comment\"\n            example:\n              visibility:\n                type: role\n                value: Administrators\n              body:\n                type: doc\n                version: 1\n                content:\n                  - type: paragraph\n                    content:\n                      - text: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                          Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis\n                          fermentum. Sed semper quam laoreet nisi egestas at posuere augue\n                          semper.\n                        type: text\n        required: true\n      responses:\n        '201':\n          description: Returned if the request is successful.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Comment\"\n              example: '{\"self\":\"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000\",\"jiraId\":\"10000\",\"author\":{\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\",\"accountId\":\"5b10a2844c20165700ede21g\",\"displayName\":\"Mia\n                Krystof\",\"active\":false},\"body\":{\"type\":\"doc\",\"version\":1,\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Lorem\n                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget\n                venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper\n                quam laoreet nisi egestas at posuere augue semper.\"}]}]},\"updateAuthor\":{\"self\":\"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g\",\"accountId\":\"5b10a2844c20165700ede21g\",\"displayName\":\"Mia\n                Krystof\",\"active\":false},\"created\":\"2021-11-02T02:26:07.309+0000\",\"updated\":\"2021-11-02T02:26:07.309+0000\",\"visibility\":{\"type\":\"role\",\"value\":\"Administrators\"}}'\n        '400':\n          description: Returned if the request is invalid.\n        '401':\n          description: Returned if the authentication credentials are incorrect.\n        '404':\n          description: Returned if the issue is not found or the user does not have\n            permission to view it.\n      deprecated: false\n      security:\n        - basicAuth: [ ]\n        - OAuth2:\n            - write:jira-work\n        - { }\n      x-atlassian-connect-scope: WRITE\n  \"/rest/api/3/search\":\n    post:\n      tags:\n        - jira\n      summary: Search for issues using JQL (POST)\n      description: |-\n        Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\n        There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.\n\n        This operation can be accessed anonymously.\n\n        **[Permissions](#permissions) required:** Issues are included in the response where the user has:\n         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n      operationId: searchForIssuesUsingJqlPost\n      parameters: [ ]\n      requestBody:\n        description: A JSON object containing the search request.\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/SearchRequestBean\"\n            example:\n              expand:\n                - names\n                - schema\n                - operations\n              jql: project = HSP\n              maxResults: 15\n              fieldsByKeys: false\n              fields:\n                - summary\n                - status\n                - assignee\n              startAt: 0\n        required: true\n      responses:\n        '200':\n          description: Returned if the request is successful.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/SearchResults\"\n        '400':\n          description: Returned if the JQL query is invalid.\n        '401':\n          description: Returned if the authentication credentials are incorrect or missing.\n      security:\n        - basicAuth: [ ]\n        - OAuth2:\n            - write:jira-work\n        - { }\n      x-atlassian-connect-scope: READ\n\n##########################################################################################\n## COMPONENTS\n##########################################################################################\n\ncomponents:\n  schemas:\n    IssueUpdateDetails:\n      type: object\n      properties:\n        fields:\n          type: object\n          additionalProperties: true\n          description: List of issue screen fields to update, specifying the sub-field\n            to update and its value for each field. This field provides a straightforward\n            option when setting a sub-field. When multiple sub-fields or other operations\n            are required, use `update`. Fields included in here cannot be included in\n            `update`.\n        update:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              \"$ref\": \"#/components/schemas/FieldUpdateOperation\"\n          description: A Map containing the field field name and a list of operations\n            to perform on the issue screen field. Note that fields included in here cannot\n            be included in `fields`.\n        properties:\n          type: array\n          description: Details of issue properties to be add or update.\n          items:\n            \"$ref\": \"#/components/schemas/EntityProperty\"\n      description: Details of an issue update request.\n    StatusDetails:\n      type: object\n      properties:\n        self:\n          type: string\n          description: The URL of the status.\n        description:\n          type: string\n          description: The description of the status.\n        iconUrl:\n          type: string\n          description: The URL of the icon used to represent the status.\n        name:\n          type: string\n          description: The name of the status.\n        id:\n          type: string\n          description: The ID of the status.\n      additionalProperties: true\n      description: A status.\n    FieldUpdateOperation:\n      type: object\n      properties:\n        add:\n          description: The value to add to the field.\n          type: string\n          example: triaged\n        set:\n          description: The value to set in the field.\n          type: string\n          example: A new summary\n        remove:\n          description: The value to removed from the field.\n          type: string\n          example: blocker\n        edit:\n          description: The value to edit in the field.\n          type: object\n          example:\n            remainingEstimate: 4d\n            originalEstimate: 1w 1d\n      additionalProperties: false\n      description: Details of an operation to perform on a field.\n    FieldMetadata:\n      required:\n        - key\n        - name\n        - operations\n        - required\n        - schema\n      type: object\n      properties:\n        required:\n          type: boolean\n          description: Whether the field is required.\n        name:\n          type: string\n          description: The name of the field.\n        key:\n          type: string\n          description: The key of the field.\n        autoCompleteUrl:\n          type: string\n          description: The URL that can be used to automatically complete the field.\n        hasDefaultValue:\n          type: boolean\n          description: Whether the field has a default value.\n        operations:\n          type: array\n          description: The list of operations that can be performed on the field.\n          items:\n            type: string\n        allowedValues:\n          type: array\n          description: The list of values allowed in the field.\n          items:\n            type: string\n        defaultValue:\n          type: string\n          description: The default value of the field.\n      additionalProperties: false\n      description: The metadata describing an issue field.\n      xml:\n        name: availableField\n    JsonTypeBean:\n      required:\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: The data type of the field.\n        items:\n          type: string\n          description: When the data type is an array, the name of the field items\n            within the array.\n        system:\n          type: string\n          description: If the field is a system field, the name of the field.\n        custom:\n          type: string\n          description: If the field is a custom field, the URI of the field.\n        customId:\n          type: integer\n          description: If the field is a custom field, the custom ID of the field.\n          format: int64\n      additionalProperties: false\n      description: The schema of a field.\n    EntityProperty:\n      type: object\n      properties:\n        key:\n          type: string\n          description: The key of the property. Required on create and update.\n        value:\n          type: string\n          description: The value of the property. Required on create and update.\n      additionalProperties: false\n      description: An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).\n    CreatedIssue:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The ID of the created issue or subtask.\n        key:\n          type: string\n          description: The key of the created issue or subtask.\n        self:\n          type: string\n          description: The URL of the created issue or subtask.\n      additionalProperties: false\n      description: Details about a created issue or subtask.\n    ErrorCollection:\n      type: object\n      properties:\n        errorMessages:\n          type: array\n          description: The list of error messages produced by this operation. For example,\n            \"input parameter 'key' must be provided\"\n          items:\n            type: string\n        errors:\n          type: object\n          additionalProperties:\n            type: string\n          description: 'The list of errors by parameter returned by the operation. For\n            example,\"projectKey\": \"Project keys must start with an uppercase letter, followed\n            by one or more uppercase alphanumeric characters.\"'\n        status:\n          type: integer\n          format: int32\n      additionalProperties: false\n      description: Error messages from an operation.\n    SearchResults:\n      type: object\n      properties:\n        expand:\n          type: string\n          description: Expand options that include additional search result details in\n            the response.\n        startAt:\n          type: integer\n          description: The index of the first item returned on the page.\n          format: int32\n        maxResults:\n          type: integer\n          description: The maximum number of results that could be on the page.\n          format: int32\n        total:\n          type: integer\n          description: The number of results on the page.\n          format: int32\n        issues:\n          type: array\n          description: The list of issues found by the search.\n          items:\n            \"$ref\": \"#/components/schemas/IssueBean\"\n        warningMessages:\n          type: array\n          description: Any warnings related to the JQL query.\n          items:\n            type: string\n        names:\n          type: object\n          additionalProperties:\n            type: string\n          description: The ID and name of each field in the search results.\n        schema:\n          type: object\n          additionalProperties:\n            \"$ref\": \"#/components/schemas/JsonTypeBean\"\n          description: The schema describing the field types in the search results.\n      additionalProperties: false\n      description: The result of a JQL search.\n    IssueBean:\n      type: object\n      properties:\n        expand:\n          type: string\n          description: Expand options that include additional issue details in the response.\n          xml:\n            attribute: true\n        id:\n          type: string\n          description: The ID of the issue.\n        self:\n          type: string\n          description: The URL of the issue details.\n          format: uri\n        key:\n          type: string\n          description: The key of the issue.\n        renderedFields:\n          type: object\n          additionalProperties: true\n          description: The rendered value of each field present on the issue.\n        properties:\n          type: object\n          additionalProperties: true\n          description: Details of the issue properties identified in the request.\n        names:\n          type: object\n          additionalProperties: true\n          description: The ID and name of each field present on the issue.\n        schema:\n          type: object\n          additionalProperties:\n            \"$ref\": \"#/components/schemas/JsonTypeBean\"\n          description: The schema describing each field present on the issue.\n        versionedRepresentations:\n          type: object\n          additionalProperties: true\n          description: The versions of each field on the issue.\n        fieldsToInclude:\n          \"$ref\": \"#/components/schemas/IncludedFields\"\n        fields:\n          type: object\n          additionalProperties: true\n      additionalProperties: false\n      description: Details about an issue.\n      xml:\n        name: issue\n    IncludedFields:\n      type: object\n      properties:\n        excluded:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n        included:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n        actuallyIncluded:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n      additionalProperties: false\n    SearchRequestBean:\n      type: object\n      properties:\n        jql:\n          type: string\n          description: A [JQL](https://confluence.atlassian.com/x/egORLQ) expression.\n        startAt:\n          type: integer\n          description: The index of the first item to return in the page of results\n            (page offset). The base index is `0`.\n          format: int32\n        maxResults:\n          type: integer\n          description: The maximum number of items to return per page.\n          format: int32\n          default: 50\n        fields:\n          type: array\n          description: |-\n            A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:\n\n             *  `*all` Returns all fields.\n             *  `*navigable` Returns navigable fields.\n             *  Any issue field, prefixed with a minus to exclude.\n\n            The default is `*navigable`.\n\n            Examples:\n\n             *  `summary,comment` Returns the summary and comments fields only.\n             *  `-description` Returns all navigable (default) fields except description.\n             *  `*all,-comment` Returns all fields except comments.\n\n            Multiple `fields` parameters can be included in a request.\n\n            Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.\n          items:\n            type: string\n        validateQuery:\n          type: string\n          description: |-\n            Determines how to validate the JQL query and treat the validation results. Supported values:\n\n             *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).\n             *  `warn` Returns all errors as warnings.\n             *  `none` No validation is performed.\n             *  `true` *Deprecated* A legacy synonym for `strict`.\n             *  `false` *Deprecated* A legacy synonym for `warn`.\n\n            The default is `strict`.\n\n            Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.\n          enum:\n            - strict\n            - warn\n            - none\n            - 'true'\n            - 'false'\n        expand:\n          type: array\n          description: |-\n            Use [expand](em\u003e#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:\n\n             *  `renderedFields` Returns field values rendered in HTML format.\n             *  `names` Returns the display name of each field.\n             *  `schema` Returns the schema describing a field type.\n             *  `transitions` Returns all possible transitions for the issue.\n             *  `operations` Returns all possible operations for the issue.\n             *  `editmeta` Returns information about how each field can be edited.\n             *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n             *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.\n          items:\n            type: string\n        properties:\n          type: array\n          description: A list of up to 5 issue properties to include in the results.\n            This parameter accepts a comma-separated list.\n          items:\n            type: string\n        fieldsByKeys:\n          type: boolean\n          description: Reference fields by their key (rather than ID). The default\n            is `false`.\n      additionalProperties: false\n    FieldReferenceData:\n      type: object\n      properties:\n        value:\n          type: string\n          description: The field identifier.\n        displayName:\n          type: string\n          description: |-\n            The display name contains the following:\n\n             *  for system fields, the field name. For example, `Summary`.\n             *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.\n             *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.\n        orderable:\n          type: string\n          description: Whether the field can be used in a query's `ORDER BY` clause.\n          enum:\n            - 'true'\n            - 'false'\n        searchable:\n          type: string\n          description: Whether the content of this field can be searched.\n          enum:\n            - 'true'\n            - 'false'\n        auto:\n          type: string\n          description: Whether the field provide auto-complete suggestions.\n          enum:\n            - 'true'\n            - 'false'\n        cfid:\n          type: string\n          description: If the item is a custom field, the ID of the custom field.\n        operators:\n          type: array\n          description: The valid search operators for the field.\n          items:\n            type: string\n        types:\n          type: array\n          description: The data types of items in the field.\n          items:\n            type: string\n      additionalProperties: false\n      description: Details of a field that can be used in advanced searches.\n    Comment:\n      type: object\n      properties:\n        self:\n          type: string\n          description: The URL of the comment.\n        id:\n          type: string\n          description: The ID of the comment.\n        body:\n          type: object\n          description: The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/).\n        renderedBody:\n          type: string\n          description: The rendered version of the comment.\n        created:\n          type: string\n          description: The date and time at which the comment was created.\n        updated:\n          type: string\n          description: The date and time at which the comment was updated last.\n        jsdPublic:\n          type: boolean\n          description: Whether the comment is visible in Jira Service Desk. Defaults\n            to true when comments are created in the Jira Cloud Platform. This includes\n            when the site doesn't use Jira Service Desk or the project isn't a Jira\n            Service Desk project and, therefore, there is no Jira Service Desk for\n            the issue to be visible on. To create a comment with its visibility in\n            Jira Service Desk set to false, use the Jira Service Desk REST API [Create\n            request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post)\n            operation.\n        properties:\n          type: array\n          description: A list of comment properties. Optional on create and update.\n          items:\n            \"$ref\": \"#/components/schemas/EntityProperty\"\n      description: A comment.\n    Project:\n      type: object\n      properties:\n        key:\n          type: string\n          description: The key of the project.\n    IssueTypeDetails:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ID of the issue type.\n\n    AtlassianDocument:\n      type: object\n      properties:\n        type:\n          type: string\n        version:\n          type: number\n        content:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/AtlassianContent\"\n    AtlassianContent:\n      type: object\n      properties:\n        text:\n          type: string\n        type:\n          type: string\n        content:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/AtlassianContent\"\n        marks:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/AtlassianMark\"\n    AtlassianMark:\n      type: object\n      properties:\n        type:\n          type: string\n        attrs:\n          \"$ref\": \"#/components/schemas/AtlassianMarkAttributes\"\n    AtlassianMarkAttributes:\n      type: object\n      properties:\n        href:\n          type: string\n  securitySchemes:\n    basicAuth:\n      type: http\n      description: You can access this resource via basic auth.\n      scheme: basic\n    OAuth2:\n      type: oauth2\n      description: OAuth2 scopes for Jira\n      flows:\n        authorizationCode:\n          authorizationUrl: https://auth.atlassian.com/authorize\n          tokenUrl: https://auth.atlassian.com/oauth/token\n          scopes:\n            read:jira-user: View user information in Jira that you have access to,\n              including usernames, email addresses, and avatars.\n            read:jira-work: Read project and issue data. Search for issues and objects\n              associated with issues (such as attachments and worklogs).\n            write:jira-work: Create and edit issues in Jira, post comments, create\n              worklogs, and delete issues.\n            manage:jira-project: Create and edit project settings and create new project-level\n              objects, for example, versions, components.\n            manage:jira-configuration: Configure Jira settings that require the Jira\n              administrators permission, for example, create projects and custom fields,\n              view workflows, manage issue link types.\n            manage:jira-webhook: Manage Jira webhooks. Enables an OAuth app to register\n              and unregister dynamic webhooks in Jira. It also provides for fetching\n              of registered webhooks.\n",
			"canonicalURL": "/github.com/all-of-us/workbench@fbab9bb47136be81e4899e0fea4262db8f02f002/-/blob/api/src/main/resources/jira.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/all-of-us/workbench/blob/fbab9bb47136be81e4899e0fea4262db8f02f002/api/src/main/resources/jira.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/rest/api/3/search\": post: security: security \"OAuth2\" (index 1): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}