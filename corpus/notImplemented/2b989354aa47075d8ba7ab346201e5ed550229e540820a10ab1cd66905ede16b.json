{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/5733d9e2be6485d52ffa08870cabdee0/sandbox"
		},
		"file": {
			"name": "rhose-api.yaml",
			"size": 0,
			"path": "openapi/rhose-api.yaml",
			"byteSize": 26364,
			"content": "---\nopenapi: 3.0.3\ninfo:\n  title: Red Hat Openshift SmartEvents Fleet Manager\n  description: The API exposed by the fleet manager of the SmartEvents service.\n  contact:\n    name: Development Team\n    email: openbridge-dev@redhat.com\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.0.1\ntags:\n- name: Bridges\n  description: \"The API that allow the user to retrieve, create or delete Bridge instances.\"\n- name: Error Catalog\n  description: List and get the error definitions from the error catalog.\n- name: Processors\n  description: \"The API that allow the user to retrieve, create or delete Processors\\\n    \\ of a Bridge instance.\"\n- name: Schema Catalog\n  description: The API that provide the catalog of the available action/source processors\n    definition and their JSON schema.\n- name: Shard\n  description: The API that allow a shard to retrieve and update resources.\npaths:\n  /api/v1/bridges:\n    get:\n      tags:\n      - Bridges\n      summary: Get the list of Bridge instances\n      description: Get the list of Bridge instances for the authenticated user.\n      operationId: BridgesAPI_getBridges\n      parameters:\n      - name: name\n        in: query\n        schema:\n          type: string\n      - name: page\n        in: query\n        schema:\n          format: int32\n          default: 0\n          minimum: 0\n          type: integer\n      - name: size\n        in: query\n        schema:\n          format: int32\n          default: 100\n          maximum: 100\n          minimum: 1\n          type: integer\n      - name: status\n        in: query\n        schema:\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/ManagedResourceStatus'\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BridgeListResponse'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"404\":\n          description: Not found.\n          content:\n            application/json: {}\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n    post:\n      tags:\n      - Bridges\n      summary: Create a Bridge instance\n      description: Create a Bridge instance for the authenticated user.\n      operationId: BridgesAPI_createBridge\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BridgeRequest'\n      responses:\n        \"202\":\n          description: Accepted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BridgeResponse'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n  /api/v1/bridges/{bridgeId}:\n    get:\n      tags:\n      - Bridges\n      summary: Get a Bridge instance\n      description: Get a Bridge instance of the authenticated user by ID.\n      operationId: BridgesAPI_getBridge\n      parameters:\n      - name: bridgeId\n        in: path\n        required: true\n        schema:\n          minLength: 1\n          type: string\n          nullable: false\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BridgeResponse'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"404\":\n          description: Not found.\n          content:\n            application/json: {}\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n    delete:\n      tags:\n      - Bridges\n      summary: Delete a Bridge instance\n      description: Delete a Bridge instance of the authenticated user by ID.\n      operationId: BridgesAPI_deleteBridge\n      parameters:\n      - name: bridgeId\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"202\":\n          description: Accepted.\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"404\":\n          description: Not found.\n          content:\n            application/json: {}\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n  /api/v1/bridges/{bridgeId}/processors:\n    get:\n      tags:\n      - Processors\n      summary: Get the list of Processors of a Bridge instance\n      description: Get the list of Processors of a Bridge instance for the authenticated\n        user.\n      operationId: ProcessorsAPI_listProcessors\n      parameters:\n      - name: bridgeId\n        in: path\n        required: true\n        schema:\n          minLength: 1\n          type: string\n          nullable: false\n      - name: name\n        in: query\n        schema:\n          type: string\n      - name: page\n        in: query\n        schema:\n          format: int32\n          default: 0\n          minimum: 0\n          type: integer\n      - name: size\n        in: query\n        schema:\n          format: int32\n          default: 100\n          maximum: 100\n          minimum: 1\n          type: integer\n      - name: status\n        in: query\n        schema:\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/ManagedResourceStatus'\n      - name: type\n        in: query\n        schema:\n          $ref: '#/components/schemas/ProcessorType'\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessorListResponse'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"404\":\n          description: Not found.\n          content:\n            application/json: {}\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n    post:\n      tags:\n      - Processors\n      summary: Create a Processor of a Bridge instance\n      description: Create a Processor of a Bridge instance for the authenticated user.\n      operationId: ProcessorsAPI_addProcessorToBridge\n      parameters:\n      - name: bridgeId\n        in: path\n        required: true\n        schema:\n          minLength: 1\n          type: string\n          nullable: false\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProcessorRequest'\n      responses:\n        \"202\":\n          description: Accepted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessorResponse'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"404\":\n          description: Not found.\n          content:\n            application/json: {}\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n  /api/v1/bridges/{bridgeId}/processors/{processorId}:\n    get:\n      tags:\n      - Processors\n      summary: Get a Processor of a Bridge instance\n      description: Get a Processor of a Bridge instance for the authenticated user.\n      operationId: ProcessorsAPI_getProcessor\n      parameters:\n      - name: bridgeId\n        in: path\n        required: true\n        schema:\n          minLength: 1\n          type: string\n          nullable: false\n      - name: processorId\n        in: path\n        required: true\n        schema:\n          minLength: 1\n          type: string\n          nullable: false\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessorResponse'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"404\":\n          description: Not found.\n          content:\n            application/json: {}\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n    put:\n      tags:\n      - Processors\n      summary: Update a Processor instance Filter definition or Transformation template.\n      description: Update a Processor instance Filter definition or Transformation\n        template for the authenticated user.\n      operationId: ProcessorsAPI_updateProcessor\n      parameters:\n      - name: bridgeId\n        in: path\n        required: true\n        schema:\n          minLength: 1\n          type: string\n          nullable: false\n      - name: processorId\n        in: path\n        required: true\n        schema:\n          minLength: 1\n          type: string\n          nullable: false\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProcessorRequest'\n      responses:\n        \"202\":\n          description: Accepted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessorResponse'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"404\":\n          description: Not found.\n          content:\n            application/json: {}\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n    delete:\n      tags:\n      - Processors\n      summary: Delete a Processor of a Bridge instance\n      description: Delete a Processor of a Bridge instance for the authenticated user.\n      operationId: ProcessorsAPI_deleteProcessor\n      parameters:\n      - name: bridgeId\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: processorId\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"202\":\n          description: Accepted.\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"404\":\n          description: Not found.\n          content:\n            application/json: {}\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n  /api/v1/errors:\n    get:\n      tags:\n      - Error Catalog\n      summary: Get the list of errors.\n      description: Get the list of errors from the error catalog.\n      operationId: ErrorsAPI_getErrors\n      parameters:\n      - name: page\n        in: query\n        schema:\n          format: int32\n          default: 0\n          minimum: 0\n          type: integer\n      - name: size\n        in: query\n        schema:\n          format: int32\n          default: 100\n          maximum: 100\n          minimum: 1\n          type: integer\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorListResponse'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n  /api/v1/errors/{id}:\n    get:\n      tags:\n      - Error Catalog\n      summary: Get an error from the error catalog.\n      description: Get an error from the error catalog.\n      operationId: ErrorsAPI_getError\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          format: int32\n          type: integer\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BridgeError'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n  /api/v1/schemas:\n    get:\n      tags:\n      - Schema Catalog\n      summary: Get processor catalog\n      description: Get the processor catalog with all the available sources and actions.\n      operationId: SchemaAPI_getCatalog\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProcessorCatalogResponse'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n  /api/v1/schemas/actions/{id}:\n    get:\n      tags:\n      - Schema Catalog\n      summary: Get action processor schema\n      description: Get the action processor JSON schema.\n      operationId: SchemaAPI_getActionProcessorSchema\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                type: object\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n  /api/v1/schemas/sources/{id}:\n    get:\n      tags:\n      - Schema Catalog\n      summary: Get source processor schema\n      description: Get the source processor JSON schema.\n      operationId: SchemaAPI_getSourceProcessorSchema\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                type: object\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n  /api/v1/shard/bridges:\n    get:\n      tags:\n      - Shard\n      summary: Get Bridge instances to be processed by a shard.\n      description: Get Bridge instances to be processed by a shard.\n      operationId: ShardBridgesSyncAPI_getBridges\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BridgeDTO'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n    put:\n      tags:\n      - Shard\n      summary: Update a Bridge instance.\n      description: Update a Bridge instance.\n      operationId: ShardBridgesSyncAPI_updateBridge\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BridgeDTO'\n      responses:\n        \"200\":\n          description: Success.\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n  /api/v1/shard/bridges/processors:\n    get:\n      tags:\n      - Shard\n      summary: Get Processors to be processed by a shard.\n      description: Get Processors to be processed by a shard.\n      operationId: ShardBridgesSyncAPI_getProcessors\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProcessorDTO'\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\n    put:\n      tags:\n      - Shard\n      summary: Update a Processor.\n      description: Update a Processor.\n      operationId: ShardBridgesSyncAPI_updateProcessorStatus\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProcessorDTO'\n      responses:\n        \"200\":\n          description: Success.\n        \"400\":\n          description: Bad request.\n          content:\n            application/json: {}\n        \"401\":\n          description: Unauthorized.\n        \"403\":\n          description: Forbidden.\n        \"500\":\n          description: Internal error.\n          content:\n            application/json: {}\n      security:\n      - bearer: []\ncomponents:\n  schemas:\n    Action:\n      required:\n      - type\n      - parameters\n      type: object\n      properties:\n        type:\n          type: string\n          nullable: false\n        parameters:\n          type: object\n    BaseFilter:\n      required:\n      - key\n      type: object\n      properties:\n        type:\n          type: string\n        key:\n          minLength: 1\n          type: string\n          nullable: false\n    BridgeDTO:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        endpoint:\n          type: string\n        customerId:\n          type: string\n        owner:\n          type: string\n        status:\n          $ref: '#/components/schemas/ManagedResourceStatus'\n        kafkaConnection:\n          $ref: '#/components/schemas/KafkaConnectionDTO'\n    BridgeError:\n      type: object\n      properties:\n        id:\n          format: int32\n          type: integer\n        code:\n          type: string\n        reason:\n          type: string\n        type:\n          $ref: '#/components/schemas/BridgeErrorType'\n    BridgeErrorType:\n      enum:\n      - USER\n      - PLATFORM\n      type: string\n    BridgeListResponse:\n      type: object\n      properties:\n        kind:\n          type: string\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/BridgeResponse'\n        page:\n          format: int64\n          type: integer\n        size:\n          format: int64\n          type: integer\n        total:\n          format: int64\n          type: integer\n    BridgeRequest:\n      required:\n      - name\n      type: object\n      properties:\n        name:\n          minLength: 1\n          type: string\n          nullable: false\n        error_handler:\n          $ref: '#/components/schemas/Action'\n    BridgeResponse:\n      type: object\n      properties:\n        kind:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        href:\n          type: string\n        submitted_at:\n          format: date-time\n          type: string\n        published_at:\n          format: date-time\n          type: string\n        status:\n          $ref: '#/components/schemas/ManagedResourceStatus'\n        owner:\n          type: string\n        endpoint:\n          type: string\n        error_handler:\n          $ref: '#/components/schemas/Action'\n    ErrorListResponse:\n      type: object\n      properties:\n        kind:\n          type: string\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ErrorResponse'\n        page:\n          format: int64\n          type: integer\n        size:\n          format: int64\n          type: integer\n        total:\n          format: int64\n          type: integer\n    ErrorResponse:\n      type: object\n      properties:\n        kind:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        href:\n          type: string\n        code:\n          type: string\n        reason:\n          type: string\n    KafkaConnectionDTO:\n      type: object\n      properties:\n        bootstrapServers:\n          type: string\n        clientId:\n          type: string\n        clientSecret:\n          type: string\n        securityProtocol:\n          type: string\n        topic:\n          type: string\n        errorTopic:\n          type: string\n    ManagedResourceStatus:\n      enum:\n      - accepted\n      - preparing\n      - provisioning\n      - ready\n      - deprovision\n      - deleting\n      - deleted\n      - failed\n      type: string\n    ProcessorCatalogResponse:\n      type: object\n      properties:\n        kind:\n          type: string\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProcessorSchemaEntryResponse'\n    ProcessorDTO:\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/ProcessorType'\n        id:\n          type: string\n        name:\n          type: string\n        definition:\n          $ref: '#/components/schemas/ProcessorDefinition'\n        bridgeId:\n          type: string\n        customerId:\n          type: string\n        owner:\n          type: string\n        status:\n          $ref: '#/components/schemas/ManagedResourceStatus'\n        kafkaConnection:\n          $ref: '#/components/schemas/KafkaConnectionDTO'\n    ProcessorDefinition:\n      type: object\n      properties:\n        filters:\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/BaseFilter'\n        transformationTemplate:\n          type: string\n        requestedAction:\n          $ref: '#/components/schemas/Action'\n        requestedSource:\n          $ref: '#/components/schemas/Source'\n        resolvedAction:\n          $ref: '#/components/schemas/Action'\n    ProcessorListResponse:\n      type: object\n      properties:\n        kind:\n          type: string\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProcessorResponse'\n        page:\n          format: int64\n          type: integer\n        size:\n          format: int64\n          type: integer\n        total:\n          format: int64\n          type: integer\n    ProcessorRequest:\n      required:\n      - name\n      type: object\n      properties:\n        name:\n          minLength: 1\n          type: string\n          nullable: false\n        filters:\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/BaseFilter'\n        transformationTemplate:\n          type: string\n        action:\n          $ref: '#/components/schemas/Action'\n        source:\n          $ref: '#/components/schemas/Source'\n    ProcessorResponse:\n      type: object\n      properties:\n        kind:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        href:\n          type: string\n        submitted_at:\n          format: date-time\n          type: string\n        published_at:\n          format: date-time\n          type: string\n        status:\n          $ref: '#/components/schemas/ManagedResourceStatus'\n        owner:\n          type: string\n        type:\n          $ref: '#/components/schemas/ProcessorType'\n        filters:\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/BaseFilter'\n        transformationTemplate:\n          type: string\n        action:\n          $ref: '#/components/schemas/Action'\n        source:\n          $ref: '#/components/schemas/Source'\n    ProcessorSchemaEntryResponse:\n      type: object\n      properties:\n        kind:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        type:\n          type: string\n        href:\n          type: string\n    ProcessorType:\n      enum:\n      - source\n      - sink\n      - error_handler\n      type: string\n    Source:\n      required:\n      - type\n      - parameters\n      type: object\n      properties:\n        type:\n          type: string\n          nullable: false\n        parameters:\n          type: object\n  securitySchemes:\n    bearer:\n      type: http\n      scheme: Bearer\n",
			"canonicalURL": "/github.com/5733d9e2be6485d52ffa08870cabdee0/sandbox@4feac8835d940acc3587e1ff36052b9106bf3747/-/blob/openapi/rhose-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/5733d9e2be6485d52ffa08870cabdee0/sandbox/blob/4feac8835d940acc3587e1ff36052b9106bf3747/openapi/rhose-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v1/bridges/{bridgeId}/processors\": get: responses: 400: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema"
	]
}