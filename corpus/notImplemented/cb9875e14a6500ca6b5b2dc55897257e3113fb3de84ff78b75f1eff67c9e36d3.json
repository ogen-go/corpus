{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/edgexfoundry/sample-service"
		},
		"file": {
			"name": "sample-service-demo.yaml",
			"size": 0,
			"path": "api/openapi/v1/sample-service-demo.yaml",
			"byteSize": 10741,
			"content": "openapi: 3.0.0\ninfo:\n  title: sample-service-demo\n  description: Do Not Use. This is the sample api for the sample-service. This contains information only for the testing of the integration of Swagger and associated libraries. Loosely based on core-command api.\n  version: 1.2.1\nservers:\n- url: http://localhost:48082/api\npaths:\n  /v1/config:\n    get:\n      description: Fetch the current state of the service's configuration.\n      responses:\n        200:\n          description: The service's configuration as JSON document\n        400:\n          description: Request is invalid or unparseable or if the\n            underlying configuration cannot be serialized to JSON properly.\n  /v1/device:\n    get:\n      description: Retrieve a list of all devices and their available commands.\n      responses:\n        200:\n          description: List of CommandResponse containing the devices and their commands.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/commandresponse'\n        500:\n          description: For unanticipated or unknown issues encountered.\n  /v1/device/name/{name}:\n    get:\n      description: Retrieve a device by name and its available commands.\n      parameters:\n      - name: name\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: CommandResponse containing the device and its commands.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/commandresponse'\n        404:\n          description: If no device exists by the name provided.\n        500:\n          description: For unanticipated or unknown issues encountered.\n  /v1/device/name/{name}/command/{commandname}:\n    get:\n      description: Issue the GET command referenced by the command name to the device/sensor,\n        also referenced by name. It is associated to via the device service.\n      parameters:\n      - name: name\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: commandname\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: String as returned by the device/sensor via the device service.\n        400:\n          description: If the request is malformed or unparsable\n        404:\n          description: If device with given name does not exist or device doesn't\n            have command with the given command name.\n        423:\n          description: If the device is locked in an admin state.\n        500:\n          description: For unanticipated or unknown issues encountered.\n    put:\n      description: Issue the PUT command referenced by the command name to the device/sensor\n        also referenced by name it is associated to via the device service.\n      parameters:\n      - name: name\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: commandname\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        $ref: '#/components/requestBodies/setting'\n      responses:\n        200:\n          description: String as returned by the device/sensor via the device service.\n        400:\n          description: If the request is malformed or unparsable\n        404:\n          description: If device with given name does not exist or device doesn't\n            have a command with the given command name.\n        423:\n          description: If the device is locked in an admin state\n        500:\n          description: For unanticipated or unknown issues encountered\n  /v1/device/{id}:\n    get:\n      description: Retrieve a device by database generated ID and its available commands.\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: CommandResponse containing the device and its commands.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/commandresponse'\n        404:\n          description: If no device exists by the ID provided.\n        500:\n          description: For unanticipated or unknown issues encountered.\n  /v1/device/{id}/command/{commandid}:\n    get:\n      description: Issue the GET command referenced by the command ID to the device/sensor,\n        also referenced by database generated ID that it is associated to via the device\n        service.\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: commandid\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        200:\n          description: String as returned by the device/sensor via the device service.\n        400:\n          description: If the request is malformed or unparsable\n        404:\n          description: If no device exists by the ID provided\n        423:\n          description: If the device is locked in an admin state.\n        500:\n          description: For unanticipated or unknown issues encountered.\n    put:\n      description: Issue the PUT command referenced by the command ID to the device/sensor,\n        also referenced by database generated ID that it is associated to via the device\n        service.\n      parameters:\n      - name: id\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: commandid\n        in: path\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        $ref: '#/components/requestBodies/setting'\n      responses:\n        200:\n          description: String as returned by the device/sensor via the device service.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/setting'\n        400:\n          description: If the request is malformed or unparsable\n        404:\n          description: If no device exists by the ID provided\n        423:\n          description: If the device is locked in an admin state\n        500:\n          description: For unanticipated or unknown issues encountered.\n  /v1/metrics:\n    get:\n      description: Fetch the current state of the service's metrics.\n      responses:\n        200:\n          description: The service's metrics as JSON document\n  /v1/ping:\n    get:\n      description: Test service providing an indication that the service is available.\n      responses:\n        200:\n          description: String literal confirming that the service is up.\n        500:\n          description: For unanticipated or unknown issues encountered.\n  /version:\n    get:\n      description: Get the API version\n      responses:\n        200:\n          description: The service's API version as JSON document\ncomponents:\n  schemas:\n    addressable:\n      title: addressable\n      type: object\n      properties:\n        address:\n          title: address\n          type: string\n        created:\n          title: created\n          type: integer\n        id:\n          title: id\n          type: string\n        modified:\n          title: modified\n          type: integer\n        name:\n          title: name\n          type: string\n        origin:\n          title: origin\n          type: integer\n        password:\n          title: password\n          type: string\n        path:\n          title: path\n          type: string\n        port:\n          title: port\n          type: integer\n        protocol:\n          title: protocol\n          type: string\n        publisher:\n          title: publisher\n          type: string\n        topic:\n          title: topic\n          type: string\n        user:\n          title: user\n          type: string\n    commandresponse:\n      title: commandresponse\n      type: object\n      properties:\n        host:\n          title: host\n          type: string\n        device:\n          $ref: '#/components/schemas/device'\n    device:\n      title: device\n      type: object\n      properties:\n        addressable:\n          $ref: '#/components/schemas/device_addressable'\n        adminState:\n          title: adminState\n          type: string\n        created:\n          title: created\n          type: integer\n        description:\n          title: description\n          type: string\n        id:\n          title: id\n          type: string\n        labels:\n          title: labels\n          uniqueItems: false\n          type: array\n          items:\n            title: labels\n            type: string\n        lastConnected:\n          title: lastConnected\n          type: integer\n        lastReported:\n          title: lastReported\n          type: integer\n        modified:\n          title: modified\n          type: integer\n        name:\n          title: name\n          type: string\n        operatingState:\n          title: operatingState\n          type: string\n        origin:\n          title: origin\n          type: integer\n      description: device or sensor supplying data and taking actuation commands\n    setting:\n      title: setting\n      type: object\n      additionalProperties:\n        type: string\n    device_addressable:\n      type: object\n      properties:\n        address:\n          title: address\n          type: string\n        created:\n          title: created\n          type: integer\n        id:\n          title: id\n          type: string\n        modified:\n          title: modified\n          type: integer\n        name:\n          title: name\n          type: string\n        origin:\n          title: origin\n          type: integer\n        password:\n          title: password\n          type: string\n        path:\n          title: path\n          type: string\n        port:\n          title: port\n          type: integer\n        protocol:\n          title: protocol\n          type: string\n        publisher:\n          title: publisher\n          type: string\n        topic:\n          title: topic\n          type: string\n        user:\n          title: user\n          type: string\n  requestBodies:\n    setting:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/setting'\n      required: true\n",
			"canonicalURL": "/github.com/edgexfoundry/sample-service@859624805640ebd7c7b619b48d1340b573ad9c55/-/blob/api/openapi/v1/sample-service-demo.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/edgexfoundry/sample-service/blob/859624805640ebd7c7b619b48d1340b573ad9c55/api/openapi/v1/sample-service-demo.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/device/{id}/command/{commandid}\": put: responses: 200: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}