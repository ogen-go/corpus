{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/saasify-sh/saasify"
		},
		"file": {
			"name": "pdfbroker.json",
			"size": 0,
			"path": "packages/saasify-openapi-utils/fixtures/success/pdfbroker.json",
			"byteSize": 33255,
			"content": "{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"PdfBroker.io API\",\n    \"description\": \"PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.\",\n    \"termsOfService\": \"https://www.pdfbroker.io/terms\",\n    \"version\": \"v1\"\n  },\n  \"paths\": {\n    \"/api/pdf\": {\n      \"get\": {\n        \"tags\": [\"Pdf\"],\n        \"summary\": \"Basic method to verify api is up and running\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/pdf/xslfo\": {\n      \"post\": {\n        \"tags\": [\"Pdf\"],\n        \"summary\": \"Create pdf-file from complete XSL-FO document.\",\n        \"requestBody\": {\n          \"description\": \"XSL-FO Request, the basic XSL-FO request. Post your XSL-FO document and digital resources, either as 'multipart/form-data' or 'application/json'\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/FoRequestDto\"\n              },\n              \"example\": \"{\\r\\n  \\\"foDocumentBase64String\\\": \\\"\u003cEncode your XSL-FO document as Base64 encoded string\u003e\\\",\\r\\n  \\\"resources\\\": {\\r\\n    \\\"\u003cUse file name as key, i.e 'logo.png', which is set as src on fo:external-graphic elements\u003e\\\": \\\"\u003cConvert your images to Base64 encoded string\u003e\\\"\\r\\n  }\\r\\n}\"\n            },\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"fodocument\": {\n                    \"type\": \"string\",\n                    \"description\": \"An entry named fodocument is required in the multipart/form-data request\",\n                    \"format\": \"binary\"\n                  },\n                  \"resources\": {\n                    \"type\": \"string\",\n                    \"description\": \"After fodocument is added, add all digital resources one by one to your multipart/form-data request, using the filename as name in the form.\",\n                    \"format\": \"binary\"\n                  }\n                }\n              },\n              \"encoding\": {\n                \"fodocument\": {\n                  \"contentType\": \"application/octet-stream\"\n                },\n                \"resources\": {\n                  \"contentType\": \"application/octet-stream\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/PdfResponseDto\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/PdfResponseDto\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"If any error occurs parsing input\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"415\": {\n            \"description\": \"If content-type of request is not set to multipart/form-data or application/json\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/pdf/xslfowithtransform\": {\n      \"post\": {\n        \"tags\": [\"Pdf\"],\n        \"summary\": \"Create pdf-file from transforming xml document with Xsl-Fo transform document.\",\n        \"requestBody\": {\n          \"description\": \"XSL-FO Transform Request. The XSL-FO is transformed on the supplied xml data document. Post your XSL-FO transform document and xml data document aloing with your digital resources, either as 'multipart/form-data' or 'application/json'\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/FoTransformRequestDto\"\n              },\n              \"example\": \"{\\r\\n  \\\"xmlDataDocumentBase64String\\\": \\\"\u003cThis is the document which contains your data that the XSL-FO transform will be applied on. Send as Base64 encoded string\u003e\\\",\\r\\n  \\\"foDocumentBase64String\\\": \\\"\u003cEncode your XSL-FO transform document as Base64 encoded string\u003e\\\",\\r\\n  \\\"resources\\\": {\\r\\n    \\\"\u003cUse file name as key, i.e 'logo.png', which is set as src on fo:external-graphic elements\u003e\\\": \\\"\u003cConvert your images to Base64 encoded string\u003e\\\"\\r\\n  }\\r\\n}\"\n            },\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"fodocument\": {\n                    \"type\": \"string\",\n                    \"description\": \"An entry named fodocument with your XSL-FO transform is required in the multipart/form-data request\",\n                    \"format\": \"binary\"\n                  },\n                  \"xmldatadocument\": {\n                    \"type\": \"string\",\n                    \"description\": \"An entry named xmldatadocument, on which the XSL-FO transform is applied, is required in the multipart/form-data request\",\n                    \"format\": \"binary\"\n                  },\n                  \"resources\": {\n                    \"type\": \"string\",\n                    \"description\": \"After fodocument and xmldatadocument is added, add all digital resources one by one to your multipart/form-data request, using the filename as name in the form.\",\n                    \"format\": \"binary\"\n                  }\n                }\n              },\n              \"encoding\": {\n                \"fodocument\": {\n                  \"contentType\": \"application/octet-stream\"\n                },\n                \"xmldatadocument\": {\n                  \"contentType\": \"application/octet-stream\"\n                },\n                \"resources\": {\n                  \"contentType\": \"application/octet-stream\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/PdfResponseDto\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/PdfResponseDto\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"If any error occurs parsing input\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"415\": {\n            \"description\": \"If content-type of request is not set to multipart/form-data or application/json\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/pdf/pdftoimage\": {\n      \"post\": {\n        \"tags\": [\"Pdf\"],\n        \"summary\": \"Generate an image of to provided pdf file\",\n        \"requestBody\": {\n          \"description\": \"PdfToImage Request. Create an image of a page in an existing pdf document.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/PdfToImageRequestDto\"\n              },\n              \"example\": \"{\\r\\n  \\\"pdfFileBase64String\\\": \\\"\u003cEncode your existing PDF document as Base64 encoded string\u003e\\\",\\r\\n  \\\"options\\\": {\\r\\n    \\\"pageNumber\\\": 1,\\r\\n    \\\"imageFormat\\\": \\\"image/jpeg\\\",\\r\\n    \\\"horizontalResolution\\\": 96.0,\\r\\n    \\\"verticalResolution\\\": 96.0,\\r\\n    \\\"width\\\": 0,\\r\\n    \\\"height\\\": 0,\\r\\n    \\\"transparent\\\": false,\\r\\n    \\\"jpegQuality\\\": 90,\\r\\n    \\\"pngCompressionLevel\\\": 6\\r\\n  }\\r\\n}\"\n            },\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"pdfdocument\": {\n                    \"type\": \"string\",\n                    \"description\": \"An entry named pdfdocument is required in the multipart/form-data request\",\n                    \"format\": \"binary\"\n                  },\n                  \"options\": {\n                    \"type\": \"string\",\n                    \"description\": \"After pdfdocument is added, add an entry named options with your PdfToImageOptions object serialized as JSON.\",\n                    \"format\": \"string\"\n                  }\n                }\n              },\n              \"encoding\": {\n                \"pdfdocument\": {\n                  \"contentType\": \"application/octet-stream\"\n                },\n                \"options\": {\n                  \"contentType\": \"application/json\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"image/jpeg\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ImageResponseDto\"\n                }\n              },\n              \"image/gif\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ImageResponseDto\"\n                }\n              },\n              \"image/png\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ImageResponseDto\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ImageResponseDto\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"Bad Request\",\n            \"content\": {\n              \"image/jpeg\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"image/gif\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"image/png\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"415\": {\n            \"description\": \"Client Error\",\n            \"content\": {\n              \"image/jpeg\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"image/gif\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"image/png\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/pdf/pdfconcat\": {\n      \"post\": {\n        \"tags\": [\"Pdf\"],\n        \"summary\": \"Concatenate multiple pdf files into single pdf file..\",\n        \"requestBody\": {\n          \"description\": \"PdfConcat Request. Add two or more pdf files and concatenate pages into single pdf document.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/PdfConcatenationRequestDto\"\n              },\n              \"example\": \"{\\r\\n  \\\"pdfDocumentsAsBase64String\\\": [\\r\\n    \\\"\u003cEncode your pdf documents as Base64 encoded string\u003e\\\",\\r\\n    \\\"\u003cEncode your pdf documents as Base64 encoded string\u003e\\\"\\r\\n  ]\\r\\n}\"\n            },\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"pdfdocument1\": {\n                    \"type\": \"string\",\n                    \"description\": \"Add pdf files to be concatenated into single file\",\n                    \"format\": \"binary\"\n                  },\n                  \"pdfdocument2\": {\n                    \"type\": \"string\",\n                    \"description\": \"You can add more than two files in the same request\",\n                    \"format\": \"binary\"\n                  }\n                }\n              },\n              \"encoding\": {\n                \"pdfdocument1\": {\n                  \"contentType\": \"application/octet-stream\"\n                },\n                \"pdfdocument2\": {\n                  \"contentType\": \"application/octet-stream\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/PdfResponseDto\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/PdfResponseDto\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"If any error occurs parsing input\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"415\": {\n            \"description\": \"If content-type of request is not set to multipart/form-data or application/json\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/pdf/pdfwritestring\": {\n      \"post\": {\n        \"tags\": [\"Pdf\"],\n        \"summary\": \"Write text on a page in a pdf document.\",\n        \"requestBody\": {\n          \"description\": \"PdfWriteString Request. Write string on page in pdf document\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/PdfWriteStringRequestDto\"\n              },\n              \"example\": \"{\\r\\n  \\\"pdfFileBase64String\\\": \\\"\u003cEncode your existing PDF document as Base64 encoded string\u003e\\\",\\r\\n  \\\"options\\\": {\\r\\n    \\\"text\\\": \\\"This is test string\\\",\\r\\n    \\\"textColor\\\": {\\r\\n      \\\"r\\\": 33,\\r\\n      \\\"g\\\": 34,\\r\\n      \\\"b\\\": 35\\r\\n    },\\r\\n    \\\"font\\\": {\\r\\n      \\\"name\\\": \\\"Arial\\\",\\r\\n      \\\"size\\\": 24.0,\\r\\n      \\\"style\\\": 1\\r\\n    },\\r\\n    \\\"pageNumber\\\": 3,\\r\\n    \\\"xPosition\\\": 40.0,\\r\\n    \\\"yPosition\\\": -200.0,\\r\\n    \\\"xOrigin\\\": 1,\\r\\n    \\\"yOrigin\\\": 2\\r\\n  },\\r\\n  \\\"fontFileBase64String\\\": \\\"\u003cAttach your own TrueTypeFont file if necessary to style text, encoded as Base64 encoded string\u003e\\\"\\r\\n}\"\n            },\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"pdfdocument\": {\n                    \"type\": \"string\",\n                    \"description\": \"An entry named pdfdocument is required in the multipart/form-data request\",\n                    \"format\": \"binary\"\n                  },\n                  \"options\": {\n                    \"type\": \"string\",\n                    \"description\": \"After pdfdocument is added, add an entry named options with your PdfWriteStringOptions object serialized as JSON.\",\n                    \"format\": \"string\"\n                  },\n                  \"fontfile\": {\n                    \"type\": \"string\",\n                    \"description\": \"Optional entry to attach your own TrueType font file to style string\",\n                    \"format\": \"binary\"\n                  }\n                }\n              },\n              \"encoding\": {\n                \"pdfdocument\": {\n                  \"contentType\": \"application/octet-stream\"\n                },\n                \"options\": {\n                  \"contentType\": \"application/json\"\n                },\n                \"fontfile\": {\n                  \"contentType\": \"application/octet-stream\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/PdfResponseDto\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/PdfResponseDto\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"If any error occurs parsing input\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"415\": {\n            \"description\": \"If content-type of request is not set to multipart/form-data or application/json\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/pdf/wkhtmltopdf\": {\n      \"post\": {\n        \"tags\": [\"Pdf\"],\n        \"summary\": \"Generate pdf file from url using the excellent tool wkhtmltopdf.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/PdfResponseDto\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/PdfResponseDto\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"If any error occurs executing request\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          },\n          \"415\": {\n            \"description\": \"If content-type of request is not set to application/json\",\n            \"content\": {\n              \"application/pdf\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProblemDetails\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"PdfResponseDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pdfFileBase64String\": {\n            \"type\": \"string\",\n            \"description\": \"The Base64 encoded string that is the pdf file.\"\n          },\n          \"errorMessage\": {\n            \"type\": \"string\",\n            \"description\": \"If any error occurs the message will be displayed in here\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"When setting the Accept-header in the request to \\\"application/json\\\" the content of the pdf file will be return as Base64 encoded string. Note that converting data to Base64 encoded strings increases the response size with approximately 33%, if you can accept the a binary format it's better to use Accept-header \\\"application/pdf\\\".\"\n      },\n      \"ProblemDetails\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\"\n          },\n          \"title\": {\n            \"type\": \"string\"\n          },\n          \"status\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"nullable\": true\n          },\n          \"detail\": {\n            \"type\": \"string\"\n          },\n          \"instance\": {\n            \"type\": \"string\"\n          }\n        },\n        \"additionalProperties\": {\n          \"type\": \"object\"\n        }\n      },\n      \"ImageResponseDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"imageBase64String\": {\n            \"type\": \"string\",\n            \"description\": \"The Base64 encoded string that is the image file.\"\n          },\n          \"errorMessage\": {\n            \"type\": \"string\",\n            \"description\": \"If any error occurs the message will be displayed in here\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"When setting the Accept-header in the request to \\\"application/json\\\" the image file will be return as Base64 encoded string. Note that converting data to Base64 encoded strings increases the response size with approximately 33%, if you can accept the a binary format it's better to use Accept-header \\\"image/jpeg\\\", \\\"image/png\\\" or \\\"image/gif\\\".\"\n      },\n      \"FoRequestDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"foDocumentBase64String\": {\n            \"type\": \"string\",\n            \"description\": \"This is the complete XSL-FO document provided using Base64 encoding.\"\n          },\n          \"resources\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"This is a set of key-value pairs of digital resources like images that is referenced in the XSL-FO document. It uses the filename as key and the data is provided as a Base64 encoded string.\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"The basic request with the XSL-FO document as a Base64 encoded string with a set of resources provided with a name and the data of the resource as a Base64 encoded string.\"\n      },\n      \"FoTransformRequestDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"xmlDataDocumentBase64String\": {\n            \"type\": \"string\",\n            \"description\": \"This is xml data document on which the XSL-FO transform document is applied. Provided using Base64 encoding.\"\n          },\n          \"foDocumentBase64String\": {\n            \"type\": \"string\",\n            \"description\": \"This is the complete XSL-FO document provided using Base64 encoding.\"\n          },\n          \"resources\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"This is a set of key-value pairs of digital resources like images that is referenced in the XSL-FO document. It uses the filename as key and the data is provided as a Base64 encoded string.\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"The XSL-FO transform document and xml data document as a Base64 encoded string with a set of resources provided with a name and the data of the resource as a Base64 encoded string.\"\n      },\n      \"PdfToImageOptions\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pageNumber\": {\n            \"type\": \"integer\",\n            \"description\": \"Which page of the pdf file to generate image from, default is first page\",\n            \"format\": \"int32\"\n          },\n          \"imageFormat\": {\n            \"type\": \"string\",\n            \"description\": \"Valid options are \\\"image/jpeg\\\", \\\"image/png\\\" or \\\"image/gif\\\". Default is \\\"image/png\\\"\"\n          },\n          \"horizontalResolution\": {\n            \"type\": \"number\",\n            \"description\": \"Set the horizontal resolution, default is 96 dpi;\",\n            \"format\": \"double\"\n          },\n          \"verticalResolution\": {\n            \"type\": \"number\",\n            \"description\": \"Set the vertical resolution, default is 96 dpi;\",\n            \"format\": \"double\"\n          },\n          \"width\": {\n            \"type\": \"integer\",\n            \"description\": \"Set the width of the output image, default value is width of source document. To scale width, and keeping proportions, do not set height;\",\n            \"format\": \"int32\"\n          },\n          \"height\": {\n            \"type\": \"integer\",\n            \"description\": \"Set the height of the output image, default value is width of source document. To scale height, and keeping proportions, do not set width;\",\n            \"format\": \"int32\"\n          },\n          \"transparent\": {\n            \"type\": \"boolean\",\n            \"description\": \"Keep the background of the image transparent. This setting is not available in JPEG-files, since transparency is not supported in the JPEG format.\"\n          },\n          \"jpegQuality\": {\n            \"type\": \"integer\",\n            \"description\": \"Sets the quality of jpeg images, range 0 to 100, default is 75\",\n            \"format\": \"int32\"\n          },\n          \"pngCompressionLevel\": {\n            \"type\": \"integer\",\n            \"description\": \"Sets the png compression level, range 1 - 9, default is 6\",\n            \"format\": \"int32\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"PdfToImageRequestDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pdfFileBase64String\": {\n            \"type\": \"string\",\n            \"description\": \"The pdf file to generate image from, as Base64 encoded string.\"\n          },\n          \"options\": {\n            \"$ref\": \"#/components/schemas/PdfToImageOptions\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"PdfConcatenationRequestDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pdfDocumentsAsBase64String\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"The list of Pdf documents encoded as Base64 strings.\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"Request to concatenate a list of Pdf documents to a single Pdf document.\"\n      },\n      \"ColorDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"r\": {\n            \"maximum\": 255,\n            \"minimum\": 0,\n            \"type\": \"integer\",\n            \"description\": \"Get or sets R value of RGB color\",\n            \"format\": \"int32\",\n            \"readOnly\": true\n          },\n          \"g\": {\n            \"maximum\": 255,\n            \"minimum\": 0,\n            \"type\": \"integer\",\n            \"description\": \"Get or sets G value of RGB color\",\n            \"format\": \"int32\",\n            \"readOnly\": true\n          },\n          \"b\": {\n            \"maximum\": 255,\n            \"minimum\": 0,\n            \"type\": \"integer\",\n            \"description\": \"Get or sets B value of RGB color\",\n            \"format\": \"int32\",\n            \"readOnly\": true\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"Set color\"\n      },\n      \"FontDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Gets the name of the font\",\n            \"readOnly\": true\n          },\n          \"size\": {\n            \"type\": \"number\",\n            \"description\": \"Gets the size of the font\",\n            \"format\": \"float\",\n            \"readOnly\": true\n          },\n          \"style\": {\n            \"enum\": [\"Regular\", \"Bold\", \"Italic\", \"BoldItalic\"],\n            \"type\": \"string\",\n            \"description\": \"Gets the style of the font\",\n            \"readOnly\": true\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"The Font dto object\"\n      },\n      \"PdfWriteStringOptions\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"text\": {\n            \"type\": \"string\",\n            \"description\": \"The text to write in the pdf\"\n          },\n          \"textColor\": {\n            \"$ref\": \"#/components/schemas/ColorDto\"\n          },\n          \"font\": {\n            \"$ref\": \"#/components/schemas/FontDto\"\n          },\n          \"pageNumber\": {\n            \"type\": \"integer\",\n            \"description\": \"Get or set which page in the pdf to write on, default is first page.\",\n            \"format\": \"int32\"\n          },\n          \"xPosition\": {\n            \"type\": \"number\",\n            \"description\": \"Get or set the X axis position on where to write string, in reference to XOrigin.\",\n            \"format\": \"float\"\n          },\n          \"yPosition\": {\n            \"type\": \"number\",\n            \"description\": \"Get or set the Y axis position on where to write string, in reference to YOrigin.\",\n            \"format\": \"float\"\n          },\n          \"xOrigin\": {\n            \"enum\": [\"Left\", \"Center\", \"Right\"],\n            \"type\": \"string\",\n            \"description\": \"Get or set the point from where the X axis position should be calculated from. Default value is from left side of page.\"\n          },\n          \"yOrigin\": {\n            \"enum\": [\"Top\", \"Center\", \"Bottom\"],\n            \"type\": \"string\",\n            \"description\": \"Get or set the point from where the Y axis position should be calculated from. Default value is from top of page.\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"Options for writing string in pdf page;\"\n      },\n      \"PdfWriteStringRequestDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pdfFileBase64String\": {\n            \"type\": \"string\",\n            \"description\": \"The pdf file to add text to, as Base64 encoded string.\"\n          },\n          \"options\": {\n            \"$ref\": \"#/components/schemas/PdfWriteStringOptions\"\n          },\n          \"fontFileBase64String\": {\n            \"type\": \"string\",\n            \"description\": \"System fonts are available, but you can provide your own font file to be embedded in the pdf document. Send font as Base64 encoded string.\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"The request dto object to write a string on pdf page\"\n      },\n      \"WkHtmlToPdfRequestDto\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"url\": {\n            \"type\": \"string\",\n            \"description\": \"The url to generate pdf from\"\n          },\n          \"wkHtmlToPdfArguments\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Command line arguments passed to wkhtmltopdf.\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"WkHtmlToPdfRequestDto is the data transfer object for generating a pdf using wkhtmltopdf;\"\n      }\n    },\n    \"securitySchemes\": {\n      \"OAuth2\": {\n        \"type\": \"oauth2\",\n        \"flows\": {\n          \"clientCredentials\": {\n            \"tokenUrl\": \"https://login.pdfbroker.io/connect/token\",\n            \"scopes\": {\n              \"pdfbroker\": \"Scope to access the PdfBroker API.\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"OAuth2\": [\"pdfbroker\"]\n    }\n  ]\n}\n",
			"canonicalURL": "/github.com/saasify-sh/saasify@c9b00910312cd16715f7617e4ec00c55169ac810/-/blob/packages/saasify-openapi-utils/fixtures/success/pdfbroker.json",
			"externalURLs": [
				{
					"url": "https://github.com/saasify-sh/saasify/blob/c9b00910312cd16715f7617e4ec00c55169ac810/packages/saasify-openapi-utils/fixtures/success/pdfbroker.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/pdf/pdfwritestring\": post: requestBody: contents: multipart/form-data: form parameter \"pdfdocument\": parameter content-type not implemented",
	"NotImplemented": [
		"oauth2 security",
		"parameter content-type"
	]
}