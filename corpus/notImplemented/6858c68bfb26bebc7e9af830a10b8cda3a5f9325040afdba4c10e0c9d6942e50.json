{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CometVisu/CometVisu"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "source/rest/openapi.yaml",
			"byteSize": 13739,
			"content": "openapi: 3.0.1\ninfo:\n  description: ''\n  version: 1.0.0\n  title: CometVisu Manager backend\ntags:\n  - name: fs\n    description: Filesystem handling\n  - name: config\n    description: Configuration and Settings\n  - name: dataprovider\n    description: Dataproviders for config editor.\npaths:\n  '/fs/check':\n    get:\n      tags:\n        - fs\n      summary: Check filesystem environment (access rights, etc)\n      operationId: checkEnvironment\n      x-exegesis-controller: FsController\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CheckResponse'\n  '/fs/move':\n    put:\n      tags:\n        - fs\n      summary: Move folder or file to a new place\n      parameters:\n        - name: src\n          in: query\n          description: current path of the filesystem entry\n          required: true\n          schema:\n            type: string\n        - name: target\n          in: query\n          description: new path of the filesystem entry\n          required: true\n          schema:\n            type: string\n      operationId: move\n      x-exegesis-controller: FsController\n      responses:\n        '200':\n           description: successful operation\n        '403':\n           description: Not allowed\n        '404':\n          description: Source does not exist\n        '405':\n          description: Error occurred\n        '406':\n           description: Target does exist\n  '/fs':\n    parameters:\n      - name: path\n        in: query\n        description: Relative path inside the config folder\n        required: true\n        schema:\n          type: string\n      - name: hash\n        in: query\n        description: CRC32 hash value of the file content\n        required: false\n        schema:\n          type: number\n    get:\n      tags:\n        - fs\n      summary: Return directory listing or file content\n      description: Returns a list of files/directories if the requested path pointed to a directory or the content of the file otherwise\n      parameters:\n        - name: download\n          in: query\n          description: should the file be downloaded?\n          required: false\n          schema:\n            type: boolean\n        - name: recursive\n          in: query\n          description: also include all sub-folders in the directory listing\n          required: false\n          schema:\n            type: boolean\n      operationId: read\n      x-exegesis-controller: FsController\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReadResponse'\n            text/*:\n              schema:\n                type: string\n        '403':\n          description: Not allowed\n        '404':\n          description: Path not found\n    post:\n      tags:\n        - fs\n      parameters:\n        - name: type\n          in: query\n          description: type to create (file or folder)\n          required: true\n          schema:\n            type: string\n            enum: ['dir', 'file']\n      summary: Create a new file or folder on the host\n      description: ''\n      operationId: create\n      x-exegesis-controller: FsController\n      requestBody:\n        description: Content of the file (empty when creating folder)\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                filename:\n                  type: string\n                  description: filename to use (if it should be another one than the original filename)\n                force:\n                  type: boolean\n                  description: replace existing file\n          text/*:\n            schema:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n        '403':\n          description: Not allowed\n        '406':\n          description: File exists\n    put:\n      tags:\n        - fs\n      summary: Update an existing file\n      description: ''\n      operationId: update\n      x-exegesis-controller: FsController\n      requestBody:\n        description: Content of the file\n        required: true\n        content:\n          text/*:\n            schema:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n        '403':\n          description: Not allowed\n        '404':\n          description: File does not exist\n    delete:\n      tags:\n        - fs\n      parameters:\n        - name: force\n          in: query\n          description: force deletion of non empty folders\n          required: false\n          schema:\n            type: boolean\n      summary: Deletes a file/folder\n      description: ''\n      operationId: delete\n      x-exegesis-controller: FsController\n      responses:\n        '200':\n          description: successful operation\n        '403':\n          description: Not allowed\n        '404':\n          description: File/Folder not found\n        '406':\n          description: Folder not empty\n  '/config/hidden':\n    put:\n      tags:\n        - config\n      summary: Save the hidden config\n      operationId: saveHiddenConfig\n      x-exegesis-controller: HiddenConfigController\n      requestBody:\n        description: Complete config content\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HiddenConfig'\n      responses:\n        '200':\n          description: successful operation\n        '403':\n          description: Not allowed\n        '404':\n          description: Config option does not exist\n  '/config/hidden/{section}/{key}':\n    parameters:\n      - name: section\n        in: path\n        description: Section of the config option, ('*' for all sections)\n        required: true\n        schema:\n          type: string\n      - name: key\n        in: path\n        description: Key (ID) of the config option in the section, ('*' for all options)\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - config\n      summary: Provides the value of a config option\n      operationId: getHiddenConfig\n      x-exegesis-controller: HiddenConfigController\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/HiddenConfig'\n                  - $ref: '#/components/schemas/ConfigSection'\n                  - $ref: '#/components/schemas/ConfigOptionValue'\n        '403':\n          description: Not allowed\n        '404':\n          description: Config option does not exist\n    put:\n      tags:\n        - config\n      summary: Changes the value of an existing config option\n      operationId: updateHiddenConfig\n      x-exegesis-controller: HiddenConfigController\n      requestBody:\n        description: Value of the config option\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n        '403':\n          description: Not allowed\n        '404':\n          description: Config option does not exist\n    post:\n      tags:\n        - config\n      summary: Creates a new config option\n      operationId: createHiddenConfig\n      x-exegesis-controller: HiddenConfigController\n      requestBody:\n        description: Value of the config option\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n        '403':\n          description: Not allowed\n        '404':\n          description: Config option does exist\n    delete:\n      tags:\n        - config\n      summary: Delete config option\n      operationId: deleteHiddenConfig\n      x-exegesis-controller: HiddenConfigController\n      responses:\n        '200':\n          description: successful operation\n        '403':\n          description: Not allowed\n        '404':\n          description: Config option does not exist\n  /data/designs:\n    get:\n      tags:\n        - dataprovider\n      summary: Returns the list of available designs.\n      operationId: getDesigns\n      x-exegesis-controller: DataProviderController\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /data/addresses:\n    get:\n      tags:\n        - dataprovider\n      summary: Returns the list of available addresses.\n      operationId: getAddresses\n      x-exegesis-controller: DataProviderController\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataProviderResponse'\n  /data/rrds:\n    get:\n      tags:\n        - dataprovider\n      summary: Returns the list of available RRDs.\n      operationId: getRRDs\n      x-exegesis-controller: DataProviderController\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataProviderResponse'\n  /data/influxdbs:\n    get:\n      tags:\n        - dataprovider\n      parameters:\n        - name: auth\n          in: query\n          schema:\n            type: string\n      summary: Returns the list of available influx databases.\n      operationId: getInfluxDBs\n      x-exegesis-controller: DataProviderController\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataProviderResponse'\n  /data/influxdbfields:\n    get:\n      tags:\n        - dataprovider\n      parameters:\n        - name: auth\n          in: query\n          schema:\n            type: string\n        - name: measurement\n          in: query\n          schema:\n            type: string\n      summary: Returns the list of available influx database fields.\n      operationId: getInfluxDBFields\n      x-exegesis-controller: DataProviderController\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataProviderResponse'\n        '406':\n          description: wrong measurement parameter\n  /data/influxdbtags:\n    get:\n      tags:\n        - dataprovider\n      parameters:\n        - name: auth\n          in: query\n          schema:\n            type: string\n        - name: measurement\n          in: query\n          schema:\n            type: string\n      summary: Returns the list of available influx database tags.\n      operationId: getInfluxDBTags\n      x-exegesis-controller: DataProviderController\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataProviderResponse'\n        '406':\n          description: wrong measurement parameter\ncomponents:\n  schemas:\n    DataProviderResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/DataProviderEntry'\n    DataProviderEntry:\n      type: object\n      properties:\n        value:\n          type: string\n        label:\n          type: string\n        hints:\n          type: array\n          items:\n            $ref: '#/components/schemas/DataProviderHint'\n    DataProviderHint:\n      type: object\n      additionalProperties:\n        type: string\n    ReadResponse:\n      oneOf:\n        - $ref: '#/components/schemas/DirContent'\n    DirContent:\n      type: array\n      items:\n        $ref: '#/components/schemas/FsEntry'\n    HiddenConfig:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/ConfigSection'\n    ConfigSection:\n      type: object\n      additionalProperties:\n        type: string\n    ConfigOptionValue:\n      type: string\n    CheckResponse:\n      type: array\n      items:\n        $ref: '#/components/schemas/EnvironmentState'\n    EnvironmentState:\n      type: object\n      properties:\n        entity:\n          type: string\n        state:\n          type: number\n          description: bitmask with a list of states \u003cwriteable,readable,exists\u003e\n    FsEntry:\n      type: object\n      properties:\n        name:\n          type: string\n        type:\n          type: string\n          enum: ['DIR', 'FILE']\n        parentFolder:\n          type: string\n        hasChildren:\n          type: boolean\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/FsEntry'\n        readable:\n          type: boolean\n          default: false\n        writeable:\n          type: boolean\n          default: false\n        mounted:\n          type: boolean\n          description: true when this file/folder is inside a mounted folder\n          default: false\n        trash:\n          type: boolean\n          description: marks the trash folder\n          default: false\n        inTrash:\n          type: boolean\n          description: true when this entry is inside the trash folder\n          default: false\n        hash:\n          type: number\n          description: hash value for file content (CRC32)\nexternalDocs:\n  description: Find out more about CometVisu\n  url: 'https://www.cometvisu.org'\n",
			"canonicalURL": "/github.com/CometVisu/CometVisu@1c908bc9846fcfa0e1387bcaefd308e5b5fb2d42/-/blob/source/rest/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/CometVisu/CometVisu/blob/1c908bc9846fcfa0e1387bcaefd308e5b5fb2d42/source/rest/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/fs\": put: requestBody: contents: unsupported content types: [text/*]",
	"NotImplemented": [
		"discriminator inference",
		"unsupported content types"
	]
}