{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/traPtitech/traQ"
		},
		"file": {
			"name": "v3-api.yaml",
			"size": 0,
			"path": "docs/v3-api.yaml",
			"byteSize": 213241,
			"content": "openapi: 3.0.0\ninfo:\n  title: traQ v3\n  version: '3.0'\n  description: traQ v3 API\n  license:\n    name: MIT\n    url: 'https://github.com/traPtitech/traQ/blob/master/LICENSE'\n  contact:\n    name: traP\n    url: 'https://github.com/traPtitech/traQ'\nservers:\n  - url: 'https://q.trap.jp/api/v3'\n    description: production\n  - url: 'https://traq-s-dev.tokyotech.org/api/v3'\n    description: staging\n  - url: 'http://localhost:3000/api/v3'\n    description: local\npaths:\n  '/channels/{channelId}/messages':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    post:\n      summary: チャンネルにメッセージを投稿\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      description: |-\n        指定したチャンネルにメッセージを投稿します。\n        embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。\n        アーカイブされているチャンネルに投稿することはできません。\n      operationId: postMessage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostMessageRequest'\n        description: ''\n      tags:\n        - message\n        - channel\n    get:\n      summary: チャンネルメッセージのリストを取得\n      description: 指定したチャンネルのメッセージのリストを取得します。\n      operationId: getMessages\n      tags:\n        - channel\n        - message\n      parameters:\n        - $ref: '#/components/parameters/limitInQuery'\n        - $ref: '#/components/parameters/offsetInQuery'\n        - $ref: '#/components/parameters/sinceInQuery'\n        - $ref: '#/components/parameters/untilInQuery'\n        - $ref: '#/components/parameters/inclusiveInQuery'\n        - $ref: '#/components/parameters/orderInQuery'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: メッセージの配列\n                items:\n                  $ref: '#/components/schemas/Message'\n          headers:\n            X-TRAQ-MORE:\n              $ref: '#/components/headers/X-TRAQ-MORE'\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n  '/messages':\n    get:\n      summary: メッセージを検索\n      description: メッセージを検索します。\n      operationId: searchMessages\n      tags:\n        - message\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: word\n          description: |\n            検索ワード\n            Simple-Query-String-Syntaxをパースして検索します\n          example: '\"phrase match\" +(foo | bar) -baz'\n        - schema:\n            type: string\n            format: date-time\n          in: query\n          name: after\n          description: 投稿日時が指定日時より後\n          example: 2006-01-02T15:04:05Z\n        - schema:\n            type: string\n            format: date-time\n          in: query\n          name: before\n          description: 投稿日時が指定日時より前\n          example: 2006-01-02T15:04:05Z\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: in\n          description: メッセージが投稿されたチャンネル\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: to\n          description: メンションされたユーザー\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: from\n          description: メッセージを投稿したユーザー\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: citation\n          description: 引用しているメッセージ\n        - schema:\n            type: boolean\n          in: query\n          name: bot\n          description: メッセージを投稿したユーザーがBotかどうか\n        - schema:\n            type: boolean\n          in: query\n          name: hasURL\n          description: メッセージがURLを含むか\n        - schema:\n            type: boolean\n          in: query\n          name: hasAttachments\n          description: メッセージが添付ファイルを含むか\n        - schema:\n            type: boolean\n          in: query\n          name: hasImage\n          description: メッセージが画像を含むか\n        - schema:\n            type: boolean\n          in: query\n          name: hasVideo\n          description: メッセージが動画を含むか\n        - schema:\n            type: boolean\n          in: query\n          name: hasAudio\n          description: メッセージが音声ファイルを含むか\n        - schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n          in: query\n          name: limit\n          description: 検索結果から取得するメッセージの最大件数\n        - schema:\n            type: integer\n            minimum: 0\n            maximum: 9900\n          in: query\n          name: offset\n          description: 検索結果から取得するメッセージのオフセット\n        - in: query\n          name: sort\n          schema:\n            type: string\n            default: '-createdAt'\n            enum:\n              - createdAt\n              - '-createdAt'\n              - updatedAt\n              - '-updatedAt'\n          description: 'ソート順 (作成日時が新しい `createdAt`, 作成日時が古い `-createdAt`, 更新日時が新しい `updatedAt`, 更新日時が古い `-updatedAt`)'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                title: MessageSearchResult\n                type: object\n                description: メッセージ検索結果\n                properties:\n                  totalHits:\n                    type: integer\n                    format: int64\n                    description: 検索にヒットしたメッセージ件数\n                  hits:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Message'\n                    description: 検索にヒットしたメッセージの配列\n                required:\n                  - totalHits\n                  - hits\n        '400':\n          description: Bad Request\n        '503':\n          description: search service is currently unavailable\n  '/messages/{messageId}':\n    parameters:\n      - $ref: '#/components/parameters/messageIdInPath'\n    get:\n      summary: メッセージを取得\n      tags:\n        - message\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n        '404':\n          description: Not Found\n      operationId: getMessage\n      description: 指定したメッセージを取得します。\n    put:\n      summary: メッセージを編集\n      responses:\n        '204':\n          description: |-\n            No Content\n            メッセージを編集できました。\n        '400':\n          description: Bad Request\n        '403':\n          description: |-\n            Forbidden\n            指定されたメッセージを編集する権限がありません。\n        '404':\n          description: Not Found\n      description: |-\n        指定したメッセージを編集します。\n        自身が投稿したメッセージのみ編集することができます。\n        アーカイブされているチャンネルのメッセージを編集することは出来ません。\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostMessageRequest'\n      tags:\n        - message\n      operationId: editMessage\n    delete:\n      summary: メッセージを削除\n      responses:\n        '204':\n          description: |-\n            No Content\n            正常に削除できました。\n        '403':\n          description: |-\n            Forbidden\n            指定されたメッセージを削除する権限がありません。\n        '404':\n          description: Not Found\n      tags:\n        - message\n      operationId: deleteMessage\n      description: |-\n        指定したメッセージを削除します。\n        自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。\n        アーカイブされているチャンネルのメッセージを編集することは出来ません。\n  '/messages/{messageId}/pin':\n    parameters:\n      - $ref: '#/components/parameters/messageIdInPath'\n    get:\n      summary: ピン留めを取得\n      tags:\n        - message\n        - pin\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MessagePin'\n        '404':\n          description: |-\n            Not Found\n            指定したメッセージ、またはピン留めが見つかりません。\n      operationId: getPin\n      description: 指定したメッセージのピン留め情報を取得します。\n    post:\n      summary: ピン留めする\n      responses:\n        '201':\n          description: |-\n            Created\n            指定したメッセージがピン留めされました。\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MessagePin'\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            メッセージが見つかりません。\n      tags:\n        - message\n        - pin\n      operationId: createPin\n      description: |-\n        指定したメッセージをピン留めします。\n        アーカイブされているチャンネルのメッセージ・存在しないメッセージ・チャンネル当たりの上限数を超えたメッセージのピン留めはできません。\n    delete:\n      summary: ピン留めを外す\n      responses:\n        '204':\n          description: |-\n            No Content\n            指定したメッセージのピン留めが外されました。\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            指定したメッセージ、またはピン留めが見つかりません。\n      description: 指定したメッセージのピン留めを外します。\n      tags:\n        - message\n        - pin\n      operationId: removePin\n  '/channels/{channelId}/stats':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    get:\n      summary: チャンネル統計情報を取得\n      tags:\n        - channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelStats'\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      operationId: getChannelStats\n      description: 指定したチャンネルの統計情報を取得します。\n  '/channels/{channelId}/topic':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    get:\n      summary: チャンネルトピックを取得\n      tags:\n        - channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelTopic'\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      operationId: getChannelTopic\n      description: 指定したチャンネルのトピックを取得します。\n    put:\n      summary: チャンネルトピックを編集\n      responses:\n        '204':\n          description: |-\n            No Content\n            チャンネルトピックが編集されました\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      tags:\n        - channel\n      description: |-\n        指定したチャンネルのトピックを編集します。\n        アーカイブされているチャンネルのトピックは編集できません。\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutChannelTopicRequest'\n      operationId: editChannelTopic\n  '/channels/{channelId}/viewers':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    get:\n      summary: チャンネル閲覧者リストを取得\n      tags:\n        - channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: チャンネル閲覧者の配列\n                items:\n                  $ref: '#/components/schemas/ChannelViewer'\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      operationId: getChannelViewers\n      description: 指定したチャンネルの閲覧者のリストを取得します。\n  /files:\n    post:\n      summary: ファイルをアップロード\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileInfo'\n        '400':\n          description: Bad Request\n        '411':\n          description: Length Required\n        '413':\n          description: Request Entity Too Large\n      tags:\n        - file\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PostFileRequest'\n      operationId: postFile\n      description: |-\n        指定したチャンネルにファイルをアップロードします。\n        アーカイブされているチャンネルにはアップロード出来ません。\n    get:\n      summary: ファイルメタのリストを取得\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: ファイルメタの配列\n                items:\n                  $ref: '#/components/schemas/FileInfo'\n          headers:\n            X-TRAQ-MORE:\n              $ref: '#/components/headers/X-TRAQ-MORE'\n        '400':\n          description: Bad Request\n      tags:\n        - file\n      operationId: getFiles\n      parameters:\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: channelId\n          description: アップロード先チャンネルUUID\n        - $ref: '#/components/parameters/limitInQuery'\n        - $ref: '#/components/parameters/offsetInQuery'\n        - $ref: '#/components/parameters/sinceInQuery'\n        - $ref: '#/components/parameters/untilInQuery'\n        - $ref: '#/components/parameters/inclusiveInQuery'\n        - $ref: '#/components/parameters/orderInQuery'\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: mine\n          description: アップロード者が自分のファイルのみを取得するか\n      description: |-\n        指定したクエリでファイルメタのリストを取得します。\n        クエリパラメータ`channelId`, `mine`の少なくともいずれかが必須です。\n  '/files/{fileId}/meta':\n    parameters:\n      - $ref: '#/components/parameters/fileIdInPath'\n    get:\n      summary: ファイルメタを取得\n      tags:\n        - file\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileInfo'\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            ファイルが見つかりません。\n      operationId: getFileMeta\n      description: |-\n        指定したファイルのメタ情報を取得します。\n        指定したファイルへのアクセス権限が必要です。\n  '/files/{fileId}/thumbnail':\n    parameters:\n      - $ref: '#/components/parameters/fileIdInPath'\n      - schema:\n          $ref: '#/components/schemas/ThumbnailType'\n        in: query\n        name: type\n        description: 取得するサムネイルのタイプ\n    get:\n      summary: サムネイル画像を取得\n      tags:\n        - file\n      responses:\n        '200':\n          description: OK\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            ファイルが見つからない、またはサムネイル画像が存在しません。\n      operationId: getThumbnailImage\n      description: |-\n        指定したファイルのサムネイル画像を取得します。\n        指定したファイルへのアクセス権限が必要です。\n  '/files/{fileId}':\n    parameters:\n      - $ref: '#/components/parameters/fileIdInPath'\n    get:\n      summary: ファイルをダウンロード\n      tags:\n        - file\n      responses:\n        '200':\n          description: |-\n            OK\n            ファイル本体を返します。\n            application/octet-streamで返すことになっていますが、ファイルの形式によって変わります。\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n          headers:\n            Content-Disposition:\n              schema:\n                type: string\n              description: 'https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition'\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: dl\n          description: 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます\n      operationId: getFile\n      description: |-\n        指定したファイル本体を取得します。\n        指定したファイルへのアクセス権限が必要です。\n    delete:\n      summary: ファイルを削除\n      responses:\n        '204':\n          description: |-\n            No Content\n            ファイルが削除できました。\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      tags:\n        - file\n      operationId: deleteFile\n      description: |-\n        指定したファイルを削除します。\n        指定したファイルの削除権限が必要です。\n  '/channels/{channelId}/pins':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    get:\n      summary: チャンネルピンのリストを取得\n      tags:\n        - channel\n        - pin\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pin'\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      operationId: getChannelPins\n      description: 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。\n  '/messages/{messageId}/stamps':\n    parameters:\n      - $ref: '#/components/parameters/messageIdInPath'\n    get:\n      summary: メッセージのスタンプリストを取得\n      tags:\n        - message\n        - stamp\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MessageStamp'\n        '404':\n          description: Not Found\n      description: 指定したメッセージに押されているスタンプのリストを取得します。\n      operationId: getMessageStamps\n  '/messages/{messageId}/stamps/{stampId}':\n    parameters:\n      - $ref: '#/components/parameters/messageIdInPath'\n      - $ref: '#/components/parameters/stampIdInPath'\n    post:\n      summary: スタンプを押す\n      responses:\n        '204':\n          description: |-\n            No Content\n            スタンプを押すことができました。\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            メッセージ、またはスタンプが見つかりません。\n      operationId: addMessageStamp\n      tags:\n        - message\n        - stamp\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostMessageStampRequest'\n        description: ''\n      description: 指定したメッセージに指定したスタンプを押します。\n    delete:\n      summary: スタンプを消す\n      responses:\n        '204':\n          description: |-\n            No Content\n            スタンプを消すことができました。\n        '404':\n          description: |-\n            Not Found\n            メッセージ、またはスタンプが見つかりません。\n      operationId: removeMessageStamp\n      tags:\n        - message\n        - stamp\n      description: 指定したメッセージから指定した自身が押したスタンプを削除します。\n  '/stamps/{stampId}':\n    parameters:\n      - $ref: '#/components/parameters/stampIdInPath'\n    get:\n      summary: スタンプ情報を取得\n      tags:\n        - stamp\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stamp'\n        '404':\n          description: Not Found\n      operationId: getStamp\n      description: 指定したスタンプの情報を取得します。\n    delete:\n      summary: スタンプを削除\n      responses:\n        '204':\n          description: |-\n            No Content\n            スタンプが削除されました。\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      description: |-\n        指定したスタンプを削除します。\n        対象のスタンプの削除権限が必要です。\n      operationId: deleteStamp\n      tags:\n        - stamp\n    patch:\n      summary: スタンプ情報を変更\n      operationId: editStamp\n      responses:\n        '204':\n          description: |-\n            No Content\n            スタンプ情報が変更されました。\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '409':\n          description: Conflict\n      tags:\n        - stamp\n      description: 指定したスタンプの情報を変更します。\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchStampRequest'\n  /stamps:\n    post:\n      summary: スタンプを作成\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stamp'\n        '400':\n          description: Bad Request\n        '409':\n          description: Conflict\n        '413':\n          description: Request Entity Too Large\n      description: スタンプを新規作成します。\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PostStampRequest'\n            encoding:\n              file:\n                contentType: 'image/png, image/jpeg, image/gif'\n        description: ''\n      operationId: createStamp\n      tags:\n        - stamp\n    get:\n      summary: スタンプリストを取得\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Stamp'\n      operationId: getStamps\n      tags:\n        - stamp\n      parameters:\n        - schema:\n            type: boolean\n            default: true\n          in: query\n          name: include-unicode\n          deprecated: true\n          description: |\n            Unicode絵文字を含ませるかどうか\n            Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください\n        - schema:\n            type: string\n            enum: [unicode, original]\n          in: query\n          name: type\n          description: 取得するスタンプの種類\n      description: スタンプのリストを取得します。\n  /users/me/stamp-history:\n    get:\n      summary: スタンプ履歴を取得\n      tags:\n        - stamp\n        - me\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StampHistoryEntry'\n      operationId: getMyStampHistory\n      parameters:\n        - schema:\n            type: integer\n            default: 100\n            maximum: 100\n            minimum: 1\n          in: query\n          name: limit\n          description: 件数\n      description: |-\n        自分のスタンプ履歴を最大100件まで取得します。\n        結果は降順で返されます。\n\n        このAPIが返すスタンプ履歴は厳密な履歴ではありません。\n  /users/me/qr-code:\n    get:\n      summary: QRコードを取得\n      tags:\n        - me\n      responses:\n        '200':\n          description: OK\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\n                description: QRコード画像\n            text/plain:\n              schema:\n                type: string\n                description: QRコードJWT\n      description: |-\n        自身のQRコードを取得します。\n        返されたQRコードまたはトークンは、発行後の5分間のみ有効です\n      operationId: getMyQRCode\n      parameters:\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: token\n          description: 画像でなくトークン文字列で返すかどうか\n  '/stamps/{stampId}/stats':\n    parameters:\n      - $ref: '#/components/parameters/stampIdInPath'\n    get:\n      summary: スタンプ統計情報を取得\n      tags:\n        - stamp\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StampStats'\n        '404':\n          description: |-\n            Not Found\n            スタンプが見つかりません。\n      operationId: getStampStats\n      description: 指定したスタンプの統計情報を取得します。\n  '/users/{userId}':\n    parameters:\n      - $ref: '#/components/parameters/userIdInPath'\n    get:\n      summary: ユーザー詳細情報を取得\n      tags:\n        - user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDetail'\n        '404':\n          description: Not Found\n      operationId: getUser\n      description: 指定したユーザーの詳細情報を取得します。\n    patch:\n      summary: ユーザー情報を変更\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      operationId: editUser\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchUserRequest'\n      description: |-\n        指定したユーザーの情報を変更します。\n        管理者権限が必要です。\n  '/groups/{groupId}':\n    parameters:\n      - $ref: '#/components/parameters/groupIdInPath'\n    get:\n      summary: ユーザーグループを取得\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserGroup'\n        '404':\n          description: Not Found\n      operationId: getUserGroup\n      tags:\n        - group\n      description: 指定したユーザーグループの情報を取得します。\n    delete:\n      summary: ユーザーグループを削除\n      responses:\n        '204':\n          description: |-\n            No Content\n            ユーザーグループが削除されました。\n        '403':\n          description: |-\n            Forbidden\n            ユーザーグループを操作する権限がありません。\n        '404':\n          description: Not Found\n      description: |-\n        指定したユーザーグループを削除します。\n        対象のユーザーグループの管理者権限が必要です。\n      operationId: deleteUserGroup\n      tags:\n        - group\n    patch:\n      summary: ユーザーグループを編集\n      responses:\n        '204':\n          description: |-\n            No Content\n            編集されました。\n        '400':\n          description: Bad Request\n        '403':\n          description: |-\n            Forbidden\n            ユーザーグループを操作する権限がありません。\n        '404':\n          description: Not Found\n        '409':\n          description: |-\n            Conflict\n            変更後のグループ名のグループは既に存在します。\n      tags:\n        - group\n      operationId: editUserGroup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchUserGroupRequest'\n        description: ''\n      description: |-\n        指定したユーザーグループの情報を編集します。\n        対象のユーザーグループの管理者権限が必要です。\n  '/groups/{groupId}/icon':\n    parameters:\n      - $ref: '#/components/parameters/groupIdInPath'\n    put:\n      summary: ユーザーグループのアイコンを変更\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            ユーザーグループが見つかりません。\n        '413':\n          description: Request Entity Too Large\n      operationId: changeUserGroupIcon\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PutUserIconRequest'\n            encoding:\n              file:\n                contentType: 'image/png, image/jpeg, image/gif'\n        description: ''\n      tags:\n        - group\n      description: |-\n        ユーザーグループのアイコンを変更します。\n        対象のユーザーグループの管理者権限が必要です。\n  '/groups/{groupId}/members':\n    parameters:\n      - $ref: '#/components/parameters/groupIdInPath'\n    get:\n      summary: グループメンバーを取得\n      tags:\n        - group\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: ユーザーグループメンバーの配列\n                items:\n                  $ref: '#/components/schemas/UserGroupMember'\n        '404':\n          description: |-\n            Not Found\n            ユーザーグループが見つかりません。\n      operationId: getUserGroupMembers\n      description: 指定したグループのメンバーのリストを取得します。\n    post:\n      summary: グループメンバーを追加\n      responses:\n        '204':\n          description: |-\n            No Content\n            追加されました。\n        '400':\n          description: Bad Request\n        '403':\n          description: |-\n            Forbidden\n            ユーザーグループを操作する権限がありません。\n        '404':\n          description: |-\n            Not Found\n            ユーザーグループが見つかりません。\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserGroupMember'\n        description: ''\n      tags:\n        - group\n      operationId: addUserGroupMember\n      description: |-\n        指定したグループにメンバーを追加します。\n        対象のユーザーグループの管理者権限が必要です。\n  '/groups/{groupId}/members/{userId}':\n    parameters:\n      - $ref: '#/components/parameters/groupIdInPath'\n      - $ref: '#/components/parameters/userIdInPath'\n    delete:\n      summary: グループメンバーを削除\n      responses:\n        '204':\n          description: |-\n            No Content\n            指定したユーザーがユーザーグループから削除されました。\n        '403':\n          description: |-\n            Forbidden\n            ユーザーグループを操作する権限がありません。\n        '404':\n          description: |-\n            Not Found\n            ユーザーグループが見つかりません。\n      tags:\n        - group\n      operationId: removeUserGroupMember\n      description: |-\n        指定したユーザーグループから指定したユーザーを削除します。\n        既にグループから削除されているメンバーを指定した場合は204を返します。\n        対象のユーザーグループの管理者権限が必要です。\n    patch:\n      summary: グループメンバーを編集\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n        '400':\n          description: |-\n            Bad Request\n            ユーザーがグループに存在しないか、リクエストが不正です。\n        '403':\n          description: |-\n            Forbidden\n            ユーザーグループを操作する権限がありません。\n        '404':\n          description: |-\n            Not Found\n            ユーザーグループが見つかりません。\n      operationId: editUserGroupMember\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchGroupMemberRequest'\n      tags:\n        - group\n      description: |-\n        指定したユーザーグループ内の指定したユーザーの属性を編集します。\n        対象のユーザーグループの管理者権限が必要です。\n  /groups:\n    get:\n      summary: ユーザーグループのリストを取得\n      tags:\n        - group\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: ユーザーグループの配列\n                items:\n                  $ref: '#/components/schemas/UserGroup'\n      description: ユーザーグループのリストを取得します。\n      operationId: getUserGroups\n      parameters: []\n    post:\n      summary: ユーザーグループを作成\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserGroup'\n        '400':\n          description: Bad Request\n        '403':\n          description: |-\n            Forbidden\n            指定したグループを作成する権限がありません。\n        '409':\n          description: |-\n            Conflict\n            指定した名前のグループは既に存在します。\n      tags:\n        - group\n      description: |-\n        ユーザーグループを作成します。\n        作成者は自動的にグループ管理者になります。\n      operationId: createUserGroup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostUserGroupRequest'\n  /users/me:\n    get:\n      summary: 自分のユーザー詳細を取得\n      tags:\n        - me\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MyUserDetail'\n      operationId: getMe\n      description: 自身のユーザー詳細情報を取得します。\n    patch:\n      summary: 自分のユーザー情報を変更\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n        '400':\n          description: Bad Request\n      tags:\n        - me\n      operationId: editMe\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchMeRequest'\n      description: 自身のユーザー情報を変更します。\n  '/users/{userId}/messages':\n    parameters:\n      - $ref: '#/components/parameters/userIdInPath'\n    post:\n      summary: ダイレクトメッセージを送信\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Message'\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            ユーザーが見つかりません。\n      tags:\n        - message\n        - user\n      operationId: postDirectMessage\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostMessageRequest'\n      description: 指定したユーザーにダイレクトメッセージを送信します。\n    get:\n      summary: ダイレクトメッセージのリストを取得\n      operationId: getDirectMessages\n      tags:\n        - message\n        - user\n      responses:\n        '200':\n          description: OK\n          headers:\n            X-TRAQ-MORE:\n              $ref: '#/components/headers/X-TRAQ-MORE'\n          content:\n            application/json:\n              schema:\n                type: array\n                description: メッセージの配列\n                items:\n                  $ref: '#/components/schemas/Message'\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            ユーザーが見つかりません。\n      parameters:\n        - $ref: '#/components/parameters/limitInQuery'\n        - $ref: '#/components/parameters/offsetInQuery'\n        - $ref: '#/components/parameters/sinceInQuery'\n        - $ref: '#/components/parameters/untilInQuery'\n        - $ref: '#/components/parameters/inclusiveInQuery'\n        - $ref: '#/components/parameters/orderInQuery'\n      description: 指定したユーザーとのダイレクトメッセージのリストを取得します。\n  '/users/{userId}/stats':\n    parameters:\n      - $ref: '#/components/parameters/userIdInPath'\n    get:\n      summary: ユーザー統計情報を取得\n      tags:\n        - user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserStats'\n        '404':\n          description: |-\n            Not Found\n            ユーザーが見つかりません。\n      operationId: getUserStats\n      description: 指定したユーザーの統計情報を取得します。\n  '/channels/{channelId}/subscribers':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    get:\n      summary: チャンネルの通知購読者のリストを取得\n      tags:\n        - channel\n        - notification\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: 購読者UUIDの配列\n                items:\n                  type: string\n                  format: uuid\n        '403':\n          description: |-\n            Forbidden\n            プライベートチャンネル・強制通知チャンネルの設定は取得できません。\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      operationId: getChannelSubscribers\n      description: 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。\n    patch:\n      summary: チャンネルの通知購読者を編集\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更できました。\n        '400':\n          description: Bad Request\n        '403':\n          description: |-\n            Forbidden\n            指定したチャンネルの通知購読者は変更できません。\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      tags:\n        - channel\n        - notification\n      operationId: editChannelSubscribers\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchChannelSubscribersRequest'\n        description: ''\n      description: |-\n        指定したチャンネルの通知購読者を編集します。\n        リクエストに含めなかったユーザーの通知購読状態は変更しません。\n        また、存在しないユーザーを指定した場合は無視されます。\n    put:\n      summary: チャンネルの通知購読者を設定\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n          headers: {}\n        '400':\n          description: Bad Request\n        '403':\n          description: |-\n            Forbidden\n            指定したチャンネルの通知購読者は変更できません。\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutChannelSubscribersRequest'\n      description: |-\n        指定したチャンネルの通知購読者を設定します。\n        リクエストに含めなかったユーザーの通知購読状態はオフになります。\n        また、存在しないユーザーを指定した場合は無視されます。\n      tags:\n        - channel\n        - notification\n      operationId: setChannelSubscribers\n  /users/me/subscriptions:\n    get:\n      summary: 自分のチャンネル購読状態を取得\n      tags:\n        - me\n        - notification\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: チャンネル購読状態の配列\n                items:\n                  $ref: '#/components/schemas/UserSubscribeState'\n      operationId: getMyChannelSubscriptions\n      description: 自身のチャンネル購読状態を取得します。\n  '/users/me/subscriptions/{channelId}':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    put:\n      summary: チャンネル購読レベルを設定\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n        '400':\n          description: Bad Request\n        '403':\n          description: |-\n            Forbidden\n            指定したチャンネルの通知購読レベルは変更できません。\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      tags:\n        - me\n        - notification\n      operationId: setChannelSubscribeLevel\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutChannelSubscribeLevelRequest'\n      description: 自身の指定したチャンネルの購読レベルを設定します。\n  /webhooks:\n    get:\n      summary: Webhook情報のリストを取得します\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: Webhook情報の配列\n                items:\n                  $ref: '#/components/schemas/Webhook'\n      tags:\n        - webhook\n      operationId: getWebhooks\n      parameters:\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: all\n          description: 全てのWebhookを取得します。権限が必要です。\n      description: |-\n        Webhookのリストを取得します。\n        allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。\n    post:\n      summary: Webhookを新規作成\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhook'\n        '400':\n          description: Bad Request\n      operationId: createWebhook\n      tags:\n        - webhook\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostWebhookRequest'\n      description: |-\n        Webhookを新規作成します。\n        `secret`が空文字の場合、insecureウェブフックが作成されます。\n  '/webhooks/{webhookId}':\n    parameters:\n      - $ref: '#/components/parameters/webhookIdInPath'\n    get:\n      summary: Webhook情報を取得\n      tags:\n        - webhook\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhook'\n        '404':\n          description: |-\n            Not Found\n            Webhookが見つかりません。\n      operationId: getWebhook\n      description: 指定したWebhookの詳細を取得します。\n    post:\n      summary: Webhookを送信\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n      operationId: postWebhook\n      parameters:\n        - schema:\n            type: string\n          in: header\n          name: X-TRAQ-Signature\n          description: リクエストボディシグネチャ(Secretが設定されている場合は必須)\n        - schema:\n            type: string\n          in: header\n          name: X-TRAQ-Channel-Id\n          description: 投稿先のチャンネルID(変更する場合)\n        - schema:\n            type: integer\n            default: 0\n          in: query\n          name: embed\n          description: メンション・チャンネルリンクを自動埋め込みする場合に1を指定する\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n              description: メッセージ文字列\n        description: ''\n      tags:\n        - webhook\n      description: |-\n        Webhookにメッセージを投稿します。\n        secureなウェブフックに対しては`X-TRAQ-Signature`ヘッダーが必須です。\n        アーカイブされているチャンネルには投稿できません。\n    delete:\n      summary: Webhookを削除\n      responses:\n        '204':\n          description: |-\n            No Content\n            削除されました。\n        '404':\n          description: |-\n            Not Found\n            Webhookが見つかりません。\n      tags:\n        - webhook\n      operationId: deleteWebhook\n      description: |-\n        指定したWebhookを削除します。\n        Webhookによって投稿されたメッセージは削除されません。\n    patch:\n      summary: Webhook情報を変更\n      responses:\n        '204':\n          description: |-\n            No Content\n            編集できました。\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            Webhookが見つかりません。\n      operationId: editWebhook\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchWebhookRequest'\n      tags:\n        - webhook\n      description: 指定したWebhookの情報を変更します。\n  '/webhooks/{webhookId}/icon':\n    parameters:\n      - $ref: '#/components/parameters/webhookIdInPath'\n    get:\n      summary: Webhookのアイコンを取得\n      tags:\n        - webhook\n      responses:\n        '200':\n          description: OK\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/gif:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: |-\n            Not Found\n            Webhookが見つかりません。\n      operationId: getWebhookIcon\n      description: 指定したWebhookのアイコン画像を取得します\n    put:\n      summary: Webhookのアイコンを変更\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            Webhookが見つかりません。\n        '413':\n          description: Request Entity Too Large\n      operationId: changeWebhookIcon\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PutUserIconRequest'\n            encoding:\n              file:\n                contentType: 'image/png, image/jpeg, image/gif'\n        description: ''\n      tags:\n        - webhook\n      description: 指定したWebhookのアイコン画像を変更します。\n  '/users/{userId}/icon':\n    parameters:\n      - $ref: '#/components/parameters/userIdInPath'\n    get:\n      summary: ユーザーのアイコン画像を取得\n      tags:\n        - user\n      responses:\n        '200':\n          description: OK\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/gif:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: |-\n            Not Found\n            ユーザーが見つかりません。\n      operationId: getUserIcon\n      description: 指定したユーザーのアイコン画像を取得します。\n    put:\n      summary: ユーザーのアイコン画像を変更します\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            ユーザーが見つかりません。\n        '413':\n          description: Request Entity Too Large\n      operationId: changeUserIcon\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PutUserIconRequest'\n            encoding:\n              file:\n                contentType: 'image/png, image/jpeg, image/gif'\n      tags:\n        - user\n      description: |-\n        指定したユーザーのアイコン画像を変更します。\n        管理者権限が必要です。\n  /users/me/icon:\n    get:\n      summary: 自分のアイコン画像を取得\n      tags:\n        - me\n      responses:\n        '200':\n          description: OK\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/gif:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: |-\n            Not Found\n            ユーザーが見つかりません。\n      operationId: getMyIcon\n      description: 自分のアイコン画像を取得します。\n    put:\n      summary: 自分のアイコン画像を変更\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n        '400':\n          description: Bad Request\n        '413':\n          description: Request Entity Too Large\n      description: 自分のアイコン画像を変更します。\n      operationId: changeMyIcon\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PutUserIconRequest'\n            encoding:\n              file:\n                contentType: 'image/png, image/jpeg, image/gif'\n      tags:\n        - me\n  /users/me/password:\n    put:\n      summary: 自分のパスワードを変更\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更できました。\n        '400':\n          description: Bad Request\n        '401':\n          description: |-\n            Unauthorized\n            現在のパスワードが違います。\n      tags:\n        - me\n      operationId: changeMyPassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutMyPasswordRequest'\n        description: ''\n      description: 自身のパスワードを変更します。\n  '/users/{userId}/password':\n    parameters:\n      - $ref: '#/components/parameters/userIdInPath'\n    put:\n      summary: ユーザーのパスワードを変更\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更できました。\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            ユーザーが見つかりません。\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutUserPasswordRequest'\n        description: ''\n      tags:\n        - user\n      operationId: changeUserPassword\n      description: |-\n        指定したユーザーのパスワードを変更します。\n        管理者権限が必要です。\n  /users/me/fcm-device:\n    post:\n      summary: FCMデバイスを登録\n      responses:\n        '204':\n          description: |-\n            No Content\n            登録できました。\n        '400':\n          description: Bad Request\n      tags:\n        - me\n        - notification\n      operationId: registerFCMDevice\n      description: 自身のFCMデバイスを登録します。\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostMyFCMDeviceRequest'\n  /users/me/view-states:\n    get:\n      summary: 自身のチャンネル閲覧状態一覧を取得\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: チャンネル閲覧状態\n                items:\n                  $ref: '#/components/schemas/MyChannelViewState'\n      operationId: getMyViewStates\n      tags:\n        - me\n        - notification\n      description: 自身のチャンネル閲覧状態一覧を取得します。\n  /users:\n    post:\n      summary: ユーザーを登録\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDetail'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '409':\n          description: |-\n            Conflict\n            nameが重複しています。\n      operationId: createUser\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostUserRequest'\n        description: ''\n      description: |-\n        ユーザーを登録します。\n        管理者権限が必要です。\n    get:\n      summary: ユーザーのリストを取得\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: ユーザー情報の配列\n                items:\n                  $ref: '#/components/schemas/User'\n        '400':\n          description: Bad Request\n      operationId: getUsers\n      tags:\n        - user\n      parameters:\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: include-suspended\n          description: アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか\n        - schema:\n            type: string\n          in: query\n          name: name\n          description: 名前が一致するアカウントのみを取得する\n      description: |-\n        ユーザーのリストを取得します。\n        `include-suspended`を指定しない場合、レスポンスにはユーザーアカウント状態が\"1: 有効\"であるユーザーのみが含まれます。\n        `include-suspended`と`name`を同時に指定することはできません。\n  /channels:\n    post:\n      summary: チャンネルを作成\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Channel'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '409':\n          description: |-\n            Conflict\n            指定した名前のチャンネルは既に存在しています。\n      operationId: createChannel\n      tags:\n        - channel\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostChannelRequest'\n      description: |-\n        チャンネルを作成します。\n        階層が6以上になるチャンネルは作成できません。\n    get:\n      summary: チャンネルリストを取得\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelList'\n      operationId: getChannels\n      tags:\n        - channel\n      description: チャンネルのリストを取得します。\n      parameters:\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: include-dm\n          description: ダイレクトメッセージチャンネルをレスポンスに含めるかどうか\n  '/users/{userId}/tags':\n    parameters:\n      - $ref: '#/components/parameters/userIdInPath'\n    get:\n      summary: ユーザーのタグリストを取得\n      tags:\n        - user\n        - user tag\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: ユーザータグの配列\n                items:\n                  $ref: '#/components/schemas/UserTag'\n        '404':\n          description: |-\n            Not Found\n            ユーザーが見つかりません。\n      description: 指定したユーザーのタグリストを取得します。\n      operationId: getUserTags\n    post:\n      summary: ユーザーにタグを追加\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserTag'\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            ユーザーが見つかりません。\n        '409':\n          description: |-\n            Conflict\n            既に追加されています。\n      tags:\n        - user\n        - user tag\n      operationId: addUserTag\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostUserTagRequest'\n        description: ''\n      description: |-\n        指定したユーザーに指定したタグを追加します。\n        Webhookユーザーにタグを追加することは出来ません。\n  '/users/{userId}/tags/{tagId}':\n    parameters:\n      - $ref: '#/components/parameters/userIdInPath'\n      - $ref: '#/components/parameters/tagIdInPath'\n    patch:\n      summary: ユーザーのタグを編集\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            ユーザーか、タグが見つかりません。\n      operationId: editUserTag\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchUserTagRequest'\n        description: ''\n      tags:\n        - user\n        - user tag\n      description: |-\n        指定したユーザーの指定したタグの状態を変更します。\n        他人の状態は変更できません。\n    delete:\n      summary: ユーザーからタグを削除します\n      responses:\n        '204':\n          description: |-\n            No Content\n            削除されました。\n        '403':\n          description: |-\n            Forbidden\n            タグがロックされていました。\n        '404':\n          description: |-\n            Not Found\n            ユーザーが見つかりません。\n      description: 既に存在しないタグを削除しようとした場合は204を返します。\n      operationId: removeUserTag\n      tags:\n        - user\n        - user tag\n  '/tags/{tagId}':\n    parameters:\n      - $ref: '#/components/parameters/tagIdInPath'\n    get:\n      summary: タグ情報を取得\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        '404':\n          description: Not Found\n      operationId: getTag\n      tags:\n        - user tag\n      description: 指定したタグの情報を取得します。\n  /users/me/tags:\n    get:\n      summary: 自分のタグリストを取得\n      tags:\n        - me\n        - user tag\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: ユーザータグの配列\n                items:\n                  $ref: '#/components/schemas/UserTag'\n      operationId: getMyUserTags\n      description: 自分に付けられているタグの配列を取得します。\n    post:\n      summary: 自分にタグを追加\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserTag'\n        '400':\n          description: Bad Request\n        '409':\n          description: |-\n            Conflict\n            既に追加されています。\n      tags:\n        - me\n        - user tag\n      operationId: addMyUserTag\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostUserTagRequest'\n        description: ''\n      description: 自分に新しくタグを追加します。\n  '/users/me/tags/{tagId}':\n    parameters:\n      - $ref: '#/components/parameters/tagIdInPath'\n    delete:\n      summary: 自分からタグを削除します\n      responses:\n        '204':\n          description: |-\n            No Content\n            削除されました。\n        '403':\n          description: |-\n            Forbidden\n            タグがロックされています。\n      description: 既に存在しないタグを削除しようとした場合は204を返します。\n      operationId: removeMyUserTag\n      tags:\n        - user tag\n        - me\n    patch:\n      summary: 自分のタグを編集\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            タグが見つかりません。\n      operationId: editMyUserTag\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchUserTagRequest'\n        description: ''\n      tags:\n        - user tag\n        - me\n      description: 自分の指定したタグの状態を変更します。\n  /users/me/stars:\n    get:\n      summary: スターチャンネルリストを取得\n      tags:\n        - me\n        - star\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: スターしているチャンネルのUUID配列\n                items:\n                  type: string\n                  format: uuid\n      operationId: getMyStars\n      description: 自分がスターしているチャンネルのUUIDの配列を取得します。\n    post:\n      summary: チャンネルをスターに追加\n      responses:\n        '204':\n          description: |-\n            No Content\n            スターしました。\n        '400':\n          description: Bad Request\n      tags:\n        - me\n        - star\n      operationId: addMyStar\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostStarRequest'\n      description: |-\n        指定したチャンネルをスターチャンネルに追加します。\n        スター済みのチャンネルIDを指定した場合、204を返します。\n        不正なチャンネルIDを指定した場合、400を返します。\n  '/users/me/stars/{channelId}':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    delete:\n      summary: チャンネルをスターから削除します\n      responses:\n        '204':\n          description: |-\n            No Content\n            削除されました。\n      tags:\n        - me\n        - star\n      description: 既にスターから削除されているチャンネルを指定した場合は204を返します。\n      operationId: removeMyStar\n  /users/me/unread:\n    get:\n      summary: 未読チャンネルを取得\n      tags:\n        - me\n        - notification\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: 未読チャンネル情報の配列\n                items:\n                  $ref: '#/components/schemas/UnreadChannel'\n      operationId: getMyUnreadChannels\n      description: 自分が現在未読のチャンネルの未読情報を取得します。\n  /version:\n    get:\n      summary: バージョンを取得\n      tags:\n        - public\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n      operationId: getServerVersion\n      description: サーバーバージョン及びサーバーフラグ情報を取得します。\n  /login:\n    post:\n      summary: ログイン\n      responses:\n        '204':\n          description: |-\n            No Content\n            ログインしました。\n        '302':\n          description: |-\n            Found\n            ログインしました。リダイレクトします。\n        '400':\n          description: Bad Request\n        '401':\n          description: |-\n            Unauthorized\n            認証情報が間違っています。\n        '403':\n          description: |-\n            Forbidden\n            ログインを試行したユーザーアカウントに問題があります。\n      tags:\n        - authentication\n      operationId: login\n      parameters:\n        - $ref: '#/components/parameters/redirectInQuery'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostLoginRequest'\n      description: ログインします。\n  /logout:\n    post:\n      summary: ログアウト\n      responses:\n        '204':\n          description: |-\n            No Content\n            ログアウトしました。\n        '302':\n          description: |-\n            Found\n            ログアウトしました。リダイレクトします。\n      tags:\n        - authentication\n      operationId: logout\n      parameters:\n        - $ref: '#/components/parameters/redirectInQuery'\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: all\n          description: 全てのセッションでログアウトするかどうか\n      description: ログアウトします。\n  /users/me/sessions:\n    get:\n      summary: 自分のログインセッションリストを取得\n      tags:\n        - authentication\n        - me\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: 有効なログインセッションの配列\n                items:\n                  $ref: '#/components/schemas/LoginSession'\n      operationId: getMySessions\n      description: 自分のログインセッションのリストを取得します。\n  '/users/me/sessions/{sessionId}':\n    parameters:\n      - $ref: '#/components/parameters/sessionIdInPath'\n    delete:\n      summary: セッションを無効化\n      responses:\n        '204':\n          description: |-\n            No Content\n            無効化しました。\n      operationId: revokeMySession\n      tags:\n        - authentication\n        - me\n      description: |-\n        指定した自分のセッションを無効化(ログアウト)します。\n        既に存在しない・無効化されているセッションを指定した場合も`204`を返します。\n  /activity/timeline:\n    get:\n      summary: アクテビティタイムラインを取得\n      tags:\n        - activity\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: メッセージの配列\n                items:\n                  $ref: '#/components/schemas/ActivityTimelineMessage'\n        '400':\n          description: Bad Request\n      description: |-\n        パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。\n        `all`が`true`でない場合、購読チャンネルのみのタイムラインを取得します\n      parameters:\n        - schema:\n            type: integer\n            minimum: 1\n            maximum: 50\n            default: 50\n          in: query\n          name: limit\n          description: 取得する件数\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: all\n          description: 全てのチャンネルのタイムラインを取得する\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: per_channel\n          description: 同じチャンネルのメッセージは最新のもののみ取得するか\n      operationId: getActivityTimeline\n  /ws:\n    get:\n      summary: WebSocket通知ストリームに接続します\n      tags:\n        - notification\n      responses:\n        '101':\n          description: Switching Protocols\n      operationId: ws\n      description: |-\n        # WebSocketプロトコル\n        ## 送信\n        `コマンド:引数1:引数2:...`のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できる。\n        ### `viewstate`コマンド\n        このWebSocketセッションが見ているチャンネル(イベントを受け取るチャンネル)を設定する。\n        現時点では1つのセッションに対して1つのチャンネルしか設定できない。\n\n        `viewstate:{チャンネルID}:{閲覧状態}`\n        + チャンネルID: 対象のチャンネルID\n        + 閲覧状態: `none`, `monitoring`, `editing`\n\n        最初の`viewstate`コマンドを送る前、または`viewstate:null`, `viewstate:`を送信した後は、このセッションはどこのチャンネルも見ていないことになる。\n\n        ### `rtcstate`コマンド\n        自分のWebRTC状態を変更する。\n        他のコネクションが既に状態を保持している場合、変更することができません。\n\n        `rtcstate:{チャンネルID}:({状態}:{セッションID})*`\n\n        コネクションが切断された場合、自分のWebRTC状態はリセットされます。\n\n        ### `timeline_streaming`コマンド\n        全てのパブリックチャンネルの`MESSAGE_CREATED`イベントを受け取るかどうかを設定する。\n        初期状態は`off`です。\n\n        `timeline_streaming:(on|off|true|false)`\n\n        ## 受信\n        TextMessageとして各種イベントが`type`と`body`を持つJSONとして非同期に送られます。\n\n        例:\n        ```json\n        {\"type\":\"USER_ONLINE\",\"body\":{\"id\":\"7dd8e07f-7f5d-4331-9176-b56a4299768b\"}}\n        ```\n\n        ## イベント一覧\n\n        ### `USER_JOINED`\n        ユーザーが新規登録された。\n\n        対象: 全員\n\n        + `id`: 登録されたユーザーのId\n\n        ### `USER_UPDATED`\n        ユーザーの情報が更新された。\n\n        対象: 全員\n\n        + `id`: 情報が更新されたユーザーのId\n\n        ### `USER_TAGS_UPDATED`\n        ユーザーのタグが更新された。\n\n        対象: 全員\n\n        + `id`: タグが更新されたユーザーのId\n        + `tag_id`: 更新されたタグのId\n\n        ### `USER_ICON_UPDATED`\n        ユーザーのアイコンが更新された。\n\n        対象: 全員\n\n        + `id`: アイコンが更新されたユーザーのId\n\n        ### `USER_WEBRTC_STATE_CHANGED`\n        ユーザーのWebRTCの状態が変化した\n\n        対象: 全員\n\n        + `user_id`: 変更があったユーザーのId\n        + `channel_id`: ユーザーの変更後の接続チャンネルのId\n        + `sessions`: ユーザーの変更後の状態(配列)\n          + `state`: 状態\n          + `sessionId`: セッションID\n\n        ### `USER_VIEWSTATE_CHANGED`\n        ユーザーのチャンネルの閲覧状態が変化した\n\n        対象: 変化したWSセッションを含めた、該当ユーザーのWSセッション全て\n\n        + `view_states`: 変化したWSセッションを含めた、該当ユーザーの変更後の状態(配列)\n          + `key`: WSセッションの識別子\n          + `channel_id`: 閲覧しているチャンネルId\n          + `state`: 閲覧状態\n\n        ### `USER_ONLINE`\n        ユーザーがオンラインになった。\n\n        対象: 全員\n\n        + `id`: オンラインになったユーザーのId\n\n        ### `USER_OFFLINE`\n        ユーザーがオフラインになった。\n\n        対象: 全員\n\n        + `id`: オフラインになったユーザーのId\n\n        ### `USER_GROUP_CREATED`\n        ユーザーグループが作成された\n\n        対象: 全員\n\n        + `id`: 作成されたユーザーグループのId\n\n        ### `USER_GROUP_UPDATED`\n        ユーザーグループが更新された\n\n        対象: 全員\n\n        + `id`: 作成されたユーザーグループのId\n\n        ### `USER_GROUP_DELETED`\n        ユーザーグループが削除された\n\n        対象: 全員\n\n        + `id`: 削除されたユーザーグループのId\n\n        ### `CHANNEL_CREATED`\n        チャンネルが新規作成された。\n\n        対象: 該当チャンネルを閲覧可能な全員\n\n        + `id`: 作成されたチャンネルのId\n        + `dm_user_id`: (DMの場合のみ) DM相手のユーザーId\n\n        ### `CHANNEL_UPDATED`\n        チャンネルの情報が変更された。\n\n        対象: 該当チャンネルを閲覧可能な全員\n\n        + `id`: 変更があったチャンネルのId\n        + `dm_user_id`: (DMの場合のみ) DM相手のユーザーId\n\n        ### `CHANNEL_DELETED`\n        チャンネルが削除された。\n\n        対象: 該当チャンネルを閲覧可能な全員\n\n        + `id`: 削除されたチャンネルのId\n        + `dm_user_id`: (DMの場合のみ) DM相手のユーザーId\n\n        ### `CHANNEL_STARED`\n        自分がチャンネルをスターした。\n\n        対象: 自分\n\n        + `id`: スターしたチャンネルのId\n\n        ### `CHANNEL_UNSTARED`\n        自分がチャンネルのスターを解除した。\n\n        対象: 自分\n\n        + `id`: スターしたチャンネルのId\n\n        ### `CHANNEL_VIEWERS_CHANGED`\n        チャンネルの閲覧者が変化した。\n\n        対象: 該当チャンネルを閲覧しているユーザー\n\n        + `id`: 変化したチャンネルのId\n        + `viewers`: 変化後の閲覧者(配列)\n          + `userId`: ユーザーId\n          + `state`: 閲覧状態\n          + `updatedAt`: 閲覧状態の更新日時\n\n        ### `CHANNEL_SUBSCRIBERS_CHANGED`\n        チャンネルの購読者が変化した。\n\n        対象: 該当チャンネルを閲覧しているユーザー\n\n        + `id`: 変化したチャンネルのId\n\n        ### `MESSAGE_CREATED`\n        メッセージが投稿された。\n\n        対象: 投稿チャンネルを閲覧しているユーザー・投稿チャンネルに通知をつけているユーザー・メンションを受けたユーザー\n\n        + `id`: 投稿されたメッセージのId\n        + `is_citing`: 投稿されたメッセージがWebSocketを接続しているユーザーの投稿を引用しているかどうか\n\n        ### `MESSAGE_UPDATED`\n        メッセージが更新された。\n\n        対象: 投稿チャンネルを閲覧しているユーザー\n\n        + `id`: 更新されたメッセージのId\n\n        ### `MESSAGE_DELETED`\n        メッセージが削除された。\n\n        対象: 投稿チャンネルを閲覧しているユーザー\n\n        + `id`: 削除されたメッセージのId\n\n        ### `MESSAGE_STAMPED`\n        メッセージにスタンプが押された。\n\n        対象: 投稿チャンネルを閲覧しているユーザー\n\n        + `message_id`: メッセージId\n        + `user_id`: スタンプを押したユーザーのId\n        + `stamp_id`: スタンプのId\n        + `count`: そのユーザーが押した数\n        + `created_at`: そのユーザーがそのスタンプをそのメッセージに最初に押した日時\n\n        ### `MESSAGE_UNSTAMPED`\n        メッセージからスタンプが外された。\n\n        対象: 投稿チャンネルを閲覧しているユーザー\n\n        + `message_id`: メッセージId\n        + `user_id`: スタンプを押したユーザーのId\n        + `stamp_id`: スタンプのId\n\n        ### `MESSAGE_PINNED`\n        メッセージがピン留めされた。\n\n        対象: 投稿チャンネルを閲覧しているユーザー\n\n        + `message_id`: ピンされたメッセージのID\n        + `channel_id`: ピンされたメッセージのチャンネルID\n\n        ### `MESSAGE_UNPINNED`\n        ピン留めされたメッセージのピンが外された。\n\n        対象: 投稿チャンネルを閲覧しているユーザー\n\n        + `message_id`: ピンが外されたメッセージのID\n        + `channel_id`: ピンが外されたメッセージのチャンネルID\n\n        ### `MESSAGE_READ`\n        自分があるチャンネルのメッセージを読んだ。\n\n        対象: 自分\n\n        + `id`: 読んだチャンネルId\n\n        ### `STAMP_CREATED`\n        スタンプが新しく追加された。\n\n        対象: 全員\n\n        + `id`: 作成されたスタンプのId\n\n        ### `STAMP_UPDATED`\n        スタンプが修正された。\n\n        対象: 全員\n\n        + `id`: 修正されたスタンプのId\n\n        ### `STAMP_DELETED`\n        スタンプが削除された。\n\n        対象: 全員\n\n        + `id`: 削除されたスタンプのId\n\n        ### `STAMP_PALETTE_CREATED`\n        スタンプパレットが新しく追加された。\n\n        対象: 自分\n\n        + `id`: 作成されたスタンプパレットのId\n\n        ### `STAMP_PALETTE_UPDATED`\n        スタンプパレットが修正された。\n\n        対象: 自分\n\n        + `id`: 修正されたスタンプパレットのId\n\n        ### `STAMP_PALETTE_DELETED`\n        スタンプパレットが削除された。\n\n        対象: 自分\n\n        + `id`: 削除されたスタンプパレットのId\n\n        ### `CLIP_FOLDER_CREATED`\n        クリップフォルダーが作成された。\n\n        対象：自分\n\n        + `id`: 作成されたクリップフォルダーのId\n\n        ### `CLIP_FOLDER_UPDATED`\n        クリップフォルダーが修正された。\n\n        対象: 自分\n\n        + `id`: 更新されたクリップフォルダーのId\n\n        ### `CLIP_FOLDER_DELETED`\n        クリップフォルダーが削除された。\n\n        対象: 自分\n\n        + `id`: 削除されたクリップフォルダーのId\n\n        ### `CLIP_FOLDER_MESSAGE_DELETED`\n        クリップフォルダーからメッセージが除外された。\n\n        対象: 自分\n\n        + `folder_id`: メッセージが除外されたクリップフォルダーのId\n        + `message_id`: クリップフォルダーから除外されたメッセージのId\n\n        ### `CLIP_FOLDER_MESSAGE_ADDED`\n        クリップフォルダーにメッセージが追加された。\n\n        対象: 自分\n\n        + `folder_id`: メッセージが追加されたクリップフォルダーのId\n        + `message_id`: クリップフォルダーに追加されたメッセージのId\n  /users/me/tokens:\n    get:\n      summary: 有効トークンのリストを取得\n      tags:\n        - oauth2\n        - me\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: トークン情報の配列\n                items:\n                  $ref: '#/components/schemas/ActiveOAuth2Token'\n      operationId: getMyTokens\n      description: 有効な自分に発行されたOAuth2トークンのリストを取得します。\n  '/users/me/tokens/{tokenId}':\n    parameters:\n      - $ref: '#/components/parameters/tokenIdInPath'\n    delete:\n      summary: トークンの認可を取り消す\n      responses:\n        '204':\n          description: |-\n            No Content\n            取り消しました。\n        '404':\n          description: Not Found\n      operationId: revokeMyToken\n      description: 自分の指定したトークンの認可を取り消します。\n      tags:\n        - oauth2\n        - me\n  '/public/icon/{username}':\n    parameters:\n      - name: username\n        in: path\n        required: true\n        description: ユーザー名\n        schema:\n          type: string\n          pattern: '^[a-zA-Z0-9_-]{1,32}$'\n    get:\n      summary: ユーザーのアイコン画像を取得\n      tags:\n        - public\n      responses:\n        '200':\n          description: OK\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/gif:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: Not Found\n      operationId: getPublicUserIcon\n      description: ユーザーのアイコン画像を取得します。\n  '/clients/{clientId}':\n    parameters:\n      - $ref: '#/components/parameters/clientIdInPath'\n    get:\n      summary: OAuth2クライアント情報を取得\n      tags:\n        - oauth2\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/OAuth2Client'\n                  - $ref: '#/components/schemas/OAuth2ClientDetail'\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      operationId: getClient\n      parameters:\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: detail\n          description: 詳細情報を含めるかどうか\n      description: |-\n        指定したOAuth2クライアントの情報を取得します。\n        詳細情報の取得には対象のクライアントの管理権限が必要です。\n    delete:\n      summary: OAuth2クライアントを削除\n      responses:\n        '204':\n          description: |-\n            No Content\n            削除されました。\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            OAuth2クライアントが見つかりません。\n      description: |-\n        指定したOAuth2クライアントを削除します。\n        対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。\n      operationId: deleteClient\n      tags:\n        - oauth2\n    patch:\n      summary: OAuth2クライアント情報を変更\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更できました。\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            OAuth2クライアントが見つかりません。\n      tags:\n        - oauth2\n      operationId: editClient\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchClientRequest'\n        description: ''\n      description: |-\n        指定したOAuth2クライアントの情報を変更します。\n        対象のクライアントの管理権限が必要です。\n        クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。\n  /clients:\n    get:\n      summary: OAuth2クライアントのリストを取得\n      tags:\n        - oauth2\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: OAuth2クライアント情報の配列\n                items:\n                  $ref: '#/components/schemas/OAuth2Client'\n      operationId: getClients\n      parameters:\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: all\n          description: 全てのクライアントを取得するかどうか\n      description: |-\n        自身が開発者のOAuth2クライアントのリストを取得します。\n        `all`が`true`の場合、全開発者の全クライアントのリストを返します。\n    post:\n      summary: OAuth2クライアントを作成\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuth2ClientDetail'\n        '400':\n          description: Bad Request\n      tags:\n        - oauth2\n      operationId: createClient\n      description: OAuth2クライアントを作成します。\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostClientRequest'\n  /bots:\n    post:\n      summary: BOTを作成\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BotDetail'\n        '400':\n          description: Bad Request\n        '409':\n          description: |-\n            Conflict\n            既に使われている名前です。\n      operationId: createBot\n      description: |-\n        BOTを作成します。\n        作成後に購読イベントの設定を行う必要があります。\n        さらにHTTP Modeの場合はアクティベーションを行う必要があります。\n      tags:\n        - bot\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostBotRequest'\n    get:\n      summary: BOTリストを取得\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: BOT情報の配列\n                items:\n                  $ref: '#/components/schemas/Bot'\n      operationId: getBots\n      parameters:\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: all\n          description: 全てのBOTを取得するかどうか\n      tags:\n        - bot\n      description: |-\n        BOT情報のリストを取得します。\n        allを指定しない場合、自分が開発者のBOTのみを返します。\n  /bots/ws:\n    get:\n      tags:\n        - bot\n      responses:\n        '101':\n          description: Switching Protocols\n      operationId: connectBotWS\n      summary: WebSocket Mode BOT用通知ストリームに接続します\n      description: |-\n        # BOT WebSocketプロトコル\n\n        ## 送信\n\n        `コマンド:引数1:引数2:...` のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。\n\n        ### `rtcstate`コマンド\n        自分のWebRTC状態を変更します。\n        他のコネクションが既に状態を保持している場合、変更することができません。\n\n        `rtcstate:{チャンネルID}:({状態}:{セッションID})*`\n\n        チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。\n\n        `rtcstate:null`, `rtcstate:`, `rtcstate:channelId:null`, `rtcstate:channelId:`\n\n        コネクションが切断された場合、自分のWebRTC状態はリセットされます。\n\n        ## 受信\n\n        TextMessageとして各種イベントが`type`、`reqId`、`body`を持つJSONとして非同期に送られます。\n        `body`の内容はHTTP Modeの場合のRequest Bodyと同様です。\n        例外として`ERROR`イベントは`reqId`を持ちません。\n\n        例: PINGイベント\n        `{\"type\":\"PING\",\"reqId\":\"requestId\",\"body\":{\"eventTime\":\"2019-05-07T04:50:48.582586882Z\"}}`\n\n        ### `ERROR`\n\n        コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。\n        非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。\n        本番環境ではERRORが送られないようにすることが望ましいです。\n\n        `{\"type\":\"ERROR\",\"body\":\"message\"}`\n\n  '/bots/{botId}/icon':\n    parameters:\n      - $ref: '#/components/parameters/botIdInPath'\n    get:\n      summary: BOTのアイコン画像を取得\n      responses:\n        '200':\n          description: OK\n          content:\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n            image/gif:\n              schema:\n                type: string\n                format: binary\n            image/png:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: |-\n            Not Found\n            BOTが見つかりません。\n      operationId: getBotIcon\n      tags:\n        - bot\n      description: 指定したBOTのアイコン画像を取得を取得します。\n    put:\n      summary: BOTのアイコン画像を変更\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更されました。\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            BOTが見つかりません。\n        '413':\n          description: Request Entity Too Large\n      operationId: changeBotIcon\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PutUserIconRequest'\n            encoding:\n              file:\n                contentType: 'image/png, image/jpeg, image/gif'\n      tags:\n        - bot\n      description: |-\n        指定したBOTのアイコン画像を変更を変更します。\n        対象のBOTの管理権限が必要です。\n  '/bots/{botId}':\n    parameters:\n      - $ref: '#/components/parameters/botIdInPath'\n    get:\n      summary: BOT情報を取得\n      tags:\n        - bot\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Bot'\n                  - $ref: '#/components/schemas/BotDetail'\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      operationId: getBot\n      parameters:\n        - schema:\n            type: boolean\n            default: false\n          in: query\n          name: detail\n          description: 詳細情報を含めるかどうか\n      description: |-\n        指定したBOTのBOT情報を取得します。\n        BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。\n    delete:\n      summary: BOTを削除\n      responses:\n        '204':\n          description: |-\n            No Content\n            削除しました。\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      operationId: deleteBot\n      tags:\n        - bot\n      description: |-\n        指定したBOTを削除します。\n        対象のBOTの管理権限が必要です。\n    patch:\n      summary: BOT情報を変更\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更しました。\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n      operationId: editBot\n      description: |-\n        指定したBOTの情報を変更します。\n        対象のBOTの管理権限が必要です。\n        BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。\n      tags:\n        - bot\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchBotRequest'\n        description: ''\n  '/bots/{botId}/actions/activate':\n    parameters:\n      - $ref: '#/components/parameters/botIdInPath'\n    post:\n      summary: BOTをアクティベート\n      responses:\n        '202':\n          description: Accepted\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            BOTが見つかりません。\n      operationId: activateBot\n      tags:\n        - bot\n      description: |-\n        指定したBOTを有効化します。\n        対象のBOTの管理権限が必要です。\n  '/bots/{botId}/actions/inactivate':\n    parameters:\n      - $ref: '#/components/parameters/botIdInPath'\n    post:\n      summary: BOTをインアクティベート\n      responses:\n        '204':\n          description: |-\n            No Content\n            BOTがインアクティベートされました。\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            BOTが見つかりません。\n      tags:\n        - bot\n      operationId: inactivateBot\n      description: 指定したBOTを無効化します。対象のBOTの管理権限が必要です。\n  '/bots/{botId}/actions/reissue':\n    parameters:\n      - $ref: '#/components/parameters/botIdInPath'\n    post:\n      summary: BOTのトークンを再発行\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BotTokens'\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            BOTが見つかりません。\n      operationId: reissueBot\n      tags:\n        - bot\n      description: |-\n        指定したBOTの現在の各種トークンを無効化し、再発行を行います。\n        対象のBOTの管理権限が必要です。\n  '/bots/{botId}/logs':\n    parameters:\n      - $ref: '#/components/parameters/botIdInPath'\n    get:\n      summary: BOTのイベントログを取得\n      tags:\n        - bot\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: イベントログの配列\n                items:\n                  $ref: '#/components/schemas/BotEventLog'\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            BOTが見つかりません。\n      operationId: getBotLogs\n      parameters:\n        - $ref: '#/components/parameters/limitInQuery'\n        - $ref: '#/components/parameters/offsetInQuery'\n      description: |-\n        指定したBOTのイベントログを取得します。\n        対象のBOTの管理権限が必要です。\n  '/bots/{botId}/actions/join':\n    parameters:\n      - $ref: '#/components/parameters/botIdInPath'\n    post:\n      summary: BOTをチャンネルに参加させる\n      responses:\n        '204':\n          description: |-\n            No Content\n            BOTを参加させました。\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            BOTが見つかりません。\n      description: |-\n        指定したBOTを指定したチャンネルに参加させます。\n        チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。\n        対象のBOTの管理権限が必要です。\n      operationId: letBotJoinChannel\n      tags:\n        - bot\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostBotActionJoinRequest'\n  '/bots/{botId}/actions/leave':\n    parameters:\n      - $ref: '#/components/parameters/botIdInPath'\n    post:\n      summary: BOTをチャンネルから退出させる\n      responses:\n        '204':\n          description: |-\n            No Content\n            BOTを退出させました。\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: |-\n            Not Found\n            BOTが見つかりません。\n      tags:\n        - bot\n      operationId: letBotLeaveChannel\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostBotActionLeaveRequest'\n      description: |-\n        指定したBOTを指定したチャンネルから退出させます。\n        対象のBOTの管理権限が必要です。\n  '/channels/{channelId}/bots':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    get:\n      summary: チャンネル参加中のBOTのリストを取得\n      tags:\n        - bot\n        - channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: BOTの配列\n                items:\n                  $ref: '#/components/schemas/BotUser'\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      operationId: getChannelBots\n      description: 指定したチャンネルに参加しているBOTのリストを取得します。\n  /webrtc/authenticate:\n    post:\n      summary: Skyway用認証API\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebRTCAuthenticateResult'\n        '400':\n          description: Bad Request\n        '503':\n          description: |-\n            Service Unavailable\n            WebRTCは現在機能を停止しています\n      description: Skyway WebRTC用の認証API\n      operationId: postWebRTCAuthenticate\n      tags:\n        - webrtc\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostWebRTCAuthenticateRequest'\n  '/channels/{channelId}':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    get:\n      summary: チャンネル情報を取得\n      tags:\n        - channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Channel'\n        '404':\n          description: Not Found\n      operationId: getChannel\n      description: 指定したチャンネルの情報を取得します。\n    patch:\n      summary: チャンネル情報を変更\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n        '403':\n          description: Forbidden\n        '404':\n          description: Not Found\n        '409':\n          description: |-\n            Conflict\n            変更後の名前のチャンネルが既に存在しています。\n      operationId: editChannel\n      tags:\n        - channel\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchChannelRequest'\n      description: |-\n        指定したチャンネルの情報を変更します。\n        変更には権限が必要です。\n        ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。\n  /webrtc/state:\n    get:\n      summary: WebRTC状態を取得\n      tags:\n        - webrtc\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebRTCUserStates'\n      operationId: getWebRTCState\n      description: 現在のWebRTC状態を取得します。\n  /clip-folders:\n    post:\n      summary: クリップフォルダを作成\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClipFolder'\n        '400':\n          description: Bad Request\n      operationId: createClipFolder\n      tags:\n        - clip\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostClipFolderRequest'\n      description: |-\n        クリップフォルダを作成します。\n        既にあるフォルダと同名のフォルダを作成することは可能です。\n    get:\n      summary: クリップフォルダのリストを取得\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: クリップフォルダの配列\n                items:\n                  $ref: '#/components/schemas/ClipFolder'\n      tags:\n        - clip\n      operationId: getClipFolders\n      parameters: []\n      description: 自身が所有するクリップフォルダのリストを取得します。\n  '/clip-folders/{folderId}':\n    parameters:\n      - $ref: '#/components/parameters/folderIdInPath'\n    get:\n      summary: クリップフォルダ情報を取得\n      tags:\n        - clip\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClipFolder'\n        '404':\n          description: |-\n            Not Found\n            クリップフォルダが見つかりません。\n      operationId: getClipFolder\n      description: 指定したクリップフォルダの情報を取得します。\n    delete:\n      summary: クリップフォルダを削除\n      responses:\n        '204':\n          description: |-\n            No Content\n            削除しました。\n        '404':\n          description: |-\n            Not Found\n            クリップフォルダが見つかりません。\n      operationId: deleteClipFolder\n      tags:\n        - clip\n      description: 指定したクリップフォルダを削除します。\n    patch:\n      summary: クリップフォルダ情報を編集\n      responses:\n        '204':\n          description: |-\n            No Content\n            編集しました。\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n      operationId: editClipFolder\n      tags:\n        - clip\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchClipFolderRequest'\n      description: 指定したクリップフォルダの情報を編集します。\n  '/clip-folders/{folderId}/messages':\n    parameters:\n      - $ref: '#/components/parameters/folderIdInPath'\n    post:\n      summary: メッセージをクリップフォルダに追加\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClippedMessage'\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            クリップフォルダが見つかりません。\n        '409':\n          description: |-\n            Conflict\n            既に追加されています。\n      operationId: clipMessage\n      tags:\n        - clip\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostClipFolderMessageRequest'\n      description: 指定したメッセージを指定したクリップフォルダに追加します。\n    get:\n      summary: フォルダ内のクリップのリストを取得\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: クリップの配列\n                items:\n                  $ref: '#/components/schemas/ClippedMessage'\n        '404':\n          description: |-\n            Not Found\n            クリップフォルダが見つかりません。\n      operationId: getClips\n      parameters:\n        - $ref: '#/components/parameters/limitInQuery'\n        - $ref: '#/components/parameters/offsetInQuery'\n        - $ref: '#/components/parameters/orderInQuery'\n      tags:\n        - clip\n      description: |-\n        指定したフォルダ内のクリップのリストを取得します。\n        `order`を指定しない場合、クリップした日時の新しい順で返されます。\n  '/clip-folders/{folderId}/messages/{messageId}':\n    parameters:\n      - $ref: '#/components/parameters/folderIdInPath'\n      - $ref: '#/components/parameters/messageIdInPath'\n    delete:\n      summary: メッセージをクリップフォルダから除外\n      responses:\n        '204':\n          description: |-\n            No Content\n            外しました。\n        '404':\n          description: |-\n            Not Found\n            クリップフォルダが見つかりません。\n      operationId: unclipMessage\n      description: |-\n        指定したフォルダから指定したメッセージのクリップを除外します。\n        既に外されているメッセージを指定した場合は204を返します。\n      tags:\n        - clip\n  '/webhooks/{webhookId}/messages':\n    parameters:\n      - $ref: '#/components/parameters/webhookIdInPath'\n    get:\n      summary: Webhookの投稿メッセージのリストを取得\n      tags:\n        - webhook\n      operationId: getWebhookMessages\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: メッセージの配列\n                items:\n                  $ref: '#/components/schemas/Message'\n          headers:\n            X-TRAQ-MORE:\n              $ref: '#/components/headers/X-TRAQ-MORE'\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            Webhookが見つかりません。\n      parameters:\n        - $ref: '#/components/parameters/limitInQuery'\n        - $ref: '#/components/parameters/offsetInQuery'\n        - $ref: '#/components/parameters/sinceInQuery'\n        - $ref: '#/components/parameters/untilInQuery'\n        - $ref: '#/components/parameters/inclusiveInQuery'\n        - $ref: '#/components/parameters/orderInQuery'\n      description: 指定されたWebhookが投稿したメッセージのリストを返します。\n  '/channels/{channelId}/events':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    get:\n      summary: チャンネルイベントのリストを取得\n      tags:\n        - channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: チャンネルイベントの配列\n                items:\n                  $ref: '#/components/schemas/ChannelEvent'\n          headers:\n            X-TRAQ-MORE:\n              $ref: '#/components/headers/X-TRAQ-MORE'\n        '400':\n          description: Bad Request\n        '404':\n          description: |-\n            Not Found\n            チャンネルが見つかりません。\n      operationId: getChannelEvents\n      parameters:\n        - $ref: '#/components/parameters/limitInQuery'\n        - $ref: '#/components/parameters/offsetInQuery'\n        - $ref: '#/components/parameters/sinceInQuery'\n        - $ref: '#/components/parameters/untilInQuery'\n        - $ref: '#/components/parameters/inclusiveInQuery'\n        - $ref: '#/components/parameters/orderInQuery'\n      description: 指定したチャンネルのイベントリストを取得します。\n  /stamp-palettes:\n    get:\n      summary: スタンプパレットのリストを取得\n      tags:\n        - stamp\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: スタンプパレットの配列\n                items:\n                  $ref: '#/components/schemas/StampPalette'\n      operationId: getStampPalettes\n      description: 自身が所有しているスタンプパレットのリストを取得します。\n    post:\n      summary: スタンプパレットを作成\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StampPalette'\n        '400':\n          description: Bad Request\n      tags:\n        - stamp\n      description: スタンプパレットを作成します。\n      operationId: createStampPalette\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostStampPaletteRequest'\n  '/stamp-palettes/{paletteId}':\n    parameters:\n      - $ref: '#/components/parameters/paletteIdInPath'\n    get:\n      summary: スタンプパレットを取得\n      tags:\n        - stamp\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StampPalette'\n        '404':\n          description: Not Found\n      operationId: getStampPalette\n      description: 指定したスタンプパレットの情報を取得します。\n    delete:\n      summary: スタンプパレットを削除\n      responses:\n        '204':\n          description: |-\n            No Content\n            削除しました。\n        '403':\n          description: |-\n            Forbidden\n            対象のスタンプパレットを削除する権限がありません。\n        '404':\n          description: Not Found\n      operationId: deleteStampPalette\n      description: |-\n        指定したスタンプパレットを削除します。\n        対象のスタンプパレットの管理権限が必要です。\n      tags:\n        - stamp\n    patch:\n      summary: スタンプパレットを編集\n      responses:\n        '204':\n          description: |-\n            No Content\n            変更しました。\n        '400':\n          description: Bad Request\n        '403':\n          description: |-\n            Forbidden\n            対象のスタンプパレットを編集する権限がありません。\n        '404':\n          description: Not Found\n      operationId: editStampPalette\n      tags:\n        - stamp\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchStampPaletteRequest'\n      description: |-\n        指定したスタンプパレットを編集します。\n        リクエストのスタンプの配列の順番は保存されて変更されます。\n        対象のスタンプパレットの管理権限が必要です。\n  /activity/onlines:\n    get:\n      summary: オンラインユーザーリストを取得\n      tags:\n        - activity\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: ユーザーのUUID配列\n                items:\n                  type: string\n      operationId: getOnlineUsers\n      description: 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。\n  '/stamps/{stampId}/image':\n    parameters:\n      - $ref: '#/components/parameters/stampIdInPath'\n    get:\n      summary: スタンプ画像を取得\n      tags:\n        - stamp\n      responses:\n        '200':\n          description: OK\n          content:\n            image/png:\n              schema:\n                type: string\n                format: binary\n            image/gif:\n              schema:\n                type: string\n                format: binary\n            image/jpeg:\n              schema:\n                type: string\n                format: binary\n        '404':\n          description: Not Found\n      operationId: getStampImage\n      description: 指定したIDのスタンプ画像を返します。\n    put:\n      summary: スタンプ画像を変更\n      operationId: changeStampImage\n      responses:\n        '204':\n          description: No Content\n        '400':\n          description: Bad Request\n        '404':\n          description: Not Found\n        '413':\n          description: Request Entity Too Large\n      tags:\n        - stamp\n      description: 指定したスタンプの画像を変更します。\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              format: binary\n              properties:\n                file:\n                  type: string\n                  format: binary\n                  description: 'スタンプ画像(1MBまでのpng, jpeg, gif)'\n              required:\n                - file\n        description: ''\n  '/users/me/unread/{channelId}':\n    parameters:\n      - $ref: '#/components/parameters/channelIdInPath'\n    delete:\n      summary: チャンネルを既読にする\n      operationId: readChannel\n      responses:\n        '204':\n          description: |-\n            No Content\n            既読にしました。\n      description: 自分が未読のチャンネルを既読にします。\n      tags:\n        - me\n        - notification\n  '/groups/{groupId}/admins/{userId}':\n    parameters:\n      - $ref: '#/components/parameters/groupIdInPath'\n      - $ref: '#/components/parameters/userIdInPath'\n    delete:\n      summary: グループ管理者を削除\n      responses:\n        '204':\n          description: |-\n            No Content\n            指定したユーザーがユーザーグループ管理者から削除されました。\n        '400':\n          description: Bad Request\n        '403':\n          description: |-\n            Forbidden\n            ユーザーグループを操作する権限がありません。\n        '404':\n          description: |-\n            Not Found\n            ユーザーグループが見つかりません。\n      tags:\n        - group\n      operationId: removeUserGroupAdmin\n      description: |-\n        指定したユーザーグループから指定した管理者を削除します。\n        対象のユーザーグループの管理者権限が必要です。\n        グループから管理者が存在しなくなる場合は400エラーを返します。\n  '/groups/{groupId}/admins':\n    parameters:\n      - $ref: '#/components/parameters/groupIdInPath'\n    post:\n      summary: グループ管理者を追加\n      responses:\n        '204':\n          description: |-\n            No Content\n            追加されました。\n        '400':\n          description: Bad Request\n        '403':\n          description: |-\n            Forbidden\n            ユーザーグループを操作する権限がありません。\n        '404':\n          description: |-\n            Not Found\n            ユーザーグループが見つかりません。\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostUserGroupAdminRequest'\n        description: ''\n      tags:\n        - group\n      operationId: addUserGroupAdmin\n      description: |-\n        指定したグループに管理者を追加します。\n        対象のユーザーグループの管理者権限が必要です。\n    get:\n      summary: グループ管理者を取得\n      tags:\n        - group\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: ユーザーグループ管理者のUUIDの配列\n                items:\n                  type: string\n                  format: uuid\n        '404':\n          description: |-\n            Not Found\n            ユーザーグループが見つかりません。\n      operationId: getUserGroupAdmins\n      description: 指定したグループの管理者のリストを取得します。\n  /oauth2/token:\n    post:\n      tags:\n        - oauth2\n      operationId: postOAuth2Token\n      description: OAuth2 トークンエンドポイント\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PostOAuth2Token'\n      responses:\n        '200':\n          description: トークンが正常に発行されました。\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuth2Token'\n        '400':\n          description: トークン発行に失敗しました。\n        '403':\n          description: トークン発行に失敗しました。\n      summary: OAuth2 トークンエンドポイント\n  /oauth2/authorize/decide:\n    post:\n      tags:\n        - oauth2\n      operationId: postOAuth2AuthorizeDecide\n      description: OAuth2 認可承諾\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/OAuth2Decide'\n      responses:\n        '302':\n          description: RedirectURIに結果をリダイレクトします。\n        '400':\n          description: リクエストが不正です。\n        '403':\n          description: リクエストが許可されていません。\n      summary: OAuth2 認可承諾API\n  /oauth2/authorize:\n    get:\n      tags:\n        - oauth2\n      operationId: getOAuth2Authorize\n      description: OAuth2 認可エンドポイント\n      parameters:\n        - name: response_type\n          in: query\n          schema:\n            $ref: '#/components/schemas/OAuth2ResponseType'\n        - name: client_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: redirect_uri\n          in: query\n          schema:\n            type: string\n        - name: scope\n          in: query\n          schema:\n            type: string\n        - name: state\n          in: query\n          schema:\n            type: string\n        - name: code_challenge\n          in: query\n          schema:\n            type: string\n        - name: code_challenge_method\n          in: query\n          schema:\n            type: string\n        - name: nonce\n          in: query\n          schema:\n            type: string\n        - name: prompt\n          in: query\n          schema:\n            $ref: '#/components/schemas/OAuth2Prompt'\n      responses:\n        '302':\n          description: 結果に応じてリダイレクトします。\n        '400':\n          description: リクエストが不正です。\n        '403':\n          description: リクエストが許可されていません。\n      summary: OAuth2 認可エンドポイント\n    post:\n      tags:\n        - oauth2\n      operationId: postOAuth2Authorize\n      description: OAuth2 認可エンドポイント\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/OAuth2Authorization'\n      responses:\n        '302':\n          description: 結果に応じてリダイレクトします。\n        '400':\n          description: リクエストが不正です。\n        '403':\n          description: リクエストが許可されていません。\n      summary: OAuth2 認可エンドポイント\n  /oauth2/revoke:\n    post:\n      summary: OAuth2 トークン無効化エンドポイント\n      operationId: revokeOAuth2Token\n      responses:\n        '200':\n          description: OK\n      description: OAuth2 トークン無効化エンドポイント\n      tags:\n        - oauth2\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/OAuth2Revoke'\n  /users/me/ex-accounts:\n    get:\n      summary: 外部ログインアカウント一覧を取得\n      tags:\n        - authentication\n        - me\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                description: 紐付けられているアカウントの配列\n                items:\n                  $ref: '#/components/schemas/ExternalProviderUser'\n      operationId: getMyExternalAccounts\n      description: 自分に紐付けられている外部ログインアカウント一覧を取得します。\n    parameters: []\n  /users/me/ex-accounts/link:\n    post:\n      summary: 外部ログインアカウントを紐付ける\n      operationId: linkExternalAccount\n      responses:\n        '302':\n          description: |-\n            Found\n            外部サービスの認証画面に遷移します。\n        '400':\n          description: Bad Request\n      tags:\n        - authentication\n        - me\n      description: |-\n        自分に外部ログインアカウントを紐付けます。\n        指定した`providerName`がサーバー側で有効である必要があります。\n        リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostLinkExternalAccount'\n  /users/me/ex-accounts/unlink:\n    post:\n      summary: 外部ログインアカウントの紐付けを解除\n      operationId: unlinkExternalAccount\n      responses:\n        '204':\n          description: |-\n            No Content\n            紐付けを解除しました。\n        '400':\n          description: Bad Request\n      description: 自分に紐付けられている外部ログインアカウントの紐付けを解除します。\n      tags:\n        - authentication\n        - me\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PostUnlinkExternalAccount'\n  '/users/{userId}/dm-channel':\n    parameters:\n      - schema:\n          type: string\n        name: userId\n        in: path\n        required: true\n    get:\n      summary: DMチャンネル情報を取得\n      tags:\n        - user\n        - channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DMChannel'\n        '404':\n          description: |\n            Not Found\n            ユーザーが見つかりません。\n      operationId: getUserDMChannel\n      description: |-\n        指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。\n        ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。\n  '/messages/{messageId}/clips':\n    parameters:\n      - $ref: '#/components/parameters/messageIdInPath'\n    get:\n      summary: 自分のクリップを取得\n      tags:\n        - message\n        - clip\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MessageClip'\n        '404':\n          description: |\n            Not Found\n      operationId: getMessageClips\n      description: 対象のメッセージの自分のクリップの一覧を返します。\n  /ogp:\n    get:\n      summary: OGP情報を取得\n      tags:\n        - ogp\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ogp'\n        '400':\n          description: 指定したURLが不正です。\n        '404':\n          description: 指定したURLに対するOGP情報が見つかりませんでした。\n      operationId: getOgp\n      description: OGP情報を取得します。\n      parameters:\n        - schema:\n            type: string\n          in: query\n          required: true\n          name: url\n          description: OGPを取得したいURL\n  /users/me/settings:\n    get:\n      summary: ユーザー設定を取得\n      description: ユーザー設定を取得します。\n      operationId: getUserSettings\n      tags:\n        - me\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserSettings'\n  /users/me/settings/notify-citation:\n    get:\n      summary: メッセージ引用通知の設定情報を取得\n      description: メッセージ引用通知の設定情報を変更します。\n      operationId: getMyNotifyCitation\n      tags:\n        - me\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetNotifyCitation'\n    put:\n      summary: メッセージ引用通知の設定情報を変更\n      responses:\n        '204':\n          description: 変更できました。\n        '400':\n          description: Bad Request\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutNotifyCitationRequest'\n        description: ''\n      tags:\n        - me\n      operationId: changeMyNotifyCitation\n      description: メッセージ引用通知の設定情報を変更します\n\ncomponents:\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: r_session\n    OAuth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: /api/v3/oauth2/authorize\n          tokenUrl: /api/v3/oauth2/token\n          scopes:\n            read: 読み取りスコープ\n            write: 書き込みスコープ\n            manage_bot: bot関連読み書きスコープ\n    bearerAuth:\n      type: http\n      scheme: bearer\n  schemas:\n    Message:\n      title: Message\n      type: object\n      description: メッセージ\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: メッセージUUID\n        userId:\n          type: string\n          description: 投稿者UUID\n          format: uuid\n        channelId:\n          type: string\n          description: チャンネルUUID\n          format: uuid\n        content:\n          type: string\n          description: メッセージ本文\n        createdAt:\n          type: string\n          format: date-time\n          description: 投稿日時\n        updatedAt:\n          type: string\n          format: date-time\n          description: 編集日時\n        pinned:\n          description: ピン留めされているかどうか\n          type: boolean\n        stamps:\n          type: array\n          description: 押されているスタンプの配列\n          items:\n            $ref: '#/components/schemas/MessageStamp'\n        threadId:\n          type: string\n          format: uuid\n          description: スレッドUUID\n          nullable: true\n      required:\n        - id\n        - userId\n        - channelId\n        - content\n        - createdAt\n        - updatedAt\n        - pinned\n        - stamps\n        - threadId\n    MessageStamp:\n      title: MessageStamp\n      type: object\n      description: メッセージに押されたスタンプ\n      properties:\n        userId:\n          type: string\n          format: uuid\n          description: ユーザーUUID\n        stampId:\n          type: string\n          format: uuid\n          description: スタンプUUID\n        count:\n          type: integer\n          description: スタンプ数\n          format: int32\n        createdAt:\n          type: string\n          description: スタンプが最初に押された日時\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n          description: スタンプが最後に押された日時\n      required:\n        - userId\n        - stampId\n        - count\n        - createdAt\n        - updatedAt\n    StampStats:\n      title: StampStats\n      type: object\n      description: スタンプ統計情報\n      properties:\n        count:\n          type: integer\n          format: int64\n          description: スタンプ使用総数(同じユーザによって同じメッセージに貼られたものは複数カウントしない)\n        totalCount:\n          type: integer\n          format: int64\n          description: スタンプ使用総数(全てカウント)\n      required:\n        - count\n        - totalCount\n    Pin:\n      title: Pin\n      type: object\n      description: ピン情報(メッセージ本体付き)\n      properties:\n        userId:\n          type: string\n          format: uuid\n          description: ピン留めしたユーザーUUID\n        pinnedAt:\n          type: string\n          format: date-time\n          description: ピン留めされた日時\n        message:\n          $ref: '#/components/schemas/Message'\n      required:\n        - userId\n        - pinnedAt\n        - message\n    Channel:\n      title: Channel\n      type: object\n      description: チャンネル\n      properties:\n        id:\n          type: string\n          description: チャンネルUUID\n          format: uuid\n        parentId:\n          type: string\n          format: uuid\n          description: 親チャンネルUUID\n          nullable: true\n        archived:\n          type: boolean\n          description: チャンネルがアーカイブされているかどうか\n        force:\n          type: boolean\n          description: 強制通知チャンネルかどうか\n        topic:\n          type: string\n          description: チャンネルトピック\n        name:\n          type: string\n          description: チャンネル名\n          pattern: '^[a-zA-Z0-9-_]{1,20}$'\n        children:\n          type: array\n          description: 子チャンネルのUUID配列\n          items:\n            type: string\n            format: uuid\n      required:\n        - id\n        - parentId\n        - archived\n        - force\n        - topic\n        - name\n        - children\n    PostMessageRequest:\n      title: PostMessageRequest\n      type: object\n      description: メッセージ投稿リクエスト\n      properties:\n        content:\n          type: string\n          description: メッセージ本文\n          minLength: 1\n          maxLength: 10000\n        embed:\n          type: boolean\n          default: false\n          description: メンション・チャンネルリンクを自動埋め込みするか\n      required:\n        - content\n    ChannelStats:\n      title: ChannelStats\n      type: object\n      description: チャンネル統計情報\n      properties:\n        totalMessageCount:\n          type: integer\n          format: int64\n          description: チャンネルの総投稿メッセージ数(削除されたものも含む)\n        stamps:\n          type: array\n          description: チャンネル上のスタンプ統計情報\n          items:\n            $ref: '#/components/schemas/ChannelStatsStamp'\n        users:\n          type: array\n          description: チャンネル上のユーザー統計情報\n          items:\n            $ref: '#/components/schemas/ChannelStatsUser'\n        datetime:\n          type: string\n          format: date-time\n          description: 統計情報日時\n      required:\n        - totalMessageCount\n        - stamps\n        - users\n        - datetime\n    ChannelStatsStamp:\n      title: ChannelStatsStamp\n      type: object\n      description: チャンネル上の特定スタンプ統計情報\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: スタンプID\n        count:\n          type: integer\n          format: int64\n          description: スタンプ数(同一メッセージ上のものは複数カウントしない)\n        total:\n          type: integer\n          format: int64\n          description: スタンプ数(同一メッセージ上のものも複数カウントする)\n      required:\n        - id\n        - count\n        - total\n    ChannelStatsUser:\n      title: ChannelStatsUser\n      type: object\n      description: チャンネル上の特定ユーザー統計情報\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: ユーザーID\n        messageCount:\n          type: integer\n          format: int64\n          description: メッセージ数\n      required:\n        - id\n        - messageCount\n    ChannelTopic:\n      title: ChannelTopic\n      type: object\n      description: チャンネルトピック\n      properties:\n        topic:\n          type: string\n          description: トピック\n      required:\n        - topic\n    PutChannelTopicRequest:\n      title: PutChannelTopicRequest\n      type: object\n      description: チャンネルトピック編集リクエスト\n      properties:\n        topic:\n          type: string\n          description: トピック\n          maxLength: 200\n      required:\n        - topic\n    ChannelViewer:\n      title: ChannelViewer\n      type: object\n      description: チャンネル閲覧者情報\n      properties:\n        userId:\n          type: string\n          format: uuid\n          description: ユーザーUUID\n        state:\n          $ref: '#/components/schemas/ChannelViewState'\n        updatedAt:\n          type: string\n          format: date-time\n          description: 更新日時\n      required:\n        - userId\n        - state\n        - updatedAt\n    MyChannelViewState:\n      title: MyChannelViewState\n      type: object\n      description: 自身のチャンネル閲覧状態\n      properties:\n        key:\n          type: string\n          description: WSセッションの識別子\n        channelId:\n          type: string\n          format: uuid\n          description: チャンネルUUID\n        state:\n          $ref: '#/components/schemas/ChannelViewState'\n      required:\n        - key\n        - channelId\n        - state\n    ChannelViewState:\n      type: string\n      title: ChannelViewState\n      enum:\n        - none\n        - monitoring\n        - editing\n      x-enum-descriptions:\n        - バックグランド表示中\n        - メッセージ表示中\n        - メッセージ入力中\n      description: 閲覧状態\n    PostFileRequest:\n      title: PostFileRequest\n      type: object\n      description: ファイルアップロードリクエスト\n      properties:\n        file:\n          type: string\n          format: binary\n          description: ファイル本体\n        channelId:\n          type: string\n          format: uuid\n          description: アップロード先チャンネルUUID\n      required:\n        - file\n        - channelId\n    ThumbnailType:\n      title: ThumbnailType\n      type: string\n      default: image\n      description: |\n        サムネイル画像のタイプ\n      enum:\n        - image\n        - waveform\n      x-enum-descriptions:\n        - アップロード画像に対して生成される通常のサムネイル\n        - アップロード音声ファイルに対して生成される波形画像\n    ThumbnailInfo:\n      type: object\n      properties:\n        type:\n          $ref: '#/components/schemas/ThumbnailType'\n        mime:\n          type: string\n          description: MIMEタイプ\n        width:\n          type: integer\n          format: int32\n          description: サムネイル幅\n        height:\n          type: integer\n          format: int32\n          description: サムネイル高さ\n      required:\n        - type\n        - mime\n    FileInfo:\n      title: FileInfo\n      type: object\n      description: ファイル情報\n      properties:\n        id:\n          type: string\n          description: ファイルUUID\n          format: uuid\n        name:\n          type: string\n          description: ファイル名\n        mime:\n          type: string\n          description: MIMEタイプ\n        size:\n          type: integer\n          format: int64\n          description: ファイルサイズ\n        md5:\n          type: string\n          description: MD5ハッシュ\n        isAnimatedImage:\n          type: boolean\n          description: アニメーション画像かどうか\n        createdAt:\n          type: string\n          format: date-time\n          description: アップロード日時\n        thumbnails:\n          type: array\n          items:\n            $ref: '#/components/schemas/ThumbnailInfo'\n        thumbnail:\n          deprecated: true\n          type: object\n          description: |-\n            サムネイル情報\n            サムネイルが存在しない場合はnullになります\n            Deprecated: thumbnailsを参照してください\n          nullable: true\n          properties:\n            mime:\n              deprecated: true\n              type: string\n              description: MIMEタイプ\n            width:\n              deprecated: true\n              type: integer\n              format: int32\n              description: サムネイル幅\n            height:\n              deprecated: true\n              type: integer\n              description: サムネイル高さ\n              format: int32\n          required:\n            - mime\n        channelId:\n          type: string\n          description: 属しているチャンネルUUID\n          nullable: true\n          format: uuid\n        uploaderId:\n          type: string\n          description: アップロード者UUID\n          format: uuid\n          nullable: true\n      required:\n        - id\n        - name\n        - mime\n        - size\n        - md5\n        - isAnimatedImage\n        - createdAt\n        - thumbnail\n        - channelId\n        - uploaderId\n        - thumbnails\n    PostMessageStampRequest:\n      title: PostMessageStampRequest\n      type: object\n      description: スタンプを押すリクエスト\n      properties:\n        count:\n          type: integer\n          description: 押す数\n          format: int32\n          minimum: 1\n          maximum: 100\n      required:\n        - count\n    Stamp:\n      title: Stamp\n      type: object\n      description: スタンプ情報\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: スタンプUUID\n        name:\n          type: string\n          description: スタンプ名\n          pattern: '^[a-zA-Z0-9_-]{1,32}$'\n        creatorId:\n          type: string\n          description: 作成者UUID\n          format: uuid\n        createdAt:\n          type: string\n          description: 作成日時\n          format: date-time\n        updatedAt:\n          type: string\n          description: 更新日時\n          format: date-time\n        fileId:\n          type: string\n          format: uuid\n          description: ファイルUUID\n        isUnicode:\n          type: boolean\n          description: Unicode絵文字か\n      required:\n        - id\n        - name\n        - creatorId\n        - createdAt\n        - updatedAt\n        - fileId\n        - isUnicode\n    PostStampRequest:\n      title: PostStampRequest\n      type: object\n      description: スタンプ作成リクエスト\n      properties:\n        name:\n          type: string\n          description: スタンプ名\n          pattern: '^[a-zA-Z0-9_-]{1,32}$'\n        file:\n          type: string\n          format: binary\n          description: 'スタンプ画像(1MBまでのpng, jpeg, gif)'\n      required:\n        - name\n        - file\n    StampHistoryEntry:\n      title: StampHistoryEntry\n      type: object\n      description: スタンプ履歴の1項目\n      properties:\n        stampId:\n          type: string\n          format: uuid\n          description: スタンプUUID\n        datetime:\n          type: string\n          description: 使用日時\n          format: date-time\n      required:\n        - stampId\n        - datetime\n    User:\n      title: User\n      type: object\n      description: ユーザー情報\n      properties:\n        id:\n          type: string\n          description: ユーザーUUID\n          format: uuid\n        name:\n          type: string\n          pattern: '^[a-zA-Z0-9_-]{1,32}$'\n          description: ユーザー名\n        displayName:\n          type: string\n          description: ユーザー表示名\n          minLength: 0\n          maxLength: 32\n        iconFileId:\n          type: string\n          format: uuid\n          description: アイコンファイルUUID\n        bot:\n          type: boolean\n          description: BOTかどうか\n        state:\n          $ref: '#/components/schemas/UserAccountState'\n        updatedAt:\n          type: string\n          description: 更新日時\n          format: date-time\n      required:\n        - id\n        - name\n        - displayName\n        - iconFileId\n        - bot\n        - state\n        - updatedAt\n    UserDetail:\n      title: UserDetail\n      type: object\n      description: ユーザー詳細情報\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: ユーザーUUID\n        state:\n          $ref: '#/components/schemas/UserAccountState'\n        bot:\n          type: boolean\n          description: BOTかどうか\n        iconFileId:\n          type: string\n          format: uuid\n          description: アイコンファイルUUID\n        displayName:\n          type: string\n          description: ユーザー表示名\n          minLength: 0\n          maxLength: 32\n        name:\n          type: string\n          pattern: '^[a-zA-Z0-9_-]{1,32}$'\n          description: ユーザー名\n        twitterId:\n          type: string\n          description: Twitter ID\n          pattern: '^[a-zA-Z0-9_]{1,15}$'\n        lastOnline:\n          type: string\n          description: 最終オンライン日時\n          format: date-time\n          nullable: true\n        updatedAt:\n          type: string\n          format: date-time\n          description: 更新日時\n        tags:\n          type: array\n          description: タグリスト\n          items:\n            $ref: '#/components/schemas/UserTag'\n        groups:\n          type: array\n          description: 所属グループのUUIDの配列\n          items:\n            type: string\n            format: uuid\n        bio:\n          type: string\n          description: 自己紹介(biography)\n          maxLength: 1000\n        homeChannel:\n          type: string\n          format: uuid\n          description: ホームチャンネル\n          nullable: true\n      required:\n        - id\n        - state\n        - bot\n        - iconFileId\n        - displayName\n        - name\n        - twitterId\n        - lastOnline\n        - updatedAt\n        - tags\n        - groups\n        - bio\n        - homeChannel\n    UserTag:\n      title: UserTag\n      type: object\n      description: ユーザータグ\n      properties:\n        tagId:\n          type: string\n          description: タグUUID\n          format: uuid\n        tag:\n          type: string\n          description: タグ文字列\n        isLocked:\n          type: boolean\n          description: タグがロックされているか\n        createdAt:\n          type: string\n          description: タグ付与日時\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n          description: タグ更新日時\n      required:\n        - tagId\n        - tag\n        - isLocked\n        - createdAt\n        - updatedAt\n    UserAccountState:\n      type: integer\n      title: UserAccountState\n      description: |-\n        ユーザーアカウント状態\n        0: 停止\n        1: 有効\n        2: 一時停止\n      enum:\n        - 0\n        - 1\n        - 2\n      x-enum-varnames:\n        - deactivated\n        - active\n        - suspended\n      x-enum-descriptions:\n        - 停止\n        - 有効\n        - 一時停止\n      format: int32\n    UserGroup:\n      title: UserGroup\n      type: object\n      description: ユーザーグループ\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: グループUUID\n        name:\n          type: string\n          description: グループ名\n        description:\n          type: string\n          description: グループ説明\n        type:\n          type: string\n          description: グループタイプ\n        icon:\n          type: string\n          format: uuid\n          description: グループアイコンUUID\n        members:\n          type: array\n          description: グループメンバーの配列\n          items:\n            $ref: '#/components/schemas/UserGroupMember'\n        createdAt:\n          type: string\n          description: 作成日時\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n          description: 更新日時\n        admins:\n          type: array\n          description: グループ管理者のUUIDの配列\n          items:\n            type: string\n            format: uuid\n      required:\n        - id\n        - name\n        - description\n        - type\n        - icon\n        - members\n        - createdAt\n        - updatedAt\n        - admins\n    UserGroupMember:\n      title: UserGroupMember\n      type: object\n      description: ユーザーグループメンバー\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: ユーザーUUID\n        role:\n          type: string\n          description: ユーザーの役割\n          maxLength: 100\n      required:\n        - id\n        - role\n    UserStats:\n      title: UserStats\n      type: object\n      description: ユーザー統計情報\n      properties:\n        totalMessageCount:\n          type: integer\n          format: int64\n          description: ユーザーの総投稿メッセージ数(削除されたものも含む)\n        stamps:\n          type: array\n          description: ユーザーのスタンプ統計情報\n          items:\n            $ref: '#/components/schemas/UserStatsStamp'\n        datetime:\n          type: string\n          format: date-time\n          description: 統計情報日時\n      required:\n        - totalMessageCount\n        - stamps\n        - datetime\n    UserStatsStamp:\n      title: UserStatsStamp\n      type: object\n      description: ユーザーの特定スタンプ統計情報\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: スタンプID\n        count:\n          type: integer\n          format: int64\n          description: スタンプ数(同一メッセージ上のものは複数カウントしない)\n        total:\n          type: integer\n          format: int64\n          description: スタンプ数(同一メッセージ上のものも複数カウントする)\n      required:\n        - id\n        - count\n        - total\n    PatchGroupMemberRequest:\n      title: PatchGroupMemberRequest\n      type: object\n      description: ユーザーグループメンバー編集リクエスト\n      properties:\n        role:\n          type: string\n          description: ユーザーの役割\n          maxLength: 100\n      required:\n        - role\n    PatchUserGroupRequest:\n      title: PatchUserGroupRequest\n      type: object\n      description: ユーザーグループ編集リクエスト\n      properties:\n        name:\n          type: string\n          description: グループ名\n        description:\n          type: string\n          description: グループ説明\n          maxLength: 100\n        type:\n          type: string\n          description: グループタイプ\n    PostUserGroupRequest:\n      title: PostUserGroupRequest\n      type: object\n      description: ユーザーグループ作成リクエスト\n      properties:\n        name:\n          type: string\n          description: グループ名\n        description:\n          type: string\n          description: 説明\n          maxLength: 100\n        type:\n          type: string\n          description: グループタイプ\n      required:\n        - name\n        - description\n        - type\n    MyUserDetail:\n      title: MyUserDetail\n      type: object\n      description: 自分のユーザー詳細情報\n      properties:\n        id:\n          type: string\n          description: ユーザーUUID\n          format: uuid\n        bio:\n          type: string\n          description: 自己紹介(biography)\n          maxLength: 1000\n        groups:\n          type: array\n          description: 所属グループのUUIDの配列\n          items:\n            type: string\n            format: uuid\n        tags:\n          type: array\n          description: タグリスト\n          items:\n            $ref: '#/components/schemas/UserTag'\n        updatedAt:\n          type: string\n          format: date-time\n          description: 更新日時\n        lastOnline:\n          type: string\n          description: 最終オンライン日時\n          format: date-time\n          nullable: true\n        twitterId:\n          type: string\n          description: Twitter ID\n          pattern: '^[a-zA-Z0-9_]{1,15}$'\n        name:\n          type: string\n          pattern: '^[a-zA-Z0-9_-]{1,32}$'\n          description: ユーザー名\n        displayName:\n          type: string\n          description: ユーザー表示名\n          minLength: 0\n          maxLength: 32\n        iconFileId:\n          type: string\n          format: uuid\n          description: アイコンファイルUUID\n        bot:\n          type: boolean\n          description: BOTかどうか\n        state:\n          $ref: '#/components/schemas/UserAccountState'\n        permissions:\n          type: array\n          description: 所有している権限の配列\n          items:\n            $ref: '#/components/schemas/UserPermission'\n        homeChannel:\n          type: string\n          format: uuid\n          description: ホームチャンネル\n          nullable: true\n      required:\n        - id\n        - bio\n        - groups\n        - tags\n        - updatedAt\n        - lastOnline\n        - twitterId\n        - name\n        - displayName\n        - iconFileId\n        - bot\n        - state\n        - permissions\n        - homeChannel\n    PatchChannelSubscribersRequest:\n      title: PatchChannelSubscribersRequest\n      type: object\n      description: チャンネル購読者編集リクエスト\n      properties:\n        'on':\n          type: array\n          description: 通知をオンにするユーザーのUUID配列\n          items:\n            type: string\n            format: uuid\n        'off':\n          type: array\n          description: 通知をオフにするユーザーのUUID配列\n          items:\n            type: string\n            format: uuid\n    PutChannelSubscribersRequest:\n      title: PutChannelSubscribersRequest\n      type: object\n      description: 通知をオンにするユーザーのUUID配列\n      properties:\n        'on':\n          type: array\n          format: uuid\n          description: 通知をオンにするユーザーのUUID配列\n          items:\n            type: string\n            format: uuid\n      required:\n        - 'on'\n    UserSubscribeState:\n      title: UserSubscribeState\n      type: object\n      description: ユーザーのチャンネル購読状態\n      properties:\n        channelId:\n          type: string\n          description: チャンネルUUID\n          format: uuid\n        level:\n          $ref: '#/components/schemas/ChannelSubscribeLevel'\n      required:\n        - channelId\n        - level\n    ChannelSubscribeLevel:\n      type: integer\n      title: ChannelSubscribeLevel\n      description: |-\n        チャンネル購読レベル\n        0：無し\n        1：未読管理\n        2：未読管理+通知\n      enum:\n        - 0\n        - 1\n        - 2\n      x-enum-varnames:\n        - none\n        - subscribed\n        - notified\n      x-enum-descriptions:\n        - 無し\n        - 未読管理\n        - 未読管理+通知\n    PutChannelSubscribeLevelRequest:\n      title: PutChannelSubscribeLevelRequest\n      type: object\n      description: チャンネル購読レベル変更リクエスト\n      properties:\n        level:\n          $ref: '#/components/schemas/ChannelSubscribeLevel'\n      required:\n        - level\n    Webhook:\n      title: Webhook\n      type: object\n      description: Webhook情報\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: WebhookUUID\n        botUserId:\n          type: string\n          description: WebhookユーザーUUID\n          format: uuid\n        displayName:\n          type: string\n          description: Webhookユーザー表示名\n        description:\n          type: string\n          description: 説明\n        secure:\n          type: boolean\n          description: セキュアWebhookかどうか\n        channelId:\n          type: string\n          description: デフォルトの投稿先チャンネルUUID\n          format: uuid\n        ownerId:\n          type: string\n          description: オーナーUUID\n          format: uuid\n        createdAt:\n          type: string\n          description: 作成日時\n          format: date-time\n        updatedAt:\n          type: string\n          description: 更新日時\n          format: date-time\n      required:\n        - id\n        - botUserId\n        - displayName\n        - description\n        - secure\n        - channelId\n        - ownerId\n        - createdAt\n        - updatedAt\n    PatchWebhookRequest:\n      title: PatchWebhookRequest\n      type: object\n      description: Webhook情報変更リクエスト\n      properties:\n        name:\n          type: string\n          description: Webhookユーザー表示名\n          minLength: 1\n          maxLength: 32\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n        channelId:\n          type: string\n          format: uuid\n          description: デフォルトの投稿先チャンネルUUID\n        secret:\n          type: string\n          description: Webhookシークレット\n          maxLength: 50\n        ownerId:\n          type: string\n          format: uuid\n          description: 移譲先のユーザーUUID\n    PostWebhookRequest:\n      title: PostWebhookRequest\n      type: object\n      description: Webhook作成リクエスト\n      properties:\n        name:\n          type: string\n          description: Webhookユーザーの表示名\n          minLength: 1\n          maxLength: 32\n        description:\n          type: string\n          description: 説明\n          minLength: 1\n          maxLength: 1000\n        channelId:\n          type: string\n          format: uuid\n          description: デフォルトの投稿先チャンネルUUID\n        secret:\n          type: string\n          description: Webhookシークレット\n          maxLength: 50\n      required:\n        - name\n        - description\n        - channelId\n        - secret\n    PutUserIconRequest:\n      title: PutUserIconRequest\n      type: object\n      description: アイコン画像変更リクエスト\n      properties:\n        file:\n          type: string\n          format: binary\n          description: 'アイコン画像(1MBまでのpng, jpeg, gif)'\n      required:\n        - file\n    PutMyPasswordRequest:\n      title: PutMyPasswordRequest\n      type: object\n      description: パスワード変更リクエスト\n      properties:\n        password:\n          type: string\n          pattern: \"^[\\\\x20-\\\\x7E]{10,32}$\"\n          description: 現在のパスワード\n        newPassword:\n          type: string\n          pattern: \"^[\\\\x20-\\\\x7E]{10,32}$\"\n          description: 新しいパスワード\n      required:\n        - password\n        - newPassword\n    PatchMeRequest:\n      title: PatchMeRequest\n      type: object\n      description: 自分のユーザー情報変更リクエスト\n      properties:\n        displayName:\n          type: string\n          minLength: 0\n          maxLength: 32\n          description: 新しい表示名\n        twitterId:\n          type: string\n          pattern: '^[a-zA-Z0-9_]{1,15}$'\n          description: TwitterID\n        bio:\n          type: string\n          description: 自己紹介(biography)\n          maxLength: 1000\n        homeChannel:\n          type: string\n          description: |-\n            ホームチャンネルのUUID\n            `00000000-0000-0000-0000-000000000000`を指定すると、ホームチャンネルが`null`に設定されます\n          format: uuid\n    PutUserPasswordRequest:\n      title: PutUserPasswordRequest\n      type: object\n      properties:\n        newPassword:\n          type: string\n          description: 新しいパスワード\n          pattern: \"^[\\\\x20-\\\\x7E]{10,32}$\"\n      required:\n        - newPassword\n      description: ユーザーパスワード変更リクエスト\n    PatchUserRequest:\n      title: PatchUserRequest\n      type: object\n      description: ユーザー情報編集リクエスト\n      properties:\n        displayName:\n          type: string\n          description: 新しい表示名\n          maxLength: 32\n        twitterId:\n          type: string\n          description: TwitterID\n          pattern: '^[a-zA-Z0-9_]{1,15}$'\n        state:\n          $ref: '#/components/schemas/UserAccountState'\n        role:\n          type: string\n          description: ユーザーロール\n    PostMyFCMDeviceRequest:\n      title: PostMyFCMDeviceRequest\n      type: object\n      description: FCMデバイス登録リクエスト\n      properties:\n        token:\n          type: string\n          description: FCMのデバイストークン\n          example: 'bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'\n      required:\n        - token\n    PostUserRequest:\n      title: PostUserRequest\n      type: object\n      description: ユーザー登録リクエスト\n      properties:\n        name:\n          type: string\n          description: ユーザー名\n          pattern: '^[a-zA-Z0-9_-]{1,32}$'\n        password:\n          type: string\n          pattern: \"^[\\\\\\\\x20-\\\\\\\\x7E]{10,32}$\"\n          description: パスワード\n      required:\n        - name\n    PostChannelRequest:\n      title: PostChannelRequest\n      type: object\n      description: チャンネル作成リクエスト\n      properties:\n        name:\n          type: string\n          pattern: '^[a-zA-Z0-9-_]{1,20}$'\n          description: チャンネル名\n        parent:\n          type: string\n          format: uuid\n          description: |-\n            親チャンネルのUUID\n            ルートに作成する場合はnullを指定\n          nullable: true\n      required:\n        - name\n        - parent\n    PostUserTagRequest:\n      title: PostUserTagRequest\n      type: object\n      description: ユーザータグ追加リクエスト\n      properties:\n        tag:\n          type: string\n          description: タグ文字列\n          minLength: 1\n          maxLength: 30\n      required:\n        - tag\n    PatchUserTagRequest:\n      title: PatchUserTagRequest\n      type: object\n      description: ユーザーのタグの編集リクエスト\n      properties:\n        isLocked:\n          type: boolean\n          description: タグのロック状態\n      required:\n        - isLocked\n    Tag:\n      title: Tag\n      type: object\n      description: タグ情報\n      properties:\n        id:\n          type: string\n          description: タグUUID\n          format: uuid\n        tag:\n          type: string\n          description: タグ文字列\n          minLength: 1\n          maxLength: 30\n        users:\n          type: array\n          description: タグがつけられているユーザーのUUID配列\n          items:\n            type: string\n            format: uuid\n      required:\n        - id\n        - tag\n        - users\n    PostStarRequest:\n      title: PostStarRequest\n      type: object\n      description: スター追加リクエスト\n      properties:\n        channelId:\n          type: string\n          description: チャンネルUUID\n          format: uuid\n      required:\n        - channelId\n    UnreadChannel:\n      title: UnreadChannel\n      type: object\n      description: 未読チャンネル情報\n      properties:\n        channelId:\n          type: string\n          description: チャンネルUUID\n          format: uuid\n        count:\n          type: integer\n          description: 未読メッセージ数\n          format: int32\n        noticeable:\n          type: boolean\n          description: 自分宛てメッセージが含まれているかどうか\n        since:\n          type: string\n          format: date-time\n          description: チャンネルの最古の未読メッセージの日時\n        updatedAt:\n          type: string\n          description: チャンネルの最新の未読メッセージの日時\n          format: date-time\n      required:\n        - channelId\n        - count\n        - noticeable\n        - since\n        - until\n        - updatedAt\n    PostLoginRequest:\n      title: PostLoginRequest\n      type: object\n      description: ログインリクエスト\n      properties:\n        name:\n          type: string\n          description: ユーザー名\n          pattern: '^[a-zA-Z0-9_-]{1,32}$'\n        password:\n          type: string\n          description: パスワード\n          pattern: \"^[\\\\\\\\x20-\\\\\\\\x7E]{10,32}$\"\n      required:\n        - name\n        - password\n    LoginSession:\n      title: LoginSession\n      type: object\n      description: ログインセッション情報\n      properties:\n        id:\n          type: string\n          description: セッションUUID\n          format: uuid\n        issuedAt:\n          type: string\n          description: 発行日時\n          format: date-time\n      required:\n        - id\n        - issuedAt\n    ActiveOAuth2Token:\n      title: ActiveOAuth2Token\n      type: object\n      description: 有効なOAuth2トークン情報\n      properties:\n        id:\n          type: string\n          description: トークンUUID\n          format: uuid\n        clientId:\n          type: string\n          description: OAuth2クライアントUUID\n        scopes:\n          type: array\n          description: スコープ\n          items:\n            $ref: '#/components/schemas/OAuth2Scope'\n        issuedAt:\n          type: string\n          description: 発行日時\n          format: date-time\n      required:\n        - id\n        - clientId\n        - scopes\n        - issuedAt\n    OAuth2Scope:\n      type: string\n      title: OAuth2Scope\n      description: OAuth2スコープ\n      enum:\n        - read\n        - write\n        - manage_bot\n    OAuth2Client:\n      title: OAuth2Client\n      type: object\n      description: OAuth2クライアント情報\n      properties:\n        id:\n          type: string\n          description: クライアントUUID\n        name:\n          type: string\n          description: クライアント名\n          minLength: 1\n          maxLength: 32\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n        developerId:\n          type: string\n          description: クライアント開発者UUID\n          format: uuid\n        scopes:\n          type: array\n          description: 要求スコープの配列\n          items:\n            $ref: '#/components/schemas/OAuth2Scope'\n      required:\n        - id\n        - name\n        - description\n        - developerId\n        - scopes\n    PatchClientRequest:\n      title: PatchClientRequest\n      type: object\n      description: OAuth2クライアント情報変更リクエスト\n      properties:\n        name:\n          type: string\n          description: クライアント名\n          minLength: 1\n          maxLength: 32\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n        callbackUrl:\n          type: string\n          description: コールバックURL\n          format: uri\n        developerId:\n          type: string\n          description: クライアント開発者UUID\n          format: uuid\n    OAuth2ClientDetail:\n      title: OAuth2ClientDetail\n      description: OAuth2クライアント詳細情報\n      type: object\n      properties:\n        id:\n          type: string\n          description: クライアントUUID\n        developerId:\n          type: string\n          description: クライアント開発者UUID\n          format: uuid\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n        name:\n          type: string\n          description: クライアント名\n          minLength: 1\n          maxLength: 32\n        scopes:\n          type: array\n          description: 要求スコープの配列\n          items:\n            $ref: '#/components/schemas/OAuth2Scope'\n        callbackUrl:\n          type: string\n          description: コールバックURL\n          format: uri\n        secret:\n          type: string\n          description: クライアントシークレット\n      required:\n        - id\n        - developerId\n        - description\n        - name\n        - scopes\n        - callbackUrl\n        - secret\n    PostClientRequest:\n      title: PostClientRequest\n      type: object\n      description: OAuth2クライアント作成リクエスト\n      properties:\n        name:\n          type: string\n          maxLength: 32\n          minLength: 1\n          description: クライアント名\n        callbackUrl:\n          type: string\n          description: コールバックURL\n          format: uri\n        scopes:\n          type: array\n          description: 要求スコープの配列\n          items:\n            $ref: '#/components/schemas/OAuth2Scope'\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n      required:\n        - name\n        - callbackUrl\n        - scopes\n        - description\n    BotMode:\n      type: string\n      title: BotMode\n      description: |-\n        BOT動作モード\n\n        HTTP: HTTP Mode\n        WebSocket: WebSocket Mode\n      enum:\n        - HTTP\n        - WebSocket\n      x-enum-varnames:\n        - HTTP\n        - WebSocket\n      x-enum-descriptions:\n        - HTTP Mode\n        - WebSocket Mode\n    BotState:\n      type: integer\n      title: BotState\n      description: |-\n        BOT状態\n        0: 停止\n        1: 有効\n        2: 一時停止\n      enum:\n        - 0\n        - 1\n        - 2\n      x-enum-varnames:\n        - deactivated\n        - active\n        - suspended\n      x-enum-descriptions:\n        - 停止\n        - 有効\n        - 一時停止\n      format: int32\n    Bot:\n      title: Bot\n      type: object\n      description: BOT情報\n      properties:\n        id:\n          type: string\n          description: BOT UUID\n          format: uuid\n        botUserId:\n          type: string\n          description: BOTユーザーUUID\n          format: uuid\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n        developerId:\n          type: string\n          description: BOT開発者UUID\n          format: uuid\n        subscribeEvents:\n          type: array\n          description: BOTが購読しているイベントの配列\n          items:\n            type: string\n        mode:\n          $ref: '#/components/schemas/BotMode'\n        state:\n          $ref: '#/components/schemas/BotState'\n        createdAt:\n          type: string\n          description: 作成日時\n          format: date-time\n        updatedAt:\n          type: string\n          description: 更新日時\n          format: date-time\n      required:\n        - id\n        - botUserId\n        - description\n        - developerId\n        - subscribeEvents\n        - mode\n        - state\n        - createdAt\n        - updatedAt\n    PatchBotRequest:\n      title: PatchBotRequest\n      type: object\n      description: BOT情報変更リクエスト\n      properties:\n        displayName:\n          type: string\n          maxLength: 32\n          description: BOTユーザー表示名\n        description:\n          type: string\n          description: BOTの説明\n          maxLength: 1000\n        privileged:\n          type: boolean\n          description: 特権\n        mode:\n          $ref: '#/components/schemas/BotMode'\n        endpoint:\n          type: string\n          description: BOTサーバーエンドポイント\n          format: uri\n        developerId:\n          type: string\n          description: 移譲先の開発者UUID\n          format: uuid\n        subscribeEvents:\n          type: array\n          description: 購読するイベント\n          uniqueItems: false\n          items:\n            type: string\n    BotTokens:\n      title: BotTokens\n      type: object\n      description: BOTのトークン情報\n      properties:\n        verificationToken:\n          type: string\n          description: Verification Token\n        accessToken:\n          type: string\n          description: BOTアクセストークン\n      required:\n        - verificationToken\n        - accessToken\n    BotDetail:\n      title: BotDetail\n      type: object\n      description: BOT詳細情報\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: BOT UUID\n        updatedAt:\n          type: string\n          description: 更新日時\n          format: date-time\n        createdAt:\n          type: string\n          description: 作成日時\n          format: date-time\n        mode:\n          $ref: '#/components/schemas/BotMode'\n        state:\n          $ref: '#/components/schemas/BotState'\n        subscribeEvents:\n          type: array\n          description: BOTが購読しているイベントの配列\n          items:\n            type: string\n        developerId:\n          type: string\n          description: BOT開発者UUID\n          format: uuid\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n        botUserId:\n          type: string\n          description: BOTユーザーUUID\n          format: uuid\n        tokens:\n          $ref: '#/components/schemas/BotTokens'\n        endpoint:\n          type: string\n          description: BOTサーバーエンドポイント\n          format: uri\n        privileged:\n          type: boolean\n          description: 特権BOTかどうか\n        channels:\n          type: array\n          description: BOTが参加しているチャンネルのUUID配列\n          items:\n            type: string\n            format: uuid\n      required:\n        - id\n        - updatedAt\n        - createdAt\n        - mode\n        - state\n        - subscribeEvents\n        - developerId\n        - description\n        - botUserId\n        - tokens\n        - endpoint\n        - privileged\n        - channels\n    BotEventLog:\n      title: BotEventLog\n      type: object\n      description: BOTイベントログ\n      properties:\n        botId:\n          type: string\n          description: BOT UUID\n          format: uuid\n        requestId:\n          type: string\n          format: uuid\n          description: リクエストUUID\n        event:\n          type: string\n          description: イベントタイプ\n        result:\n          $ref: '#/components/schemas/BotEventResult'\n        code:\n          type: integer\n          description: ステータスコード\n          format: int32\n        datetime:\n          type: string\n          format: date-time\n          description: イベント日時\n      required:\n        - botId\n        - requestId\n        - event\n        - code\n        - datetime\n    BotEventResult:\n      title: BotEventResult\n      type: string\n      description: イベント配送結果\n      enum:\n        - ok\n        - ng\n        - ne\n        - dp\n      x-enum-varnames:\n        - OK\n        - NG\n        - NetworkError\n        - Dropped\n      x-enum-descriptions:\n        - 成功\n        - 失敗(不正なレスポンス)\n        - ネットワークエラー\n        - (WebSocket Modeのみ)接続しているセッションが存在しなかった\n    PostBotRequest:\n      title: PostBotRequest\n      type: object\n      description: BOT作成リクエスト\n      properties:\n        name:\n          type: string\n          description: |-\n            BOTユーザーID\n            自動的に接頭辞\"BOT_\"が付与されます\n          maxLength: 16\n          pattern: '^[a-zA-Z0-9_-]{1,16}$'\n        displayName:\n          type: string\n          maxLength: 32\n          description: BOTユーザー表示名\n        description:\n          type: string\n          description: BOTの説明\n          maxLength: 1000\n        mode:\n          $ref: '#/components/schemas/BotMode'\n        endpoint:\n          type: string\n          description: |-\n            BOTサーバーエンドポイント\n            BOT動作モードがHTTPの場合必須です\n          format: uri\n      required:\n        - name\n        - displayName\n        - description\n        - mode\n    PostBotActionJoinRequest:\n      title: PostBotActionJoinRequest\n      type: object\n      properties:\n        channelId:\n          type: string\n          description: チャンネルUUID\n          format: uuid\n      required:\n        - channelId\n      description: BOTチャンネル参加リクエスト\n    PostBotActionLeaveRequest:\n      title: PostBotActionLeaveRequest\n      type: object\n      properties:\n        channelId:\n          type: string\n          description: チャンネルUUID\n          format: uuid\n      required:\n        - channelId\n      description: BOTチャンネル退出リクエスト\n    BotUser:\n      title: BotUser\n      type: object\n      description: BOTユーザー対\n      properties:\n        id:\n          type: string\n          description: BOT UUID\n          format: uuid\n        botUserId:\n          type: string\n          description: BOTユーザーUUID\n          format: uuid\n      required:\n        - id\n        - botUserId\n    PostWebRTCAuthenticateRequest:\n      title: PostWebRTCAuthenticateRequest\n      type: object\n      description: skyway用認証リクエスト\n      properties:\n        peerId:\n          type: string\n          description: ピアID\n      required:\n        - peerId\n    WebRTCAuthenticateResult:\n      title: WebRTCAuthenticateResult\n      type: object\n      description: skyway用認証リクエストリザルト\n      properties:\n        peerId:\n          type: string\n          description: ピアID\n        ttl:\n          type: integer\n          description: TTL\n          format: int32\n        timestamp:\n          type: integer\n          format: int64\n          description: タイムスタンプ\n        authToken:\n          type: string\n          description: 認証トークン\n      required:\n        - peerId\n        - ttl\n        - timestamp\n        - authToken\n    PatchChannelRequest:\n      title: PatchChannelRequest\n      type: object\n      description: チャンネル情報変更リクエスト\n      properties:\n        name:\n          type: string\n          description: チャンネル名\n          pattern: '^[a-zA-Z0-9-_]{1,20}$'\n        archived:\n          type: boolean\n          description: アーカイブされているかどうか\n        force:\n          type: boolean\n          description: 強制通知チャンネルかどうか\n        parent:\n          type: string\n          description: 親チャンネルUUID\n          format: uuid\n    WebRTCUserStates:\n      title: WebRTCUserStates\n      type: array\n      description: WebRTC状態の配列\n      items:\n        $ref: '#/components/schemas/WebRTCUserState'\n    ClipFolder:\n      title: ClipFolder\n      type: object\n      description: クリップフォルダ情報\n      properties:\n        id:\n          type: string\n          description: フォルダUUID\n          format: uuid\n        name:\n          type: string\n          description: フォルダ名\n          minLength: 1\n          maxLength: 30\n        createdAt:\n          type: string\n          description: 作成日時\n          format: date-time\n        ownerId:\n          type: string\n          format: uuid\n          description: フォルダ所有者UUID\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n      required:\n        - id\n        - name\n        - createdAt\n        - ownerId\n        - description\n    PatchClipFolderRequest:\n      title: PatchClipFolderRequest\n      type: object\n      description: クリップフォルダ情報編集リクエスト\n      properties:\n        name:\n          type: string\n          minLength: 1\n          maxLength: 30\n          description: フォルダ名\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n    PostClipFolderRequest:\n      title: PostClipFolderRequest\n      type: object\n      description: クリップフォルダ作成リクエスト\n      properties:\n        name:\n          type: string\n          description: フォルダ名\n          minLength: 1\n          maxLength: 30\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n      required:\n        - name\n        - description\n    PostClipFolderMessageRequest:\n      title: PostClipFolderMessageRequest\n      type: object\n      properties:\n        messageId:\n          type: string\n          description: メッセージUUID\n          format: uuid\n      required:\n        - messageId\n      description: クリップ追加リクエスト\n    ClippedMessage:\n      title: ClippedMessage\n      type: object\n      description: クリップされたメッセージ\n      properties:\n        message:\n          $ref: '#/components/schemas/Message'\n        clippedAt:\n          type: string\n          description: クリップした日時\n          format: date-time\n      required:\n        - folderId\n        - message\n        - clippedAt\n    ChannelEvent:\n      title: ChannelEvent\n      type: object\n      description: チャンネルイベント\n      properties:\n        type:\n          type: string\n          enum:\n            - TopicChanged\n            - SubscribersChanged\n            - PinAdded\n            - PinRemoved\n            - NameChanged\n            - ParentChanged\n            - VisibilityChanged\n            - ForcedNotificationChanged\n            - ChildCreated\n          description: イベントタイプ\n        datetime:\n          type: string\n          description: イベント日時\n          format: date-time\n        detail:\n          description: イベント内容\n          oneOf:\n            - $ref: '#/components/schemas/TopicChangedEvent'\n            - $ref: '#/components/schemas/SubscribersChangedEvent'\n            - $ref: '#/components/schemas/PinAddedEvent'\n            - $ref: '#/components/schemas/PinRemovedEvent'\n            - $ref: '#/components/schemas/NameChangedEvent'\n            - $ref: '#/components/schemas/ParentChangedEvent'\n            - $ref: '#/components/schemas/VisibilityChangedEvent'\n            - $ref: '#/components/schemas/ForcedNotificationChangedEvent'\n            - $ref: '#/components/schemas/ChildCreatedEvent'\n      required:\n        - type\n        - datetime\n        - detail\n    TopicChangedEvent:\n      title: TopicChangedEvent\n      type: object\n      description: トピック変更イベント\n      properties:\n        userId:\n          type: string\n          description: 変更者UUID\n          format: uuid\n        before:\n          type: string\n          description: 変更前トピック\n        after:\n          type: string\n          description: 変更後トピック\n      required:\n        - userId\n        - before\n        - after\n    SubscribersChangedEvent:\n      title: SubscribersChangedEvent\n      type: object\n      description: 購読者変更イベント\n      properties:\n        userId:\n          type: string\n          description: 変更者UUID\n          format: uuid\n        'on':\n          type: array\n          description: オンにされたユーザーのUUID配列\n          items:\n            type: string\n            format: uuid\n        'off':\n          type: array\n          description: オフにされたユーザーのUUID配列\n          items:\n            type: string\n            format: uuid\n      required:\n        - userId\n        - 'on'\n        - 'off'\n    PinAddedEvent:\n      title: PinAddedEvent\n      type: object\n      description: ピン追加イベント\n      properties:\n        userId:\n          type: string\n          description: 変更者UUID\n          format: uuid\n        messageId:\n          type: string\n          description: メッセージUUID\n          format: uuid\n      required:\n        - userId\n        - messageId\n    PinRemovedEvent:\n      title: PinRemovedEvent\n      type: object\n      description: ピン削除イベント\n      properties:\n        userId:\n          type: string\n          description: 変更者UUID\n          format: uuid\n        messageId:\n          type: string\n          description: メッセージUUID\n          format: uuid\n      required:\n        - userId\n        - messageId\n    NameChangedEvent:\n      title: NameChangedEvent\n      type: object\n      description: チャンネル名変更イベント\n      properties:\n        userId:\n          type: string\n          description: 変更者UUID\n          format: uuid\n        before:\n          type: string\n          description: 変更前チャンネル名\n        after:\n          type: string\n          description: 変更後チャンネル名\n      required:\n        - userId\n        - before\n        - after\n    ParentChangedEvent:\n      title: ParentChangedEvent\n      type: object\n      description: 親チャンネル変更イベント\n      properties:\n        userId:\n          type: string\n          description: 変更者UUID\n          format: uuid\n        before:\n          type: string\n          description: 変更前親チャンネルUUID\n          format: uuid\n        after:\n          type: string\n          description: 変更後親チャンネルUUID\n          format: uuid\n      required:\n        - userId\n        - before\n        - after\n    VisibilityChangedEvent:\n      title: VisibilityChangedEvent\n      type: object\n      description: チャンネル可視状態変更イベント\n      properties:\n        userId:\n          type: string\n          description: 変更者UUID\n          format: uuid\n        visibility:\n          type: boolean\n          description: 変更後可視状態\n      required:\n        - userId\n        - visibility\n    ForcedNotificationChangedEvent:\n      title: ForcedNotificationChangedEvent\n      type: object\n      description: チャンネル強制通知状態変更イベント\n      properties:\n        userId:\n          type: string\n          description: 変更者UUID\n          format: uuid\n        force:\n          type: boolean\n          description: 変更後強制通知状態\n      required:\n        - userId\n        - force\n    ChildCreatedEvent:\n      title: ChildCreatedEvent\n      type: object\n      description: 子チャンネル作成イベント\n      properties:\n        userId:\n          type: string\n          description: 作成者UUID\n          format: uuid\n        channelId:\n          type: string\n          description: チャンネルUUID\n          format: uuid\n      required:\n        - userId\n        - channelId\n    StampPalette:\n      title: StampPalette\n      type: object\n      description: スタンプパレット情報\n      properties:\n        id:\n          type: string\n          description: スタンプパレットUUID\n          format: uuid\n        name:\n          type: string\n          description: パレット名\n          maxLength: 30\n        stamps:\n          type: array\n          description: パレット内のスタンプのUUID配列\n          items:\n            type: string\n            format: uuid\n        creatorId:\n          type: string\n          description: 作成者UUID\n          format: uuid\n        createdAt:\n          type: string\n          format: date-time\n          description: パレット作成日時\n        updatedAt:\n          type: string\n          description: パレット更新日時\n          format: date-time\n        description:\n          type: string\n          description: パレット説明\n          maxLength: 1000\n      required:\n        - id\n        - name\n        - stamps\n        - creatorId\n        - createdAt\n        - updatedAt\n        - description\n    PostStampPaletteRequest:\n      title: PostStampPaletteRequest\n      type: object\n      description: スタンプパレット作成リクエスト\n      properties:\n        stamps:\n          type: array\n          description: パレット内のスタンプのUUID配列\n          uniqueItems: true\n          maxItems: 200\n          items:\n            type: string\n            format: uuid\n        name:\n          type: string\n          description: パレット名\n          maxLength: 30\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n      required:\n        - stamps\n        - name\n        - description\n    PatchStampPaletteRequest:\n      title: PatchStampPaletteRequest\n      type: object\n      description: スタンプパレット情報変更リクエスト\n      properties:\n        name:\n          type: string\n          description: パレット名\n          minLength: 1\n          maxLength: 30\n        description:\n          type: string\n          description: 説明\n          maxLength: 1000\n        stamps:\n          type: array\n          description: パレット内のスタンプUUIDの配列\n          uniqueItems: true\n          maxItems: 200\n          items:\n            type: string\n            format: uuid\n    PatchStampRequest:\n      title: PatchStampRequest\n      type: object\n      description: スタンプ情報変更リクエスト\n      properties:\n        name:\n          type: string\n          pattern: '^[a-zA-Z0-9_-]{1,32}$'\n          description: スタンプ名\n        creatorId:\n          type: string\n          description: 作成者UUID\n          format: uuid\n    MessagePin:\n      title: MessagePin\n      type: object\n      description: ピン情報\n      properties:\n        userId:\n          type: string\n          format: uuid\n          description: ピン留めしたユーザーUUID\n        pinnedAt:\n          type: string\n          format: date-time\n          description: ピン留めされた日時\n      required:\n        - userId\n        - pinnedAt\n    PostUserGroupAdminRequest:\n      title: PostUserGroupAdmin\n      type: object\n      description: グループ管理者追加リクエスト\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: 追加するユーザーのUUID\n      required:\n        - id\n    ChannelList:\n      title: ChannelList\n      type: object\n      description: GET /channelsレスポンス\n      properties:\n        public:\n          type: array\n          description: パブリックチャンネルの配列\n          items:\n            $ref: '#/components/schemas/Channel'\n        dm:\n          type: array\n          description: ダイレクトメッセージチャンネルの配列\n          items:\n            $ref: '#/components/schemas/DMChannel'\n      required:\n        - public\n        - dm\n    DMChannel:\n      title: DMChannel\n      type: object\n      description: ダイレクトメッセージチャンネル\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: チャンネルUUID\n        userId:\n          type: string\n          description: 送信先相手のUUID\n          format: uuid\n      required:\n        - id\n        - userId\n    ActivityTimelineMessage:\n      title: ActivityTimelineMessage\n      type: object\n      description: Timelineアクテビティ用メッセージ\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: メッセージUUID\n        userId:\n          type: string\n          description: 投稿者UUID\n          format: uuid\n        channelId:\n          type: string\n          description: チャンネルUUID\n          format: uuid\n        content:\n          type: string\n          description: メッセージ本文\n        createdAt:\n          type: string\n          format: date-time\n          description: 投稿日時\n        updatedAt:\n          type: string\n          format: date-time\n          description: 編集日時\n      required:\n        - id\n        - userId\n        - channelId\n        - content\n        - createdAt\n        - updatedAt\n    OAuth2Decide:\n      type: object\n      required:\n        - submit\n      properties:\n        submit:\n          type: string\n          description: '承諾する場合は\"approve\"'\n    PostOAuth2Token:\n      type: object\n      required:\n        - grant_type\n      properties:\n        grant_type:\n          type: string\n        code:\n          type: string\n        redirect_uri:\n          type: string\n        client_id:\n          type: string\n        code_verifier:\n          type: string\n        username:\n          type: string\n        password:\n          type: string\n          format: password\n        scope:\n          type: string\n        refresh_token:\n          type: string\n        client_secret:\n          type: string\n    OAuth2Token:\n      type: object\n      required:\n        - access_token\n        - token_type\n      properties:\n        access_token:\n          type: string\n        token_type:\n          type: string\n        expires_in:\n          type: integer\n        refresh_token:\n          type: string\n        scope:\n          type: string\n        id_token:\n          type: string\n    OAuth2Authorization:\n      type: object\n      required:\n        - client_id\n      properties:\n        response_type:\n          $ref: '#/components/schemas/OAuth2ResponseType'\n        client_id:\n          type: string\n        redirect_uri:\n          type: string\n        scope:\n          type: string\n        state:\n          type: string\n        code_challenge:\n          type: string\n        code_challenge_method:\n          type: string\n        nonce:\n          type: string\n        prompt:\n          $ref: '#/components/schemas/OAuth2Prompt'\n    OAuth2Prompt:\n      type: string\n      enum:\n        - none\n    OAuth2ResponseType:\n      type: string\n      enum:\n        - code\n        - token\n        - none\n    OAuth2Revoke:\n      title: OAuth2Revoke\n      type: object\n      required:\n        - token\n      description: POST /oauth2/revoke 用リクエストボディ\n      properties:\n        token:\n          type: string\n          description: 無効化するOAuth2トークンまたはOAuth2リフレッシュトークン\n    ExternalProviderUser:\n      title: ExternalProviderUser\n      type: object\n      description: 外部認証アカウントユーザー\n      properties:\n        providerName:\n          type: string\n          description: 外部サービス名\n        linkedAt:\n          type: string\n          description: 紐付けた日時\n        externalName:\n          type: string\n          description: 外部アカウント名\n      required:\n        - providerName\n        - linkedAt\n        - externalName\n    PostLinkExternalAccount:\n      title: PostLinkExternalAccount\n      type: object\n      description: POST /users/me/ex-accounts/link 用リクエストボディ\n      properties:\n        providerName:\n          type: string\n          description: 外部サービス名\n      required:\n        - providerName\n    PostUnlinkExternalAccount:\n      title: PostUnlinkExternalAccount\n      type: object\n      description: POST /users/me/ex-accounts/unlink 用リクエストボディ\n      properties:\n        providerName:\n          type: string\n          description: 外部サービス名\n      required:\n        - providerName\n    UserPermission:\n      type: string\n      title: UserPermission\n      description: ユーザー権限\n      enum:\n        - get_webhook\n        - create_webhook\n        - edit_webhook\n        - delete_webhook\n        - access_others_webhook\n        - get_bot\n        - create_bot\n        - edit_bot\n        - delete_bot\n        - access_others_bot\n        - bot_action_join_channel\n        - bot_action_leave_channel\n        - create_channel\n        - get_channel\n        - edit_channel\n        - delete_channel\n        - change_parent_channel\n        - edit_channel_topic\n        - get_channel_star\n        - edit_channel_star\n        - get_my_tokens\n        - revoke_my_token\n        - get_clients\n        - create_client\n        - edit_my_client\n        - delete_my_client\n        - manage_others_client\n        - upload_file\n        - download_file\n        - delete_file\n        - get_message\n        - post_message\n        - edit_message\n        - delete_message\n        - report_message\n        - get_message_reports\n        - create_message_pin\n        - delete_message_pin\n        - get_channel_subscription\n        - edit_channel_subscription\n        - connect_notification_stream\n        - register_fcm_device\n        - get_stamp\n        - create_stamp\n        - edit_stamp\n        - edit_stamp_created_by_others\n        - delete_stamp\n        - add_message_stamp\n        - remove_message_stamp\n        - get_my_stamp_history\n        - get_stamp_palette\n        - create_stamp_palette\n        - edit_stamp_palette\n        - delete_stamp_palette\n        - get_user\n        - register_user\n        - get_me\n        - edit_me\n        - change_my_icon\n        - change_my_password\n        - edit_other_users\n        - get_user_qr_code\n        - get_user_tag\n        - edit_user_tag\n        - get_user_group\n        - create_user_group\n        - create_special_user_group\n        - edit_user_group\n        - delete_user_group\n        - edit_others_user_group\n        - web_rtc\n        - get_my_sessions\n        - delete_my_sessions\n        - get_my_external_account\n        - edit_my_external_account\n        - get_unread\n        - delete_unread\n        - get_clip_folder\n        - create_clip_folder\n        - edit_clip_folder\n        - delete_clip_folder\n      x-enum-varnames:\n        - GetWebhook\n        - CreateWebhook\n        - EditWebhook\n        - DeleteWebhook\n        - AccessOthersWebhook\n        - GetBot\n        - CreateBot\n        - EditBot\n        - DeleteBot\n        - AccessOthersBot\n        - BotActionJoinChannel\n        - BotActionLeaveChannel\n        - CreateChannel\n        - GetChannel\n        - EditChannel\n        - DeleteChannel\n        - ChangeParentChannel\n        - EditChannelTopic\n        - GetChannelStar\n        - EditChannelStar\n        - GetMyTokens\n        - RevokeMyToken\n        - GetClients\n        - CreateClient\n        - EditMyClient\n        - DeleteMyClient\n        - ManageOthersClient\n        - UploadFile\n        - DownloadFile\n        - DeleteFile\n        - GetMessage\n        - PostMessage\n        - EditMessage\n        - DeleteMessage\n        - ReportMessage\n        - GetMessageReports\n        - CreateMessagePin\n        - DeleteMessagePin\n        - GetChannelSubscription\n        - EditChannelSubscription\n        - ConnectNotificationStream\n        - RegisterFCMDevice\n        - GetStamp\n        - CreateStamp\n        - EditStamp\n        - EditStampCreatedByOthers\n        - DeleteStamp\n        - AddMessageStamp\n        - RemoveMessageStamp\n        - GetMyStampHistory\n        - GetStampPalette\n        - CreateStampPalette\n        - EditStampPalette\n        - DeleteStampPalette\n        - GetUser\n        - RegisterUser\n        - GetMe\n        - EditMe\n        - ChangeMyIcon\n        - ChangeMyPassword\n        - EditOtherUsers\n        - GetUserQRCode\n        - GetUserTag\n        - EditUserTag\n        - GetUserGroup\n        - CreateUserGroup\n        - CreateSpecialUserGroup\n        - EditUserGroup\n        - DeleteUserGroup\n        - AllUserGroupsAdmin\n        - WebRTC\n        - GetMySessions\n        - DeleteMySessions\n        - GetMyExternalAccount\n        - EditMyExternalAccount\n        - GetUnread\n        - DeleteUnread\n        - GetClipFolder\n        - CreateClipFolder\n        - EditClipFolder\n        - DeleteClipFolder\n    Version:\n      title: Version\n      type: object\n      description: バージョン・サーバーフラグ情報\n      properties:\n        revision:\n          type: string\n          description: traQ(サーバー)リビジョン\n        version:\n          type: string\n          description: traQ(サーバー)バージョン\n        flags:\n          type: object\n          required:\n            - externalLogin\n            - signUpAllowed\n          properties:\n            externalLogin:\n              type: array\n              description: 有効な外部ログインプロバイダ\n              items:\n                type: string\n            signUpAllowed:\n              type: boolean\n              description: ユーザーが自身で新規登録(POST /api/v3/users)可能か\n      required:\n        - revision\n        - version\n        - flags\n    WebRTCUserState:\n      title: WebRTCUserState\n      type: object\n      description: WebRTC状態\n      properties:\n        userId:\n          type: string\n          description: ユーザーUUID\n          format: uuid\n        channelId:\n          type: string\n          description: チャンネルUUID\n          format: uuid\n        sessions:\n          type: array\n          description: セッションの配列\n          items:\n            type: object\n            properties:\n              state:\n                type: string\n                description: 状態\n              sessionId:\n                type: string\n                description: セッションID\n            required:\n              - state\n              - sessionId\n      required:\n        - userId\n        - channelId\n        - sessions\n    MessageClip:\n      title: MessageClip\n      type: object\n      properties:\n        folderId:\n          type: string\n          format: uuid\n          description: クリップされているフォルダのID\n        clippedAt:\n          type: string\n          format: date-time\n          description: クリップされた日時\n      required:\n        - folderId\n        - clippedAt\n      description: メッセージクリップ\n    Ogp:\n      title: Ogp\n      type: object\n      x-tags:\n        - ogp\n      description: OGPの情報\n      properties:\n        type:\n          type: string\n        title:\n          type: string\n        url:\n          type: string\n        images:\n          type: array\n          items:\n            $ref: '#/components/schemas/OgpMedia'\n        description:\n          type: string\n        videos:\n          type: array\n          items:\n            $ref: '#/components/schemas/OgpMedia'\n      required:\n        - type\n        - title\n        - url\n        - images\n        - description\n        - videos\n    OgpMedia:\n      title: OgpMedia\n      type: object\n      x-tags:\n        - ogp\n      description: OGPに含まれる画像の情報\n      properties:\n        url:\n          type: string\n        secureUrl:\n          type: string\n          nullable: true\n        type:\n          type: string\n          nullable: true\n        width:\n          type: integer\n          nullable: true\n        height:\n          type: integer\n          nullable: true\n      required:\n        - url\n        - secureUrl\n        - type\n        - width\n        - height\n      x-examples: {}\n    GetNotifyCitation:\n      title: GetNotifyCitation\n      type: object\n      description: メッセージ引用通知の設定情報\n      properties:\n        notifyCitation:\n          type: boolean\n      required:\n        - notifyCitation\n    UserSettings:\n      title: UserSettings\n      type: object\n      description: ユーザー設定の情報\n      properties:\n        id:\n          type: string\n          description: ユーザーUUID\n          format: uuid\n        notifyCitation:\n          type: boolean\n          description: メッセージ引用通知の設定情報\n      required:\n        - id\n        - notifyCitation\n    PutNotifyCitationRequest:\n      title: PutNotifyCitationRequest\n      type: object\n      description: メッセージ引用通知設定リクエスト\n      properties:\n        notifyCitation:\n          type: boolean\n          description: メッセージ引用通知の設定情報\n      required:\n        - notifyCitation\n  headers:\n    X-TRAQ-MORE:\n      schema:\n        type: boolean\n      description: 指定した範囲に要素がさらに存在するかどうか\n  parameters:\n    paletteIdInPath:\n      name: paletteId\n      in: path\n      required: true\n      description: スタンプパレットUUID\n      schema:\n        type: string\n        format: uuid\n    folderIdInPath:\n      name: folderId\n      in: path\n      required: true\n      description: クリップフォルダUUID\n      schema:\n        type: string\n        format: uuid\n    botIdInPath:\n      name: botId\n      in: path\n      required: true\n      description: BOTUUID\n      schema:\n        type: string\n        format: uuid\n    clientIdInPath:\n      name: clientId\n      in: path\n      required: true\n      description: OAuth2クライアントUUID\n      schema:\n        type: string\n    tokenIdInPath:\n      name: tokenId\n      in: path\n      required: true\n      description: OAuth2トークンUUID\n      schema:\n        type: string\n        format: uuid\n    sessionIdInPath:\n      name: sessionId\n      in: path\n      required: true\n      description: セッションUUID\n      schema:\n        type: string\n        format: uuid\n    redirectInQuery:\n      schema:\n        type: string\n        format: uri\n      description: リダイレクト先\n      name: redirect\n      in: query\n    tagIdInPath:\n      name: tagId\n      in: path\n      required: true\n      description: タグUUID\n      schema:\n        type: string\n        format: uuid\n    webhookIdInPath:\n      name: webhookId\n      in: path\n      required: true\n      description: WebhookUUID\n      schema:\n        type: string\n        format: uuid\n    groupIdInPath:\n      name: groupId\n      in: path\n      required: true\n      description: ユーザーグループUUID\n      schema:\n        type: string\n        format: uuid\n    userIdInPath:\n      name: userId\n      in: path\n      required: true\n      description: ユーザーUUID\n      schema:\n        type: string\n        format: uuid\n    stampIdInPath:\n      name: stampId\n      in: path\n      required: true\n      description: スタンプUUID\n      schema:\n        type: string\n        format: uuid\n    fileIdInPath:\n      name: fileId\n      in: path\n      required: true\n      description: ファイルUUID\n      schema:\n        type: string\n        format: uuid\n    messageIdInPath:\n      name: messageId\n      in: path\n      required: true\n      description: メッセージUUID\n      schema:\n        type: string\n        format: uuid\n    limitInQuery:\n      in: query\n      name: limit\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 200\n      description: 取得する件数\n      example: 50\n    offsetInQuery:\n      in: query\n      name: offset\n      schema:\n        type: integer\n        default: 0\n      description: 取得するオフセット\n      example: 150\n    sinceInQuery:\n      in: query\n      name: since\n      schema:\n        type: string\n        format: date-time\n        default: '0000-01-01T00:00:00.000000Z'\n      description: 取得する時間範囲の開始日時\n      example: '2016-10-12T11:00:00.000000Z'\n    untilInQuery:\n      in: query\n      name: until\n      schema:\n        type: string\n        format: date-time\n      description: 取得する時間範囲の終了日時\n      example: '2016-10-12T11:00:00.0000000Z'\n    inclusiveInQuery:\n      in: query\n      name: inclusive\n      schema:\n        type: boolean\n        default: false\n      description: 範囲の端を含めるかどうか\n    orderInQuery:\n      in: query\n      name: order\n      schema:\n        type: string\n        enum:\n          - asc\n          - desc\n        default: desc\n      description: 昇順か降順か\n    channelIdInPath:\n      name: channelId\n      in: path\n      required: true\n      description: チャンネルUUID\n      schema:\n        type: string\n        format: uuid\ntags:\n  - name: user\n    description: ユーザーAPI\n  - name: me\n    description: マイユーザーAPI\n  - name: message\n    description: メッセージAPI\n  - name: channel\n    description: チャンネルAPI\n  - name: file\n    description: ファイルAPI\n  - name: user tag\n    description: ユーザータグAPI\n  - name: notification\n    description: 通知API\n  - name: stamp\n    description: スタンプAPI\n  - name: webhook\n    description: traQ Webhook API\n  - name: star\n    description: スターAPI\n  - name: pin\n    description: ピンAPI\n  - name: group\n    description: ユーザーグループAPI\n  - name: public\n    description: 外部公開API\n  - name: authentication\n    description: 認証API\n  - name: activity\n    description: アクテビティAPI\n  - name: oauth2\n    description: OAuth2に関するAPI\n  - name: bot\n    description: traQ BOT API\n  - name: webrtc\n    description: WebRTC API\n  - name: clip\n    description: クリップAPI\n  - name: ogp\n    description: OGP API\nsecurity:\n  - OAuth2: []\n  - bearerAuth: []\n",
			"canonicalURL": "/github.com/traPtitech/traQ@e69d059d074730576b60eecb6611568af0a72307/-/blob/docs/v3-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/traPtitech/traQ/blob/e69d059d074730576b60eecb6611568af0a72307/docs/v3-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/bots/{botId}/actions/leave\": post: security: security \"OAuth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"discriminator inference",
		"oauth2 security",
		"parameter content-type",
		"unsupported content types"
	]
}