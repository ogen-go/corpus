{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fzakaria/nix-http-binary-cache-api-spec"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "api.yaml",
			"byteSize": 10807,
			"content": "openapi: 3.0.1\ninfo:\n  title: Nix Binary Cache\n  description: This is a specification for a Nix binary cache\n  version: 1.0.0\nexternalDocs:\n  description: Find out more about Nix \u0026 NixOS\n  url: http://nixos.org/\nservers:\n- url: https://nix-cache.s3.amazonaws.com\n  description: The raw S3 bucket to fetch the Nix binary cache info\n- url: https://cache.nixos.org/\n  description: The CDN fronted Nix binary cache\npaths:\n  /nix-cache-info:\n    get:\n      summary: Get information about this Nix binary cache\n      operationId: getNixCacheInfo\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/NixCacheInfo'\n  /log/{deriver}:\n    get:\n      summary: Get the build logs for a particular deriver.\n              This path exists if this binary cache is hydrated from Hydra.\n      operationId: getDeriverBuildLog\n      parameters:\n      - name: deriver\n        in: path\n        description: The full name of the deriver\n        required: true\n        example: bidkcs01mww363s4s7akdhbl6ws66b0z-ruby-2.7.3.drv \n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation. This is usually compressed such as with brotli.\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: |\n                        unpacking sources\n                        unpacking source archive /nix/store/x3ir0dv32r6603df7myx14s308sfsh0c-source\n                        source root is source\n                        patching sources\n                        applying patch /nix/store/073hhn64isdlfbsjyr0sw78gyr9g7llg-source/patches/ruby/2.7/head/railsexpress/01-fix-broken-tests-caused-by-ad.patch\n                        patching file spec/ruby/core/process/groups_spec.rb\n                        patching file spec/ruby/library/etc/getgrgid_spec.rb\n                        patching file spec/ruby/library/etc/struct_group_spec.rb\n                        patching file test/ruby/test_process.rb\n                        applying patch /nix/store/073hhn64isdlfbsjyr0sw78gyr9g7llg-source/patches/ruby/2.7/head/railsexpress/02-improve-gc-stats.pa\n        404:\n          description: Not found\n          content: {}\n  /{storePathHash}.ls:\n    get:\n      summary: Get the file listings for a particular store-path (once you expand the NAR).\n      operationId: getNarFileListing\n      parameters:\n      - name: storePathHash\n        in: path\n        description: cryptographic hash of the store path\n        required: true\n        example: p4pclmv1gyja5kzc26npqpia1qqxrf0l\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation. This is usually compressed such as with brotli.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FileListing'\n        404:\n          description: Not found\n          content: {}\n  /{storePathHash}.narinfo:\n    head:\n      summary: Check if a particular path exists quickly\n      operationId: doesNarInfoExist\n      parameters:\n      - name: storePathHash\n        in: path\n        description: cryptographic hash of the store path\n        required: true\n        example: p4pclmv1gyja5kzc26npqpia1qqxrf0l\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n        404:\n          description: Not found\n    get:\n      summary: Get the NarInfo for a particular path\n      operationId: getNarInfo\n      parameters:\n      - name: storePathHash\n        in: path\n        description: cryptographic hash of the store path\n        required: true\n        example: p4pclmv1gyja5kzc26npqpia1qqxrf0l\n        schema:\n          type: string\n      responses:\n        200:\n          description: successful operation\n          content:\n            text/x-nix-narinfo:\n              schema:\n                $ref: '#/components/schemas/NarInfo'\n        404:\n          description: Not found\n          content: {}\n  # Consider using OpenAPI Links here instead\n  # this path is dictated by the NarInfo for the particular entry.\n  # see: https://swagger.io/docs/specification/links/\n  /nar/{fileHash}.nar.{compression}:\n    get:\n      summary: Get the compressed NAR object\n      operationId: getCompressedNar\n      parameters:\n      - name: fileHash\n        in: path\n        description: The base32 cryptographic hash of the NAR.\n        required: true\n        example: 1w1fff338fvdw53sqgamddn1b2xgds473pv6y13gizdbqjv4i5p3\n        schema:\n          type: string\n      - name: compression\n        in: path\n        description: The compression algorithm listed in the NarInfo object\n        required: true\n        example: xz\n        schema:\n          type: string\n          enum: [xz, bzip2]\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/x-nix-nar:\n              schema:\n                type: string\n                format: binary\n        404:\n          description: Not found\n          content: {}\ncomponents:\n  schemas:\n    # see: https://releases.nixos.org/nix/nix-1.11.9/manual/index.html#idm140737316141296\n    NixCacheInfo:\n      type: object\n      required:\n        - StoreDir\n        - WantMassQuery\n        - Priority\n      properties:\n        StoreDir:\n          type: string\n          description: The path of the Nix store to which this binary cache applies.\n                       Binaries are not relocatable — a binary built for /nix/store won’t generally work in /home/alice/store\n                       — so to prevent binaries from being used in a wrong store, a binary cache is only used if its StoreDir\n                       matches the local Nix configuration. The default is /nix/store.\n          example: /nix/store\n        WantMassQuery:\n          type: integer\n          description: Query operations such as nix-env -qas can cause thousands of cache queries,\n                       and thus thousands of HTTP requests, to determine which packages are available in binary form.\n                       While these requests are small, not every server may appreciate a potential onslaught of queries.\n                       If WantMassQuery is set to 0 (default), “mass queries” such as nix-env -qas will skip this cache.\n                       Thus a package may appear not to have a binary substitute. However, the binary will still be used\n                       when you actually install the package. If WantMassQuery is set to 1, mass queries will use this cache.\n        Priority:\n          type: integer\n          description: Each binary cache has a priority (defaulting to 50).\n                       Binary caches are checked for binaries in order of ascending priority;\n                       thus a higher number denotes a lower priority.\n                       The binary cache https://cache.nixos.org has priority 40.\n    FileListingEntryType:\n      type: string\n      enum: [directory, regular]\n    FileListingDirectoryEntry:\n      type: object\n      required:\n        - type\n        - entries\n      properties:\n        type:\n          $ref: '#/components/schemas/FileListingEntryType'\n        entries:\n          type: object\n          additionalProperties:\n            oneOf:\n              - $ref: '#/components/schemas/FileListingFileEntry'\n              - $ref: '#/components/schemas/FileListingDirectoryEntry'\n    FileListingFileEntry:\n      type: object\n      required:\n        - type\n        - size\n        - narOffset\n      properties:\n        type:\n          $ref: '#/components/schemas/FileListingEntryType'\n        size:\n          type: integer\n          description: The size of the file\n        narOffset:\n          type: integer\n          description: The offset in bytes within the NAR\n        executable:\n          type: boolean\n          description: Whether this file should be made executable\n    FileListing:\n      type: object\n      properties:\n        version:\n          type: integer\n          description: The version of this current format\n        root:\n          oneOf:\n            - $ref: '#/components/schemas/FileListingDirectoryEntry'\n            - $ref: '#/components/schemas/FileListingFileEntry'\n    NarInfo:\n      type: object\n      required:\n        - StorePath\n        - URL\n        - FileHash\n        - NarHash\n        - FileSize\n        - NarSize\n        - Sig\n        - References\n      properties:\n        StorePath:\n          type: string\n          description: The full store path, including the name part (e.g., glibc-2.7). It must match the requested store path.\n          example: /nix/store/p4pclmv1gyja5kzc26npqpia1qqxrf0l-ruby-2.7.3\n        URL:\n          type: string\n          description: The URL of the NAR, relative to the binary cache URL.\n          example: nar/1w1fff338fvdw53sqgamddn1b2xgds473pv6y13gizdbqjv4i5p3.nar.xz\n        Compression:\n          type: string\n          description: The compression method; either xz or bzip2.\n          example: xz\n        FileHash:\n          type: string\n          description: The cryptographic hash of the file to download in base32\n          example: sha256:1w1fff338fvdw53sqgamddn1b2xgds473pv6y13gizdbqjv4i5p3\n        FileSize:\n          type: integer\n          minimum: 0\n        NarHash:\n          type: string\n          description: The cryptographic hash of the NAR (decompressed) in base 32\n          example: sha256:1impfw8zdgisxkghq9a3q7cn7jb9zyzgxdydiamp8z2nlyyl0h5h\n        NarSize:\n          type: integer\n          minimum: 0\n        Deriver:\n          type: string\n          description: The deriver of the store path, without the Nix store prefix. This field is optional.\n          example: bidkcs01mww363s4s7akdhbl6ws66b0z-ruby-2.7.3.drv\n        System:\n          type: string\n          description: The Nix platform type of this binary, if known. This field is optional.\n          example: linux-x86-64\n        References:\n          type: array\n          items:\n            type: string\n          example: 0d71ygfwbmy1xjlbj1v027dfmy9cqavy-libffi-3.3\n          description: Store paths for direct runtime dependencies\n        Sig:\n          type: string\n          description: A signature of the the form key-name:sig, where key-name is the symbolic name\n                       of the key pair used to sign and verify the cache (e.g. cache.example.org-1),\n                       and sig is the actual signature, computed over the StorePath, NarHash, NarSize\n                       and References fields using the Ed25519 public-key signature system.\n          example: cache.nixos.org-1:GrGV/Ls10TzoOaCnrcAqmPbKXFLLSBDeGNh5EQGKyuGA4K1wv1LcRVb6/sU+NAPK8lDiam8XcdJzUngmdhfTBQ==\n",
			"canonicalURL": "/github.com/fzakaria/nix-http-binary-cache-api-spec@debc89c21dd535ebe132a42e7bb5840e08850c28/-/blob/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/fzakaria/nix-http-binary-cache-api-spec/blob/debc89c21dd535ebe132a42e7bb5840e08850c28/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/log/{deriver}\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}