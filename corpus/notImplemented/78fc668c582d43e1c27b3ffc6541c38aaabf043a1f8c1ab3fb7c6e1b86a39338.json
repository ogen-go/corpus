{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/4lch4/Ansel-API"
		},
		"file": {
			"name": "Ansel-API.yaml",
			"size": 0,
			"path": "openapi/Ansel-API.yaml",
			"byteSize": 9877,
			"content": "openapi: 3.0.0\ninfo:\n  title: Ansel-API\n  version: '1.0.0'\n  # summary: An API for interacting with S3/B2 compatible storage methods # For OpenAPI 3.1.0\n  description: Ansel is an API for interacting with S3/B2 compatible storage mediums. Provides endpoints for uploading, updating, retrieving, and deleting assets within the storage medium.\n  contact:\n    name: 4lch4\n    url: https://4lch4.social\n    email: ansel@4lch4.email\n  license:\n    name: GPL-3.0-only\n    url: https://spdx.org/licenses/GPL-3.0-only.html\n    # identifier: GPL-3.0-only # For OpenAPI 3.1.0\n\nexternalDocs:\n  url: https://docs.ansel.rest\n\ntags:\n  - name: Assets\n    description: Operations related to assets/blobs.\n  # - name: Meta\n  #   description: Operations related to the Ansel API itself.\n\nservers:\n  - url: http://localhost:8080\n    description: Local Test\n  - url: https://test.ansel.rest\n    description: Ansel Test\n  - url: https://ansel.rest\n    description: Ansel Prod\n\npaths:\n  /delete/{folderName}:\n    delete:\n      description: Delete the folder with the given `folderName` and all the assets within.\n      operationId: deleteAssets\n      summary: Delete a given asset from a given folder.\n      tags: [Assets]\n      parameters:\n        - $ref: '#/components/parameters/FolderName'\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyOKResponse'\n        '401':\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        '404':\n          description: There was no folder with the given `folderName`.\n\n  /delete/{folderName}/{assetId}:\n    delete:\n      description: Delete the asset within the given folder with the given ID.\n      operationId: deleteAsset\n      summary: Delete a given asset from a given folder.\n      tags: [Assets]\n      parameters:\n        - $ref: '#/components/parameters/FolderName'\n        - $ref: '#/components/parameters/AssetId'\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyOKResponse'\n        '401':\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        '404':\n          description: There was no asset in the given folder with the given `assetId`.\n\n  /get/{folderName}:\n    get:\n      description: Gets a random asset from the folder with the name given by the parameter value.\n      operationId: getRandomAsset\n      summary: Retrieves a random asset from a given folder.\n      tags: [Assets]\n      parameters:\n        - $ref: '#/components/parameters/FolderName'\n      responses:\n        '200':\n          $ref: '#/components/responses/AssetOKResponse'\n        '401':\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        '404':\n          description: There was no folder with the given folder name.\n\n  /get/{folderName}/{assetId}:\n    get:\n      description: Retrieves an asset from the folder with the given name, with the given ID.\n      operationId: getAsset\n      summary: Retrieve a specific asset from a given folder.\n      tags: [Assets]\n      parameters:\n        - $ref: '#/components/parameters/FolderName'\n        - $ref: '#/components/parameters/AssetId'\n      responses:\n        '200':\n          $ref: '#/components/responses/AssetOKResponse'\n        '401':\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        '404':\n          description: There was no asset in the given folder with the given `assetId`.\n\n  /list:\n    get:\n      description: Lists all of the top-level folders within a given bucket. Useful for organizing.\n      operationId: listFolders\n      summary: List Folders within a Bucket.\n      tags: [Assets]\n      responses:\n        '200':\n          $ref: '#/components/responses/FolderListOKResponse'\n        '401':\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        '500':\n          description: Internal Server Error\n\n  /list/{folderName}:\n    get:\n      description: List all of the folders within a given folder.\n      operationId: listFoldersWithinFolder\n      summary: List folders within a folder.\n      tags: [Assets]\n      parameters:\n        - $ref: '#/components/parameters/FolderName'\n      responses:\n        '200':\n          $ref: '#/components/responses/FolderListOKResponse'\n        '401':\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        '404':\n          description: There was no folder with the given `folderName`.\n\n  /upload/{folderName}:\n    post:\n      description: Upload an asset to the given folder and assign it the next ID in the sequence.\n      operationId: uploadAsset\n      summary: Upload a new asset to a given folder.\n      tags: [Assets]\n      parameters:\n        - $ref: '#/components/parameters/FolderName'\n      responses:\n        # Returns a 201 (Created) if the asset was successfully uploaded, with the message body being a URL to the new asset.\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n                description: The URL to the newly uploaded asset.\n                example: https://i.ansel.rest/confused/confused-1.gif\n        '401':\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        '404':\n          description: There was no folder with the given `folderName`.\n\n  /upload/{folderName}/{assetId}:\n    post:\n      description: Upload a new asset to the given folder with the given ID.\n      operationId: uploadAssetById\n      summary: Upload an asset to the given folder and assign the given ID.\n      tags: [Assets]\n      parameters:\n        - $ref: '#/components/parameters/FolderName'\n        - $ref: '#/components/parameters/AssetId'\n      responses:\n        # Returns a 201 (Created) if the asset was successfully uploaded, with the message body being a URL to the new asset.\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n                description: The URL to the newly uploaded asset.\n                example: https://i.ansel.rest/confused/confused-1.gif\n        '401':\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        '404':\n          description: There was no folder with the given `folderName`.\n        '409':\n          description: |\n            There is already an asset with the provided `assetId`. Use the PUT\n            method to update or use a different `assetId`.\n\n    put:\n      description: Update an existing asset from the given folder with the given ID.\n      operationId: updateAsset\n      summary: Update an existing asset, within the folder with the given name, with the given ID.\n      tags: [Assets]\n      parameters:\n        - $ref: '#/components/parameters/FolderName'\n        - $ref: '#/components/parameters/AssetId'\n      responses:\n        # Returns a 201 (Created) if the asset was successfully uploaded, with the message body being a URL to the new asset.\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n                description: The URL to the newly uploaded asset.\n                example: https://i.ansel.rest/confused/confused-1.gif\n        '401':\n          $ref: \"#/components/responses/UnauthorizedResponse\"\n        '404':\n          description: There was no asset in the given folder with the given `assetId`.\n        '409':\n          description: |\n            There is already an asset with the provided `assetId`. Use the PUT\n            method to update or use a different `assetId`.\n\ncomponents:\n  responses:\n    AssetOKResponse:\n      description: OK\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AssetUrl'\n\n    EmptyOKResponse:\n      description: OK\n      content:\n        text/plain:\n          schema:\n            type: string\n            description: The message body.\n            example: OK\n\n    FolderListOKResponse:\n      description: OK\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/FolderList'\n\n    UnauthorizedResponse:\n      description: The request was not properly authorized/authenticated.\n      content:\n        application/json:\n          schema:\n            type: string\n            description: The body of the message, containing the exact error.\n            example: The token provided does not exist.\n\n  parameters:\n    AssetId:\n      name: assetId\n      in: path\n      required: true\n      description: The ID of the specific asset you wish to interact with.\n      schema:\n        type: string\n\n    FolderName:\n      name: folderName\n      in: path\n      required: true\n      description: The name of the folder containing the asset/blob.\n      schema:\n        type: string\n      examples:\n        Simple:\n          description: For referencing a root-level folder.\n          summary: Reference a root-level folder.\n          value: alcha\n        Nested:\n          description: |\n            If you need to reference folders within a nested directory: Use\n            slashes and omit a trailing-slash.\n          summary: Referencing a nested directory.\n          value: alcha/poke/0\n\n  schemas:\n    AssetUrl:\n      type: string\n      description: The URL that is associated with a given asset/blob.\n      example: https://i.ansel.rest/confused/confused-1.gif\n\n    FolderList:\n      type: object\n      description: An object containing an array of the root folder names.\n      properties:\n        count:\n          type: number\n          description: The amount of folders available.\n        data:\n          type: array\n          description: An array of folder names.\n          uniqueItems: true\n          items:\n            type: string\n      required:\n        - count\n        - data\n      example:\n        count: 54\n        data:\n          - alcha\n          - bite\n          - blush\n          - cats\n          - ...\n",
			"canonicalURL": "/github.com/4lch4/Ansel-API@2c75ee216da5c09d695633afed68873bde686e39/-/blob/openapi/Ansel-API.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/4lch4/Ansel-API/blob/2c75ee216da5c09d695633afed68873bde686e39/openapi/Ansel-API.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/delete/{folderName}\": delete: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}