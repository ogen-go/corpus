{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mariokaufmann/zagreus"
		},
		"file": {
			"name": "spec.yaml",
			"size": 0,
			"path": "zagreus-swagger-docs/spec.yaml",
			"byteSize": 7287,
			"content": "openapi: 3.0.2\ninfo:\n  title: Zagreus Server API\n  version: 0.0.1\n  description: description of the zagreus server HTTP API\n  license:\n    name: MIT License\n    url: 'https://github.com/mariokaufmann/zagreus/blob/main/LICENSE'\n  x-logo:\n    url: ''\nservers:\n  - url: 'http://localhost:58179'\npaths:\n  /api/version:\n    summary: Get server version\n    description: Returns the zagreus server version\n    get:\n      tags:\n        - general\n      responses:\n        '200':\n          content:\n            text/plain:\n              example: 0.0.1\n          description: Version retrieved successfully.\n  '/api/template/{templateName}':\n    summary: Upload template\n    description: \u003e-\n      Uploads the given packed template to the server. If the template was\n      uploaded before it is replaced with the new version.\n    post:\n      requestBody:\n        description: The packed template file to upload.\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                template.zip:\n                  format: binary\n                  type: string\n      tags:\n        - template\n      operationId: uploadTemplate\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n    parameters:\n      - $ref: '#/components/parameters/templateName'\n  '/api/template/{templateName}/asset':\n    summary: Manage template assets\n    get:\n      description: Returns a recursive list of the currently uploaded asset files for the template with the given name.\n      tags:\n        - template\n      operationId: getAssets\n      responses:\n        '200':\n          description: 'Assets returned successfully'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AssetResponse'\n    post:\n      description: Uploads the given asset to the specified template so that it can be used in the template.\n      requestBody:\n        description: The asset file to upload.\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                file:\n                  format: binary\n                  type: string\n      tags:\n        - template\n      operationId: uploadAsset\n      responses:\n        '200':\n          content:\n            application/json:\n              example: [\"asset1.png\", \"main.css\"]\n          description: Asssets retrieved successfully.\n    parameters:\n      - $ref: '#/components/parameters/templateName'\n  '/api/template/{templateName}/data/text':\n    summary: Set the text content of a text element\n    description: 'Searches for an element with the given id and sets its text content to the given value'\n    parameters:\n      - $ref: '#/components/parameters/templateName'\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n                text:\n                  type: string\n              example:\n                id: ScoreboardTimeText\n                text: '12:15'\n      tags:\n        - data\n      operationId: setText\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n  '/api/template/{templateName}/data/class/add':\n    summary: Adds a CSS class to an element\n    description: 'Searches for an element with the given id and adds the given CSS class from the element'\n    parameters:\n      - $ref: '#/components/parameters/templateName'\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n                class:\n                  type: string\n              example:\n                id: Scoreboard\n                class: 'active-element'\n      tags:\n        - data\n      operationId: addClass\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n  '/api/template/{templateName}/data/class/remove':\n    summary: Removes a CSS class from an element\n    description: 'Searches for an element with the given id and removes the given CSS class from the element'\n    parameters:\n      - $ref: '#/components/parameters/templateName'\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n                class:\n                  type: string\n              example:\n                id: Scoreboard\n                class: 'active-element'\n      tags:\n        - data\n      operationId: removeClass\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n  '/api/template/{templateName}/data/animation/{animationName}':\n    summary: Execute an animation\n    description: 'Executes the animation with the given name'\n    parameters:\n      - $ref: '#/components/parameters/templateName'\n      - name: animationName\n        required: true\n        in: path\n        description: The name of the animation\n        example: ScoreboardHide\n        schema:\n          type: string\n    post:\n      tags:\n        - data\n      operationId: executeAnimation\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n  '/api/template/{templateName}/data/image':\n    summary: Set source of image element\n    description: 'Searches for the image element with the given id and sets its source to the given asset'\n    parameters:\n      - $ref: '#/components/parameters/templateName'\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n                asset:\n                  type: string\n              example:\n                id: ScoreboardTeamImage\n                asset: 'logo.png'\n      tags:\n        - data\n      operationId: setImageSource\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\ncomponents:\n  parameters:\n    templateName:\n      example: my-template\n      name: templateName\n      description: The name of a template.\n      schema:\n        description: \u003e-\n          A template name must consist of more than zero alphanumeric or '-'\n          characters.\n        pattern: '^[\\-a-z0-9]+$'\n        type: string\n        example: my-template\n      in: path\n      required: true\n  responses:\n    '200':\n      description: Operation succeeded\n  schemas:\n    AssetResponse:\n      description: \"An asset described by its name and optionally child assets (if it's a folder).\"\n      type: object\n      properties:\n        name:\n          type: string\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/AssetResponse'\ntags:\n  - name: general\n    description: General operations\n  - name: template\n    description: Operations for managing templates\n  - name: data\n    description: Operations for manipulating the data in a template\nexternalDocs:\n  description: Source repository\n  url: 'https://github.com/mariokaufmann/zagreus'\nsecurity: []\n",
			"canonicalURL": "/github.com/mariokaufmann/zagreus@8797eba89eb6af492003701812f3672e61987076/-/blob/zagreus-swagger-docs/spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mariokaufmann/zagreus/blob/8797eba89eb6af492003701812f3672e61987076/zagreus-swagger-docs/spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/version\": get: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}