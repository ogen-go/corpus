{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/burger-tuesday/burger-tuesday"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "backend/src/main/resources/openapi/api.yaml",
			"byteSize": 19002,
			"content": "openapi: 3.0.1\ninfo:\n  title: Burger Tuesday API\n  description: Burger Tuesday API documentation\n  version: 0.0.1\nservers:\n  - url: https://api.burgertuesday.rocks/api\ntags:\n  - name: restaurant-resource\n    description: Restaurant Resource\n  - name: review-resource\n    description: Review Resource\n  - name: visit-resource\n    description: Visit Resource\n  - name: user-jwt-controller\n    description: User JWT Controller\npaths:\n  /v1/_search/restaurants:\n    get:\n      tags:\n        - restaurant-resource\n      summary: searchRestaurants\n      operationId: searchRestaurantsUsingGET\n      parameters:\n        - name: page\n          in: query\n          description: Page number of the requested page\n          schema:\n            type: integer\n            format: int32\n        - name: query\n          in: query\n          description: query\n          required: true\n          schema:\n            type: string\n        - name: size\n          in: query\n          description: Size of a page\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: 'Sorting criteria in the format: property(,asc|desc). Default\n          sort order is ascending. Multiple sort criteria are supported.'\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Restaurant'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n  /v1/_search/reviews:\n    get:\n      tags:\n        - review-resource\n      summary: searchReviews\n      operationId: searchReviewsUsingGET\n      parameters:\n        - name: page\n          in: query\n          description: Page number of the requested page\n          schema:\n            type: integer\n            format: int32\n        - name: query\n          in: query\n          description: query\n          required: true\n          schema:\n            type: string\n        - name: size\n          in: query\n          description: Size of a page\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: 'Sorting criteria in the format: property(,asc|desc). Default\n          sort order is ascending. Multiple sort criteria are supported.'\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Review'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n  /v1/_search/visits:\n    get:\n      tags:\n        - visit-resource\n      summary: searchVisits\n      operationId: searchVisitsUsingGET\n      parameters:\n        - name: page\n          in: query\n          description: Page number of the requested page\n          schema:\n            type: integer\n            format: int32\n        - name: query\n          in: query\n          description: query\n          required: true\n          schema:\n            type: string\n        - name: size\n          in: query\n          description: Size of a page\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: 'Sorting criteria in the format: property(,asc|desc). Default\n          sort order is ascending. Multiple sort criteria are supported.'\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Visit'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n  /v1/restaurants:\n    get:\n      tags:\n        - restaurant-resource\n      summary: getAllRestaurants\n      operationId: getAllRestaurantsUsingGET\n      parameters:\n        - name: page\n          in: query\n          description: Page number of the requested page\n          schema:\n            type: integer\n            format: int32\n        - name: size\n          in: query\n          description: Size of a page\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: 'Sorting criteria in the format: property(,asc|desc). Default\n          sort order is ascending. Multiple sort criteria are supported.'\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Restaurant'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n    put:\n      tags:\n        - restaurant-resource\n      summary: updateRestaurant\n      operationId: updateRestaurantUsingPUT\n      requestBody:\n        description: restaurant\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Restaurant'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Restaurant'\n        201:\n          description: Created\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n    post:\n      tags:\n        - restaurant-resource\n      summary: createRestaurant\n      operationId: createRestaurantUsingPOST\n      requestBody:\n        description: restaurant\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Restaurant'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Restaurant'\n        201:\n          description: Created\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n  /v1/restaurants/{id}:\n    get:\n      tags:\n        - restaurant-resource\n      summary: getRestaurant\n      operationId: getRestaurantUsingGET\n      parameters:\n        - name: id\n          in: path\n          description: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Restaurant'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n    delete:\n      tags:\n        - restaurant-resource\n      summary: deleteRestaurant\n      operationId: deleteRestaurantUsingDELETE\n      parameters:\n        - name: id\n          in: path\n          description: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: OK\n          content: {}\n        204:\n          description: No Content\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n      deprecated: false\n  /v1/reviews:\n    get:\n      tags:\n        - review-resource\n      summary: getAllReviews\n      operationId: getAllReviewsUsingGET\n      parameters:\n        - name: page\n          in: query\n          description: Page number of the requested page\n          schema:\n            type: integer\n            format: int32\n        - name: size\n          in: query\n          description: Size of a page\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: 'Sorting criteria in the format: property(,asc|desc). Default\n          sort order is ascending. Multiple sort criteria are supported.'\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Review'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n    put:\n      tags:\n        - review-resource\n      summary: updateReview\n      operationId: updateReviewUsingPUT\n      requestBody:\n        description: review\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Review'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Review'\n        201:\n          description: Created\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n    post:\n      tags:\n        - review-resource\n      summary: createReview\n      operationId: createReviewUsingPOST\n      requestBody:\n        description: review\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Review'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Review'\n        201:\n          description: Created\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n  /v1/reviews/{id}:\n    get:\n      tags:\n        - review-resource\n      summary: getReview\n      operationId: getReviewUsingGET\n      parameters:\n        - name: id\n          in: path\n          description: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Review'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n    delete:\n      tags:\n        - review-resource\n      summary: deleteReview\n      operationId: deleteReviewUsingDELETE\n      parameters:\n        - name: id\n          in: path\n          description: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: OK\n          content: {}\n        204:\n          description: No Content\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n      deprecated: false\n  /v1/visits:\n    get:\n      tags:\n        - visit-resource\n      summary: getAllVisits\n      operationId: getAllVisitsUsingGET\n      parameters:\n        - name: page\n          in: query\n          description: Page number of the requested page\n          schema:\n            type: integer\n            format: int32\n        - name: size\n          in: query\n          description: Size of a page\n          schema:\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: 'Sorting criteria in the format: property(,asc|desc). Default\n          sort order is ascending. Multiple sort criteria are supported.'\n          style: form\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Visit'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n    put:\n      tags:\n        - visit-resource\n      summary: updateVisit\n      operationId: updateVisitUsingPUT\n      requestBody:\n        description: visit\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Visit'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Visit'\n        201:\n          description: Created\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n    post:\n      tags:\n        - visit-resource\n      summary: createVisit\n      operationId: createVisitUsingPOST\n      requestBody:\n        description: visit\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Visit'\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Visit'\n        201:\n          description: Created\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n  /v1/visits/{id}:\n    get:\n      tags:\n        - visit-resource\n      summary: getVisit\n      operationId: getVisitUsingGET\n      parameters:\n        - name: id\n          in: path\n          description: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Visit'\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\n    delete:\n      tags:\n        - visit-resource\n      summary: deleteVisit\n      operationId: deleteVisitUsingDELETE\n      parameters:\n        - name: id\n          in: path\n          description: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: OK\n          content: {}\n        204:\n          description: No Content\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n      deprecated: false\n  /v1/jwt/authToken:\n    post:\n      tags:\n        - user-jwt-controller\n      summary: authorize\n      operationId: authorizeUsingPOST\n      responses:\n        200:\n          description: OK\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/AuthToken'\n        201:\n          description: Created\n          content: {}\n        401:\n          description: Unauthorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      deprecated: false\ncomponents:\n  schemas:\n    Restaurant:\n      title: Restaurant\n      type: object\n      properties:\n        address:\n          type: string\n        googleRating:\n          type: number\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        permanentlyClosed:\n          type: boolean\n        placeId:\n          type: string\n        priceLevel:\n          type: string\n        url:\n          type: string\n        vicinity:\n          type: string\n        visits:\n          type: array\n          items:\n            $ref: '#/components/schemas/Visit'\n        website:\n          type: string\n    Visit:\n      title: Visit\n      type: object\n      properties:\n        date:\n          type: string\n          format: date\n        id:\n          type: integer\n          format: int64\n        restaurant:\n          $ref: '#/components/schemas/Restaurant'\n        reviews:\n          type: array\n          items:\n            $ref: '#/components/schemas/Review'\n    AuthToken:\n      title: AuthToken\n      type: object\n      properties:\n        token:\n          type: string\n    Review:\n      title: Review\n      type: object\n      properties:\n        createdByName:\n          type: string\n        id:\n          type: integer\n          format: int64\n        review:\n          type: string\n        visit:\n          $ref: '#/components/schemas/Visit'\n",
			"canonicalURL": "/github.com/burger-tuesday/burger-tuesday@019830d238f9b1c670fc2e1f31e457bd174898a9/-/blob/backend/src/main/resources/openapi/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/burger-tuesday/burger-tuesday/blob/019830d238f9b1c670fc2e1f31e457bd174898a9/backend/src/main/resources/openapi/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/visits\": get: responses: 200: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}