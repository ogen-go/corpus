{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nordicsmartgovernment/nordicsmartgovernment"
		},
		"file": {
			"name": "DocumentAPI.yaml",
			"size": 0,
			"path": "src/main/resources/openAPI/DocumentAPI.yaml",
			"byteSize": 5325,
			"content": "openapi: 3.0.2\ninfo:\n  title: The Nordic Smart Government's document/voucher collection API\n  description: Provides the The Nordic Smart Government's document/voucher (invoices, bank statements, receipts, sales and purchase orders etc) collection\n  version: '0.1'\n  contact:\n    name: Nordic Smart Government\n    url: 'https://nordicsmartgovernment.github.io'\n  license:\n    name: CC0 1.0 Universal (CC0 1.0)\n    url: 'http://creativecommons.org/publicdomain/zero/1.0/deed.no'\nexternalDocs:\n  description: Documentation on nordicsmartgovernment docs\n  url: https://nordicsmartgovernment.github.io\nservers:\n  - url: 'https://api.nordicsmartgovernment.org'\n    description: The reference implementation server\n  - url: 'https://nsg.apps.ocp-ppe.regsys.brreg.no/swagger-ui.html'\n    description: The Demo-environment Swagger UI endpoint\ntags:\n  - name: documentCollection\n    description: documentCollection operations\npaths:\n  /document/{companyId}:\n    get:\n      tags:\n        - documentCollection\n      description: List every company document in the catalog\n      operationId: getDocuments\n      parameters:\n        - name: companyId\n          in: path\n          required: true\n          description: The document owner companyId\n          schema:\n            type: string\n        - name: documentTypes\n          in: query\n          description: Filter documents by document types (comma-separated list of mime-types)\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/xml:\n              schema:\n                type: object\n                description: XML array of all matching company documents (BASE64-encoded)\n            application/json:\n              schema:\n                type: object\n                description: List of IDs for all matching company documents\n    post:\n      tags:\n        - documentCollection\n      description: create new document in the catalog\n      operationId: createDocument\n      parameters:\n        - name: companyId\n          in: path\n          required: true\n          description: The document owner companyId\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Created\n          headers:\n            Location:\n              schema:\n                type: string\n              description: The url to the new document\n      requestBody:\n        required: true\n        content:\n          \"*/*\":\n            schema:\n              type: string\n              description: A document (Finvoice/Invoice etc) in the form of a string\n  /document/{companyId}/{transactionId}:\n    get:\n      tags:\n        - documentCollection\n      description: Get documents by transaction id\n      operationId: getDocumentsByTransactionId\n      parameters:\n        - name: companyId\n          in: path\n          required: true\n          description: The document owner companyId\n          schema:\n            type: string\n        - name: transactionId\n          in: path\n          required: true\n          description: The id of the document transaction\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: List of IDs for all matching transaction documents\n    post:\n      tags:\n        - documentCollection\n      description: create new document in the catalog and appends it to the given transaction\n      operationId: createDocumentInTransaction\n      parameters:\n        - name: companyId\n          in: path\n          required: true\n          description: The document owner companyId\n          schema:\n            type: string\n        - name: transactionId\n          in: path\n          required: true\n          description: The id of the transaction to append to\n          schema:\n            type: string\n      responses:\n        '201':\n          description: Created\n          headers:\n            Location:\n              schema:\n                type: string\n              description: The url to the new document\n      requestBody:\n        required: true\n        content:\n          \"*/*\":\n            schema:\n              type: string\n              description: A document (Finvoice/Invoice etc) in the form of a string\n  /document/{companyId}/{transactionId}/{documentId}:\n    get:\n      tags:\n        - documentCollection\n      description: Get a document by id\n      operationId: getDocumentById\n      parameters:\n        - name: companyId\n          in: path\n          required: true\n          description: The document owner companyId\n          schema:\n            type: string\n        - name: transactionId\n          in: path\n          required: true\n          description: The id of the document transaction\n          schema:\n            type: string\n        - name: documentId\n          in: path\n          required: true\n          description: The id of the document\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Document\"\ncomponents:\n  schemas:\n    Document:\n      type: object\n",
			"canonicalURL": "/github.com/nordicsmartgovernment/nordicsmartgovernment@792465dc517d198b1f6ce88b8e9865fd421c350e/-/blob/src/main/resources/openAPI/DocumentAPI.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nordicsmartgovernment/nordicsmartgovernment/blob/792465dc517d198b1f6ce88b8e9865fd421c350e/src/main/resources/openAPI/DocumentAPI.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/document/{companyId}\": post: requestBody: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}