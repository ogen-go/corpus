{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/serverless/event-gateway"
		},
		"file": {
			"name": "openapi-config-api.yaml",
			"size": 0,
			"path": "docs/openapi/openapi-config-api.yaml",
			"byteSize": 25493,
			"content": "openapi: \"3.0.1\"\n\ninfo:\n  title: Event Gateway - Configuration API\n  version: \"0.8.1\"\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  contact:\n    name: Serverless, Inc.\n    url: http://www.serverless.com\n\nservers:\n- url: http://localhost:4001/{basePath}\n  description: Locally running Event Gateway\n  variables:\n    basePath:\n      default: v1\n\ntags:\n- name: \"event type\"\n  description: \"Operations about event types\"\n- name: \"function\"\n  description: \"Operations about functions\"\n- name: \"subscription\"\n  description: \"Operations about subscriptions\"\n- name: \"cors\"\n  description: \"Operations about CORS\"\n\npaths:\n  /spaces/{spaceName}/eventtypes:\n    summary: \"Operations about event types\"\n    get:\n      summary: \"List event types\"\n      tags:\n      - \"event type\"\n      operationId: \"ListEventTypes\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/Filters\"\n      responses:\n        200:\n          description: \"event types returned\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventTypes\"\n        500:\n          $ref: '#/components/responses/Error'\n    post:\n      summary: \"Create event type\"\n      tags:\n      - \"event type\"\n      operationId: \"CreateEventType\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateEventType\"\n      responses:\n        201:\n          description: \"event type created\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventType\"\n        400:\n          $ref: '#/components/responses/ValidationError'\n        500:\n          $ref: '#/components/responses/Error'\n\n  /spaces/{spaceName}/eventtypes/{eventTypeName}:\n    summary: \"Operations about single event type\"\n    get:\n      summary: \"Get event type\"\n      tags:\n      - \"event type\"\n      operationId: \"GetEventType\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/EventTypeName\"\n      responses:\n        200:\n          description: \"event type returned\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventType\"\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n    put:\n      summary: \"Update event type\"\n      tags:\n      - \"event type\"\n      operationId: \"UpdateEventType\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/EventTypeName\"\n      requestBody:\n        $ref: \"#/components/requestBodies/UpdateEventType\"\n      responses:\n        200:\n          description: \"event type updated\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventType\"\n        400:\n          $ref: '#/components/responses/ValidationError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n    delete:\n      summary: \"Delete event type\"\n      tags:\n      - \"event type\"\n      operationId: \"DeleteEventType\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/EventTypeName\"\n      responses:\n        204:\n          description: \"event type deleted\"\n        400:\n          $ref: '#/components/responses/EventTypeHasSubscriptionsError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n\n  /spaces/{spaceName}/functions:\n    summary: \"Operations about functions\"\n    get:\n      summary: \"List functions\"\n      tags:\n      - \"function\"\n      operationId: \"ListFunctions\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/Filters\"\n      responses:\n        200:\n          description: \"functions returned\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Functions\"\n        500:\n          $ref: '#/components/responses/Error'\n    post:\n      summary: \"Register function\"\n      tags:\n      - \"function\"\n      operationId: \"CreateFunction\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateFunction\"\n      responses:\n        201:\n          description: \"function registered\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Function\"\n        400:\n          $ref: '#/components/responses/ValidationError'\n        500:\n          $ref: '#/components/responses/Error'\n\n  /spaces/{spaceName}/functions/{functionId}:\n    summary: \"Operations about single function\"\n    get:\n      summary: \"Get function\"\n      tags:\n      - \"function\"\n      operationId: \"GetFunction\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/FunctionID\"\n      responses:\n        200:\n          description: \"function returned\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Function\"\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n    put:\n      summary: \"Update function\"\n      tags:\n      - \"function\"\n      operationId: \"UpdateFunction\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/FunctionID\"\n      requestBody:\n        $ref: \"#/components/requestBodies/UpdateFunction\"\n      responses:\n        200:\n          description: \"function updated\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Function\"\n        400:\n          $ref: '#/components/responses/ValidationError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n    delete:\n      summary: \"Delete function\"\n      tags:\n      - \"function\"\n      operationId: \"DeleteFunction\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/FunctionID\"\n      responses:\n        204:\n          description: \"function deleted\"\n        400:\n          $ref: '#/components/responses/FunctionHasSubscriptionsError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n\n  /spaces/{spaceName}/subscriptions:\n    summary: \"Operations about subscriptions\"\n    get:\n      summary: \"List subscriptions\"\n      tags:\n      - \"subscription\"\n      operationId: \"ListSubscriptions\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/Filters\"\n      responses:\n        200:\n          description: \"subscriptions returned\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscriptions\"\n        500:\n          $ref: '#/components/responses/Error'\n    post:\n      summary: \"Create subscription\"\n      tags:\n      - \"subscription\"\n      operationId: \"CreateSubscription\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateSubscription\"\n      responses:\n        201:\n          description: \"subscription created\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscription\"\n        400:\n          $ref: '#/components/responses/ValidationError'\n        500:\n          $ref: '#/components/responses/Error'\n\n  /spaces/{spaceName}/subscription/{subscriptionId}:\n    summary: \"Operations about single subscription\"\n    get:\n      summary: \"Get subscription\"\n      tags:\n      - \"subscription\"\n      operationId: \"GetSubscription\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/SubscriptionID\"\n      responses:\n        200:\n          description: \"subscription returned\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscription\"\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n    put:\n      summary: \"Update subscription\"\n      tags:\n      - \"subscription\"\n      operationId: \"UpdateSubscription\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/SubscriptionID\"\n      requestBody:\n        $ref: \"#/components/requestBodies/UpdateSubscription\"\n      responses:\n        200:\n          description: \"subscription updated\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Subscription\"\n        400:\n          $ref: '#/components/responses/ValidationError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n    delete:\n      summary: \"Delete subscription\"\n      tags:\n      - \"subscription\"\n      operationId: \"DeleteSubscription\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/SubscriptionID\"\n      responses:\n        204:\n          description: \"subscription deleted\"\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n\n  /spaces/{spaceName}/cors:\n    summary: \"Operations about CORS configuration\"\n    get:\n      summary: \"List CORS configurations\"\n      tags:\n      - \"cors\"\n      operationId: \"ListCORS\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/Filters\"\n      responses:\n        200:\n          description: \"CORS configurations returned\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CORSes\"\n        500:\n          $ref: '#/components/responses/Error'\n    post:\n      summary: \"Create CORS configuration\"\n      tags:\n      - \"cors\"\n      operationId: \"CreateCORS\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      requestBody:\n        $ref: \"#/components/requestBodies/CreateCORS\"\n      responses:\n        201:\n          description: \"CORS configuration created\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CORS\"\n        400:\n          $ref: '#/components/responses/ValidationError'\n        500:\n          $ref: '#/components/responses/Error'\n\n  /spaces/{spaceName}/cors/{corsId}:\n    summary: \"Operations about single CORS configuration\"\n    get:\n      summary: \"Get CORS configuration\"\n      tags:\n      - \"cors\"\n      operationId: \"GetCORS\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/CORSID\"\n      responses:\n        200:\n          description: \"CORS configuration returned\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CORS\"\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n    put:\n      summary: \"Update CORS configuration\"\n      tags:\n      - \"cors\"\n      operationId: \"UpdateCORS\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/CORSID\"\n      requestBody:\n        $ref: \"#/components/requestBodies/UpdateCORS\"\n      responses:\n        200:\n          description: \"CORS configuration updated\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CORS\"\n        400:\n          $ref: '#/components/responses/ValidationError'\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n    delete:\n      summary: \"Delete CORS configuration\"\n      tags:\n      - \"cors\"\n      operationId: \"DeleteCORS\"\n      parameters:\n      - $ref: \"#/components/parameters/Space\"\n      - $ref: \"#/components/parameters/CORSID\"\n      responses:\n        204:\n          description: \"CORS configuration deleted\"\n        404:\n          $ref: '#/components/responses/NotFoundError'\n        500:\n          $ref: '#/components/responses/Error'\n\ncomponents:\n  schemas:\n    SpaceName:\n      type: string\n    FunctionID:\n      type: string\n    SubscriptionID:\n      type: string\n    CORSID:\n      type: string\n    SubscriptionType:\n      type: string\n      enum:\n      - async\n      - sync\n    ProviderType:\n      type: string\n      description: \"function provider\"\n      enum:\n      - awsfirehose\n      - awskinesis\n      - awslambda\n      - awssqs\n      - http\n    Provider:\n      type: object\n      description: \"function provider configuration\"\n      oneOf:\n      - $ref: '#/components/schemas/AWSFirehose'\n      - $ref: '#/components/schemas/AWSKinesis'\n      - $ref: '#/components/schemas/AWSLambda'\n      - $ref: '#/components/schemas/AWSSQS'\n      - $ref: '#/components/schemas/HTTP'\n    EventType:\n      type: object\n      properties:\n        space:\n          $ref: '#/components/schemas/SpaceName'\n        name:\n          $ref: '#/components/schemas/EventTypeName'\n        authorizerId:\n          $ref: '#/components/schemas/FunctionID'\n    Function:\n      type: object\n      properties:\n        space:\n          $ref: '#/components/schemas/SpaceName'\n        functionId:\n          $ref: '#/components/schemas/FunctionID'\n        type:\n          $ref: '#/components/schemas/ProviderType'\n        provider:\n          $ref: '#/components/schemas/Provider'\n    EventTypes:\n      type: object\n      properties:\n        eventTypes:\n          type: array\n          items:\n            $ref: '#/components/schemas/EventType'\n    Functions:\n      type: object\n      properties:\n        functions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Function'\n    Subscription:\n      type: object\n      properties:\n        space:\n          $ref: '#/components/schemas/SpaceName'\n        subscriptionId:\n          $ref: '#/components/schemas/SubscriptionID'\n        type:\n          $ref: '#/components/schemas/SubscriptionType'\n        eventType:\n          $ref: '#/components/schemas/EventType'\n        functionId:\n          $ref: '#/components/schemas/FunctionID'\n        path:\n          $ref: '#/components/schemas/Path'\n        method:\n          $ref: '#/components/schemas/Method'\n    Subscriptions:\n      type: object\n      properties:\n        subscriptions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Subscription'\n    CORS:\n      type: object\n      properties:\n        space:\n          $ref: '#/components/schemas/SpaceName'\n        corsId:\n          $ref: '#/components/schemas/CORSID'\n        method:\n          $ref: '#/components/schemas/Method'\n        path:\n          $ref: '#/components/schemas/Path'\n        allowedOrigins:\n          $ref: '#/components/schemas/AllowedOrigins'\n        allowedMethods:\n          $ref: '#/components/schemas/AllowedMethods'\n        allowedHeaders:\n          $ref: '#/components/schemas/AllowedHeaders'\n        allowCredentials:\n          $ref: '#/components/schemas/AllowCredentials'\n    CORSes:\n      type: object\n      properties:\n        cors:\n          type: array\n          items:\n            $ref: '#/components/schemas/CORS'\n    AWSFirehose:\n      type: object\n      properties:\n        deliveryStreamName:\n          $ref: '#/components/schemas/DeliveryStreamName'\n        region:\n          $ref: '#/components/schemas/Region'\n        awsAccessKeyId:\n          $ref: '#/components/schemas/AWSAccessKeyId'\n        awsSecretAccessKey:\n          $ref: '#/components/schemas/AWSSecretAccessKey'\n        awsSessionToken:\n          $ref: '#/components/schemas/AWSSessionToken'\n    AWSKinesis:\n      type: object\n      properties:\n        streamName:\n          $ref: '#/components/schemas/StreamName'\n        region:\n          $ref: '#/components/schemas/Region'\n        awsAccessKeyId:\n          $ref: '#/components/schemas/AWSAccessKeyId'\n        awsSecretAccessKey:\n          $ref: '#/components/schemas/AWSSecretAccessKey'\n        awsSessionToken:\n          $ref: '#/components/schemas/AWSSessionToken'\n    AWSLambda:\n      type: object\n      properties:\n        arn:\n          $ref: '#/components/schemas/ARN'\n        region:\n          $ref: '#/components/schemas/Region'\n        awsAccessKeyId:\n          $ref: '#/components/schemas/AWSAccessKeyId'\n        awsSecretAccessKey:\n          $ref: '#/components/schemas/AWSSecretAccessKey'\n        awsSessionToken:\n          $ref: '#/components/schemas/AWSSessionToken'\n    AWSSQS:\n      type: object\n      properties:\n        queueUrl:\n          $ref: '#/components/schemas/QueueURL'\n        region:\n          $ref: '#/components/schemas/Region'\n        awsAccessKeyId:\n          $ref: '#/components/schemas/AWSAccessKeyId'\n        awsSecretAccessKey:\n          $ref: '#/components/schemas/AWSSecretAccessKey'\n        awsSessionToken:\n          $ref: '#/components/schemas/AWSSessionToken'\n    HTTP:\n      type: object\n      properties:\n        url:\n          $ref: '#/components/schemas/URL'\n    ARN:\n      type: string\n      description: \"AWS ARN identifier\"\n    Region:\n      type: string\n      description: \"AWS Region name\"\n    AWSAccessKeyId:\n      type: string\n      description: \"AWS Access Key ID\"\n    AWSSecretAccessKey:\n      type: string\n      description: \"AWS Secret Access Key\"\n    AWSSessionToken:\n      type: string\n      description: \"AWS Session Token\"\n    StreamName:\n      type: string\n      description: \"AWS Kinesis stream name\"\n    DeliveryStreamName:\n      type: string\n      description: \"AWS Firehose delivery stream name\"\n    QueueURL:\n      type: string\n      description: \"AWS SQS Queue URL\"\n    URL:\n      type: string\n      format: url\n      description: \"HTTP endpoint URL\"\n    EventTypeName:\n      type: string\n      description: \"event type\"\n    Method:\n      type: string\n      description: \"(only for HTTP event) HTTP method that accepts requests\"\n    Path:\n      type: string\n      description: \"URL path under which events (HTTP requests) are accepted\"\n      default: \"/\"\n    AllowedOrigins:\n      type: array\n      items:\n        type: string\n    AllowedMethods:\n      type: array\n      items:\n        type: string\n    AllowedHeaders:\n      type: array\n      items:\n        type: string\n    AllowCredentials:\n      type: boolean\n    Error:\n      type: object\n      description: \"response error object\"\n      properties:\n        message:\n          type: string\n    Errors:\n      type: object\n      description: \"error response object\"\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Error\"\n  parameters:\n    Space:\n      in: \"path\"\n      name: \"spaceName\"\n      description: \"space name\"\n      required: true\n      schema:\n        $ref: \"#/components/schemas/SpaceName\"\n    EventTypeName:\n      in: \"path\"\n      name: \"eventTypeName\"\n      description: \"event type name\"\n      required: true\n      schema:\n        $ref: \"#/components/schemas/EventTypeName\"\n    FunctionID:\n      in: \"path\"\n      name: \"functionId\"\n      description: \"function identifier\"\n      required: true\n      schema:\n        $ref: \"#/components/schemas/FunctionID\"\n    SubscriptionID:\n      in: \"path\"\n      name: \"subscriptionId\"\n      description: \"subscription identifier\"\n      required: true\n      schema:\n        $ref: \"#/components/schemas/SubscriptionID\"\n    CORSID:\n      in: \"path\"\n      name: \"corsId\"\n      description: \"CORS configuration identifier\"\n      required: true\n      schema:\n        $ref: \"#/components/schemas/CORSID\"\n    Filters:\n      in: \"query\"\n      name: \"filters\"\n      description: filter out returned list of objects. Currently, filters can only use metadata properties e.g. `metadata.service=usersService`.\n      style: form\n      example:\n        \"metadata.service\": usersService\n      schema:\n        type: object\n        additionalProperties:\n          type: string\n  requestBodies:\n    CreateEventType:\n      description: \"event type create request body\"\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n            properties:\n              name:\n                $ref: '#/components/schemas/EventTypeName'\n              authorizerId:\n                $ref: '#/components/schemas/FunctionID'\n    UpdateEventType:\n      description: \"event type update request body\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              authorizerId:\n                $ref: '#/components/schemas/FunctionID'\n    CreateFunction:\n      description: \"function create request body\"\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - functionId\n              - type\n              - provider\n            properties:\n              functionId:\n                $ref: '#/components/schemas/FunctionID'\n              type:\n                $ref: '#/components/schemas/ProviderType'\n              provider:\n                $ref: '#/components/schemas/Provider'\n    UpdateFunction:\n      description: \"function update request body\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              type:\n                $ref: '#/components/schemas/ProviderType'\n              provider:\n                $ref: '#/components/schemas/Provider'\n    CreateSubscription:\n      description: \"subscription create request body\"\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - type\n              - eventType\n              - functionId\n            properties:\n              type:\n                $ref: '#/components/schemas/SubscriptionType'\n              eventType:\n                $ref: '#/components/schemas/EventType'\n              functionId:\n                $ref: '#/components/schemas/FunctionID'\n              path:\n                $ref: '#/components/schemas/Path'\n              method:\n                $ref: '#/components/schemas/Method'\n    UpdateSubscription:\n      description: \"subscription update request body\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              type:\n                $ref: '#/components/schemas/SubscriptionType'\n              eventType:\n                $ref: '#/components/schemas/EventType'\n              functionId:\n                $ref: '#/components/schemas/FunctionID'\n              path:\n                $ref: '#/components/schemas/Path'\n              method:\n                $ref: '#/components/schemas/Method'\n    CreateCORS:\n      description: \"CORS configuration create request body\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              method:\n                $ref: '#/components/schemas/Method'\n              path:\n                $ref: '#/components/schemas/Path'\n              allowedOrigins:\n                $ref: '#/components/schemas/AllowedOrigins'\n              allowedMethods:\n                $ref: '#/components/schemas/AllowedMethods'\n              allowedHeaders:\n                $ref: '#/components/schemas/AllowedHeaders'\n              allowCredentials:\n                $ref: '#/components/schemas/AllowCredentials'\n    UpdateCORS:\n      description: \"CORS configuration update request body\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              method:\n                $ref: '#/components/schemas/Method'\n              path:\n                $ref: '#/components/schemas/Path'\n              allowedOrigins:\n                $ref: '#/components/schemas/AllowedOrigins'\n              allowedMethods:\n                $ref: '#/components/schemas/AllowedMethods'\n              allowedHeaders:\n                $ref: '#/components/schemas/AllowedHeaders'\n              allowCredentials:\n                $ref: '#/components/schemas/AllowCredentials'\n  responses:\n    Error:\n      description: \"internal server error\"\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n    NotFoundError:\n      description: \"not found error\"\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n    ValidationError:\n      description: \"validation error\"\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n    FunctionHasSubscriptionsError:\n      description: \"function is subscribed to at least one event\"\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n    EventTypeHasSubscriptionsError:\n      description: \"there are subscriptions using the event type\"\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Errors'\n",
			"canonicalURL": "/github.com/serverless/event-gateway@089673d5822bdd533b44f81caf45663671de200d/-/blob/docs/openapi/openapi-config-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/serverless/event-gateway/blob/089673d5822bdd533b44f81caf45663671de200d/docs/openapi/openapi-config-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: \"filters\": object with additionalProperties not implemented",
	"NotImplemented": [
		"object with additionalProperties"
	]
}