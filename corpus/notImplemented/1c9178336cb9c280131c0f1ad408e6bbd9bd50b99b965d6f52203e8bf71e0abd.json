{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/brex.team/openapi.yaml",
			"byteSize": 37132,
			"content": "openapi: 3.0.1\ninfo:\n  title: Team API\n  description: \u003e\n    This is a generated connector for [Brex Team API v0.1](https://developer.brex.com/openapi/team_api/) OpenAPI specification. \n\n    Team API lets you manage users, departments, locations and cards.\n  x-ballerina-init-description: \u003e \n    The connector initialization requires setting the API credentials.\n\n    Create a [Brex account](https://www.brex.com/) and obtain tokens by following [this guide](https://developer.brex.com/docs/authentication/).\n  x-ballerina-display:\n    label: brex.team\n    iconPath: \"icon.png\"\n  contact:\n    name: Admin\n    url: https://brex.com\n    email: developer-access@brex.com\n  version: '0.1'\nservers:\n  - url: https://platform.staging.brexapps.com\n    description: 'Staging API (Note: this is not sandbox)'\n  - url: https://platform.brexapis.com\n    description: Production servers\nsecurity:\n  - Oauth2: []\ntags:\n  - name: Users\n    description: Endpoints for user management\n  - name: Locations\n    description: Endpoints for location management\n  - name: Departments\n    description: Endpoints for department management\n  - name: Cards\n    description: Endpoints for card management\npaths:\n  /v2/cards:\n    get:\n      tags:\n        - Cards\n      summary: |\n        List cards\n      description: \u003e\n        Lists all cards by a `user_id`.\n        Only cards with `limit_type = CARD` have `spend_controls`\n      operationId: listCardsByUserIdGet\n      parameters:\n        - name: user_id\n          in: query\n          description: User ID\n          required: false\n          schema:\n            type: string\n            nullable: true\n        - name: cursor\n          in: query\n          description: Page cursor\n          required: false\n          schema:\n            type: string\n            nullable: true\n        - name: limit\n          in: query\n          description: Object limit\n          required: false\n          schema:\n            type: integer\n            format: int32\n            nullable: true\n      responses:\n        '200':\n          description: listCardsByUserIdGet 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page_Card_'\n      security:\n        - Oauth2:\n            - cards.readonly\n            - cards\n    post:\n      tags:\n        - Cards\n      summary: |\n        Create card\n      description: \u003e\n        Creates a new card. It's strongly recommended that you set an idempotency-key in this request.\n        The `spend_controls` field is required when `limit_type` = `CARD`.\n        The `mailing_address` field is required for physical cards, and the first two lines of the address must be under 60 characters long.\n      operationId: createCardPost\n      parameters:\n        - name: Idempotency-Key\n          in: header\n          description: Idempotency key\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: Create card request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCardRequest'\n        required: true\n      responses:\n        '200':\n          description: createCardPost 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n      security:\n        - Oauth2:\n            - cards\n  /v2/cards/{id}:\n    get:\n      tags:\n        - Cards\n      summary: |\n        Get card\n      description: \u003e\n        Retrieves a card by ID. Only cards with `limit_type = CARD` have `spend_controls`\n      operationId: getCardByIdGet\n      parameters:\n        - name: id\n          in: path\n          description: Card ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: getCardByIdGet 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n      security:\n        - Oauth2:\n            - cards\n            - cards.readonly\n    put:\n      tags:\n        - Cards\n      summary: |\n        Update card\n      description: \u003e\n        Update an existing vendor card\n      operationId: updateCardPut\n      parameters:\n        - name: Idempotency-Key\n          in: header\n          description: Idenmpotency key\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Card ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update card request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateCardRequest'\n        required: true\n      responses:\n        '200':\n          description: updateCardPut 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n      security:\n        - Oauth2:\n            - cards\n  /v2/cards/{id}/lock:\n    post:\n      tags:\n        - Cards\n      summary: |\n        Lock card\n      description: \u003e\n        Locks an existing, unlocked card. And the card owner will receive a notification about it.\n      operationId: lockCardPost\n      parameters:\n        - name: Idempotency-Key\n          in: header\n          description: Idempotency key\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Card ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Lock card request payload\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LockCardRequest'\n        required: true\n      responses:\n        '200':\n          description: lockCardPost 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n      security:\n        - Oauth2:\n            - cards\n  /v2/cards/{id}/pan:\n    get:\n      tags:\n        - Cards\n      summary: |\n        Get card number\n      description: \u003e\n        Retrieves card number, CVV and expiration date of a card by ID.\n      operationId: getCardNumberGet\n      parameters:\n        - name: id\n          in: path\n          description: Card ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: getCardNumberGet 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CardNumberResponse'\n      security:\n        - Oauth2:\n            - cards\n            - cards.readonly\n  /v2/cards/{id}/terminate:\n    post:\n      tags:\n        - Cards\n      summary: |\n        Terminate card\n      description: \u003e\n        Terminates an existing card. And the card owner will receive a notification about it.\n      operationId: terminateCardPost\n      parameters:\n        - name: Idempotency-Key\n          in: header\n          description: Idempotency key\n          required: false\n          schema:\n            type: string\n        - name: id\n          description: Card ID\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Terminate card request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TerminateCardRequest'\n        required: true\n      responses:\n        '200':\n          description: terminateCardPost 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n      security:\n        - Oauth2:\n            - cards\n  /v2/cards/{id}/unlock:\n    post:\n      tags:\n        - Cards\n      summary: |\n        Unlock card\n      description: \u003e\n        Unlocks an existing card.\n      operationId: unlockCardPost\n      parameters:\n        - name: Idempotency-Key\n          in: header\n          description: Idempotency key\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Card ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Card unlock payload\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                {}\n        required: true\n      responses:\n        '200':\n          description: unlockCardPost 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Card'\n      security:\n        - Oauth2:\n            - cards\n  /v2/departments:\n    get:\n      tags:\n        - Departments\n      summary: |\n        List departments\n      description: \u003e\n        This endpoint lists all departments.\n      operationId: listDepartmentsGet\n      parameters:\n        - name: cursor\n          in: query\n          description: Page cursor\n          required: false\n          schema:\n            type: string\n            nullable: true\n        - name: limit\n          in: query\n          description: Object limit\n          required: false\n          schema:\n            type: integer\n            format: int32\n            nullable: true\n      responses:\n        '200':\n          description: listDepartmentsGet 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page_DepartmentResponse_'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Oauth2:\n            - departments\n            - departments.readonly\n    post:\n      tags:\n        - Departments\n      summary: |\n        Create department\n      description: \u003e\n        This endpoint creates a new department\n      operationId: createDepartmentPost\n      parameters:\n        - name: Idempotency-Key\n          in: header\n          description: Idempotency key\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: Create department request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateDepartmentRequest'\n        required: true\n      responses:\n        '200':\n          description: createDepartmentPost 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DepartmentResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Oauth2:\n            - departments\n  /v2/departments/{id}:\n    get:\n      tags:\n        - Departments\n      summary: |\n        Get department\n      description: \u003e\n        This endpoint gets a department by ID.\n      operationId: getDepartmentByIdGet\n      parameters:\n        - name: id\n          in: path\n          description: Department ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: getDepartmentByIdGet 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DepartmentResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Oauth2:\n            - departments\n            - departments.readonly\n  /v2/locations:\n    get:\n      tags:\n        - Locations\n      summary: |\n        List locations\n      description: \u003e\n        This endpoint lists all locations.\n      operationId: listLocationsGet\n      parameters:\n        - name: cursor\n          in: query\n          description: Page cursor\n          required: false\n          schema:\n            type: string\n            nullable: true\n        - name: limit\n          in: query\n          description: Object limit\n          required: false\n          schema:\n            type: integer\n            format: int32\n            nullable: true\n      responses:\n        '200':\n          description: listLocationsGet 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page_LocationResponse_'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Oauth2:\n            - locations\n            - locations.readonly\n    post:\n      tags:\n        - Locations\n      summary: |\n        Create location\n      description: \u003e\n        This endpoint creates a new location\n      operationId: createLocationPost\n      parameters:\n        - name: Idempotency-Key\n          in: header\n          description: Idempotency key\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: Create location request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateLocationRequest'\n        required: true\n      responses:\n        '200':\n          description: createLocationPost 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LocationResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Oauth2:\n            - locations\n  /v2/locations/{id}:\n    get:\n      tags:\n        - Locations\n      summary: |\n        Get location\n      description: \u003e\n        This endpoint gets a location by ID.\n      operationId: getLocationByIdGet\n      parameters:\n        - name: id\n          in: path\n          description: Location ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: getLocationByIdGet 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LocationResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Oauth2:\n            - locations\n            - locations.readonly\n  /v2/users:\n    get:\n      tags:\n        - Users\n      summary: |\n        List users\n      description: \u003e\n        This endpoint lists all users.\n      operationId: listUsersGet\n      parameters:\n        - name: cursor\n          in: query\n          description: Page cursor\n          required: false\n          schema:\n            type: string\n            nullable: true\n        - name: limit\n          in: query\n          description: Object limit\n          required: false\n          schema:\n            type: integer\n            format: int32\n            nullable: true\n      responses:\n        '200':\n          description: listUsersGet 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page_UserResponse_'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Oauth2:\n            - users\n            - users.readonly\n    post:\n      tags:\n        - Users\n      summary: |\n        Invite user\n      description: \u003e\n        This endpoint invites a new user as an employee.\n        To update user's role, check out [this article](https://support.brex.com/how-do-i-change-another-user-s-role/).\n      operationId: createUserPost\n      parameters:\n        - name: Idempotency-Key\n          in: header\n          description: Idempotency key\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: Create user request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateUserRequest'\n        required: true\n      responses:\n        '200':\n          description: createUserPost 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Oauth2:\n            - users\n  /v2/users/me:\n    get:\n      tags:\n        - Users\n      summary: |\n        Get current user\n      description: \u003e\n        This endpoint returns the user associated with the OAuth2 access token\n      operationId: getMeGet\n      parameters: []\n      responses:\n        '200':\n          description: getMeGet 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Oauth2:\n            - users\n            - users.readonly\n  /v2/users/{id}:\n    get:\n      tags:\n        - Users\n      summary: |\n        Get user\n      description: \u003e\n        This endpoint gets a user by ID.\n      operationId: getUserByIdGet\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: getUserByIdGet 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Oauth2:\n            - users\n            - users.readonly\n    put:\n      tags:\n        - Users\n      summary: |\n        Update user\n      description: \u003e\n        This endpoint updates a user. Any parameters not provided will be left unchanged.\n      operationId: updateUserPut\n      parameters:\n        - name: Idempotency-Key\n          in: header\n          description: Idempotency key\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update user request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserRequest'\n        required: true\n      responses:\n        '200':\n          description: updateUserPut 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserResponse'\n        '400':\n          description: Bad Request\n        '401':\n          description: Unauthorized\n        '403':\n          description: Forbidden\n      security:\n        - Oauth2:\n            - users\n  /v2/users/{id}/limit:\n    get:\n      tags:\n        - Users\n      summary: |\n        Get limit for the user\n      description: \u003e\n        This endpoint gets the monthly limit for the user including the monthly available limit.\n      operationId: getUserLimitGet\n      parameters:\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: getUserLimitGet 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserLimitResponse'\n      security:\n        - Oauth2:\n            - users\n            - users.readonly\n    post:\n      tags:\n        - Users\n      summary: |\n        Set limit for the user\n      description: \u003e\n        This endpoint sets the monthly limit for a user. \n        The limit amount must be non-negative. \n        To unset the monthly limit of the user, just set `monthly_limit` to null.\n      operationId: setUserLimitPost\n      parameters:\n        - name: Idempotency-Key\n          in: header\n          description: Idempotency key\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: User ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Set user limit request\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SetUserLimitRequest'\n        required: true\n      responses:\n        '200':\n          description: setUserLimitPost 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserLimitResponse'\n      security:\n        - Oauth2:\n            - users\ncomponents:\n  schemas:\n    Address:\n      type: object\n      properties:\n        line1:\n          type: string\n          description: Address line 1, no PO Box.\n          nullable: true\n        line2:\n          type: string\n          description: Address line 2 (e.g., apartment, suite, unit, or building).\n          nullable: true\n        city:\n          type: string\n          description: City, district, suburb, town, or village.\n          nullable: true\n        state:\n          type: string\n          description: For US-addressed the 2-letter State abbreviation. For international-addresses the County, Providence, or Region.\n          nullable: true\n        country:\n          type: string\n          description: Two-letter country code (ISO 3166-1 alpha-2).\n          nullable: true\n        postal_code:\n          type: string\n          description: ZIP or postal code.\n          nullable: true\n        phone_number:\n          type: string\n          description: Phone number.\n          nullable: true\n      description: Company business address (must be in the US; no PO box or virtual/forwarding addresses allowed).\n    Card:\n      required:\n        - billing_address\n        - card_name\n        - id\n        - last_four\n        - limit_type\n        - owner\n      type: object\n      properties:\n        id:\n          type: string\n          description: Card ID\n        owner:\n          $ref: '#/components/schemas/CardOwner'\n        status:\n          $ref: '#/components/schemas/CardStatus'\n          nullable: true\n        last_four:\n          type: string\n          description: Last four digits of card number\n        card_name:\n          type: string\n          description: Card name\n        card_type:\n          $ref: '#/components/schemas/CardType'\n          nullable: true\n        limit_type:\n          $ref: '#/components/schemas/LimitType'\n        spend_controls:\n          $ref: '#/components/schemas/SpendControl'\n          nullable: true\n        billing_address:\n          $ref: '#/components/schemas/Address'\n        mailing_address:\n          $ref: '#/components/schemas/Address'\n          nullable: true\n      description: \u003e\n        Only cards with limit_type = CARD have spend_controls\n    CardExpiration:\n      type: object\n      properties:\n        month:\n          type: integer\n          description: Month of expiration\n          format: int32\n        year:\n          type: integer\n          description: Year of expiration\n          format: int32\n      description: Month and year of expiration\n    CardNumberResponse:\n      required:\n        - cvv\n        - expiration_date\n        - id\n        - number\n      type: object\n      properties:\n        id:\n          type: string\n          description: Card number id\n        number:\n          type: string\n          description: Card number\n        cvv:\n          type: string\n          description: CVV\n        expiration_date:\n          $ref: '#/components/schemas/CardExpiration'\n      description: \u003e\n        Card number, CVV and expiration date of a card\n    CardOwner:\n      type: object\n      description: Card owner information.\n      properties:\n        type: \n          type: object\n          $ref: '#/components/schemas/OwnerType'\n        user_id:\n          description: User ID\n          type: string\n      # discriminator:\n      #   propertyName: type\n      #   mapping:\n      #     USER: '#/components/schemas/UserOwner'\n      # oneOf:\n      #   - $ref: '#/components/schemas/UserOwner'\n    CardStatus:\n      type: string\n      enum:\n        - ACTIVE\n        - SHIPPED\n        - EXPIRED\n        - LOCKED\n        - TERMINATED\n      description: Card status\n    CardType:\n      type: string\n      description: Card type\n      enum:\n        - VIRTUAL\n        - PHYSICAL\n    ChangeCardReason:\n      type: string\n      description: \u003e\n        Reason for card termination.\n      enum:\n        - CARD_DAMAGED\n        - CARD_LOST\n        - CARD_NOT_RECEIVED\n        - DO_NOT_NEED_PHYSICAL_CARD\n        - DO_NOT_NEED_VIRTUAL_CARD\n        - FRAUD\n        - OTHER\n    CreateCardRequest:\n      required:\n        - card_name\n        - card_type\n        - limit_type\n        - owner\n      type: object\n      properties:\n        owner:\n          $ref: '#/components/schemas/CardOwner'\n        card_name:\n          minLength: 1\n          type: string\n          description: Card name.\n        card_type:\n          $ref: '#/components/schemas/CardType'\n        limit_type:\n          $ref: '#/components/schemas/LimitType'\n        spend_controls:\n          $ref: '#/components/schemas/SpendControlRequest'\n          nullable: true\n        mailing_address:\n          $ref: '#/components/schemas/Address'\n          nullable: true\n      description: \u003e\n        The `spend_controls` field is required when `limit_type` = `CARD`.\n        The `shipping_address` field is required for physical cards, and the first two lines of the address must be under 60 characters long.\n    CreateDepartmentRequest:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          minLength: 1\n          type: string\n          description: Name of the department\n        description:\n          type: string\n          description: Description of the department\n          nullable: true\n    CreateLocationRequest:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          minLength: 1\n          type: string\n          description: Name of the location\n        description:\n          type: string\n          description: Description of the location\n          nullable: true\n    CreateUserRequest:\n      required:\n        - email\n        - first_name\n        - last_name\n      type: object\n      properties:\n        first_name:\n          minLength: 1\n          description: First name\n          type: string\n        last_name:\n          minLength: 1\n          description: Last name\n          type: string\n        email:\n          type: string\n          description: Email address\n          format: email\n        manager_id:\n          type: string\n          description: The ID of the manager\n          nullable: true\n        department_id:\n          type: string\n          description: Department ID\n          nullable: true\n        location_id:\n          type: string\n          description: Location ID\n          nullable: true\n    DepartmentResponse:\n      required:\n        - id\n        - name\n      type: object\n      properties:\n        id:\n          type: string\n          description: ''\n        name:\n          type: string\n          description: Name of the department\n        description:\n          type: string\n          description: Description of the department\n          nullable: true\n    LimitType:\n      type: string\n      description: \u003e\n        If `card_type` = `CARD` then the card is a vendor card and it doesn't rely on the user limit. A vendor has to be a virtual card.\n        If `card_type` = `USER` then the card is a corporate card.\n        Check out [this article](https://support.brex.com/what-are-the-different-types-of-cards-i-can-get/) about different card types.\n      enum:\n        - CARD\n        - USER\n    LocationResponse:\n      required:\n        - id\n        - name\n      type: object\n      properties:\n        id:\n          type: string\n          description: ''\n        name:\n          type: string\n          description: Name of the location\n        description:\n          type: string\n          description: Description of the location\n          nullable: true\n    LockCardRequest:\n      required:\n        - reason\n      type: object\n      properties:\n        description:\n          type: string\n          description: Description for locking a card\n          nullable: true\n        reason:\n          $ref: '#/components/schemas/ChangeCardReason'\n      description: Parameters for locking a card.\n    Money:\n      type: object\n      properties:\n        amount:\n          type: integer\n          description: The amount of money, in the smallest denomination of the currency indicated by currency. For example, when currency is USD, amount is in cents.\n          format: int64\n        currency:\n          type: string\n          description: The type of currency, in ISO 4217 format. Default to USD if not specified\n          nullable: true\n      description: \u003e\n        Money fields can be signed or unsigned. Fields are signed (an unsigned value will be interpreted as positive).\n    OwnerType:\n      type: string\n      enum:\n        - USER\n      description: Owner type\n    Page_Card_:\n      required:\n        - items\n      type: object\n      properties:\n        next_cursor:\n          type: string\n          description: Cursor for next page\n          nullable: true\n        items:\n          type: array\n          description: Array of Card ojects\n          items:\n            $ref: '#/components/schemas/Card'\n    Page_DepartmentResponse_:\n      required:\n        - items\n      type: object\n      properties:\n        next_cursor:\n          type: string\n          description: Cursor for next page\n          nullable: true\n        items:\n          type: array\n          description: Array of Department ojects\n          items:\n            $ref: '#/components/schemas/DepartmentResponse'\n    Page_LocationResponse_:\n      required:\n        - items\n      type: object\n      properties:\n        next_cursor:\n          type: string\n          description: Cursor for next page\n          nullable: true\n        items:\n          type: array\n          description: Array of Location response objects\n          items:\n            $ref: '#/components/schemas/LocationResponse'\n    Page_UserResponse_:\n      required:\n        - items\n      type: object\n      properties:\n        next_cursor:\n          type: string\n          description: Cursor for next page\n          nullable: true\n        items:\n          type: array\n          description: Array of User response objects\n          items:\n            $ref: '#/components/schemas/UserResponse'\n    SetUserLimitRequest:\n      type: object\n      properties:\n        monthly_limit:\n          $ref: '#/components/schemas/Money'\n          nullable: true\n      description: Request that sets the monthly user limit.\n    SpendControl:\n      required:\n        - spend_available\n        - spend_limit\n      type: object\n      properties:\n        spend_limit:\n          $ref: '#/components/schemas/Money'\n        spend_available:\n          $ref: '#/components/schemas/Money'\n        spend_duration:\n          $ref: '#/components/schemas/SpendDuration'\n          nullable: true\n        reason:\n          type: string\n          description: Reason for spend control\n          nullable: true\n        lock_after_date:\n          type: string\n          description: Date to lock the spend\n          format: date\n          nullable: true\n      description: Spend control data\n    SpendControlRequest:\n      required:\n        - spend_duration\n        - spend_limit\n      type: object\n      properties:\n        spend_limit:\n          $ref: '#/components/schemas/Money'\n        spend_duration:\n          $ref: '#/components/schemas/SpendDuration'\n        reason:\n          type: string\n          description: Reason for the spend control\n          nullable: true\n        lock_after_date:\n          type: string\n          description: Date for locking the spend control\n          format: date\n          nullable: true\n      description: Spend control request\n    SpendControlUpdateRequest:\n      type: object\n      description: Spend control request data\n      properties:\n        spend_limit:\n            $ref: '#/components/schemas/Money'\n            nullable: true\n        spend_duration:\n          $ref: '#/components/schemas/SpendDuration'\n          nullable: true\n        lock_after_date:\n          type: string\n          description: Date to lock the spend\n          format: date\n          nullable: true\n    SpendDuration:\n      type: string\n      description: \u003e\n        Spend limit refresh frequency\n        - MONTHLY: The spend limit refreshes every month\n        - QUARTERLY: The spend limit refreshes every quarter\n        - YEARLY: The spend limit refreshes every year\n        - ONE_TIME: The limit does not refresh\n      enum:\n        - MONTHLY\n        - QUARTERLY\n        - YEARLY\n        - ONE_TIME\n    TerminateCardRequest:\n      required:\n        - reason\n      type: object\n      properties:\n        description:\n          type: string\n          description: Description for terminating a card\n          nullable: true\n        reason:\n          $ref: '#/components/schemas/ChangeCardReason'\n      description: Parameters for terminating a card.\n    UpdateCardRequest:\n      type: object\n      properties:\n        spend_controls:\n          $ref: '#/components/schemas/SpendControlUpdateRequest'\n          nullable: true\n    UpdateUserRequest:\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/UpdateUserStatus'\n          nullable: true\n        manager_id:\n          type: string\n          description: The user ID of the manager of this user\n          nullable: true\n        department_id: \n          type: string\n          description: Department ID\n          nullable: true\n        location_id:\n          type: string\n          description: Location ID\n          nullable: true\n    UpdateUserStatus:\n      type: string\n      description: \u003e\n        Acceptable user status for update. To suspend a user, set status to 'disabled'. To unsuspend a user, set status to 'active'.\n      enum:\n        - ACTIVE\n        - DISABLED\n    UserLimitResponse:\n      type: object\n      properties:\n        monthly_limit:\n          $ref: '#/components/schemas/Money'\n          nullable: true\n    # UserOwner:\n    #   allOf:\n    #     - $ref: '#/components/schemas/CardOwner'\n    #     - required:\n    #         - type\n    #         - user_id\n    #       type: object\n    #       properties:\n    #         type:\n    #           $ref: '#/components/schemas/OwnerType'\n    #         user_id:\n    #           type: string\n    UserResponse:\n      required:\n        - email\n        - first_name\n        - id\n        - last_name\n      type: object\n      properties:\n        id:\n          type: string\n          description: User ID\n        first_name:\n          type: string\n          description: First name of the user\n        last_name:\n          type: string\n          description: Last name of the user\n        email:\n          type: string\n          description: Email address of the user\n        status:\n          $ref: '#/components/schemas/UserStatus'\n          nullable: true\n        manager_id:\n          type: string\n          description: The user id of the manager of this user\n          nullable: true\n        department_id:\n          type: string\n          description: Department ID \n          nullable: true\n        location_id:\n          type: string\n          description: Loaction ID\n          nullable: true\n    UserStatus:\n      type: string\n      description: \u003e\n        Status of the user\n      enum:\n        - INVITED\n        - ACTIVE\n        - CLOSED\n        - DISABLED\n        - DELETED\n        - PENDING_ACTIVATION\n  securitySchemes:\n    Oauth2:\n      type: oauth2\n      description: OAuth2 security scheme\n      flows:\n        authorizationCode:\n          authorizationUrl: https://accounts.brex.com/oauth2/v1/auth\n          tokenUrl: https://accounts.brex.com/oauth2/v1/token\n          scopes:\n            openid: openid\n            offline_access: offline access\n            users.readonly: View user data\n            users: View and manage user data\n            locations.readonly: View location data\n            locations: View and manage location data\n            departments.readonly: View department data\n            departments: View and manage department data\n            cards: View and manage card data\n            cards.readonly: View card data\nx-explorer-enabled: false",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@c3641dddbc4e41686ae3d1b9bacf1621b639a019/-/blob/openapi/brex.team/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/c3641dddbc4e41686ae3d1b9bacf1621b639a019/openapi/brex.team/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v2/cards/{id}\": get: security: security \"Oauth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}