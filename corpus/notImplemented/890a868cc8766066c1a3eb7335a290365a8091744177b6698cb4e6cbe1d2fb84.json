{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ITISFoundation/osparc-simcore"
		},
		"file": {
			"name": "petstore.yaml",
			"size": 0,
			"path": "packages/service-library/tests/data/oas3/petstore.yaml",
			"byteSize": 7562,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  license:\n    name: MIT\nservers:\n  - url: http://petstore.swagger.io/{version}\n    variables:\n      version:\n        enum:\n          - v1\n          - v2\n        default: v1\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: page\n          in: query\n          schema:\n            type: integer\n            format: int32\n            default: 1\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: true\n          schema:\n            type: integer\n            format: int32\n            nullable: true\n        - name: search\n          in: query\n          description: Search query\n          schema:\n            type: string\n            default: \"\"\n          allowEmptyValue: true\n        - name: ids\n          in: query\n          description: Filter pets with Ids\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: tags\n          in: query\n          description: Filter pets with tags\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/Tag\"\n          explode: false\n      responses:\n        '200':\n          description: An paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PetsData\"\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      parameters:\n        - name: api_key\n          in: header\n          schema:\n            type: integer\n            format: int32\n          required: true\n        - name: user\n          in: cookie\n          schema:\n            type: integer\n            format: int32\n          required: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PetCreate'\n            example:\n              name: \"Pet\"\n              wings: []\n      responses:\n        '201':\n          description: Null response\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PetData\"\n              example: |\n                {\n                  \"data\": []\n                }\n            image/*:\n              schema:\n                type: string\n                format: binary\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n  /tags:\n    get:\n      summary: List all tags\n      operationId: listTags\n      tags:\n        - tags\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TagList\"\n              example:\n                - dogs\n                - cats\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\n    post:\n      summary: Create new tag\n      operationId: createTag\n      tags:\n        - tags\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TagCreate'\n      responses:\n        '200':\n          description: Null response\n        default:\n          $ref: \"#/components/responses/ErrorResponse\"\ncomponents:\n  schemas:\n    Utctime:\n      oneOf:\n        - type: string\n          enum: [always, now]\n        - type: string\n          format: date-time\n    Address:\n      type: object\n      x-model: Address\n      required:\n        - city\n      properties:\n        street:\n          type: string\n        city:\n          type: string\n    Tag:\n      type: string\n      enum:\n        - cats\n        - dogs\n        - birds\n    Position:\n      type: integer\n      enum:\n        - 1\n        - 2\n        - 3\n    Pet:\n      type: object\n      x-model: Pet\n      allOf:\n        - $ref: \"#/components/schemas/PetCreate\"\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n          format: int64\n    PetCreate:\n      type: object\n      x-model: PetCreate\n      allOf:\n        - $ref: \"#/components/schemas/PetCreatePartOne\"\n        - $ref: \"#/components/schemas/PetCreatePartTwo\"\n      oneOf:\n        - $ref: \"#/components/schemas/Cat\"\n        - $ref: \"#/components/schemas/Bird\"\n    PetCreatePartOne:\n      type: object\n      x-model: PetCreatePartOne\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        tag:\n          $ref: \"#/components/schemas/Tag\"\n        address:\n          $ref: \"#/components/schemas/Address\"\n    PetCreatePartTwo:\n      type: object\n      x-model: PetCreatePartTwo\n      properties:\n        position:\n          $ref: \"#/components/schemas/Position\"\n        healthy:\n          type: boolean\n    Bird:\n      type: object\n      x-model: Bird\n      required:\n        - wings\n      properties:\n        wings:\n          $ref: \"#/components/schemas/Wings\"\n    Wings:\n      type: object\n      x-model: Wings\n      required:\n        - healthy\n      properties:\n        healthy:\n          type: boolean\n    Cat:\n      type: object\n      x-model: Cat\n      required:\n        - ears\n      properties:\n        ears:\n          $ref: \"#/components/schemas/Ears\"\n    Ears:\n      type: object\n      x-model: Ears\n      required:\n        - healthy\n      properties:\n        healthy:\n          type: boolean\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    PetsData:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: \"#/components/schemas/Pets\"\n    PetData:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          $ref: \"#/components/schemas/Pet\"\n    TagCreate:\n      type: object\n      required:\n        - name\n      properties:\n        created:\n          $ref: \"#/components/schemas/Utctime\"\n        name:\n          type: string\n    TagList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Tag\"\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    ExtendedError:\n      allOf:\n        - $ref: \"#/components/schemas/Error\"\n        - type: object\n          required:\n            - rootCause\n          properties:\n            rootCause:\n              type: string\n            suberror:\n              $ref: \"#/components/schemas/ExtendedError\"\n      additionalProperties:\n        type: string\n  responses:\n      ErrorResponse:\n        description: unexpected error\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExtendedError\"\n",
			"canonicalURL": "/github.com/ITISFoundation/osparc-simcore@226c16254c8fab772aa97ba14cbb1eff90b7e25b/-/blob/packages/service-library/tests/data/oas3/petstore.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ITISFoundation/osparc-simcore/blob/226c16254c8fab772aa97ba14cbb1eff90b7e25b/packages/service-library/tests/data/oas3/petstore.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: cookie params not implemented",
	"NotImplemented": [
		"cookie params",
		"discriminator inference"
	]
}