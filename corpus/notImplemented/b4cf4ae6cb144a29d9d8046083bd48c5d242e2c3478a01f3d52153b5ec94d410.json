{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/networknt/model-config"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "rest/kafka-sidecar/openapi.yaml",
			"byteSize": 26434,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: Light Mesh Kafka Sidecar\n  version: 1.0.0\n  description: |-\n    # Kafka producer and consumer endpoints\nservers:\n  - url: https://kafka.networknt.com\n\npaths:\n  '/producers/{topic}':\n    post:\n      operationId: postData\n      summary: Post a list of users to Kafka\n      parameters:\n        - name: topic\n          in: path\n          required: true\n          description: The kafka topic name\n          schema:\n            type: string\n      requestBody:\n        description: message data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProduceRequest'\n      responses:\n        '200':\n          description: Data successfully produced.\n        '400':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:w\n\n  '/consumers/{group}':\n    post:\n      operationId: createConsumerInstanceInGroup\n      summary: Create a new consumer instance in the consumer group\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group\n          schema:\n            type: string\n      requestBody:\n        description: consumer instance request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateConsumerInstanceRequest'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateConsumerInstanceResponse'\n        '400':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:w\n  '/consumers/{group}/instances/{instance}':\n    delete:\n      operationId: deleteConsumerInstance\n      summary: Delete the consumer instance\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:w\n  '/consumers/{group}/instances/{instance}/offsets':\n    post:\n      operationId: commmitConsumerOffsets\n      summary: Commit a list of offsets for the consumer\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n      requestBody:\n        description: topic partition offset metadata\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerOffsetCommitRequest'\n      responses:\n        '200':\n          description: No Content\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:w\n    put:\n      summary: Get the last committed offsets for the given partition\n      operationId: getCommittedOffsets\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n      requestBody:\n        description: consumer committed request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerCommittedRequest'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerCommittedResponse'\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:w\n  '/consumers/{group}/instances/{instance}/subscriptions':\n    post:\n      operationId: subscribeTopics\n      summary: Subscribe to the given list of topics or a topic pattern to get dynamically assigned partitions.\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n      requestBody:\n        description: consumer seek to request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerSubscriptionRecord'\n      responses:\n        '204':\n          description: Successful response\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:w\n\n    get:\n      operationId: getSubscribedTopics\n      summary: Get the current subscribed list of topics\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConsumerSubscriptionResponse'\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:r\n\n    delete:\n      operationId: unsubscribeTopics\n      summary: Unsubscribe from topics currently subscribed\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n      responses:\n        '204':\n          description: No Content\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:w\n\n\n  '/consumers/{group}/instances/{instance}/assignments':\n    post:\n      operationId: assignPartitions\n      summary: Manually assign a list of partitions to this consumer.\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n      requestBody:\n        description: consumer seek to request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerAssignmentRequest'\n      responses:\n        '204':\n          description: Successful response\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:w\n\n    get:\n      operationId: getAssignedPartitions\n      summary: Get the list of partitions currently manually assigned to this consumer\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConsumerAssignmentResponse'\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:r\n\n\n  '/consumers/{group}/instances/{instance}/positions':\n    post:\n      operationId: overrideFetchOffset\n      summary: Overrides the fetch offsets that the consumer will use for the next set of records to fetch\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n      requestBody:\n        description: consumer seek to request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerSeekRequest'\n      responses:\n        '204':\n          description: Successful response\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:w\n\n\n  '/consumers/{group}/instances/{instance}/positions/first':\n    post:\n      operationId: seekFirstOffset\n      summary: Seek to the first offset for each of the given partitions\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n      requestBody:\n        description: consumer seek to request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerSeekToRequest'\n      responses:\n        '204':\n          description: Successful response\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:w\n\n  '/consumers/{group}/instances/{instance}/positions/last':\n    post:\n      operationId: seekLastOffset\n      summary: Seek to the last offset for each of the given partitions\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n      requestBody:\n        description: consumer seek to request\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerSeekToRequest'\n      responses:\n        '204':\n          description: Successful response\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:w\n  '/consumers/{group}/instances/{instance}/records':\n    get:\n      operationId: fetchTopicData\n      summary: Fetch data for the topics or partitions specified using one of the subscribe/assign APIs\n      parameters:\n        - name: group\n          in: path\n          required: true\n          description: The consumer group name\n          schema:\n            type: string\n        - name: instance\n          in: path\n          required: true\n          description: The Id of the consumer instance\n          schema:\n            type: string\n        - name: timeout\n          in: query\n          description: Maximum amount of milliseoncds the sidecar will spend fetching records\n          required: false\n          schema:\n            type: integer\n        - name: max_bytes\n          in: query\n          description: Maximum number of bytes of the unencoded keys and values in the response\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConsumerRecord'\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:r\n  '/consumers/deadLetter/reactive':\n    get:\n      operationId: DLTopicReplayReactive\n      summary: replay the message in the DLQ APIs by reactive consumer\n      parameters:\n        - name: group\n          in: query\n          required: false\n          description: The consumer group name\n          schema:\n            type: string\n        - name: topic\n          in: query\n          required: false\n          description: The topic name which need replay deal letter queue group name\n          schema:\n            type: string\n        - name: timeout\n          in: query\n          description: Maximum amount of milliseoncds the sidecar will spend fetching records\n          required: false\n          schema:\n            type: integer\n        - name: lastretry\n          in: query\n          required: false\n          schema:\n            type: boolean\n          description: If the certificate for an HTTPS check should not be verified.\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/DeadLetterQueueReplayResponse\"\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:r\n            - kafka:w\n  '/consumers/deadLetter/active':\n    get:\n      operationId: DLTopicReplayActive\n      summary: replay the message in the DLQ APIs by active consumer\n      parameters:\n        - name: group\n          in: query\n          required: false\n          description: The consumer group name\n          schema:\n            type: string\n        - name: topic\n          in: query\n          required: false\n          description: The topic name which need replay deal letter queue group name\n          schema:\n            type: string\n        - name: timeout\n          in: query\n          description: Maximum amount of milliseoncds the sidecar will spend fetching records\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConsumerRecord'\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:r\n            - kafka:w\n    post:\n      operationId: DLQProducer\n      summary: producer error event to DLQ by active consumer\n      requestBody:\n        description: \"Record Processed Result object\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RecordProcessedResult'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:r\n            - kafka:w\n  '/ksqldb/active':\n    post:\n      operationId: KsqlDBPullQueryActive\n      summary: KsqlDBPullQuery APIs by active consumer\n      requestBody:\n        description: \"process a ksqlDB query\"\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/KsqlDbPullQueryRequest\"\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:r\n            - kafka:w\n  '/consumers/active/audit':\n    post:\n      operationId: ConsumerActiveAudit\n      summary: Send Audit messaage for active consumer\n      requestBody:\n        description: \"Record Processed Result for Audit\"\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/RecordProcessedResult'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n        '404':\n          description: Consumer instance not found\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Status\"\n      security:\n        - kafka_auth:\n            - kafka:r\n            - kafka:w\ncomponents:\n  securitySchemes:\n    kafka_auth:\n      type: oauth2\n      description: This API uses OAuth 2.0 with the client credential grant flow.\n      flows:\n        clientCredentials:\n          tokenUrl: 'https://localhost:6882/token'\n          scopes:\n            kafka:w: Kafka producer\n            kafka:r: Kafka consumer\n  schemas:\n    ProduceRequest:\n      type: object\n      properties:\n        keyFormat:\n          type: string\n          enum:\n            - BINARY\n            - JSON\n            - AVRO\n            - JSONSCHEMA\n            - PROTOBUF\n            - STRING\n        keySchema:\n          type: string\n        keySchemaId:\n          type: integer\n        keySchemaVersion:\n          type: integer\n        keySchemaSubject:\n          type: string\n        valueFormat:\n          type: string\n          enum:\n            - BINARY\n            - JSON\n            - AVRO\n            - JSONSCHEMA\n            - PROTOBUF\n            - STRING\n        valueSchema:\n          type: string\n        valueSchemaId:\n          type: integer\n        valueSchemaVersion:\n          type: integer\n        valueSchemaSubject:\n          type: string\n        records:\n          type: array\n          items:\n            type: object\n      required:\n        - records\n    CreateConsumerInstanceRequest:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        keyFormat:\n          type: string\n          enum:\n            - BINARY\n            - JSON\n            - AVRO\n            - JSONSCHEMA\n            - PROTOBUF\n            - STRING\n        valueFormat:\n          type: string\n          enum:\n            - BINARY\n            - JSON\n            - AVRO\n            - JSONSCHEMA\n            - PROTOBUF\n            - STRING\n        autoOffsetReset:\n          type: string\n        autoCommitEnable:\n          type: string\n        responseMinBytes:\n          type: integer\n          minimum: -1\n          maximum: 10000000\n        requestWaitMs:\n          type: integer\n    CreateConsumerInstanceResponse:\n      type: object\n      properties:\n        instanceId:\n          type: string\n        baseUri:\n          type: string\n    ConsumerOffsetCommitRequest:\n      type: object\n      properties:\n        offsets:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/TopicPartitionOffsetMetadata\"\n    TopicPartitionOffsetMetadata:\n      type: object\n      properties:\n        topic:\n          type: string\n        partition:\n          type: integer\n          minimum: 0\n        offset:\n          type: number\n        metadata:\n          type: string\n\n    ConsumerCommittedResponse:\n      type: object\n      properties:\n        offsets:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/TopicPartitionOffsetMetadata\"\n    ConsumerCommittedRequest:\n      type: object\n      properties:\n        offsets:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/TopicPartition\"\n\n    TopicPartition:\n      type: object\n      properties:\n        topic:\n          type: string\n        partition:\n          type: integer\n          minimum: 0\n    KsqlDbPullQueryRequest:\n      type: object\n      required:\n        - query\n      properties:\n        query:\n          type: string\n        offset:\n          type: string\n          enum:\n            - earliest\n            - latest\n        queryType:\n          type: string\n          enum:\n            - pull\n            - push\n        deserializationError:\n          type: boolean\n        tableScanEnable:\n          type: boolean\n    ConsumerRecord:\n      type: object\n      properties:\n        topic:\n          type: string\n        key:\n          type: object\n        value:\n          type: object\n        partition:\n          type: integer\n        offset:\n          type: number\n    RecordProcessedResult:\n      type: object\n      properties:\n        consumerRecord:\n          $ref: '#/components/schemas/ConsumerRecord'\n        key:\n          type: string\n        correlationId:\n          type: string\n        traceabilityId:\n          type: string\n        stacktrace:\n          type: string\n        processed:\n          type: boolean\n    ConsumerSeekToRequest:\n      type: object\n      properties:\n        partitions:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/TopicPartition\"\n    ConsumerSeekRequest:\n      type: object\n      properties:\n        offsets:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/PartitionOffset\"\n        timestamps:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/PartitionTimestamp\"\n    DeadLetterQueueReplayResponse:\n      type: object\n      properties:\n        group:\n          type: string\n        instance:\n          type: string\n        topics:\n          type: array\n          items:\n            type: string\n        records:\n          type: number\n        description:\n          type: string\n    PartitionOffset:\n      type: object\n      properties:\n        topic:\n          type: string\n        partition:\n          type: integer\n        offset:\n          type: number\n        metadata:\n          type: string\n\n    PartitionTimestamp:\n      type: object\n      properties:\n        topic:\n          type: string\n        partition:\n          type: integer\n        timestamp:\n          type: string\n        metadata:\n          type: string\n\n    ConsumerAssignmentRequest:\n      type: object\n      properties:\n        partitions:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/TopicPartition\"\n    ConsumerAssignmentResponse:\n      type: object\n      properties:\n        partitions:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/TopicPartition\"\n\n    ConsumerSubscriptionRecord:\n      type: object\n      properties:\n        topics:\n          type: array\n          items:\n            type: string\n        topic_pattern:\n          type: string\n\n    ConsumerSubscriptionResponse:\n      type: object\n      properties:\n        topics:\n          type: array\n          items:\n            type: string\n\n    Status:\n      type: object\n      properties:\n        statusCode:\n          description: HTTP response code\n          type: integer\n        code:\n          description: Code is the machine-readable error code\n          type: string\n        message:\n          description: Error messsage\n          type: string\n        description:\n          description: The detailed description of the error status\n          type: string\n      required:\n        - statusCode\n        - code\n",
			"canonicalURL": "/github.com/networknt/model-config@3fea561d7982c217c1d5d35c1193eac78a7fdcef/-/blob/rest/kafka-sidecar/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/networknt/model-config/blob/3fea561d7982c217c1d5d35c1193eac78a7fdcef/rest/kafka-sidecar/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/consumers/active/audit\": post: security: security \"kafka_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}