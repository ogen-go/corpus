{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/networknt/light-example-4j"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "servicemesher/services/foodstore-service-api/src/main/resources/config/openapi.yaml",
			"byteSize": 4676,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Swagger Foodstore\n  license:\n    name: MIT\nservers:\n  - url: 'http://foodstore.swagger.io/v1'\npaths:\n  /food:\n    get:\n      summary: List all food\n      operationId: listFood\n      tags:\n        - food\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      security:\n        - foodstore_auth:\n            - 'read:food'\n      responses:\n        '200':\n          description: An paged array of food\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Food'\n              example:\n                - id: 1\n                  name: Noodle\n                  tag: food\n                - id: 2\n                  name: Rice\n                  tag: food\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Create a food\n      operationId: createfood\n      requestBody:\n        description: food to add to the store\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Food'\n      tags:\n        - food\n      security:\n        - foodstore_auth:\n            - 'read:food'\n            - 'write:food'\n      responses:\n        '201':\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/food/{foodId}':\n    get:\n      summary: Info for a specific food\n      operationId: showFoodById\n      tags:\n        - food\n      parameters:\n        - name: foodId\n          in: path\n          required: true\n          description: The id of the food to retrieve\n          schema:\n            type: string\n      security:\n        - foodstore_auth:\n            - 'read:food'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Food'\n              example:\n                id: 1\n                name: Noodle\n                tag: food\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete a specific food\n      operationId: deletefoodById\n      tags:\n        - food\n      parameters:\n        - name: foodId\n          in: path\n          required: true\n          description: The id of the food to delete\n          schema:\n            type: string\n        - name: key\n          in: header\n          required: true\n          description: The key header\n          schema:\n            type: string\n      security:\n        - foodstore_auth:\n            - 'write:food'\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Food'\n              examples:\n                response:\n                  value:\n                    id: 1\n                    name: Noodle\n                    tag: food\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  securitySchemes:\n    foodstore_auth:\n      type: oauth2\n      description: This API uses OAuth 2 with the client credential grant flow.\n      flows:\n        clientCredentials:\n          tokenUrl: 'https://localhost:6882/token'\n          scopes:\n            'write:food': modify food in your account\n            'read:food': read your food\n  schemas:\n    Food:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n",
			"canonicalURL": "/github.com/networknt/light-example-4j@74513c019570e65623b80c1cadc1423e7a18807a/-/blob/servicemesher/services/foodstore-service-api/src/main/resources/config/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/networknt/light-example-4j/blob/74513c019570e65623b80c1cadc1423e7a18807a/servicemesher/services/foodstore-service-api/src/main/resources/config/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/food\": get: security: security \"foodstore_auth\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}