{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/azutoolkit/authority"
		},
		"file": {
			"name": "openid.yaml",
			"size": 0,
			"path": "docs/.gitbook/assets/openid.yaml",
			"byteSize": 36725,
			"content": "openapi: 3.0.0\ninfo:\n  description:\n    Authority - Access Management - OpenID Connect API. Defines The OpenID\n    Connect Endpoints exposed by AM server.\n  version: 2.10.x\n  title: Gravitee.io - Access Management - OpenID Connect API\n  contact:\n    email: contact@yourdomain.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\npaths:\n  /.well-known/openid-configuration:\n    get:\n      tags:\n        - OpenID Connect\n      summary: Get OpenID Provider configuration information\n      description:\n        Discovery endpoint used by OpenID Connect Relying Party to discover the\n        End-User's OpenID Provider and obtain information needed to interact\n        with it, including its OAuth 2.0 endpoint locations.\n      responses:\n        \"200\":\n          description: The OpenID Provider Metadata values\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OpenIDProviderMetadataResponse\"\n  /.well-known/jwks.json:\n    get:\n      tags:\n        - OpenID Connect\n      summary: Get JSON Web Key Set\n      description:\n        JWKS endpoint containing the public keys used by OpenID Connect Relying\n        Party to verify any JWT issued by the authorization server.\n      responses:\n        \"200\":\n          description: A JSON object that represents a set of JWKs\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/JWKSetResponse\"\n  /userinfo:\n    get:\n      tags:\n        - OpenID Connect\n      summary: Get claims about the authenticated End-User\n      description:\n        The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns\n        Claims about the authenticated End-User.\n      parameters:\n        - in: header\n          name: Authorization\n          description:\n            To obtain the requested Claims about the End-User, the Client makes\n            a request to the UserInfo Endpoint using an Access Token obtained\n            through OpenID Connect Authentication\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Claims about the authenticated End-User\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserInfoResponse\"\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token\n    post:\n      tags:\n        - OpenID Connect\n      summary: Get claims about the authenticated End-User\n      description:\n        The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns\n        Claims about the authenticated End-User.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                access_token:\n                  description:\n                    To obtain the requested Claims about the End-User, the\n                    Client makes a request to the UserInfo Endpoint using an\n                    Access Token obtained through OpenID Connect Authentication\n                  type: string\n              required:\n                - access_token\n      responses:\n        \"200\":\n          description: Claims about the authenticated End-User\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserInfoResponse\"\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token\n  /register:\n    post:\n      tags:\n        - OpenID Connect\n      summary: Register (create) a new client.\n      description:\n        The Dynamic Client Registration (dcr) Endpoint is an OAuth 2.0 Protected\n        Resource through which a new Client registration can be requested.\n      parameters:\n        - in: header\n          name: Authorization\n          description:\n            Bearer token obtained through client crendentials flow with as\n            mandatory scope \"dcr_admin\". Token required unless open dynamic\n            client registration is enabled.\n          required: false\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ClientRegistrationRequest\"\n      responses:\n        \"201\":\n          description: Claims about the registred client\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientRegistrationResponse\"\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token\n        \"403\":\n          description: Registration forbidden\n  \"/register/{client_id}\":\n    get:\n      tags:\n        - OpenID Connect\n      summary: Get a registred client.\n      description: See information about a registred client.\n      parameters:\n        - in: header\n          name: Authorization\n          description: Bearer token obtained on the register process through the\n            registration_access_token property giving access only to one client\n            matching the client_id path parameter. An admin token can be also\n            obtained through the client crendentials flow with as mandatory\n            scope \"dcr_admin\".\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: client_id\n          required: true\n          description: ID of the client\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Claims about the registred client.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientRegistrationResponse\"\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token\n        \"403\":\n          description: Access forbidden\n    patch:\n      tags:\n        - OpenID Connect\n      summary: Patch a registred client.\n      description: Update information about a registred client.\n      parameters:\n        - in: header\n          name: Authorization\n          description: Bearer token obtained on the register process through the\n            registration_access_token property giving access only to one client\n            matching the client_id path parameter. An admin token can be also\n            obtained through the client crendentials flow with as mandatory\n            scope \"dcr_admin\".\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: client_id\n          required: true\n          description: ID of the client\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ClientRegistrationRequest\"\n      responses:\n        \"200\":\n          description: Claims about the updated client.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientRegistrationResponse\"\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token\n        \"403\":\n          description: Access forbidden\n    delete:\n      tags:\n        - OpenID Connect\n      summary: Delete a registred client.\n      description: Delete a registred client.\n      parameters:\n        - in: header\n          name: Authorization\n          description: Bearer token obtained on the register process through the\n            registration_access_token property giving access only to one client\n            matching the client_id path parameter. An admin token can be also\n            obtained through the client crendentials flow with as mandatory\n            scope \"dcr_admin\".\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: client_id\n          required: true\n          description: ID of the client\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Client deleted\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/ClientRegistrationResponse\"\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token\n        \"403\":\n          description: Access forbidden\n  \"/register/{client_id}/renew_secret\":\n    post:\n      tags:\n        - OpenID Connect\n      summary: Renew the client secret of a registred client.\n      description: Renew the client secret of a registred client.\n      parameters:\n        - in: header\n          name: Authorization\n          description: Bearer token obtained on the register process through the\n            registration_access_token property giving access only to one client\n            matching the client_id path parameter. An admin token can be also\n            obtained through the client crendentials flow with as mandatory\n            scope \"dcr_admin\".\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: client_id\n          required: true\n          description: ID of the client\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Claims about the updated client.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientRegistrationResponse\"\n        \"400\":\n          description: Invalid Request\n        \"401\":\n          description: Invalid Token\n        \"403\":\n          description: Access forbidden\nservers:\n  - url: https://auth.authority.io/{domain}\n    variables:\n      domain:\n        default: unknown\ncomponents:\n  requestBodies:\n    ClientRegistrationRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ClientRegistrationRequest\"\n      required: true\n  securitySchemes:\n    client_auth:\n      type: http\n      description: Base64(clientId:clientSecret)\n      scheme: basic\n  schemas:\n    OpenIDProviderMetadataResponse:\n      type: object\n      properties:\n        issuer:\n          type: string\n          description:\n            REQUIRED. URL using the https scheme with no query or fragment\n            component that the OP asserts as its Issuer Identifier\n        authorization_endpoint:\n          type: string\n          description: REQUIRED. URL of the OP's OAuth 2.0 Authorization Endpoint\n        token_endpoint:\n          type: string\n          description: URL of the OP's OAuth 2.0 Token Endpoint\n        userinfo_endpoint:\n          type: string\n          description: RECOMMENDED. URL of the OP's UserInfo Endpoint\n        jwks_uri:\n          type: string\n          description: REQUIRED. URL of the OP's JSON Web Key Set [JWK] document.\n        registration_endpoint:\n          type: string\n          description: RECOMMENDED. URL of the OP's Dynamic Client Registration Endpoint\n        scopes_supported:\n          type: string\n          description:\n            RECOMMENDED. JSON array containing a list of the OAuth 2.0 [RFC6749]\n            scope values that this server supports\n        response_types_supported:\n          type: string\n          description: REQUIRED. JSON array containing a list of the OAuth 2.0\n            response_type values that this OP supports\n        response_modes_supported:\n          type: string\n          description: OPTIONAL. JSON array containing a list of the OAuth 2.0\n            response_mode values that this OP supports\n        grant_types_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the OAuth 2.0 Grant Type\n            values that this OP supports\n        acr_values_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the Authentication Context\n            Class References that this OP supports\n        subject_types_supported:\n          type: string\n          description:\n            REQUIRED. JSON array containing a list of the Subject Identifier\n            types that this OP supports\n        id_token_signing_alg_values_supported:\n          type: string\n          description:\n            REQUIRED. JSON array containing a list of the JWS signing algorithms\n            (alg values) supported by the OP for the ID Token to encode the\n            Claims in a JWT\n        id_token_encryption_alg_values_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the JWE encryption\n            algorithms (alg values) supported by the OP for the ID Token to\n            encode the Claims in a JWT\n        id_token_encryption_enc_values_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the JWE encryption\n            algorithms (enc values) supported by the OP for the ID Token to\n            encode the Claims in a JWT\n        userinfo_signing_alg_values_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the JWS signing algorithms\n            (alg values) [JWA] supported by the UserInfo Endpoint to encode the\n            Claims in a JWT\n        userinfo_encryption_alg_values_supported:\n          type: string\n          description:\n            ROPTIONAL. JSON array containing a list of the JWE encryption\n            algorithms (alg values) [JWA] supported by the UserInfo Endpoint to\n            encode the Claims in a JWT\n        userinfo_encryption_enc_values_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the JWE encryption\n            algorithms (enc values) [JWA] supported by the UserInfo Endpoint to\n            encode the Claims in a JWT\n        request_object_signing_alg_values_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the JWS signing algorithms\n            (alg values) supported by the OP for Request Objects\n        request_object_encryption_alg_values_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the JWE encryption\n            algorithms (alg values) supported by the OP for Request Objects\n        request_object_encryption_enc_values_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the JWE encryption\n            algorithms (enc values) supported by the OP for Request Objects\n        token_endpoint_auth_methods_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of Client Authentication\n            methods supported by this Token Endpoint\n        token_endpoint_auth_signing_alg_values_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the JWS signing algorithms\n            (alg values) supported by the Token Endpoint for the signature on\n            the JWT\n        display_values_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the display parameter\n            values that the OpenID Provider supports\n        claim_types_supported:\n          type: string\n          description:\n            OPTIONAL. JSON array containing a list of the Claim Types that the\n            OpenID Provider supports\n        claims_supported:\n          type: string\n          description:\n            RECOMMENDED. JSON array containing a list of the Claim Names of the\n            Claims that the OpenID Provider MAY be able to supply values for\n        service_documentation:\n          type: string\n          description:\n            OPTIONAL. URL of a page containing human-readable information that\n            developers might want or need to know when using the OpenID Provider\n        claims_locales_supported:\n          type: string\n          description:\n            OPTIONAL. Languages and scripts supported for values in Claims being\n            returned, represented as a JSON array of BCP47 [RFC5646] language\n            tag values\n        ui_locales_supported:\n          type: string\n          description:\n            OPTIONAL. Languages and scripts supported for the user interface,\n            represented as a JSON array of BCP47 [RFC5646] language tag values\n        claims_parameter_supported:\n          type: boolean\n          description:\n            OPTIONAL. Boolean value specifying whether the OP supports use of\n            the claims parameter, with true indicating support. If omitted, the\n            default value is false\n        request_parameter_supported:\n          type: boolean\n          description:\n            OPTIONAL. Boolean value specifying whether the OP supports use of\n            the request parameter, with true indicating support. If omitted, the\n            default value is false\n        request_uri_parameter_supported:\n          type: boolean\n          description:\n            OPTIONAL. Boolean value specifying whether the OP supports use of\n            the request_uri parameter, with true indicating support. If omitted,\n            the default value is true\n        require_request_uri_registration:\n          type: boolean\n          description:\n            OPTIONAL. Boolean value specifying whether the OP requires any\n            request_uri values used to be pre-registered using the request_uris\n            registration parameter\n        op_policy_uri:\n          type: string\n          description:\n            OPTIONAL. URL that the OpenID Provider provides to the person\n            registering the Client to read about the OP's requirements on how\n            the Relying Party can use the data provided by the OP\n        op_tos_uri:\n          type: boolean\n          description:\n            OPTIONAL. URL that the OpenID Provider provides to the person\n            registering the Client to read about OpenID Provider's terms of\n            service\n    UserInfoResponse:\n      type: object\n      properties:\n        sub:\n          type: string\n          description: Subject - Identifier for the End-User at the Issuer\n        name:\n          type: string\n          description:\n            End-User's full name in displayable form including all name parts,\n            possibly including titles and suffixes, ordered according to the\n            End-User's locale and preferences\n        given_name:\n          type: string\n          description: Given name(s) or first name(s) of the End-User\n        family_name:\n          type: string\n          description: Surname(s) or last name(s) of the End-User\n        middle_name:\n          type: string\n          description: Middle name(s) of the End-User\n        nickname:\n          type: string\n          description:\n            Casual name of the End-User that may or may not be the same as the\n            given_name\n        preferred_username:\n          type: string\n          description:\n            Shorthand name by which the End-User wishes to be referred to at the\n            RP, such as janedoe or j.doe\n        profile:\n          type: string\n          description: URL of the End-User's profile page\n        picture:\n          type: string\n          description: URL of the End-User's profile picture\n        website:\n          type: string\n          description: URL of the End-User's Web page or blog\n        email:\n          type: string\n          description: End-User's preferred e-mail address\n        email_verified:\n          type: boolean\n          description: User at the time the verification was performed\n        gender:\n          type: string\n          description: End-User's gender\n        birthdate:\n          type: string\n          description:\n            End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004]\n            YYYY-MM-DD format\n        zoneinfo:\n          type: string\n          description:\n            String from zoneinfo [zoneinfo] time zone database representing the\n            End-User's time zone\n        locale:\n          type: string\n          description: End-User's locale, represented as a BCP47 [RFC5646] language tag\n        phone_number:\n          type: string\n          description: End-User's preferred telephone number\n        phone_number_verified:\n          type: boolean\n          description: User at the time the verification was performed\n        address:\n          type: string\n          description: End-User's preferred postal address\n        updated_at:\n          type: integer\n          description: Time the End-User's information was last updated\n    JWKSetResponse:\n      type: object\n      properties:\n        keys:\n          type: array\n          description: The value of the \"keys\" parameter is an array of JWK values\n          items:\n            $ref: \"#/components/schemas/JWKResponse\"\n    JWKResponse:\n      type: object\n      properties:\n        kty:\n          type: string\n          description:\n            The \"kty\" (key type) parameter identifies the cryptographic\n            algorithm family used with the key, such as \"RSA\" or \"EC\"\n        use:\n          type: string\n          description:\n            The \"use\" (public key use) parameter identifies the intended use of\n            the public key\n        key_ops:\n          type: string\n          description:\n            The \"key_ops\" (key operations) parameter identifies the operation(s)\n            for which the key is intended to be used\n        alg:\n          type: string\n          description:\n            The \"alg\" (algorithm) parameter identifies the algorithm intended\n            for use with the key\n        kid:\n          type: string\n          description: The \"kid\" (key ID) parameter is used to match a specific key\n        x5u:\n          type: string\n          description:\n            The \"x5u\" (X.509 URL) parameter is a URI [RFC3986] that refers to a\n            resource for an X.509 public key certificate or certificate chain\n            [RFC5280]\n        x5c:\n          type: string\n          description:\n            The \"x5c\" (X.509 certificate chain) parameter contains a chain of\n            one or more PKIX certificates [RFC5280]\n        x5t:\n          type: string\n          description:\n            The \"x5t\" (X.509 certificate SHA-1 thumbprint) parameter is a\n            base64url-encoded SHA-1 thumbprint (a.k.a. digest) of the DER\n            encoding of an X.509 certificate [RFC5280]\n        x5t#S256:\n          type: string\n          description:\n            The \"x5t#S256\" (X.509 certificate SHA-256 thumbprint) parameter is a\n            base64url-encoded SHA-256 thumbprint (a.k.a. digest) of the DER\n            encoding of an X.509 certificate [RFC5280]\n    ClientRegistrationRequest:\n      type: object\n      required:\n        - redirect_uris\n      properties:\n        redirect_uris:\n          type: array\n          description:\n            REQUIRED. Array of Redirection URI values used by the Client. One of\n            these registered Redirection URI values MUST exactly match the\n            redirect_uri parameter value used in each Authorization Request\n          items:\n            type: string\n        response_types:\n          type: array\n          description:\n            JSON array containing a list of the OAuth 2.0 response_type values\n            that the Client is declaring that it will restrict itself to using.\n            If omitted, the default is that the Client will use only the code\n            Response Type.\n          items:\n            type: string\n        grant_types:\n          type: array\n          description:\n            JSON array containing a list of the OAuth 2.0 Grant Types that the\n            Client is declaring that it will restrict itself to using. Values\n            used by OpenID Connect are authorization_code, implicit and\n            refresh_token\n          items:\n            type: string\n        application_type:\n          type: string\n          description:\n            Kind of the application. The default, if omitted, is web. The\n            defined values are native or web.\n        contacts:\n          type: array\n          description:\n            Array of e-mail addresses of people responsible for this Client.\n            This might be used by some providers to enable a Web user interface\n            to modify the Client information.\n          items:\n            type: string\n        client_name:\n          type: string\n          description: Name of the Client to be presented to the End-User.\n        logo_uri:\n          type: string\n          description: URL that references a logo for the Client application.\n        client_uri:\n          type: string\n          description:\n            URL of the home page of the Client. The value of this field MUST\n            point to a valid Web page.\n        policy_uri:\n          type: string\n          description:\n            URL that the Relying Party Client provides to the End-User to read\n            about the how the profile data will be used.\n        tos_uri:\n          type: string\n          description:\n            URL that the Relying Party Client provides to the End-User to read\n            about the Relying Party's terms of service.\n        jwks_uri:\n          type: string\n          description: URL for the Client's JSON Web Key Set [JWK] document.\n        jwks:\n          $ref: \"#/components/schemas/JWKSetResponse\"\n        sector_identifier_uri:\n          type: string\n          description:\n            URL using the https scheme to be used in calculating Pseudonymous\n            Identifiers by the OP. The URL references a file with a single JSON\n            array of redirect_uri values.\n        subject_type:\n          type: string\n          description: subject_type requested for responses to this Client. The\n            subject_types_supported Discovery parameter contains a list of the\n            supported subject_type values for this server. Valid types include\n            pairwise and public.\n        id_token_signed_response_alg:\n          type: string\n          description:\n            JWS alg algorithm [JWA] REQUIRED for signing the ID Token issued to\n            this Client. The default, if omitted, is RS256. The public key for\n            validating the signature is provided by retrieving the JWK Set\n            referenced by the jwks_uri element from OpenID Connect Discovery 1.0\n            [OpenID.Discovery].\n        id_token_encrypted_response_alg:\n          type: string\n          description:\n            JWE alg algorithm [JWA] REQUIRED for encrypting the ID Token issued\n            to this Client. If this is requested, the response will be signed\n            then encrypted, with the result being a Nested JWT, as defined in\n            [JWT]. The default, if omitted, is that no encryption is performed.\n        id_token_encrypted_response_enc:\n          type: string\n          description:\n            JWE enc algorithm [JWA] REQUIRED for encrypting the ID Token issued\n            to this Client. If id_token_encrypted_response_alg is specified, the\n            default for this value is A128CBC-HS256. When\n            id_token_encrypted_response_enc is included,\n            id_token_encrypted_response_alg MUST also be provided.\n        userinfo_signed_response_alg:\n          type: string\n          description:\n            WS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If\n            this is specified, the response will be JWT [JWT] serialized, and\n            signed using JWS. The default, if omitted, is for the UserInfo\n            Response to return the Claims as a UTF-8 encoded JSON object using\n            the application/json content-type.\n        userinfo_encrypted_response_alg:\n          type: string\n          description:\n            JWE [JWE] alg algorithm [JWA] REQUIRED for encrypting UserInfo\n            Responses. If both signing and encryption are requested, the\n            response will be signed then encrypted, with the result being a\n            Nested JWT, as defined in [JWT]. The default, if omitted, is that no\n            encryption is performed.\n        userinfo_encrypted_response_enc:\n          type: string\n          description:\n            JWE enc algorithm [JWA] REQUIRED for encrypting UserInfo Responses.\n            If userinfo_encrypted_response_alg is specified, the default for\n            this value is A128CBC-HS256. When userinfo_encrypted_response_enc is\n            included, userinfo_encrypted_response_alg MUST also be provided.\n        request_object_signing_alg:\n          type: string\n          description:\n            JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request\n            Objects sent to the OP. All Request Objects from this Client MUST be\n            rejected, if not signed with this algorithm. Request Objects are\n            described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core].\n            This algorithm MUST be used both when the Request Object is passed\n            by value (using the request parameter) and when it is passed by\n            reference (using the request_uri parameter). Servers SHOULD support\n            RS256. The value none MAY be used. The default, if omitted, is that\n            any algorithm supported by the OP and the RP MAY be used.\n        request_object_encryption_alg:\n          type: string\n          description:\n            JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use\n            for encrypting Request Objects sent to the OP. This parameter SHOULD\n            be included when symmetric encryption will be used, since this\n            signals to the OP that a client_secret value needs to be returned\n            from which the symmetric key will be derived, that might not\n            otherwise be returned. The RP MAY still use other supported\n            encryption algorithms or send unencrypted Request Objects, even when\n            this parameter is present. If both signing and encryption are\n            requested, the Request Object will be signed then encrypted, with\n            the result being a Nested JWT, as defined in [JWT]. The default, if\n            omitted, is that the RP is not declaring whether it might encrypt\n            any Request Objects.\n        request_object_encryption_enc:\n          type: string\n          description:\n            JWE enc algorithm [JWA] the RP is declaring that it may use for\n            encrypting Request Objects sent to the OP. If\n            request_object_encryption_alg is specified, the default for this\n            value is A128CBC-HS256. When request_object_encryption_enc is\n            included, request_object_encryption_alg MUST also be provided.\n        token_endpoint_auth_method:\n          type: string\n          description:\n            Requested Client Authentication method for the Token Endpoint. The\n            options are client_secret_post, client_secret_basic,\n            client_secret_jwt, private_key_jwt, and none, as described in\n            Section 9 of OpenID Connect Core 1.0 [OpenID.Core]. Other\n            authentication methods MAY be defined by extensions. If omitted, the\n            default is client_secret_basic -- the HTTP Basic Authentication\n            Scheme specified in Section 2.3.1 of OAuth 2.0 [RFC6749].\n        token_endpoint_auth_signing_alg:\n          type: string\n          description:\n            JWS [JWS] alg algorithm [JWA] that MUST be used for signing the JWT\n            [JWT] used to authenticate the Client at the Token Endpoint for the\n            private_key_jwt and client_secret_jwt authentication methods. All\n            Token Requests using these authentication methods from this Client\n            MUST be rejected, if the JWT is not signed with this algorithm.\n            Servers SHOULD support RS256. The value none MUST NOT be used. The\n            default, if omitted, is that any algorithm supported by the OP and\n            the RP MAY be used.\n        default_max_age:\n          type: integer\n          description:\n            Default Maximum Authentication Age. Specifies that the End-User MUST\n            be actively authenticated if the End-User was authenticated longer\n            ago than the specified number of seconds. The max_age request\n            parameter overrides this default value. If omitted, no default\n            Maximum Authentication Age is specified.\n        require_auth_time:\n          type: boolean\n          description:\n            Boolean value specifying whether the auth_time Claim in the ID Token\n            is REQUIRED. It is REQUIRED when the value is true.\n        default_acr_values:\n          type: array\n          description:\n            Default requested Authentication Context Class Reference values.\n            Array of strings that specifies the default acr values that the OP\n            is being requested to use for processing requests from this Client,\n            with the values appearing in order of preference.\n          items:\n            type: string\n        initiate_login_uri:\n          type: string\n          description:\n            URI using the https scheme that a third party can use to initiate a\n            login by the RP, as specified in Section 4 of OpenID Connect Core\n            1.0 [OpenID.Core].\n        request_uris:\n          type: array\n          description:\n            Array of request_uri values that are pre-registered by the RP for\n            use at the OP.\n          items:\n            type: string\n        scope:\n          type: array\n          description: String containing a space-separated list of scope values\n          items:\n            type: string\n        software_id:\n          type: string\n          description:\n            A unique identifier string (e.g., a Universally Unique Identifier\n            (UUID)) assigned by the client developer or software publisher used\n            by registration endpoints to identify the client software to be\n            dynamically registered.\n        software_version:\n          type: string\n          description:\n            A version identifier string for the client software identified by\n            \"software_id\".  The value of the \"software_version\" SHOULD change on\n            any update to the client software identified by the same\n            \"software_id\".\n        software_statement:\n          type: string\n          description:\n            A software statement containing client metadata values about the\n            client software as claims.  This is a string value containing the\n            entire signed JWT.\n    ClientRegistrationResponse:\n      allOf:\n        - $ref: \"#/components/schemas/ClientRegistrationRequest\"\n      type: object\n      required:\n        - client_id\n      properties:\n        client_id:\n          type: string\n          description:\n            REQUIRED. Unique Client Identifier. It MUST NOT be currently valid\n            for any other registered Client.\n        client_secret:\n          type: string\n          description:\n            Client Secret. The same Client Secret value MUST NOT be assigned to\n            multiple Clients. This value is used by Confidential Clients to\n            authenticate to the Token Endpoint.\n        registration_access_token:\n          type: string\n          description: Registration Access Token that can be used at the Client\n            Configuration Endpoint to perform subsequent operations upon the\n            Client registration.\n        registration_client_uri:\n          type: string\n          description:\n            Location of the Client Configuration Endpoint where the Registration\n            Access Token can be used to perform subsequent operations upon the\n            resulting Client registration. Implementations MUST either return\n            both a Client Configuration Endpoint and a Registration Access Token\n            or neither of them.\n        client_id_issued_at:\n          type: string\n          description:\n            Time at which the Client Identifier was issued. Its value is a JSON\n            number representing the number of seconds from 1970-01-01T0:0:0Z as\n            measured in UTC until the date/time.\n        client_secret_expires_at:\n          type: integer\n          format: int64\n          description:\n            if client_secret is issued. Time at which the client_secret will\n            expire or 0 if it will not expire. Its value is a JSON number\n            representing the number of seconds from 1970-01-01T0:0:0Z as\n            measured in UTC until the date/time.\n",
			"canonicalURL": "/github.com/azutoolkit/authority@c00e669bc08b93e18dae44b210ae9ec672829350/-/blob/docs/.gitbook/assets/openid.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/azutoolkit/authority/blob/c00e669bc08b93e18dae44b210ae9ec672829350/docs/.gitbook/assets/openid.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/register/{client_id}\": delete: responses: 204: contents: unsupported content types: [*/*]",
	"NotImplemented": [
		"unsupported content types"
	]
}