{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sci-hub-p2p/sci-hub-p2p"
		},
		"file": {
			"name": "api.spec.yaml",
			"size": 0,
			"path": "docs/api.spec.yaml",
			"byteSize": 5294,
			"content": "openapi: 3.0.3\ninfo:\n  title: Sci-Hub P2P\n  version: 0.0.1\n  description: \"[go back to documents](./)\"\n\nservers:\n  - variables:\n      port:\n        default: \"4005\"\n      basePath:\n        default: \"api/v0\"\n    url: http://127.0.0.1:{port}/{basePath}\n\npaths:\n  \"/debug\":\n    get:\n      description: get debug info\n      responses:\n        200:\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                \"title\": \"debug\"\n                \"type\": \"object\"\n                \"additionalProperties\": false\n                \"properties\":\n                  \"version\":\n                    \"type\": \"string\"\n                  \"commit\":\n                    \"type\": \"string\"\n                  \"builder\":\n                    \"type\": \"string\"\n                  \"build_time\":\n                    \"type\": \"string\"\n                  \"os\":\n                    \"type\": \"string\"\n                  \"arch\":\n                    \"type\": \"string\"\n                  \"base_dir\":\n                    \"type\": \"string\"\n                \"required\":\n                  - \"arch\"\n                  - \"base_dir\"\n                  - \"commit\"\n                  - \"builder\"\n                  - \"build_time\"\n                  - \"os\"\n                  - \"version\"\n              example:\n                version: v0.0.1\n                commit: 8aj2nsa8\n                builder: \"go version go1.16.6 windows/amd64\"\n                build_time: \"2021-07-31T19:44:54.569Z\"\n                os: \"windows\"\n                arch: \"amd64\"\n                base_dir: \"/path/to/.sci-hub-p2p\"\n\n  \"/torrent\":\n    get:\n      description: list current torrent in database\n      responses:\n        200:\n          description: torrent already loaded, and load again\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        info_hash:\n                          type: string\n                        name:\n                          type: string\n    put:\n      description: add a torrent to database\n      requestBody:\n        required: true\n        description: should be raw bencoding encoded binary content\n        content:\n          application/octet-stream:\n            example: binary\n      responses:\n        200:\n          description: torrent already loaded, and load again\n\n        400:\n          $ref: \"#/components/responses/RequestWrongBodyEncoding\"\n        402:\n          $ref: \"#/components/responses/RequestEmptyBody\"\n\n  \"/index\":\n    put:\n      description: add a index file to database\n      requestBody:\n        required: true\n        description: should be raw lzma compressed jsonlines file\n        content:\n          application/octet-stream:\n            example: binary\n      responses:\n        200:\n          description: successfully load index file\n          content:\n            application/json:\n              example:\n                count: 99996\n        400:\n          $ref: \"#/components/responses/RequestWrongBodyEncoding\"\n        402:\n          $ref: \"#/components/responses/RequestEmptyBody\"\n\n  \"/paper\":\n    get:\n      description: Get paper from P2P network.\n      parameters:\n        - name: doi\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          description: successfully return a paper\n          content:\n            application/pdf: {}\n        404:\n          description: |\n            Can't found DOI or torrent in database\n            check `data.info_hash` to know if there's a torrent missing in database\n          content:\n            application/json:\n              schema:\n                example:\n                  status: error\n                  message: can't find paper\n                  data:\n                    info_hash: \"{info hash in hex string}\"\n                oneOf:\n                  - $ref: \"#/components/schemas/error\"\n                  - type: object\n                    allOf:\n                      - $ref: \"#/components/schemas/error\"\n                      - properties:\n                          data:\n                            type: object\n                            properties:\n                              info_hash:\n                                type: string\ncomponents:\n  schemas:\n    error:\n      title: \"Error\"\n      description: error with message\n      type: \"object\"\n      additionalProperties: false\n      \"properties\":\n        \"status\":\n          type: \"string\"\n          enum: [\"error\"]\n        \"message\":\n          \"type\": \"string\"\n      required:\n        - status\n        - messag\n\n  responses:\n    RequestEmptyBody:\n      description: empty request body\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/error\"\n          example:\n            status: error\n            mesage: empty response body\n\n    RequestWrongBodyEncoding:\n      description: request body can'b be decoded\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/error\"\n          example:\n            status: error\n            mesage: can't decode request body\n",
			"canonicalURL": "/github.com/sci-hub-p2p/sci-hub-p2p@9aad60c60b431d52119814413d06315516b6d547/-/blob/docs/api.spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/sci-hub-p2p/sci-hub-p2p/blob/9aad60c60b431d52119814413d06315516b6d547/docs/api.spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/index\": put: responses: 200: contents: application/json: generate schema: empty schema not implemented",
	"NotImplemented": [
		"empty schema",
		"unsupported content types"
	]
}