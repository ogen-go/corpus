{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gravitee-io/gravitee-docs"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "apim/3.x/portal-api/3.10/openapi.yaml",
			"byteSize": 153792,
			"content": "openapi: 3.0.0\ninfo:\n  title: Gravitee.io Portal Rest API\n  description: API dedicated to the devportal part of Gravitee\n  termsOfService: terms\n  contact:\n    name: The Gravitee Team\n    url: https://gravitee.io\n    email: contact@graviteesource.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0\n  version: \"3.10.0\"\nservers:\n  - url: http://localhost:8083/portal/environments/{envId}\n    description: The portal API for a given environment\n    variables:\n      envId:\n        default: DEFAULT\n        description: ID of the environment\ntags:\n  - name: Analytics\n    description: All about application analytics\n  - name: Api\n    description: All about APIs\n  - name: Application\n    description: All about applications\n  - name: Group\n    description: All about groups\n  - name: Portal\n    description: All about portal configurations\n  - name: Subscription\n    description: All about subscriptions\n  - name: User\n    description: All about the current user\n  - name: Users\n    description: All about the portal users\n\nsecurity:\n  - BasicAuth: []\n  - CookieAuth: []\n\npaths:\n  /apis:\n    get:\n      tags:\n        - Api\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/apiContextPathQueryParam'\n        - $ref: '#/components/parameters/apiLabelQueryParam'\n        - $ref: '#/components/parameters/apiVersionQueryParam'\n        - $ref: '#/components/parameters/apiNameQueryParam'\n        - $ref: '#/components/parameters/apiCategoryQueryParam'\n        - $ref: '#/components/parameters/apiFilterQueryParam'\n        - $ref: '#/components/parameters/apiFilterExcludedQueryParam'\n        - $ref: '#/components/parameters/apiPromotedQueryParam'\n      summary: List APIs\n      description: |\n        List public APIs for anonymous requests.\n        List all the APIs the current user is allowed to category for authenticated requests.\n\n        The list can be filtered according to query parameters.\n\n        By default the list is sorted by alphabetic order.\n        If a **cat** query param is sent, a specific sorting can be applied. Please refer to **cat** description for detail.\n      operationId: getApis\n      security: []\n      responses:\n        200:\n          description: List accessible APIs for current user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApisResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/_search:\n    post:\n      tags:\n        - Api\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/apiQueryParam'\n      summary: Search APIs with a query\n      description: |\n        Same as `/apis` but with a search query as a parameter. Search for API using the search engine.\n        Supports pagination.\n      operationId: searchApis\n      security: []\n      responses:\n        200:\n          description: Search accessible APIs for current user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApisResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n    get:\n      tags:\n        - Api\n      parameters:\n        - $ref: '#/components/parameters/apiIncludeParam'\n      summary: Get the API definition\n      description:  |\n        Get the detail of an API.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n      operationId: getApiByApiId\n      security: []\n      responses:\n        200:\n          description: API definition\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api'\n        404:\n          $ref: '#/components/responses/APINotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/informations:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n    get:\n      tags:\n        - Portal\n      summary: Get the api dynamic informations to display.\n      operationId: getApiInformations\n      description: |\n        Get api informations.\n      security: []\n      responses:\n        200:\n          description: List of api informations\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiInformation'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/links:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n    get:\n      tags:\n        - Api\n      summary: Get the API links from Aside SYSTEM_FOLDER.\n      operationId: getApiLinks\n      description: |\n        Get all the links (internal and external) to be displayed in the detail of the API.\n      security: []\n      responses:\n        200:\n          description: List of Links\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LinksResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/metrics:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n    get:\n      tags:\n        - Api\n      summary: Get API metrics\n      description:  |\n        Get some metrics about an API :\n          * number of subscribers\n          * number of hits during the last 7 days\n          * health ratio over the last week\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n      operationId: getApiMetricsByApiId\n      security: []\n      responses:\n        200:\n          description: API metrics\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiMetrics'\n        404:\n          $ref: '#/components/responses/APINotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/pages:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n    get:\n      tags:\n        - Api\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/homePageQueryParam'\n        - $ref: '#/components/parameters/parentPageQueryParam'\n      summary: List API pages\n      description: |\n        List all documentation pages of an API.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n      operationId: getPagesByApiId\n      security: []\n      responses:\n        200:\n          $ref: '#/components/responses/PagesSuccess'\n        404:\n          $ref: '#/components/responses/APINotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/pages/{pageId}:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n      - $ref: '#/components/parameters/pageIdParam'\n    get:\n      tags:\n        - Api\n      parameters:\n        - $ref: '#/components/parameters/pageIncludeParam'\n      summary: Get an API page\n      description: |\n        Get an API page.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n      operationId: getPageByApiIdAndPageId\n      security: []\n      responses:\n        200:\n          $ref: '#/components/responses/PageSuccess'\n        404:\n          description: API or Page not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/pages/{pageId}/content:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n      - $ref: '#/components/parameters/pageIdParam'\n    get:\n      tags:\n        - Api\n      summary: Get the content of an API page.\n      description: |\n        Get the content of a specific API documentation page.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n      operationId: getPageContentByApiIdAndPageId\n      security: []\n      responses:\n        200:\n          description: The content of the api documentation page.\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: API or Page not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /apis/{apiId}/picture:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n    get:\n      tags:\n        - Api\n      summary: Get the API's picture\n      description: |\n        Get the API's picture.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n      operationId: getPictureByApiId\n      security: []\n      responses:\n        200:\n          $ref: '#/components/responses/PictureSuccess'\n        404:\n          $ref: '#/components/responses/APINotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/background:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n    get:\n      tags:\n        - Api\n      summary: Get the API's background\n      description: |\n        Get the API's background.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n      operationId: getBackgroundByApiId\n      security: []\n      responses:\n        200:\n          $ref: '#/components/responses/PictureSuccess'\n        404:\n          $ref: '#/components/responses/APINotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/plans:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n    get:\n      tags:\n        - Api\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n\n      summary: List plans for an API\n      description: |\n        List plans for an API.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n      operationId: getApiPlansByApiId\n      security: []\n      responses:\n        200:\n          description: List accessible plans for current user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PlansResponse'\n        404:\n          $ref: '#/components/responses/APINotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/ratings:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n    get:\n      tags:\n        - Api\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/mineQueryParam'\n        - $ref: '#/components/parameters/ratingOrderQueryParam'\n      summary: List ratings for an API\n      description: |\n        List ratings for an API.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n      operationId: getApiRatingsByApiId\n      security: []\n      responses:\n        200:\n          description: List of ratings\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RatingsResponse'\n        404:\n          $ref: '#/components/responses/APINotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Api\n      summary: Create a rating for an API\n      description: |\n        Create a rating for an API.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n\n        The current must have API_RATING[CREATE] permission to create a rating.\n      operationId: createApiRating\n      requestBody:\n        description: Use to add a rating to an api\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RatingInput'\n      responses:\n        201:\n          description: Created Rating\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Rating'\n        400:\n          description: Rating for this api and this user already exists.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          description: Rating service is not activated or user does not have sufficient rights to access this resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          $ref: '#/components/responses/APINotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/ratings/{ratingId}:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n      - $ref: '#/components/parameters/ratingIdParam'\n    put:\n      tags:\n        - Api\n      summary: Update a rating for an API\n      description: |\n        Update a rating for an API.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n\n        The current must have API_RATING[CREATE] permission to update a rating.\n      operationId: updateApiRating\n      requestBody:\n        description: Use to update a rating to an api\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RatingInput'\n      responses:\n        200:\n          description: Updated Rating\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Rating'\n        403:\n          description: Rating service is not activated or user does not have sufficient rights to access this resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: API or Rating not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Api\n      summary: Delete a rating for an API\n      description: |\n        Delete a rating for an API.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n\n        The current must have API_RATING[DELETE] permission to delete a rating.\n      operationId: deleteApiRating\n      responses:\n        204:\n          description: Deleted Rating\n        403:\n          description: Rating service is not activated or user does not have sufficient rights to access this resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: API or Rating not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/ratings/{ratingId}/answers:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n      - $ref: '#/components/parameters/ratingIdParam'\n    post:\n      tags:\n        - Api\n      summary: Create an answer to rating\n      description: |\n        Create an answer to rating of API.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n\n        The current must have API_RATING_ANSWER[CREATE] permission to create an answer.\n      operationId: createApiRatingAnswer\n      requestBody:\n        description: Use to create an answer\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RatingAnswerInput'\n      responses:\n        200:\n          description: Updated Rating with answer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Rating'\n        403:\n          description: Rating service is not activated or user does not have sufficient rights to access this resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: API or Rating not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/ratings/{ratingId}/answers/{answerId}:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n      - $ref: '#/components/parameters/ratingIdParam'\n      - $ref: '#/components/parameters/answerIdParam'\n    delete:\n      tags:\n        - Api\n      summary: Delete an answer rating for an API\n      description: |\n        Delete an answer rating for an API.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n\n        The current must have API_RATING_ANSWER[DELETE] permission to delete a rating.\n      operationId: deleteApiRatingAnswer\n      responses:\n        204:\n          description: Deleted Rating Answer\n        403:\n          description: Rating service is not activated or user does not have sufficient rights to access this resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: API, Rating or Answer not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/subscribers:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n    get:\n      tags:\n        - Api\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/subscriptionStatusesQueryParam'\n\n      summary: List applications that subscribred to an API\n      description: |\n        If the current user is the owner of the API, all connected applications will be returned. Filtered by status. Ordered by number of hits.\n        Else only applications that current is allowed to access will.\n\n        This API has to be accessible by the current user, otherwise a 404 will be returned.\n      operationId: getSubscriberApplicationsByApiId\n      security: []\n      responses:\n        200:\n          description: List accessible applications for current user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApplicationsResponse'\n        404:\n          $ref: '#/components/responses/APINotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /apis/{apiId}/media/{mediaHash}:\n    parameters:\n      - $ref: '#/components/parameters/apiIdParam'\n      - $ref: '#/components/parameters/mediaHashParam'\n    get:\n      tags:\n        - Api\n      summary: Get the api media.\n      operationId: getApiMedia\n      description: |\n        Get api media.\n      security: []\n      responses:\n        200:\n          $ref: '#/components/responses/MediaSuccess'\n        404:\n          $ref: '#/components/responses/APINotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /applications:\n    get:\n      tags:\n        - Application\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/forSubscriptionParam'\n        - $ref: '#/components/parameters/applicationOrderQueryParam'\n      summary: List all the applications accessible to authenticated user. Default order is by *name* ASC.\n      description: |\n        List all the applications accessible to authenticated user.\n\n        User must have MANAGEMENT_APPLICATION[READ] and PORTAL_APPLICATION[READ] permission.\n      operationId: getApplications\n      responses:\n        200:\n          description: List of Applications.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApplicationsResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Application\n      requestBody:\n        description: Use to create an application.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ApplicationInput'\n      summary: Create an application\n      description: |\n        Create an application.\n\n        User must have MANAGEMENT_APPLICATION[CREATE] permission.\n      operationId: createApplication\n      responses:\n        201:\n          description: Created application.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application'\n        400:\n          description: Bad Request if body is empty.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n      summary: Get an application.\n      description: |\n        Get an application.\n\n        User must have the APPLICATION_DEFINITION[READ] permission.\n      operationId: getApplicationByApplicationId\n      responses:\n        200:\n          description: One application.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - Application\n      requestBody:\n        description: Use to update an application.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Application'\n      summary: Update an application.\n      description: |\n        Update an application.\n\n        User must have APPLICATION_DEFINITION[UPDATE] permission.\n      operationId: updateApplicationByApplicationId\n      responses:\n        200:\n          description: Updated application.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application'\n        400:\n          description: Bad Request if body is empty.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Application\n      summary: Delete an application\n      description: |\n        Delete an application.\n\n        User must have the APPLICATION_DEFINITION[DELETE] permission.\n      operationId: deleteApplicationByApplicationId\n      responses:\n        204:\n          description: No-Content\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/picture:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n      summary: Get the application's picture\n      description: |\n        Get the application's picture.\n\n        User must have APPLICATION_DEFINITION[READ] permission.\n      operationId: getApplicationPictureByApplicationId\n      responses:\n        200:\n          $ref: '#/components/responses/PictureSuccess'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/background:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n      summary: Get the application's background\n      description: |\n        Get the application's background.\n\n        User must have APPLICATION_DEFINITION[READ] permission.\n      operationId: getApplicationBackgroundByApplicationId\n      responses:\n        200:\n          $ref: '#/components/responses/PictureSuccess'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/alerts:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n      summary: Get application alerts\n      description: |\n        Get application alerts.\n\n        User must have APPLICATION_ALERT[READ] permission to get alerts.\n      operationId: getAlertsByApplicationId\n      responses:\n        200:\n          description: List of alerts\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Alert'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Application\n      requestBody:\n        description: Use to create a post.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AlertInput'\n      summary: Create an application alert\n      description: |\n        Create an application alert.\n\n        User must have the APPLICATION_ALERT[CREATE] permission.\n      operationId: createApplicationAlert\n      responses:\n        201:\n          description: Created alert\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Alert'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /applications/{applicationId}/alerts/{alertId}:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n      - $ref: '#/components/parameters/alertIdParam'\n\n    delete:\n      tags:\n        - Application\n      summary: Delete a alert for an Application\n      description: |\n        Delete a alert for an Application.\n\n        The current user must have APPLICATION_ALERT[DELETE] permission to delete a alert.\n      operationId: deleteApplicationAlert\n      responses:\n        204:\n          description: Deleted Alert\n        403:\n          description: Alert service is not activated or user does not have sufficient rights to access this resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        404:\n          description: Application or Alert not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - Application\n      requestBody:\n        description: Use to update an application alert.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AlertInput'\n      summary: Update alert for an application.\n      description: |\n        Update alert for an application.\n\n        User must have APPLICATION_ALERT[UPDATE] permission to update alerts.\n      operationId: updateAlert\n      responses:\n        200:\n          description: Updated application alerts.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Alert'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/alerts/status:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n      summary: Get application alert status\n      description: |\n        Get application alert status.\n\n        User must have APPLICATION_ALERT[READ] permission to get alert status.\n      operationId: getApplicationAlertStatus\n      responses:\n        200:\n          description: Alert status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AlertStatusResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/notifications:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n      summary: Get application notifications\n      description: |\n        Get application notifications.\n\n        User must have APPLICATION_NOTIFICATION[READ] permission to get notifications.\n      operationId: getNotificationsByApplicationId\n      responses:\n        200:\n          description: List of notifications configured\n          content:\n            application/json:\n              schema:\n                description: List of notifications configured on the application.\n                type: array\n                items:\n                  type: string\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - Application\n      requestBody:\n        description: Use to update application notifications.\n        content:\n          application/json:\n            schema:\n              description: List of notifications configured on the application.\n              $ref: '#/components/schemas/NotificationInput'\n      summary: Update notifications for an application.\n      description: |\n        Update notifications for an application.\n\n        User must have APPLICATION_NOTIFICATION[UPDATE] permission to update notifications.\n      operationId: updateApplicationNotifications\n      responses:\n        200:\n          description: Updated application notifications.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/members:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n      summary: List application members\n      description: |\n        List application members.\n\n        User must have the APPLICATION_MEMBER[READ] permission.\n      operationId: getMembersByApplicationId\n      responses:\n        200:\n          description: List of members\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MembersResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Application\n      requestBody:\n        description: Use to create a member.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MemberInput'\n      summary: Create an application member\n      description: |\n        Create an application member.\n\n        User must have the APPLICATION_MEMBER[CREATE] permission.\n      operationId: createApplicationMember\n      responses:\n        201:\n          description: Created member\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Member'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/members/_transfer_ownership:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    post:\n      tags:\n        - Application\n      requestBody:\n        description: Use to transfer ownership of an application.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransferOwnershipInput'\n      summary: Transfer the ownership of the application\n      description: |\n        Transfer the ownership of the application.\n\n        User must have the APPLICATION_MEMBER[UPDATE] permission.\n      operationId: transferMemberOwnership\n      responses:\n        204:\n          description: No-Content\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/members/{memberId}:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n      - $ref: '#/components/parameters/memberIdParam'\n    get:\n      tags:\n        - Application\n      summary: Get an application member\n      description: |\n        Get an application member.\n\n        User must have the APPLICATION_MEMBER[READ] permission.\n      operationId: getApplicationMemberByApplicationIdAndMemberId\n      responses:\n        200:\n          description: A member\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Member'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          description: Application or Member not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - Application\n      requestBody:\n        description: Use to update a member.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MemberInput'\n      summary: Update an application member.\n      description: |\n        Update an application member.\n\n        User must have the APPLICATION_MEMBER[UPDATE] permission.\n      operationId: updateApplicationMemberByApplicationIdAndMemberId\n      responses:\n        200:\n          description: Updated member.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Member'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          description: Application or Member not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Application\n      summary: Remove an application member\n      description: |\n        Remove an application member.\n\n        User must have the APPLICATION_MEMBER[DELETE] permission.\n      operationId: deleteApplicationMember\n      responses:\n        204:\n          description: No-Content\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          description: Application or Member not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/metadata:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n      summary: List application metadata\n      description: |\n        List application metadata.\n\n        User must have the APPLICATION_METADATA[READ] permission.\n      operationId: getMetadataByApplicationId\n      responses:\n        200:\n          description: List of metadata\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReferenceMetadataResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Application\n      requestBody:\n        description: Use to create a metadata.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReferenceMetadataInput'\n      summary: Create an application metadata\n      description: |\n        Create an application metadata.\n\n        User must have the APPLICATION_METADATA[CREATE] permission.\n      operationId: createApplicationMetadata\n      responses:\n        201:\n          description: Created metadata\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReferenceMetadata'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/metadata/{metadataId}:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n      - $ref: '#/components/parameters/metadataIdParam'\n    get:\n      tags:\n        - Application\n      summary: Get an application metadata\n      description: |\n        Get an application metadata.\n\n        User must have the APPLICATION_METADATA[READ] permission.\n      operationId: getApplicationMetadataByApplicationIdAndMetadataId\n      responses:\n        200:\n          description: A metadata\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReferenceMetadata'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          description: Application or Metadata not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - Application\n      requestBody:\n        description: Use to update a metadata.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReferenceMetadataInput'\n      summary: Update an application metadata.\n      description: |\n        Update an application metadata.\n\n        User must have the APPLICATION_METADATA[UPDATE] permission.\n      operationId: updateApplicationMetadataByApplicationIdAndMetadataId\n      responses:\n        200:\n          description: Updated metadata.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReferenceMetadata'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          description: Application or Metadata not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - Application\n      summary: Remove an application metadata\n      description: |\n        Remove an application metadata.\n\n        User must have the APPLICATION_METADATA[DELETE] permission.\n      operationId: deleteApplicationMetadata\n      responses:\n        204:\n          description: No-Content\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          description: Application or Metadata not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/analytics:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n        - Analytics\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/fromQueryParam'\n        - $ref: '#/components/parameters/toQueryParam'\n        - $ref: '#/components/parameters/intervalQueryParam'\n        - $ref: '#/components/parameters/queryQueryParam'\n        - $ref: '#/components/parameters/fieldQueryParam'\n        - $ref: '#/components/parameters/analyticTypeQueryParam'\n        - $ref: '#/components/parameters/analyticRangeQueryParam'\n        - $ref: '#/components/parameters/analyticAggregationQueryParam'\n        - $ref: '#/components/parameters/analyticOrderQueryParam'\n      summary: Get Application analytics\n      description: |\n        Get the application analytics.\n\n        User must have the APPLICATION_ANALYTICS[READ] permission.\n      operationId: getApplicationAnalytics\n      responses:\n        200:\n          description: Analytics\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/DateHistoAnalytics'\n                  - $ref: '#/components/schemas/GroupByAnalytics'\n                  - $ref: '#/components/schemas/CountAnalytics'\n        400:\n          description: Invalid query params.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/configuration:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n      summary: Get the application type configuration.\n      operationId: getApplicationType\n      description: |\n        Get application type.\n      security: []\n      responses:\n        200:\n          description: Application type configuration\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApplicationType'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/logs:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n        - Analytics\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/fromQueryParam'\n        - $ref: '#/components/parameters/toQueryParam'\n        - $ref: '#/components/parameters/queryQueryParam'\n        - $ref: '#/components/parameters/fieldQueryParam'\n        - $ref: '#/components/parameters/logOrderQueryParam'\n      summary: Get Application logs\n      description: |\n        Get the application logs.\n\n        User must have the APPLICATION_LOG[READ] permission.\n      operationId: getApplicationLogs\n      responses:\n        200:\n          description: List of logs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogsResponse'\n        400:\n          description: Invalid query params.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/logs/_export:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    post:\n      tags:\n        - Application\n        - Analytics\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/fromQueryParam'\n        - $ref: '#/components/parameters/toQueryParam'\n        - $ref: '#/components/parameters/queryQueryParam'\n        - $ref: '#/components/parameters/fieldQueryParam'\n        - $ref: '#/components/parameters/logOrderQueryParam'\n      summary: Export application logs as CSV\n      description: |\n        Export application logs as CSV.\n\n        User must have the APPLICATION_LOG[READ] permission.\n      operationId: exportApplicationLogsByApplicationId\n      responses:\n        200:\n          description: CSV export of the logs\n          content:\n            text/plain:\n              schema:\n                type: string\n        400:\n          description: Invalid query params.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/logs/{logId}:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n      - $ref: '#/components/parameters/logIdParam'\n    get:\n      tags:\n        - Application\n        - Analytics\n      parameters:\n        - $ref: '#/components/parameters/logTimestampQueryParam'\n      summary: Get a specific log of an application\n      description: |\n        Get a specific log of an application.\n\n        User must have the APPLICATION_LOG[READ] permission.\n      operationId: getApplicationLogByApplicationIdAndLogId\n      responses:\n        200:\n          description: A log\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Log'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          description: Application or Log not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/_renew_secret:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    post:\n      tags:\n        - Application\n      summary: Renew the client secret for an OAuth2 application\n      description: |\n        Renew the client secret for an OAuth2 application.\n\n        User must have the APPLICATION_DEFINITION[UPDATE] permission.\n      operationId: renewApplicationSecret\n      responses:\n        200:\n          description: Updated application with a new secret.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Application'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/{applicationId}/subscribers:\n    parameters:\n      - $ref: '#/components/parameters/applicationIdParam'\n    get:\n      tags:\n        - Application\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/subscriptionStatusesQueryParam'\n\n      summary: List APIs that subscribed with an application\n      description: |\n        Lists API that current user is allowed to access. May be filtered by status. Ordered by nimber of hits.\n\n        This application has to be accessible by the current user, otherwise a 404 will be returned.\n      operationId: getSubscriberApisByApplicationId\n      security: []\n      responses:\n        200:\n          description: List accessible APIs for current user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApisResponse'\n        404:\n          $ref: '#/components/responses/ApplicationNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /groups:\n    get:\n      tags:\n        - Group\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n      summary: List groups\n      description: |\n        List all groups\n\n        User must have the MANAGEMENT_GROUP[READ] permission.\n      operationId: getGroups\n      responses:\n        200:\n          description: List of groups\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupsResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /groups/{groupId}/members:\n    parameters:\n      - $ref: '#/components/parameters/groupIdParam'\n    get:\n      tags:\n        - Group\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n      summary: List group members\n      description: |\n        List group members that have a Application role.\n\n        User must have the MANAGEMENT_GROUP[READ] permission.\n      operationId: getMembersByGroupId\n      responses:\n        200:\n          description: List of members\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MembersResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          $ref: '#/components/responses/GroupNotFoundError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /media/{mediaHash}:\n    parameters:\n      - $ref: '#/components/parameters/mediaHashParam'\n    get:\n      tags:\n        - Portal\n      summary: Get the media of the portal.\n      operationId: getPortalMedia\n      description: |\n        Get portal media.\n      security: []\n      responses:\n        200:\n          $ref: '#/components/responses/MediaSuccess'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /pages:\n    get:\n      tags:\n        - Portal\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/homePageQueryParam'\n        - $ref: '#/components/parameters/parentPageQueryParam'\n      summary: List portal pages\n      description: |\n        List all portal documentation pages\n      operationId: getPages\n      security: []\n      responses:\n        200:\n          $ref: '#/components/responses/PagesSuccess'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /pages/{pageId}:\n    parameters:\n      - $ref: '#/components/parameters/pageIdParam'\n    get:\n      tags:\n        - Portal\n      parameters:\n        - $ref: '#/components/parameters/pageIncludeParam'\n      summary: Get a portal page\n      description: |\n        Get a specific portal documentation page.\n      operationId: getPageByPageId\n      security: []\n      responses:\n        200:\n          $ref: '#/components/responses/PageSuccess'\n        404:\n          description: Page not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /pages/{pageId}/content:\n    parameters:\n      - $ref: '#/components/parameters/pageIdParam'\n    get:\n      tags:\n        - Portal\n      summary: Get the content of a portal page.\n      description: |\n        Get the contentn of a specific portal documentation page.\n      operationId: getPageContentByPageId\n      security: []\n      responses:\n        200:\n          description: The content of the portal documentation page.\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: Page not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /applications/hooks:\n    get:\n      tags:\n        - Application\n      summary: Get the application's hooks list.\n      operationId: getHooks\n      description: |\n        Get application's hooks that can be used in the portal.\n      security: []\n      responses:\n        200:\n          description: List of hooks\n          content:\n            application/json:\n              schema:\n                description: List of hooks\n                type: array\n                items:\n                  $ref: '#/components/schemas/Hook'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /subscriptions:\n    get:\n      tags:\n        - Subscription\n      parameters:\n        - $ref: '#/components/parameters/apiIdQueryParam'\n        - $ref: '#/components/parameters/applicationIdQueryParam'\n        - $ref: '#/components/parameters/subscriptionStatusesQueryParam'\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n      description: |\n        List all ACCEPTED, PAUSED \u0026 PENDING subscriptions, filtered by api and/or by application. At least an api or an application must be provided.\n\n        User must have the APPLICATION_SUBSCRIPTION[READ] permission to list subscription with application query param.\\\n        User must have the API_SUBSCRIPTION[READ] permission to list subscription with api query param.\n\n      operationId: getSubscriptions\n      responses:\n        200:\n          description: List of Subscriptions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SubscriptionsResponse'\n        400:\n          description: At least an api or an application must be provided.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    post:\n      tags:\n        - Subscription\n      requestBody:\n        description: Use to create a subscription.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SubscriptionInput'\n      summary: Create a subscription.\n      description: |\n        Create a new subscription.\n\n        User must have APPLICATION_SUBSCRIPTION[CREATE] permission.\n      operationId: createSubscription\n      responses:\n        200:\n          description: Created subscription.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscription'\n        400:\n          description: Input must not be null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /subscriptions/{subscriptionId}:\n    parameters:\n      - $ref: '#/components/parameters/subscriptionIdParam'\n    get:\n      tags:\n        - Subscription\n      parameters:\n        - $ref: '#/components/parameters/subscriptionIncludeQueryParam'\n\n      summary: Get a subscription.\n      description: |\n        Get a subscription.\n\n        User must have API_SUBSCRIPTION[CREATE] or APPLICATION_SUBSCRIPTION[CREATE] permission.\n      operationId: getSubscriptionById\n      responses:\n        200:\n          description: One subscription.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscription'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          description: Subscription not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /subscriptions/{subscriptionId}/_close:\n    parameters:\n      - $ref: '#/components/parameters/subscriptionIdParam'\n    post:\n      tags:\n        - Subscription\n      summary: Close a subscription\n      description: |\n        Close a subscription.\n\n        User must have APPLICATION_SUBSCRIPTION[DELETE] permission.\n      operationId: closeSubscription\n      responses:\n        204:\n          description: No-Content\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          description: Subscription not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /subscriptions/{subscriptionId}/keys/_renew:\n    parameters:\n      - $ref: '#/components/parameters/subscriptionIdParam'\n    post:\n      tags:\n        - Subscription\n      requestBody:\n        description: Use to renew keys of a subscription.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      summary: Renew a key subscription.\n      description: |\n        Renew a key subscription.\n\n        User must have API_SUBSCRIPTION[UPDATE] or APPLICATION_SUBSCRIPTION[UPDATE] permission.\n      operationId: renewKeySubscription\n      responses:\n        201:\n          description: Renewed Key.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Key'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          description: Subscription not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /subscriptions/{subscriptionId}/keys/{keyId}/_revoke:\n    parameters:\n      - $ref: '#/components/parameters/subscriptionIdParam'\n      - name: keyId\n        in: path\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - Subscription\n      summary: Revoke a key subscription.\n      description: |\n        Revoke a key subscription.\n\n        User must have API_SUBSCRIPTION[UPDATE] or APPLICATION_SUBSCRIPTION[UPDATE] permission.\n      operationId: revokeKeySubscription\n      responses:\n        204:\n          description: No-Content\n        403:\n          $ref: '#/components/responses/PermissionError'\n        404:\n          description: Subscription or Key not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/registration:\n    post:\n      tags:\n        - Users\n      summary: Register a new user.\n      description: |\n        Register a new user for the portal. As a result, an email is sent with an activation link.\n\n        User registration must be enabled.\\\n        A SMTP server must have been configured.\n      operationId: registerNewUser\n      requestBody:\n        description: Used to register a new User.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterUserInput'\n      responses:\n        200:\n          description: User successfully registered\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /users/registration/_finalize:\n    post:\n      tags:\n        - Users\n      summary: Finalize user registration.\n      description: |\n        Create a new user for the portal.\n\n        User registration must be enabled.\n      operationId: finalizeUserRegistration\n      requestBody:\n        description: Used to finalize a user registration.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FinalizeRegistrationInput'\n      responses:\n        200:\n          description: User successfully created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /users/_reset_password:\n    post:\n      tags:\n        - Users\n      summary: Reset a user's password\n      description: |\n        Send an email with a link so the user with this email can provide a new password.\n        The user must be internally managed and active.\n      operationId: resetUserPassword\n      requestBody:\n        description: Use to reset a user's password.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResetUserPasswordInput'\n      responses:\n        204:\n          description: The user whose password has been reset.\n        400:\n          description: Input must not be null or no active and internally managed user has been found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /users/_change_password:\n    post:\n      tags:\n        - Users\n      summary: Change a user's password after a reset requests\n      description: |\n        Perform the password update for a user\n      operationId: changeUserPassword\n      requestBody:\n        description: Use to change a user's password.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChangeUserPasswordInput'\n      responses:\n        200:\n          description: The user whose password has been change.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Input must not be null or no active and internally managed user has been found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /users/_search:\n    post:\n      tags:\n        - Users\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/usersQueryParam'\n      summary: List platform users.\n      description: |\n        List platform users from identity providers.\n\n        User must have the MANAGEMENT_USERS[READ] permission.\n      operationId: getUsers\n      responses:\n        200:\n          description: List of platform users\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UsersResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /users/{userId}/avatar:\n    parameters:\n      - $ref: '#/components/parameters/userIdParam'\n    get:\n      tags:\n        - Users\n      summary: Retrieve a user's avatar\n      description: |\n        Retrieve a user's avatar.\n      operationId: getUserAvatar\n      responses:\n        200:\n          $ref: '#/components/responses/PictureSuccess'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /user:\n    get:\n      tags:\n        - User\n      summary: Get the authenticated user\n      description: |\n        Get information about the authenticated user.\n      operationId: getCurrentUser\n      responses:\n        200:\n          description: The current user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    put:\n      tags:\n        - User\n      requestBody:\n        description: Use to update a user.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserInput'\n      summary: Modify current user information.\n      description: |\n        Modify current user information.\n\n        Only the current user can modify his/her information.\n      operationId: updateCurrentUser\n      responses:\n        200:\n          description: Updated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Input must not be null.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        403:\n          description: Not allowed to modify another user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /user/notifications:\n    get:\n      tags:\n        - User\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n      summary: Retrieve user's notifications\n      description: |\n        Retrieve current user's notifications.\n      operationId: getCurrentUserNotifications\n      responses:\n        200:\n          description: List of notifications\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortalNotificationsResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    delete:\n      tags:\n        - User\n      summary: Delete all notifications of the current user\n      description: |\n        Delete all notifications of the current user.\n      operationId: deleteAllCurrentUserNotifications\n      responses:\n        204:\n          description: No-Content\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /user/notifications/{notificationId}:\n    parameters:\n      - $ref: '#/components/parameters/notificationIdParam'\n    delete:\n      tags:\n        - User\n      summary: Delete a specific notification of the current user\n      description: |\n        Delete a specific notification of the current user.\n      operationId: deleteCurrentUserNotificationByNotificationId\n      responses:\n        204:\n          description: No-Content\n        404:\n          description: Notification not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /user/avatar:\n    get:\n      tags:\n        - User\n      summary: Retrieve user's avatar\n      description: |\n        Retrieve user's avatar.\n      operationId: getCurrentUserAvatar\n      responses:\n        200:\n          $ref: '#/components/responses/PictureSuccess'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /permissions:\n    get:\n      tags:\n        - Permissions\n      parameters:\n        - $ref: '#/components/parameters/apiIdQueryParam'\n        - $ref: '#/components/parameters/applicationIdQueryParam'\n      summary: Retrieve user's permissions\n      description: |\n        Retrieve user's permissions.\n      operationId: getCurrentUserPermissions\n      responses:\n        200:\n          description: List of user's permissions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PermissionsResponse'\n        403:\n          $ref: '#/components/responses/PermissionError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /tickets:\n    post:\n      tags:\n        - Portal\n      requestBody:\n        description: a new ticket to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TicketInput'\n      summary: Create a ticket.\n      description: |\n        Create a ticket. This ticket can aim :\n          * a specific application\n          * a specific API\n          * the gravitee portal\n\n        User must be authenticated to use this service.\n      operationId: createTicket\n      responses:\n        201:\n          description: Created\n        500:\n          $ref: '#/components/responses/InternalServerError'\n    get:\n      tags:\n        - Portal\n      parameters:\n        - $ref: '#/components/parameters/apiIdQueryParam'\n        - $ref: '#/components/parameters/applicationIdQueryParam'\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n        - $ref: '#/components/parameters/orderQueryParam'\n      description: |\n        List all tickets written by current user\n\n      operationId: getTickets\n      responses:\n        200:\n          description: List of Tickets\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TicketsResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /categories:\n    get:\n      tags:\n        - Portal\n      parameters:\n        - $ref: '#/components/parameters/pageNumberParam'\n        - $ref: '#/components/parameters/pageSizeParam'\n      summary: Get a Category list\n      description: |\n        Get all categories of the platform.\n      operationId: getCategories\n      security: []\n      responses:\n        200:\n          description: List of Categories\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CategoriesResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /categories/{categoryId}:\n    parameters:\n      - $ref: '#/components/parameters/categoryIdParam'\n    get:\n      tags:\n        - Portal\n      summary: Get a Category\n      description: |\n        Get a specific category.\n      operationId: getCategoryByCategoryId\n      security: []\n      responses:\n        200:\n          description: One Category\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Category'\n        404:\n          description: Category not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /categories/{categoryId}/picture:\n    parameters:\n      - $ref: '#/components/parameters/categoryIdParam'\n    get:\n      tags:\n        - Portal\n      summary: Get picture of a Category\n      description: |\n        Get the picture of a category.\n      operationId: getPictureByCategoryId\n      security: []\n      responses:\n        200:\n          $ref: '#/components/responses/PictureSuccess'\n        404:\n          description: Category not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /categories/{categoryId}/background:\n    parameters:\n      - $ref: '#/components/parameters/categoryIdParam'\n    get:\n      tags:\n        - Portal\n      summary: Get background of a Category\n      description: |\n        Get the background of a category.\n      operationId: getBackgroundByCategoryId\n      security: []\n      responses:\n        200:\n          $ref: '#/components/responses/PictureSuccess'\n        404:\n          description: Category not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /theme:\n    get:\n      tags:\n        - Portal\n      summary: Get portal theme.\n      operationId: getPortalTheme\n      description: |\n        Get portal theme.\n      security: []\n      responses:\n        200:\n          description: Portal configuration\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThemeResponse'\n        404:\n          description: Theme not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /configuration:\n    get:\n      tags:\n        - Portal\n      summary: Get portal configuration.\n      operationId: getPortalConfiguration\n      description: |\n        Get all the portal configuration from the platform settings.\n      security: []\n      responses:\n        200:\n          description: Portal configuration\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigurationResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/identities:\n    get:\n      tags:\n        - Portal\n      summary: Get the identity provider list.\n      operationId: getPortalIdentityProviders\n      description: |\n        Get all the identity providers that can used in the portal.\n      security: []\n      responses:\n        200:\n          description: List of identity providers\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigurationIdentitiesResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/identities/{identityProviderId}:\n    parameters:\n      - $ref: '#/components/parameters/identityProviderIdParam'\n    get:\n      tags:\n        - Portal\n      summary: Get an identity provider.\n      operationId: getPortalIdentityProvider\n      description: |\n        Get a specific identity provider by its id.\n      security: []\n      responses:\n        200:\n          description: An identity provider\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IdentityProvider'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/links:\n    get:\n      tags:\n        - Portal\n      summary: Get the portal links for header and footer.\n      operationId: getPortalLinks\n      description: |\n        Get all the links (internal and external) to be displayed in the header and in the footer of the portal.\n      security: []\n      responses:\n        200:\n          description: List of Links\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LinksResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/applications/types:\n    get:\n      tags:\n        - Portal\n      summary: Get the application types list.\n      operationId: getEnabledApplicationTypes\n      description: |\n        Get enabled application types.\n      security: []\n      responses:\n        200:\n          description: List of enabled application types\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigurationApplicationTypesResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/applications/roles:\n    get:\n      tags:\n        - Portal\n      summary: Get the application roles list.\n      operationId: getApplicationRoles\n      description: |\n        Get application roles.\n      security: []\n      responses:\n        200:\n          description: List of application roles\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConfigurationApplicationRolesResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /configuration/users/custom-fields:\n    get:\n      tags:\n        - Users\n      summary: List all the Custom User Fields.\n      description: |\n        Provide the list of custom user fields asked to the new users.\n      operationId: listCustomUserFields\n      responses:\n        200:\n          description: The list of custom user fields\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CustomUserFields'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /info:\n    get:\n      tags:\n        - Portal\n      summary: Get portal information.\n      operationId: getPortalInformation\n      description: |\n        Get some information about the portal (version, ...).\n      security: []\n      responses:\n        200:\n          description: API information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Info'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /dashboards:\n    get:\n      tags:\n        - Portal\n      summary: Get a Dashboards list\n      description: |\n        Get all dashboards of the platform.\n      operationId: getDashboards\n      security: []\n      responses:\n        200:\n          description: List of Dashboards\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Dashboard'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\n  /auth/login:\n    post:\n      tags:\n        - Authentication\n      operationId: login\n      description: |\n        Used to get a Gravitee token. This token is mandatory for all the secured resources of the Portal API.\n      parameters:\n        - name: Authorization\n          in: header\n          required: true\n          description: Basic authentication.\n          schema:\n            type: string\n      responses:\n        200:\n          $ref: '#/components/responses/AuthSuccess'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /auth/logout:\n    post:\n      tags:\n        - Authentication\n      operationId: logout\n      description: |\n        User need to be authenticated to logout.\n      responses:\n        200:\n          description: An empty cookie\n          headers:\n            set-cookie:\n              description: Empty cookie\n              schema:\n                type: string\n                example: Auth-Graviteeio-APIM=;Path=/;Expires=Thu, 01-Jan-1970 00:00:00 GMT;Max-Age=0;HttpOnly\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /auth/oauth2/{identity}:\n    post:\n      tags:\n        - Authentication\n      security: []\n      parameters:\n        - $ref: '#/components/parameters/authIdentityParam'\n      operationId: exchangeAuthorizationCode\n      description: |\n        Used to get a gravitee token from an Authorization code (PayloadInput.code). Portal API authenticates the user with the specified IDP ({identity} path param).\n      requestBody:\n        description: OAuth2 payload for authentication.\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PayloadInput'\n      responses:\n        200:\n          $ref: '#/components/responses/AuthSuccess'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Identity not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n  /auth/oauth2/{identity}/_exchange:\n    post:\n      tags:\n        - Authentication\n      security: []\n      parameters:\n        - $ref: '#/components/parameters/authIdentityParam'\n        - name: token\n          in: query\n          required: true\n          schema:\n            type: string\n      operationId: tokenExchange\n      description: |\n        Used to get a gravitee token from a IdentityProvider token. Portal API authenticates the user with the specified IDP ({identity} path param).\n      responses:\n        200:\n          $ref: '#/components/responses/AuthSuccess'\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Identity not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          $ref: '#/components/responses/InternalServerError'\n\ncomponents:\n  requestBodies:\n    pictureUpdateInputBody:\n      description: Use to update a picture.\n      content:\n        'image/*':\n          schema:\n            type: string\n            format: binary\n  parameters:\n    ##############\n    # Path Param #\n    ##############\n    apiIdParam:\n      name: apiId\n      in: path\n      required: true\n      description: Id of an API.\n      schema:\n        type: string\n    applicationIdParam:\n      name: applicationId\n      in: path\n      required: true\n      description: Id of an application.\n      schema:\n        type: string\n    alertIdParam:\n      name: alertId\n      in: path\n      required: true\n      description: Id of an alert.\n      schema:\n        type: string\n    groupIdParam:\n      name: groupId\n      in: path\n      required: true\n      description: Id of a group.\n      schema:\n        type: string\n    logIdParam:\n      name: logId\n      in: path\n      required: true\n      description: Id of a log.\n      schema:\n        type: string\n    memberIdParam:\n      name: memberId\n      in: path\n      required: true\n      description: Id of a member.\n      schema:\n        type: string\n    metadataIdParam:\n      name: metadataId\n      in: path\n      required: true\n      description: Id of an application metadata.\n      schema:\n        type: string\n    notificationIdParam:\n      name: notificationId\n      in: path\n      required: true\n      description: Id of a notification.\n      schema:\n        type: string\n    pageIdParam:\n      name: pageId\n      in: path\n      required: true\n      description: Id of a documentation page.\n      schema:\n        type: string\n    subscriptionIdParam:\n      name: subscriptionId\n      in: path\n      required: true\n      description: Id of a subscription.\n      schema:\n        type: string\n    categoryIdParam:\n      name: categoryId\n      in: path\n      required: true\n      description: Id of a Category.\n      schema:\n        type: string\n    authIdentityParam:\n      name: identity\n      in: path\n      required: true\n      schema:\n        type: string\n    identityProviderIdParam:\n      name: identityProviderId\n      in: path\n      required: true\n      description: Id of an identity provider.\n      schema:\n        type: string\n    ratingIdParam:\n      name: ratingId\n      in: path\n      required: true\n      description: Id of an rating\n      schema:\n        type: string\n    answerIdParam:\n      name: answerId\n      in: path\n      required: true\n      description: Id of an rating answer\n      schema:\n        type: string\n    userIdParam:\n      name: userId\n      in: path\n      required: true\n      description: Id of a user\n      schema:\n        type: string\n    mediaHashParam:\n      name: mediaHash\n      in: path\n      required: true\n      description: Hash of media\n      schema:\n        type: string\n    ###############\n    # Query Param #\n    ###############\n\n    #Common\n    apiIdQueryParam:\n      name: apiId\n      in: query\n      required: false\n      description: Id of an api.\n      schema:\n        type: string\n    applicationIdQueryParam:\n      name: applicationId\n      in: query\n      required: false\n      description: Id of an application.\n      schema:\n        type: string\n    mineQueryParam:\n      name: mine\n      in: query\n      required: false\n      description: If true, returns only connected user data.\n      schema:\n        type: boolean\n\n    #Pagination\n    pageNumberParam:\n      name: page\n      in: query\n      required: false\n      description: The page number for pagination.\n      schema:\n        type: integer\n        default: 1\n    pageSizeParam:\n      name: size\n      in: query\n      required: false\n      description: |\n        The number of items per page for pagination.\n        If the size is 0, the response contains only metadata and returns the values as for a non-paged resource.\n        If the size is -1, the response contains all datas.\n      schema:\n        type: integer\n        default: 10\n\n    #Apis filtering\n    apiContextPathQueryParam:\n      name: context-path\n      in: query\n      required: false\n      description: The context-path of an API.\n      schema:\n        type: string\n    apiLabelQueryParam:\n      name: label\n      in: query\n      required: false\n      description: One of the labels of an API.\n      schema:\n        type: string\n    apiVersionQueryParam:\n      name: version\n      in: query\n      required: false\n      description: The version of an API.\n      schema:\n        type: string\n    apiNameQueryParam:\n      name: name\n      in: query\n      required: false\n      description: The name of an API.\n      schema:\n        type: string\n    apiCategoryQueryParam:\n      name: category\n      in: query\n      required: false\n      description: One of the category linked with an API.\n      schema:\n        type: string\n    apiFilterQueryParam:\n      name: filter\n      in: query\n      required: false\n      description: |\n        Name of a FILTER. A filter is used to pre-select some APIs. It can be combined with others query params.\n          - FEATURED : top APIs. Sorted by specific order.\n          - MINE : APIs subscribed by the current user. Sorted by alphabetical order.\n          - STARRED: Rated APIs. Sorted by Ratings DESC, nb of ratings DESC, alphabetic order.\n          - TRENDINGS: Subscribed APIs. Sorted by number of subscriptions DESC, alphabetic order.\n      schema:\n        $ref: '#/components/schemas/FilterApiQuery'\n    apiFilterExcludedQueryParam:\n      name: -filter\n      in: query\n      required: false\n      description: |\n        Name of a FILTER to exclude. Excluded filter has priority over filter. A filter is used to pre-select some APIs. It can be combined with others query params.\n          - FEATURED : not in top APIs. Sorted by specific order.\n          - MINE : APIs not subscribed by the current user. Sorted by alphabetical order.\n          - STARRED: not rated APIs. Sorted by Ratings DESC, nb of ratings DESC, alphabetic order.\n          - TRENDINGS: not subscribed APIs. Sorted by number of subscriptions DESC, alphabetic order.\n      schema:\n        $ref: '#/components/schemas/FilterApiQuery'\n    apiPromotedQueryParam:\n      name: promoted\n      in: query\n      required: false\n      description: |\n        Allow to filter on promoted APIs or not.\n          - If absent, no effect on the result\n          - If *false*, removes the promoted API of the list\n          - If *true*, returns only the promoted API of the list\n\n        A promoted API is either the highlighted API of a category (if it exists) or the first API in the list.\n      schema:\n        type: boolean\n    apiQueryParam:\n      name: q\n      in: query\n      required: true\n      description: query string to be used in the search engine\n      schema:\n        type: string\n    apiIncludeParam:\n      name: include\n      in: query\n      required: false\n      description: Comma-separated list of related objects to include in the response.\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - pages\n            - plans\n    ratingOrderQueryParam:\n      name: order\n      in: query\n      required: false\n      description: |\n        A  list of \"field\" elements.\n        By default, sort is ASC. If *field* starts with '-', the order sort is DESC.\\\n        Currently, only **value**, **date** and **answers** are supported.\n      example: \"order=value\"\n      schema:\n        type: string\n\n    #Applications filtering\n    forSubscriptionParam:\n      name: forSubscription\n      in: query\n      required: false\n      description: If true, only return applications with APPLICATION_SUBSCRIPTION[CREATE] permission.\n      schema:\n        type: boolean\n    applicationOrderQueryParam:\n      name: order\n      in: query\n      required: false\n      description: |\n        A  list of \"field\" elements or *nbSubscriptions*.\n        By default, sort is ASC. If *field* starts with '-', the order sort is DESC.\\\n        Currently, only **name** and **nbSubscriptions** are supported.\n      example: \"order=-nbSubscriptions\"\n      schema:\n        type: string\n\n    #Pages filtering\n    homePageQueryParam:\n      name: homepage\n      in: query\n      required: false\n      description: If true, only the documentation homepage of the portal is returned.\n      schema:\n        type: boolean\n    parentPageQueryParam:\n      name: parent\n      in: query\n      required: false\n      description: The name of the parent documentation page. If not null, only this page and its children are returned.\n      schema:\n        type: string\n    pageIncludeParam:\n      name: include\n      in: query\n      required: false\n      description: Comma-separated list of related objects to include in the response.\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - content\n    #Analytics \u0026 logs filtering\n    fromQueryParam:\n      name: from\n      in: query\n      required: false\n      description: Lower bound of timestamp for filtering.\n      schema:\n        type: integer\n        format: int64\n    toQueryParam:\n      name: to\n      in: query\n      required: false\n      description: Upper bound of timestamp for filtering. Must be greater than *from* query param.\n      schema:\n        type: integer\n        format: int64\n    queryQueryParam:\n      name: query\n      in: query\n      required: false\n      description: Query used for filtering.\n      schema:\n        type: string\n    fieldQueryParam:\n      name: field\n      in: query\n      required: false\n      description: Field used for filtering. **required** when type is **GROUP_BY**.\n      schema:\n        type: string\n    intervalQueryParam:\n      name: interval\n      in: query\n      required: false\n      description: Interval for time search. Must be \u003e= 1 000 and \u003c= 1 000 000 000.\n      schema:\n        type: integer\n        minimum: 1000\n        maximum: 1000000000\n    analyticTypeQueryParam:\n      name: type\n      in: query\n      required: false\n      description: |\n        Type of analytics that is expected :\n          - GROUP_BY :\n              Used to group total hits by a specific field (Application, Status, Path, ...).\\\n              Query params :\n              - from\n              - to\n              - interval\n              - query\n              - field\n              - order\n              - ranges\n          - DATE_HISTO :\n              Used to retrieve total hits per range of time, on a specific time interval.\\\n              Query params :\n              - from\n              - to\n              - interval\n              - query\n              - aggs\n          - COUNT :\n              Used to retrieve total hits, on a specific time interval.\\\n              Query params :\n              - from\n              - to\n              - interval\n              - query\n          - STATS :\n              Used to retrieve stats data, on a specific time interval.\\\n              Query params :\n              - from\n              - to\n              - query\n      schema:\n        type: string\n        enum:\n          - GROUP_BY\n          - DATE_HISTO\n          - COUNT\n          - STATS\n    analyticRangeQueryParam:\n      name: ranges\n      in: query\n      required: false\n      description: |\n        Used with GROUP_BY type only.\n\n        A semicolon separated list of \"from:to\" elements. **/!\\\\ Different from *from* and *to* query params**\n      example: \"ranges=100:199;200:299;300;599\"\n      schema:\n        type: string\n    analyticAggregationQueryParam:\n      name: aggs\n      in: query\n      required: false\n      description: |\n        Used with DATE_HISTO type only.\n\n        A semicolon separated list of \"type:field\" elements. **/!\\\\ Different from *type* and *field* query params**\\\n        Type can be **FIELD**, **AVG**, **MIN**, **MAX**\n      example: \"aggs=avg:response-time;avg:api-response-time\"\n      schema:\n        type: string\n    analyticOrderQueryParam:\n      name: order\n      in: query\n      required: false\n      description: |\n        Used with GROUP_BY type only.\n\n        A colon separated list of \"type:field\" elements. **/!\\\\ Different from *type* and *field* query params**\\\n        By default, sort is ASC. If *type* starts with '-', the order sort is DESC.\\\n        Currently, only **AVG** is supported.\n      example: \"order=-avg:response-time\"\n      schema:\n        type: string\n    orderQueryParam:\n      name: order\n      in: query\n      required: false\n      description: |\n        Used to sort result.\n\n        By default, sort is ASC. If *type* starts with '-', the order sort is DESC\n      example: \"order=-created_at\"\n      schema:\n        type: string\n    logOrderQueryParam:\n      name: order\n      in: query\n      required: false\n      description: Order used to sort the result list.\n      schema:\n        type: string\n        enum:\n          - ASC\n          - DESC\n        default: ASC\n    logTimestampQueryParam:\n      name: timestamp\n      in: query\n      required: false\n      description: Used to select the right index\n      schema:\n        type: integer\n        format: int64\n\n    #Subscriptions filtering\n    subscriptionStatusesQueryParam:\n      name: statuses\n      in: query\n      required: false\n      description: status of subscription.\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - ACCEPTED\n            - CLOSED\n            - PAUSED\n            - PENDING\n            - REJECTED\n    subscriptionIncludeQueryParam:\n      name: include\n      in: query\n      required: false\n      description: Comma-separated list of related objects to include in the response.\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - keys\n\n    #Users filtering\n    usersQueryParam:\n      name: q\n      in: query\n      required: false\n      description: query string to be used in the search engine\n      schema:\n        type: string\n  schemas:\n    #####################\n    # Responses Objects #\n    #####################\n    ErrorResponse:\n      properties:\n        errors:\n          description: List of errors\n          type: array\n          items:\n            $ref: '#/components/schemas/Error'\n\n    ApisResponse:\n      properties:\n        data:\n          description: List of API.\n          type: array\n          items:\n            $ref: '#/components/schemas/Api'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    ApplicationsResponse:\n      properties:\n        data:\n          description: List of applications.\n          type: array\n          items:\n            $ref: '#/components/schemas/Application'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    AlertStatusResponse:\n      properties:\n        available_plugins:\n          description: Number of available plugins.\n          type: integer\n        enabled:\n          description: Is alerting enabled\n          type: boolean\n    GroupsResponse:\n      properties:\n        data:\n          description: List of groups.\n          type: array\n          items:\n            $ref: '#/components/schemas/Group'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    PagesResponse:\n      properties:\n        data:\n          description: List of pages.\n          type: array\n          items:\n            $ref: '#/components/schemas/Page'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    RatingsResponse:\n      properties:\n        data:\n          description: List of ratings.\n          type: array\n          items:\n            $ref: '#/components/schemas/Rating'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    PlansResponse:\n      properties:\n        data:\n          description: List of data.\n          type: array\n          items:\n            $ref: '#/components/schemas/Plan'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    MembersResponse:\n      properties:\n        data:\n          description: List of members.\n          type: array\n          items:\n            $ref: '#/components/schemas/Member'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    ReferenceMetadataResponse:\n      properties:\n        data:\n          description: List of application metadata.\n          type: array\n          items:\n            $ref: '#/components/schemas/ReferenceMetadata'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    UsersResponse:\n      properties:\n        data:\n          description: List of users.\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    CategoriesResponse:\n      properties:\n        data:\n          description: List of categories.\n          type: array\n          items:\n            $ref: '#/components/schemas/Category'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    PortalNotificationsResponse:\n      properties:\n        data:\n          description: List of portal notifications.\n          type: array\n          items:\n            $ref: '#/components/schemas/PortalNotification'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    LogsResponse:\n      properties:\n        data:\n          description: List of logs.\n          type: array\n          items:\n            $ref: '#/components/schemas/Log'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    SubscriptionsResponse:\n      properties:\n        data:\n          description: List of subscriptions.\n          type: array\n          items:\n            $ref: '#/components/schemas/Subscription'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    TicketsResponse:\n      properties:\n        data:\n          description: List of tickets.\n          type: array\n          items:\n            $ref: '#/components/schemas/Ticket'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    ConfigurationIdentitiesResponse:\n      properties:\n        data:\n          description: List of identity providers\n          type: array\n          items:\n            $ref: '#/components/schemas/IdentityProvider'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        links:\n          $ref: '#/components/schemas/Links'\n    ConfigurationApplicationTypesResponse:\n      properties:\n        data:\n          description: List of application types\n          type: array\n          items:\n            $ref: '#/components/schemas/ApplicationType'\n    ConfigurationApplicationRolesResponse:\n      properties:\n        data:\n          description: List of application roles\n          type: array\n          items:\n            $ref: '#/components/schemas/ApplicationRole'\n    LinksResponse:\n      properties:\n        slots:\n          description: |\n            Map of CategorizedLinks. Keys of the map can be:\n            * aside\n            * header\n            * topfooter\n            * footer\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/CategorizedLinks'\n    PermissionsResponse:\n      description: Map of Permissions.\n      properties:\n        METADATA:\n          type: array\n          items:\n            type: string\n        DOCUMENTATION:\n          type: array\n          items:\n            type: string\n        DEFINITION:\n          type: array\n          items:\n            type: string\n        PLAN:\n          type: array\n          items:\n            type: string\n        SUBSCRIPTION:\n          type: array\n          items:\n            type: string\n        MEMBER:\n          type: array\n          items:\n            type: string\n        ANALYTICS:\n          type: array\n          items:\n            type: string\n        EVENT:\n          type: array\n          items:\n            type: string\n        HEALTH:\n          type: array\n          items:\n            type: string\n        LOG:\n          type: array\n          items:\n            type: string\n        GATEWAY_DEFINITION:\n          type: array\n          items:\n            type: string\n        AUDIT:\n          type: array\n          items:\n            type: string\n        RATING:\n          type: array\n          items:\n            type: string\n        RATING_ANSWER:\n          type: array\n          items:\n            type: string\n        NOTIFICATION:\n          type: array\n          items:\n            type: string\n        MESSAGE:\n          type: array\n          items:\n            type: string\n        ALERT:\n          type: array\n          items:\n            type: string\n        RESPONSE_TEMPLATES:\n          type: array\n          items:\n            type: string\n        REVIEWS:\n          type: array\n          items:\n            type: string\n        QUALITY_RULE:\n          type: array\n          items:\n            type: string\n\n    #####################\n    # Resources Objects #\n    #####################\n    Error:\n      properties:\n        status:\n          description: Status HTTP of the error\n          type: string\n        message:\n          description: Message of the error\n          type: string\n        code:\n          description: Technical code of the error\n          type: string\n        parameters:\n          description: Parameters\n          type: object\n          additionalProperties:\n            type: string\n    Api:\n      description: |\n        Describes an API.\n      required:\n        - id\n        - name\n        - version\n        - description\n        - owner\n      properties:\n        id:\n          description: Unique identifier of an API.\n          type: string\n        name:\n          description: Name of the API.\n          type: string\n        version:\n          description: Version of the API.\n          type: string\n        description:\n          description: Description of the API.\n          type: string\n        draft:\n          type: boolean\n          description: Whether or not the API is in draft.\n        public:\n          type: boolean\n          description: Whether or not the API is public.\n        running:\n          type: boolean\n          description: Whether or not the API is running.\n        entrypoints:\n          description: List of all the avaible endpoints to call the API.\n          type: array\n          items:\n            type: string\n        labels:\n          description: List of labels linked to this API.\n          type: array\n          items:\n            type: string\n        owner:\n          $ref: '#/components/schemas/User'\n        updated_at:\n          description: Last update date and time.\n          type: string\n          format: date-time\n        categories:\n          description: List of categories this API belongs to.\n          type: array\n          items:\n            type: string\n        rating_summary:\n          $ref: '#/components/schemas/RatingSummary'\n        _links:\n          $ref: '#/components/schemas/ApiLinks'\n\n        ###################\n        # may be included #\n        ###################\n        pages:\n          description: |\n            Only returned with */apis/{apiId}*.\n            Need *include* query param to contain 'pages'.\n\n            The documentation pages of this API. Same as */apis/{apiId}/pages*.\n          type: array\n          items:\n            $ref: '#/components/schemas/Page'\n        plans:\n          description: |\n            Only returned with */apis/{apiId}*.\n            Need *include* query param to contain 'plans'.\n\n            The plans of this API. Same as */apis/{apiId}/plans*.\n          type: array\n          items:\n            $ref: '#/components/schemas/Plan'\n    ApiInformation:\n      properties:\n        name:\n          type: string\n          description: Name of api information\n        value:\n          type: string\n          description: Value of api information\n    ApiMetrics:\n      properties:\n        subscribers:\n          type: number\n          description: Number of applications that have subscribed to this API.\n        hits:\n          type: number\n          description: Number of calls on this API, during last 7 days.\n        health:\n          type: number\n          description: Healthcheck ratio over the last 7 days. It's a decimal number between 0 and 1.\n          example: 0.9876\n    Group:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          description: Unique identifier of a group.\n          type: string\n        name:\n          description: Name of the group.\n          type: string\n    Page:\n      required:\n        - id\n        - name\n        - type\n        - order\n      properties:\n        id:\n          description: Unique identifier of a page.\n          type: string\n        name:\n          description: Name of the page.\n          type: string\n        type:\n          description: Type of documentation.\n          type: string\n          enum:\n            - ASCIIDOC\n            - SWAGGER\n            - MARKDOWN\n            - FOLDER\n            - ROOT\n            - LINK\n        order:\n          description: Order of the documentation page in its folder.\n          type: integer\n        parent:\n          description: Parent page. MAY be null.\n          type: string\n        updated_at:\n          description: Last update date and time.\n          type: string\n          format: date-time\n        configuration:\n          $ref: '#/components/schemas/PageConfiguration'\n        media:\n          description: list of media hash, attached to this page\n          type: array\n          items:\n            $ref: '#/components/schemas/PageMedia'\n        metadata:\n          description: Array of metadata about the page. This array is filled when the page has been fetched from a distant source (GitHub, GitLab, etc...).\n          type: array\n          items:\n            $ref: '#/components/schemas/Metadata'\n        _links:\n          $ref: '#/components/schemas/PageLinks'\n\n        ###################\n        # may be included #\n        ###################\n        content:\n          description: |\n            Only returned with */apis/{apiId}/pages/{pageId}* and */pages/{pageId}*.\n            Need *include* query param to contain 'content'.\n\n            The content of the page.\n          type: string\n        contentRevisionId:\n          description:\n            The page revision used to fill the content.\n          $ref: '#/components/schemas/PageRevisionId'\n\n    PageMedia:\n      required:\n        - name\n        - link\n        - type\n      properties:\n        name:\n          description: the name of the media.\n          type: string\n        link:\n          description: link to download the media.\n          type: string\n        type:\n          description: type of the media.\n          type: string\n\n    Plan:\n      required:\n        - id\n        - name\n        - security\n        - type\n        - description\n        - validation\n        - order\n        - comment_required\n      properties:\n        id:\n          description: Unique identifier of a plan.\n          type: string\n        name:\n          description: Name of the plan.\n          type: string\n        security:\n          description: Security used with this plan.\n          type: string\n          enum:\n            - API_KEY\n            - KEY_LESS\n            - JWT\n            - OAUTH2\n        description:\n          description: Description of the plan.\n          type: string\n        characteristics:\n          description: List of additionnal terms to describe the plan.\n          type: array\n          items:\n            type: string\n        validation:\n          description: Type of validation for subscription requests.\n          type: string\n          enum:\n            - AUTO\n            - MANUAL\n        order:\n          description: Priority order\n          type: integer\n        comment_required:\n          description: True if a comment is required when a subscription is created.\n          type: boolean\n        comment_question:\n          description: Content of the message sent to a user creating a subscription.\n          type: string\n        general_conditions:\n          description: The  page reference with general conditions of use for the API.\n          type: string\n    Rating:\n      required:\n        - id\n        - title\n        - value\n        - comment\n      properties:\n        id:\n          description: Unique identifier of a rating.\n          type: string\n        title:\n          description: Title of a rating.\n          type: string\n        value:\n          description: Value of the rating. Integer between 1 and 5.\n          type: integer\n        author:\n          $ref: '#/components/schemas/User'\n        date:\n          description: Date and time of the rating.\n          type: string\n          format: date-time\n        comment:\n          description: Comment left by the author to explain the rating.\n          type: string\n        answers:\n          description: Array of answers.\n          type: array\n          items:\n            $ref: '#/components/schemas/RatingAnswer'\n    Application:\n      properties:\n        id:\n          description: Unique identifier of an application.\n          type: string\n        name:\n          description: Name of the application.\n          type: string\n        description:\n          description: Description of the application.\n          type: string\n        applicationType:\n          description: Type of the application (Web, Mobile, ...).\n          type: string\n        hasClientId:\n          description:  True if the application has client id.\n          type: boolean\n        owner:\n          $ref: '#/components/schemas/User'\n        created_at:\n          description: Creation date and time of the application.\n          type: string\n          format: date-time\n        updated_at:\n          description: Last update date and time of the application.\n          type: string\n          format: date-time\n        groups:\n          description: Array of groups associated to the application.\n          type: array\n          items:\n            $ref: '#/components/schemas/Group'\n        picture:\n          description: |\n            Picture of the application. This attribute is only used to update a picture.\\\n            To get the application picture, use /application/{applicationId}/picture.\n          type: string\n          writeOnly: true\n        background:\n          description: |\n            Background of the application. This attribute is only used to update a picture.\\\n            To get the application picture, use /application/{applicationId}/background.\n          type: string\n          writeOnly: true\n        settings:\n          $ref: '#/components/schemas/ApplicationSettings'\n        _links:\n          $ref: '#/components/schemas/ApplicationLinks'\n    PortalNotification:\n      properties:\n        id:\n          description: Unique identifier of a portal notification.\n          type: string\n        title:\n          description: Title of the portal notification.\n          type: string\n        message:\n          description: Content of the notification.\n          type: string\n        created_at:\n          description: Creation date and time of the notification.\n          type: string\n          format: date-time\n    Alert:\n      properties:\n        id:\n          description: Unique identifier of an alert.\n          type: string\n        enabled:\n          description: true, if alert is enabled\n          type: boolean\n        type:\n          $ref: '#/components/schemas/AlertType'\n        status_code:\n          description: Http status code to trigger the alert\n          type: string\n        status_percent:\n          description: Percent to trigger the alert on status code\n          type: integer\n          minimum: 1\n          maximum: 100\n        response_time:\n          description: Response time to trigger the alert\n          type: integer\n          minimum: 1\n          maximum: 100000\n        duration:\n          description: Compute alert on selected duration\n          type: integer\n        time_unit:\n          $ref: '#/components/schemas/AlertTimeUnit'\n    Member:\n      properties:\n        id:\n          description: Unique identifier of a member (user).\n          type: string\n        user:\n          $ref: '#/components/schemas/User'\n        created_at:\n          description: Creation date and time of the member.\n          type: string\n          format: date-time\n        updated_at:\n          description: Last update date and time of the member.\n          type: string\n          format: date-time\n        role:\n          description: Role of the member. (OWNER, USER, ...).\n          type: string\n    ReferenceMetadata:\n      required:\n        - key\n        - name\n      properties:\n        key:\n          description: Unique identifier of a metadata.\n          type: string\n        name:\n          description: Name of the metadata.\n          type: string\n        application:\n          description: Id of the application to which the metadata refers.\n          type: string\n        format:\n          description: format of the metadata value.\n          $ref: '#/components/schemas/ReferenceMetadataFormatType'\n        value:\n          description: value of the metadata. Supports freemarker syntax.\n          type: string\n        defaultValue:\n          description: default value of the metadata.\n          type: string\n    DateHistoAnalytics:\n      properties:\n        timestamp:\n          $ref: '#/components/schemas/Timerange'\n        values:\n          description: List of data buckets.\n          type: array\n          items:\n            $ref: '#/components/schemas/Bucket'\n    GroupByAnalytics:\n      properties:\n        values:\n          description: Total hits by terms.\n          type: object\n          additionalProperties:\n            type: integer\n            format: int64\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n    CountAnalytics:\n      properties:\n        name:\n          type: string\n        hits:\n          type: integer\n          format: int64\n    Log:\n      properties:\n        id:\n          description: Unique identifier of a log.\n          type: string\n        timestamp:\n          description: Instant of the log.\n          type: integer\n          format: int64\n        transactionId:\n          description: Request identifier.\n          type: string\n        path:\n          description: Path of the request.\n          type: string\n        method:\n          $ref: '#/components/schemas/HttpMethod'\n        status:\n          description: HTTP status code of the request.\n          type: integer\n        responseTime:\n          description: Request duration.\n          type: integer\n          format: int64\n        requestContentLength:\n          description: Request content length.\n          type: integer\n          format: int64\n        responseContentLength:\n          description: Response content length.\n          type: integer\n          format: int64\n        plan:\n          description: Plan used by the request.\n          type: string\n        api:\n          description: API called by the request.\n          type: string\n        request:\n          $ref: '#/components/schemas/Request'\n        response:\n          $ref: '#/components/schemas/Response'\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n        host:\n          description: API Gateway host.\n          type: string\n        user:\n          description: User identifier.\n          type: string\n        securityType:\n          description: Security type of the request.\n          type: string\n        securityToken:\n          description: Token used by the request.\n          type: string\n    Subscription:\n      required:\n        - id\n        - api\n        - application\n        - plan\n        - status\n      properties:\n        id:\n          description: Unique identifier of a subscription.\n          type: string\n        api:\n          description: Subscribed API.\n          type: string\n        application:\n          description: Subscribing application.\n          type: string\n        plan:\n          description: Subscribed plan.\n          type: string\n        request:\n          description: Comment of the user when asking for a subscription.\n          type: string\n        reason:\n          description: Reason of the user when processing (accepting/rejecting) a subscription.\n          type: string\n        created_at:\n          description: Creation date and time of the subscription.\n          type: string\n          format: date-time\n        processed_at:\n          description: Date and time when the subscription request was processed.\n          type: string\n          format: date-time\n        start_at:\n          description: Start date and time of the subscription.\n          type: string\n          format: date-time\n        end_at:\n          description: Expiration date and time of the subscription.\n          type: string\n          format: date-time\n        paused_at:\n          description: Paused date and time of the subscription.\n          type: string\n          format: date-time\n        closed_at:\n          description: Closed date and time of the subscription.\n          type: string\n          format: date-time\n        subscribed_by:\n          description: The user who subscribed.\n          type: string\n        status:\n          description: Status of the subscription.\n          type: string\n          enum:\n            - PENDING\n            - ACCEPTED\n            - CLOSED\n            - REJECTED\n            - PAUSED\n        ###################\n        # may be included #\n        ###################\n        keys:\n          description: |\n            Only returned with */subscriptions/{subscriptionId}*.\n            Need *include* query param to contain 'keys'.\n\n            List of APIKeys of the subscription.\n          type: array\n          items:\n            $ref: '#/components/schemas/Key'\n    Ticket:\n      properties:\n        id:\n          description: Unique identifier of a ticket.\n          type: string\n        api:\n          description: Concerned API.\n          type: string\n        application:\n          description: Concerned application.\n          type: string\n        subject:\n          description: Subject of the ticket.\n          type: string\n        content:\n          description: Content of the ticket.\n          type: string\n        created_at:\n          description: Creation date and time of the ticket.\n          type: string\n          format: date-time\n        from_user:\n          description: User identifier of the ticket creator.\n          type: string\n    User:\n      properties:\n        id:\n          description: Unique identifier of a user.\n          type: string\n        reference:\n          description: Unique reference if user comes from external source. Use for search only.\n          type: string\n        first_name:\n          type: string\n        last_name:\n          type: string\n        display_name:\n          type: string\n        email:\n          type: string\n        editable_profile:\n          description: True if the user can edit the MyAccount information\n          type: boolean\n          default: false\n        permissions:\n          description: Map of Permissions.\n          type: object\n          properties:\n            APPLICATION:\n              type: array\n              items:\n                type: string\n            USER:\n              type: array\n              items:\n                type: string\n        customFields:\n          type: object\n          description: Values for CustomUserFields\n          additionalProperties: true\n        config:\n          $ref: '#/components/schemas/UserConfig'\n        _links:\n          $ref: '#/components/schemas/UserLinks'\n    UserConfig:\n      properties:\n        management_url:\n          description: The URL of the Gravitee management UI\n          type: string\n    Token:\n      properties:\n        token_type:\n          type: string\n          enum:\n            - BEARER\n        token:\n          type: string\n        state:\n          type: string\n        access_token:\n          type: string\n        id_token:\n          type: string\n    Category:\n      properties:\n        id:\n          description: Unique identifier of a category.\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        order:\n          type: integer\n        page:\n          description: id of the page used for category documentation.\n          type: string\n        total_apis:\n          type: integer\n          format: int64\n        _links:\n          $ref: '#/components/schemas/CategoryLinks'\n    Dashboard:\n      properties:\n        id:\n          description: Unique identifier of a dashboard.\n          type: string\n        name:\n          type: string\n        definition:\n          type: string\n    Info:\n      properties:\n        name:\n          description: Name of the API.\n          type: string\n        version:\n          description: Version of the API.\n          type: string\n    IdentityProvider:\n      properties:\n        id:\n          description: Unique identifier of an identity provider.\n          type: string\n        name:\n          description: Name of the identity provider.\n          type: string\n        description:\n          description: Description of the identity provider.\n          type: string\n        client_id:\n          description: ClientId of the identity provider.\n          type: string\n        email_required:\n          description: true, if an email is required for this identity provider.\n          type: boolean\n        type:\n          $ref: '#/components/schemas/IdentityProviderType'\n        authorizationEndpoint:\n          description: Authorization endpoint of the provider.\n          type: string\n        tokenIntrospectionEndpoint:\n          description: Token introspection endpoint of the provider. (Gravitee.io AM and OpenId Connect only)\n          type: string\n        userLogoutEndpoint:\n          description: User logout endpoint of the provider. (Gravitee.io AM and OpenId Connect only)\n          type: string\n        color:\n          description: color to display for this provider. (Gravitee.io AM and OpenId Connect only)\n          type: string\n        display:\n          description: Display style of the provider. (Google only)\n          type: string\n        requiredUrlParams:\n          description: Required URL params of the provider. (Google only)\n          type: array\n          items:\n            type: string\n        optionalUrlParams:\n          description: Optionnal URL params of the provider. (Github and Google only)\n          type: array\n          items:\n            type: string\n        scopes:\n          description: Scope list of the provider.\n          type: array\n          items:\n            type: string\n    ApplicationRole:\n      properties:\n        id:\n          description: Unique identifier of an application role.\n          type: string\n        name:\n          description: Name of an application role.\n          type: string\n        default:\n          description: is default role ?\n          type: boolean\n        system:\n          description: is system role ?\n          type: boolean\n    ApplicationType:\n      properties:\n        id:\n          description: Unique identifier of an application type.\n          type: string\n        name:\n          description: Name of an application type.\n          type: string\n        description:\n          description: description of an application type.\n          type: string\n        requires_redirect_uris:\n          description: if true, application type require redirect uri\n          type: boolean\n        allowed_grant_types:\n          description: List of allowed grant types\n          type: array\n          items:\n            $ref: '#/components/schemas/ApplicationGrantType'\n        mandatory_grant_types:\n          description: List of mandatory grant types\n          type: array\n          items:\n            $ref: '#/components/schemas/ApplicationGrantType'\n        default_grant_types:\n          description: List of default grant types\n          type: array\n          items:\n            $ref: '#/components/schemas/ApplicationGrantType'\n    ApplicationGrantType:\n      properties:\n        type:\n          description: type of grant type\n          type: string\n        name:\n          description: name of grant type\n          type: string\n    Hook:\n      properties:\n        id:\n          description: Unique identifier of an identity provider.\n          type: string\n        label:\n          description: Label of the hook.\n          type: string\n        description:\n          description: Description of the hook.\n          type: string\n        category:\n          description: Category of the hook.\n          type: string\n    ThemeResponse:\n      properties:\n        definition:\n          description: The definition of custom theme.\n          type: object\n        _links:\n          $ref: '#/components/schemas/ThemeLinks'\n    ConfigurationResponse:\n      properties:\n        portal:\n          $ref: '#/components/schemas/ConfigurationPortal'\n        authentication:\n          $ref: '#/components/schemas/ConfigurationAuthentication'\n        scheduler:\n          $ref: '#/components/schemas/ConfigurationScheduler'\n        documentation:\n          $ref: '#/components/schemas/ConfigurationDocumentation'\n        plan:\n          $ref: '#/components/schemas/ConfigurationPlan'\n        apiReview:\n          $ref: '#/components/schemas/Enabled'\n        analytics:\n          $ref: '#/components/schemas/ConfigurationAnalytics'\n        application:\n          $ref: '#/components/schemas/ConfigurationApplication'\n        recaptcha:\n          $ref: '#/components/schemas/ConfigurationReCaptcha'\n        alert:\n          $ref: '#/components/schemas/Enabled'\n    ConfigurationPortal:\n      properties:\n        title:\n          description: The portal Title\n          type: string\n        entrypoint:\n          description: Default entrypoint of the gateway.\n          type: string\n        apikeyHeader:\n          description: Api-key Header. Used by portal to display the CURL command.\n          type: string\n        support:\n          $ref: '#/components/schemas/Enabled'\n        applicationCreation:\n          $ref: '#/components/schemas/Enabled'\n        userCreation:\n          $ref: '#/components/schemas/Enabled'\n        apis:\n          $ref: '#/components/schemas/ConfigurationPortalApis'\n        analytics:\n          $ref: '#/components/schemas/ConfigurationPortalAnalytics'\n        rating:\n          $ref: '#/components/schemas/ConfigurationPortalRating'\n        uploadMedia:\n          $ref: '#/components/schemas/ConfigurationPortalMedia'\n        homepageTitle:\n          description: Main phrase to display on the homepage.\n          type: string\n    ConfigurationPortalApis:\n      properties:\n        tilesMode:\n          $ref: '#/components/schemas/Enabled'\n        categoryMode:\n          $ref: '#/components/schemas/Enabled'\n        apiHeaderShowTags:\n          $ref: '#/components/schemas/Enabled'\n        apiHeaderShowCategories:\n          $ref: '#/components/schemas/Enabled'\n    ConfigurationPortalAnalytics:\n      properties:\n        enabled:\n          description: true if Google analytics is activated\n          type: boolean\n        trackingId:\n          description: Tracking ID for Google analytics.\n          type: string\n    ConfigurationPortalRating:\n      properties:\n        enabled:\n          description: true if rating service is activated\n          type: boolean\n        comment:\n          $ref: '#/components/schemas/ConfigurationPortalRatingComment'\n    ConfigurationPortalRatingComment:\n      properties:\n        mandatory:\n          description: true if a comment is required to post a rating.\n          type: boolean\n    ConfigurationPortalMedia:\n      properties:\n        enabled:\n          description: true if uploading images is allowed\n          type: boolean\n        maxSizeInBytes:\n          description: Maximum size of uploaded images (in bytes)\n          type: integer\n    ConfigurationAuthentication:\n      properties:\n        forceLogin:\n          $ref: '#/components/schemas/Enabled'\n        localLogin:\n          $ref: '#/components/schemas/Enabled'\n    ConfigurationScheduler:\n      properties:\n        notificationsInSeconds:\n          description: Number of seconds for notification scheduler.\n          type: integer\n    ConfigurationDocumentation:\n      properties:\n        url:\n          description: URL of the main documentation.\n          type: string\n    ConfigurationPlan:\n      properties:\n        security:\n          $ref: '#/components/schemas/ConfigurationPlanSecurity'\n    ConfigurationPlanSecurity:\n      properties:\n        apikey:\n          $ref: '#/components/schemas/Enabled'\n        oauth2:\n          $ref: '#/components/schemas/Enabled'\n        keyless:\n          $ref: '#/components/schemas/Enabled'\n        jwt:\n          $ref: '#/components/schemas/Enabled'\n    ConfigurationAnalytics:\n      properties:\n        clientTimeout:\n          description: HTTP Client Timeout\n          type: integer\n          format: int64\n    ConfigurationApplication:\n      properties:\n        registration:\n          $ref: '#/components/schemas/Enabled'\n        types:\n          $ref: '#/components/schemas/ConfigurationApplicationTypes'\n    ConfigurationApplicationTypes:\n      properties:\n        simple:\n          $ref: '#/components/schemas/Enabled'\n        browser:\n          $ref: '#/components/schemas/Enabled'\n        web:\n          $ref: '#/components/schemas/Enabled'\n        native:\n          $ref: '#/components/schemas/Enabled'\n        backend_to_backend:\n          $ref: '#/components/schemas/Enabled'\n    ConfigurationReCaptcha:\n      properties:\n        enabled:\n          description: flag indication if recaptcha is enabled or not\n          type: boolean\n        siteKey:\n          description: reCaptcha site key\n          type: string\n\n    CategorizedLinks:\n      properties:\n        root:\n          type: boolean\n          description: true if the links of this category are in system folder and not in a subfolder.\n        category:\n          type: string\n          description: name of the group of links\n        links:\n          type: array\n          items:\n            $ref: '#/components/schemas/Link'\n    Link:\n      properties:\n        name:\n          type: string\n          description: Name of the link.\n        resourceRef:\n          type: string\n          description: target of the link. Can be either a URL id resourceType is 'external' or a UUID if resourceType is 'page' or 'category'.\n        resourceType:\n          type: string\n          description: the type of the link.\n          enum:\n            - external\n            - page\n            - category\n        folder:\n          type: boolean\n          description: true if resourceType is 'page' and resourceRef is the id of a folder.\n    #################\n    # Input Objects #\n    #################\n    RatingInput:\n      properties:\n        title:\n          type: string\n        value:\n          type: integer\n          minimum: 0\n          maximum: 5\n        comment:\n          type: string\n    RatingAnswerInput:\n      required:\n        - comment\n      properties:\n        comment:\n          type: string\n    ApplicationInput:\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        picture:\n          type: string\n        groups:\n          type: array\n          items:\n            type: string\n        settings:\n          $ref: '#/components/schemas/ApplicationSettings'\n        background:\n          type: string\n    MemberInput:\n      properties:\n        user:\n          type: string\n          description: User's technical identifier.\n        reference:\n          type: string\n          description: User's reference for user providing from an identity provider.\n        role:\n          type: string\n          description: Role's name\n    AlertInput:\n      properties:\n        type:\n          $ref: '#/components/schemas/AlertType'\n        status_code:\n          description: Http status code to trigger the alert\n          type: string\n        status_percent:\n          description: Percent to trigger the alert on status code\n          type: integer\n          minimum: 1\n          maximum: 100\n        enabled:\n          description: true, if alert is enabled\n          type: boolean\n          default: true\n        response_time:\n          description: Response time to trigger the alert\n          type: integer\n          minimum: 1\n          maximum: 100000\n        duration:\n          description: Compute alert on selected duration\n          type: integer\n        time_unit:\n          $ref: '#/components/schemas/AlertTimeUnit'\n    ReferenceMetadataInput:\n      properties:\n        name:\n          description: Name of the metadata.\n          type: string\n        format:\n          description: format of the metadata value.\n          $ref: '#/components/schemas/ReferenceMetadataFormatType'\n        value:\n          description: value of the metadata. Supports freemarker syntax.\n          type: string\n        defaultValue:\n          description: default value of the metadata.\n          type: string\n    SubscriptionInput:\n      properties:\n        application:\n          description: Id of the application which subscribe\n          type: string\n        plan:\n          description: Id of the plan to which the application subscribe\n          type: string\n        request:\n          description: A request message to the api owner why a user want to subscribe\n          type: string\n        general_conditions_accepted:\n          description: Specify if the general conditions have been accepted by the API subscriber\n          type: boolean\n        general_conditions_content_revision:\n          description: Page revision of the general conditions visualized and accepted by the API subscriber\n          $ref: '#/components/schemas/PageRevisionId'\n    TransferOwnershipInput:\n      properties:\n        new_primary_owner_id:\n          description: User identifier of the new Primary Owner of the application.\n          type: string\n        new_primary_owner_reference:\n          description: User reference of the new Primary Owner of the application.\n          type: string\n        primary_owner_newrole:\n          description: New role to be affected to the current PrimaryOwner.\n          type: string\n    PayloadInput:\n      properties:\n        client_id:\n          type: string\n          minLength: 1\n        redirect_uri:\n          type: string\n          minLength: 1\n        code:\n          type: string\n          minLength: 1\n        grant_type:\n          type: string\n          minLength: 1\n        code_verifier:\n          type: string\n        state:\n          type: string\n    TicketInput:\n      required:\n        - subject\n        - content\n      properties:\n        subject:\n          description: Subject of the ticket.\n          type: string\n        content:\n          description: Description of the ticket.\n          type: string\n        application:\n          description: Application identifier concerned by the ticket.\n          type: string\n        api:\n          description: Api identifer concerned by the ticket.\n          type: string\n        copy_to_sender:\n          description: True if the author of the ticket wants to receive a copy of the ticket.\n          type: boolean\n    RegisterUserInput:\n      required:\n        - email\n      properties:\n        email:\n          description: Valid email of the new user.\n          type: string\n        firstname:\n          description: First name of the new user.\n          type: string\n        lastname:\n          description: Last name of the new user.\n          type: string\n        confirmation_page_url:\n          description: URL of the confirmation page to be used in the 'User Registration' email.\n          type: string\n        customFields:\n          type: object\n          description: Values for CustomUserFields\n          additionalProperties: true\n    ChangeUserPasswordInput:\n      required:\n        - token\n        - password\n        - firstname\n        - lastname\n      properties:\n        token:\n          description: Token of the user to be validated.\n          type: string\n        password:\n          description: Password of the user.\n          type: string\n          format: password\n        firstname:\n          description: First name of the user.\n          type: string\n        lastname:\n          description: Last name of the user.\n          type: string\n    FinalizeRegistrationInput:\n      required:\n        - token\n        - password\n        - firstname\n        - lastname\n      properties:\n        token:\n          description: Token of the registered user to be validated.\n          type: string\n        password:\n          description: Password of the registered user.\n          type: string\n        firstname:\n          description: First name of the registered user.\n          type: string\n        lastname:\n          description: Last name of the registered user.\n          type: string\n    UserInput:\n      required:\n        - id\n      properties:\n        id:\n          description: Unique identifier of a user.\n          type: string\n        avatar:\n          description: Avatar of the user.\n          type: string\n          writeOnly: true\n        first_name:\n          description: Firstname of the user.\n          type: string\n          writeOnly: true\n        last_name:\n          description: Lastname of the user.\n          type: string\n          writeOnly: true\n        email:\n          description: Email of the user.\n          type: string\n          writeOnly: true\n        customFields:\n          type: object\n          description: Values for CustomUserFields\n          additionalProperties: true\n    ResetUserPasswordInput:\n      required:\n        - username\n      properties:\n        username:\n          description: Username of the user.\n          type: string\n        reset_page_url:\n          description: URL of the password reset page to be used in the 'Password reset' email.\n          type: string\n    NotificationInput:\n      properties:\n        hooks:\n          type: array\n          items:\n            type: string\n\n    #######################\n    # Composition Objects #\n    #######################\n    ApplicationSettings:\n      properties:\n        app:\n          $ref: '#/components/schemas/SimpleApplicationSettings'\n        oauth:\n          $ref: '#/components/schemas/OAuthClientSettings'\n    SimpleApplicationSettings:\n      properties:\n        type:\n          type: string\n        client_id:\n          type: string\n    OAuthClientSettings:\n      properties:\n        client_secret:\n          type: string\n        client_id:\n          type: string\n        redirect_uris:\n          type: array\n          items:\n            type: string\n        client_uri:\n          type: string\n        logo_uri:\n          type: string\n        response_types:\n          type: array\n          items:\n            type: string\n        grant_types:\n          type: array\n          items:\n            type: string\n        application_type:\n          type: string\n        renew_client_secret_supported:\n          type: boolean\n    Metadata:\n      description: Information about the page, if this page is from an external source.\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        order:\n          type: string\n    RatingSummary:\n      properties:\n        average:\n          type: number\n          format: double\n        count:\n          type: number\n        one_star:\n          type: number\n          format: double\n        two_star:\n          type: number\n          format: double\n        three_star:\n          type: number\n          format: double\n        four_star:\n          type: number\n          format: double\n        five_star:\n          type: number\n          format: double\n    PageConfiguration:\n      description: Technical information about the page\n      properties:\n        try_it:\n          type: boolean\n          description: Enable \"Try It!\" mode in documentation page.\n        try_it_anonymous:\n          type: boolean\n          description: Enable \"Try It!\" mode in documentation page for anonymous users.\n        try_it_url:\n          type: string\n          description: Base URL used to try the API.\n        show_url:\n          type: string\n          description: Show the URL to download the content.\n        display_operation_id:\n          type: boolean\n          description: Display the operationId in the operations list.\n        doc_expansion:\n          type: string\n          description: |\n            Default expansion setting for the operations and tags.\\\n            Possibles values are :\n             - list : Expands only the tags\n             - full : Expands the tags and operations\n             - none : Expands nothing. DEFAULT.\n          enum:\n            - list\n            - full\n            - none\n        enable_filtering:\n          type: boolean\n          description: Add a top bar to filter content.\n        show_extensions:\n          type: boolean\n          description: Display vendor extension (X-) fields and values for Operations, Parameters, and Schema.\n        show_common_extensions:\n          type: boolean\n          description: Display extensions (pattern, maxLength, minLength, maximum, minimum) fields and values for Parameters.\n        max_displayed_tags:\n          type: number\n          description: |\n            Number of max tagged operations displayed. \\\n            Limits the number of tagged operations displayed to at most this many (negative means show all operations).\\\n            No limit by default.\n        viewer:\n          type: string\n          description: The type of viewer for OpenAPI specification. Default is 'Swagger'\n          enum:\n            - Swagger\n            - Redoc\n    RatingAnswer:\n      required:\n        - id\n        - author\n        - date\n        - comment\n      properties:\n        id:\n          type: string\n        author:\n          $ref: '#/components/schemas/User'\n        date:\n          type: string\n          format: date-time\n        comment:\n          type: string\n    Key:\n      description: Subscription Key\n      properties:\n        id:\n          type: string\n        api:\n          type: string\n        application:\n          type: string\n        plan:\n          type: string\n        paused:\n          type: boolean\n        revoked:\n          type: boolean\n        expired:\n          type: boolean\n        created_at:\n          type: string\n          format: date-time\n        revoked_at:\n          type: string\n          format: date-time\n        expire_at:\n          type: string\n          format: date-time\n    AlertType:\n      type: string\n      enum:\n        - STATUS\n        - RESPONSE_TIME\n      default: STATUS\n    AlertTimeUnit:\n      type: string\n      enum:\n        - SECONDS\n        - MINUTES\n        - HOURS\n      default: MINUTES\n    HttpMethod:\n      type: string\n      enum:\n        - CONNECT\n        - DELETE\n        - GET\n        - HEAD\n        - OPTIONS\n        - PATCH\n        - POST\n        - PUT\n        - TRACE\n        - OTHER\n      default: OTHER\n    HttpHeaders:\n      description: List of String List\n      additionalProperties:\n        type: array\n        items:\n          type: string\n    Request:\n      description: Request logged by the API Gateway\n      properties:\n        method:\n          $ref: '#/components/schemas/HttpMethod'\n        headers:\n          $ref: '#/components/schemas/HttpHeaders'\n        uri:\n          type: string\n        body:\n          type: string\n    Response:\n      description: Response logged by the API Gateway\n      properties:\n        status:\n          type: integer\n        headers:\n          $ref: '#/components/schemas/HttpHeaders'\n        body:\n          type: string\n    MetadataMap:\n      description: Map of Map of Object\n      type: object\n      additionalProperties:\n        type: object\n        additionalProperties:\n          type: object\n    Bucket:\n      properties:\n        buckets:\n          type: array\n          items:\n            $ref: '#/components/schemas/Bucket'\n        field:\n          type: string\n        name:\n          type: string\n        data:\n          type: array\n          items:\n            type: number\n        metadata:\n          $ref: '#/components/schemas/MetadataMap'\n    Timerange:\n      properties:\n        from:\n          type: integer\n          format: int64\n        to:\n          type: integer\n          format: int64\n        interval:\n          type: integer\n          format: int64\n    FilterApiQuery:\n      type: string\n      enum:\n        - ALL\n        - FEATURED\n        - MINE\n        - STARRED\n        - TRENDINGS\n    Enabled:\n      properties:\n        enabled:\n          description: true, if the property is enabled\n          type: boolean\n    IdentityProviderType:\n      description: type of Identity Provider\n      type: string\n      enum:\n        - GOOGLE\n        - GITHUB\n        - GRAVITEEIO_AM\n        - OIDC\n    PageRevisionId:\n      properties:\n        pageId:\n          type: string\n        revision:\n          type: integer\n          format: int32\n    ReferenceMetadataFormatType:\n      type: string\n      enum:\n        - STRING\n        - NUMERIC\n        - BOOLEAN\n        - DATE\n        - MAIL\n        - URL\n      default: STRING\n    #################\n    # Links Objects #\n    #################\n    Links:\n      properties:\n        self:\n          type: string\n        first:\n          type: string\n        last:\n          type: string\n        prev:\n          type: string\n        next:\n          type: string\n    ApiLinks:\n      properties:\n        self:\n          type: string\n        links:\n          type: string\n        metrics:\n          type: string\n        pages:\n          type: string\n        picture:\n          type: string\n        background:\n          type: string\n        plans:\n          type: string\n        ratings:\n          type: string\n    ApplicationLinks:\n      properties:\n        self:\n          type: string\n        members:\n          type: string\n        notifications:\n          type: string\n        picture:\n          type: string\n        background:\n          type: string\n    PageLinks:\n      properties:\n        self:\n          type: string\n        content:\n          type: string\n        parent:\n          type: string\n    ThemeLinks:\n      properties:\n        self:\n          type: string\n        backgroundImage:\n          type: string\n        logo:\n          type: string\n        optionalLogo:\n          type: string\n        favicon:\n          type: string\n    UserLinks:\n      properties:\n        self:\n          type: string\n        avatar:\n          type: string\n        notifications:\n          type: string\n    CategoryLinks:\n      properties:\n        self:\n          type: string\n        highlighted_api:\n          type: string\n        picture:\n          type: string\n        background:\n          type: string\n    CustomUserFields:\n      description: Definition of addition user registration fields\n      properties:\n        key:\n          description: The field identifier.\n          type: string\n        label:\n          description: The default field label.\n          type: string\n        required:\n          description: The field is mandatory\n          type: boolean\n        values:\n          description: List of authorized values for the field\n          type: array\n          items:\n            type: string\n  responses:\n    InternalServerError:\n      description: Internal Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    PermissionError:\n      description: Insufficient rights to access this resource\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    UnauthorizedError:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    APINotFoundError:\n      description: API not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    ApplicationNotFoundError:\n      description: Application not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    GroupNotFoundError:\n      description: Group not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    AuthSuccess:\n      description: Auth token in payload and bearer in cookie\n      headers:\n        set-cookie:\n          description: Auth cookie\n          schema:\n            type: string\n            example: Auth-Graviteeio-APIM=Bearer%20xxxxxx;Path=/;HttpOnly\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Token'\n    PageSuccess:\n      description: One documentation page\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Page'\n    PagesSuccess:\n      description: List of pages\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/PagesResponse'\n    PictureSuccess:\n      description: A picture\n      content:\n        'image/*':\n          schema:\n            type: string\n            format: binary\n    MediaSuccess:\n      description: A media\n      content:\n        '*':\n          schema:\n            type: string\n            format: binary\n\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n    CookieAuth:\n      type: apiKey\n      in: cookie\n      name: Auth-Graviteeio-APIM",
			"canonicalURL": "/github.com/gravitee-io/gravitee-docs@36df9ec7b79693eca6f643263612843ef1813bfc/-/blob/apim/3.x/portal-api/3.10/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/gravitee-io/gravitee-docs/blob/36df9ec7b79693eca6f643263612843ef1813bfc/apim/3.x/portal-api/3.10/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/applications/{applicationId}/notifications\": get: security: security \"CookieAuth\" (index 1): cookie security not implemented",
	"NotImplemented": [
		"cookie security",
		"unsupported content types"
	]
}