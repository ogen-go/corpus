{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/blockfrost/blockfrost-dotnet"
		},
		"file": {
			"name": "swagger_simple.json",
			"size": 0,
			"path": "tools/Blockfrost.Api.Generate.Tests/dat/swagger_simple.json",
			"byteSize": 30891,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"version\": \"0.1.26\",\n    \"title\": \"Blockfrost.io ~ API Documentation\",\n    \"x-logo\": {\n      \"url\": \"https://staging.blockfrost.io/images/logo.svg\",\n      \"altText\": \"Blockfrost\"\n    },\n    \"contact\": {\n      \"name\": \"Blockfrost Team\",\n      \"url\": \"https://blockfrost.io\",\n      \"email\": \"contact@blockfrost.io\"\n    },\n    \"license\": {\n      \"name\": \"MIT\",\n      \"url\": \"https://opensource.org/licenses/MIT\"\n    },\n    \"termsOfService\": \"https://blockfrost.io/terms\",\n    \"description\": \"Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.  ## Tokens  After signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project. HTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.  ## Available networks  At the moment, you can use the following networks. Please, note that each network has its own `project_id`.  \u003ctable\u003e   \u003ctr\u003e\u003ctd\u003e\u003cb\u003eNetwork\u003c/b\u003e\u003c/td\u003e\u003ctd\u003e\u003cb\u003eEndpoint\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e   \u003ctr\u003e\u003ctd\u003eCardano mainnet\u003c/td\u003e\u003ctd\u003e\u003ctt\u003ehttps://cardano-mainnet.blockfrost.io/api/v0\u003c/td\u003e\u003c/tt\u003e\u003c/tr\u003e   \u003ctr\u003e\u003ctd\u003eCardano testnet\u003c/td\u003e\u003ctd\u003e\u003ctt\u003ehttps://cardano-testnet.blockfrost.io/api/v0\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e   \u003ctr\u003e\u003ctd\u003eInterPlanetary File System\u003c/td\u003e\u003ctd\u003e\u003ctt\u003ehttps://ipfs.blockfrost.io/api/v0\u003c/tt\u003e\u003c/td\u003e\u003c/tr\u003e \u003c/table\u003e  ## Concepts  * All endpoints return either a JSON object or an array. * Data is returned in *ascending* (oldest first, newest last) order.   * You might use the `?order=desc` query parameter to reverse this order. * By default, we return 100 results at a time. You have to use `?page=2` to list through the results. * All time and timestamp related fields (except `server_time`) are in seconds of UNIX time. * All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces. * Addresses, accounts and pool IDs are in Bech32 format. * All values are case sensitive. * All hex encoded values are lower case. * Examples are not based on real data. Any resemblance to actual events is purely coincidental. * We allow to upload files up to 100MB of size to IPFS. This might increase in the future.  ## Errors  ### HTTP Status codes  The following are HTTP status code your application might receive when reaching Blockfrost endpoints and it should handle all of these cases.  * HTTP `400` return code is used when the request is not valid. * HTTP `402` return code is used when the projects exceed their daily request limit. * HTTP `403` return code is used when the request is not authenticated. * HTTP `404` return code is used when the resource doesn't exist. * HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`. * HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited. * HTTP `500` return code is used when our endpoints are having a problem.  ### Error codes  An internal error code number is used for better indication of the error in question. It is passed using the following payload.  ```json {   \\\"status_code\\\": 403,   \\\"error\\\": \\\"Forbidden\\\",   \\\"message\\\": \\\"Invalid project token.\\\" } ``` ## Limits   There are two types of limits we are enforcing:   The first depends on your plan and is the number of request we allow per day. We defined the day from midnight to midnight of UTC time.   The second is rate limiting. We limit an end user, distinguished by IP address, to 10 requests per second. On top of that, we allow  each user to send burst of 500 requests, which cools off at rate of 10 requests per second. In essence, a user is allowed to make another  whole burst after (currently) 500/10 = 50 seconds. E.g. if a user attemtps to make a call 3 seconds after whole burst, 30 requests will be processed.  We believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and  we will make sure to take it into account as much as we can.   ## SDKs  We support a number of SDKs that will help you in developing your application on top of Blockfrost.  \u003ctable\u003e   \u003ctr\u003e\u003ctd\u003e\u003cb\u003eProgramming language\u003c/b\u003e\u003c/td\u003e\u003ctd\u003e\u003cb\u003eSDK\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e   \u003ctr\u003e\u003ctd\u003eJavaScript\u003c/td\u003e\u003ctd\u003e\u003ca href=\\\"https://github.com/blockfrost/blockfrost-js\\\"\u003eblockfrost-js\u003c/a\u003e\u003c/tr\u003e \u003c/table\u003e  # Authentication  \u003c!-- ReDoc-Inject: \u003csecurity-definitions\u003e --\u003e\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"https://cardano-mainnet.blockfrost.io/api/v0/\",\n      \"description\": \"Cardano Mainnet network\"\n    },\n    {\n      \"url\": \"https://cardano-testnet.blockfrost.io/api/v0/\",\n      \"description\": \"Cardano Testnet network\"\n    },\n    {\n      \"url\": \"https://localhost:3000\",\n      \"description\": \"local\"\n    }\n  ],\n  \"security\": [\n    {\n      \"ApiKeyAuth\": []\n    }\n  ],\n  \"tags\": [\n    {\n      \"name\": \"Health\"\n    },\n    {\n      \"name\": \"Cardano Â» Blocks\"\n    }\n  ],\n  \"paths\": {\n    \"/\": {\n      \"get\": {\n        \"tags\": [\n          \"Health\"\n        ],\n        \"summary\": \"Root endpoint\",\n        \"description\": \"Root endpoint has no other function than to point end users to documentation. \",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Information pointing to the documentation.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"url\": {\n                      \"type\": \"string\",\n                      \"example\": \"https://blockfrost.io/\"\n                    },\n                    \"version\": {\n                      \"type\": \"string\",\n                      \"example\": \"0.1.0\"\n                    }\n                  },\n                  \"required\": [\n                    \"url\",\n                    \"version\"\n                  ]\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/bad_request\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/unauthorized_error\"\n          },\n          \"418\": {\n            \"$ref\": \"#/components/responses/autobanned\"\n          },\n          \"429\": {\n            \"$ref\": \"#/components/responses/overusage_limit\"\n          },\n          \"500\": {\n            \"$ref\": \"#/components/responses/internal_server_error\"\n          }\n        }\n      }\n    },\n    \"/health\": {\n      \"get\": {\n        \"tags\": [\n          \"Health\"\n        ],\n        \"summary\": \"Backend health status\",\n        \"description\": \"Return backend status as a boolean. Your application     should handle situations when backend for the given chain is unavailable. \",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Return the boolean indicating the health of the backend.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"is_healthy\": {\n                      \"type\": \"boolean\",\n                      \"example\": true\n                    }\n                  },\n                  \"required\": [\n                    \"is_healthy\"\n                  ]\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/bad_request\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/unauthorized_error\"\n          },\n          \"418\": {\n            \"$ref\": \"#/components/responses/autobanned\"\n          },\n          \"429\": {\n            \"$ref\": \"#/components/responses/overusage_limit\"\n          },\n          \"500\": {\n            \"$ref\": \"#/components/responses/internal_server_error\"\n          }\n        }\n      }\n    },\n    \"/health/clock\": {\n      \"get\": {\n        \"tags\": [\n          \"Health\"\n        ],\n        \"summary\": \"Current backend time\",\n        \"description\": \"This endpoint provides the current UNIX time. Your application might use this to verify if the client clock is not out of sync. \",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Return the current UNIX time in milliseconds.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"server_time\": {\n                      \"type\": \"integer\",\n                      \"example\": 1603400958947\n                    }\n                  },\n                  \"required\": [\n                    \"server_time\"\n                  ]\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/bad_request\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/unauthorized_error\"\n          },\n          \"418\": {\n            \"$ref\": \"#/components/responses/autobanned\"\n          },\n          \"429\": {\n            \"$ref\": \"#/components/responses/overusage_limit\"\n          },\n          \"500\": {\n            \"$ref\": \"#/components/responses/internal_server_error\"\n          }\n        }\n      }\n    },\n    \"/blocks/latest\": {\n      \"get\": {\n        \"tags\": [\n          \"Cardano Â» Blocks\"\n        ],\n        \"summary\": \"Latest block\",\n        \"description\": \"Return the latest block available to the backends, also known as the tip of the blockchain. \",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Return the contents of the latest block.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/block_content\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/bad_request\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/unauthorized_error\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/not_found\"\n          },\n          \"418\": {\n            \"$ref\": \"#/components/responses/autobanned\"\n          },\n          \"429\": {\n            \"$ref\": \"#/components/responses/overusage_limit\"\n          },\n          \"500\": {\n            \"$ref\": \"#/components/responses/internal_server_error\"\n          }\n        }\n      }\n    },\n    \"/blocks/latest/txs\": {\n      \"get\": {\n        \"tags\": [\n          \"Cardano Â» Blocks\"\n        ],\n        \"summary\": \"Latest block transactions\",\n        \"description\": \"Return the transactions within the latest block.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"count\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"maximum\": 100,\n              \"default\": 100\n            },\n            \"description\": \"The number of results displayed on one page.\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"page\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"default\": 1\n            },\n            \"description\": \"The page number for listing the results.\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"order\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"asc\",\n                \"desc\"\n              ],\n              \"default\": \"asc\"\n            },\n            \"description\": \"Ordered by tx index in the block. The ordering of items from the point of view of the blockchain, not the page listing itself. By default, we return oldest first, newest last. \"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Return the transactions within the block.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/block_content_txs\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/bad_request\"\n          },\n          \"500\": {\n            \"$ref\": \"#/components/responses/internal_server_error\"\n          }\n        }\n      }\n    },\n    \"/blocks/{hash_or_number}\": {\n      \"get\": {\n        \"tags\": [\n          \"Cardano Â» Blocks\"\n        ],\n        \"summary\": \"Specific block\",\n        \"description\": \"Return the content of a requested block. \",\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"hash_or_number\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"64-character case-sensitive hexadecimal string or block number.\"\n            },\n            \"description\": \"Hash or number of the requested block.\",\n            \"example\": \"4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Return the contents of the block\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/block_content\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/bad_request\"\n          },\n          \"500\": {\n            \"$ref\": \"#/components/responses/internal_server_error\"\n          }\n        }\n      }\n    },\n    \"/blocks/{hash_or_number}/next\": {\n      \"get\": {\n        \"tags\": [\n          \"Cardano Â» Blocks\"\n        ],\n        \"summary\": \"Listing of next blocks\",\n        \"description\": \"Return the list of blocks following a specific block. \",\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"hash_or_number\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"64-character case-sensitive hexadecimal string or block number.\"\n            },\n            \"description\": \"Hash of the requested block.\",\n            \"example\": \"5ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"count\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"maximum\": 100,\n              \"default\": 100\n            },\n            \"description\": \"The number of results displayed on one page.\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"page\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"integer\",\n              \"default\": 1\n            },\n            \"description\": \"The page number for listing the results.\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Return the contents of the block.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/block_content_array\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/bad_request\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/unauthorized_error\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/not_found\"\n          },\n          \"418\": {\n            \"$ref\": \"#/components/responses/autobanned\"\n          },\n          \"429\": {\n            \"$ref\": \"#/components/responses/overusage_limit\"\n          },\n          \"500\": {\n            \"$ref\": \"#/components/responses/internal_server_error\"\n          }\n        }\n      }\n    },\n    \"/pools/{pool_id}/metadata\": {\n      \"get\": {\n        \"tags\": [\n          \"Cardano Â» Pools\"\n        ],\n        \"summary\": \"Stake pool metadata\",\n        \"description\": \"Stake pool registration metadata. \",\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"pool_id\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Bech32 or hexadecimal pool ID.\",\n            \"example\": \"pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Return the pool metadata content.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"anyOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/pool_metadata\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/empty_object\"\n                    }\n                  ]\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/bad_request\"\n          },\n          \"403\": {\n            \"$ref\": \"#/components/responses/unauthorized_error\"\n          },\n          \"404\": {\n            \"$ref\": \"#/components/responses/not_found\"\n          },\n          \"418\": {\n            \"$ref\": \"#/components/responses/autobanned\"\n          },\n          \"429\": {\n            \"$ref\": \"#/components/responses/overusage_limit\"\n          },\n          \"500\": {\n            \"$ref\": \"#/components/responses/internal_server_error\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"responses\": {\n      \"overusage_limit\": {\n        \"description\": \"Usage limit reached\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status_code\": {\n                  \"type\": \"integer\",\n                  \"example\": 429\n                },\n                \"error\": {\n                  \"type\": \"string\",\n                  \"example\": \"Project Over Limit\"\n                },\n                \"message\": {\n                  \"type\": \"string\",\n                  \"example\": \"Usage is over limit.\"\n                }\n              },\n              \"required\": [\n                \"status_code\",\n                \"error\",\n                \"message\"\n              ]\n            }\n          }\n        }\n      },\n      \"autobanned\": {\n        \"description\": \"IP has been auto-banned for extensive sending of requests after usage limit has been reached\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status_code\": {\n                  \"type\": \"integer\",\n                  \"example\": 418\n                },\n                \"error\": {\n                  \"type\": \"string\",\n                  \"example\": \"Requested Banned\"\n                },\n                \"message\": {\n                  \"type\": \"string\",\n                  \"example\": \"IP has been auto-banned for flooding.\"\n                }\n              },\n              \"required\": [\n                \"status_code\",\n                \"error\",\n                \"message\"\n              ]\n            }\n          }\n        }\n      },\n      \"not_found\": {\n        \"description\": \"Component not found\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status_code\": {\n                  \"type\": \"integer\",\n                  \"example\": 404\n                },\n                \"error\": {\n                  \"type\": \"string\",\n                  \"example\": \"Not Found\"\n                },\n                \"message\": {\n                  \"type\": \"string\",\n                  \"example\": \"The requested component has not been found.\"\n                }\n              },\n              \"required\": [\n                \"status_code\",\n                \"error\",\n                \"message\"\n              ]\n            }\n          }\n        }\n      },\n      \"internal_server_error\": {\n        \"description\": \"Internal Server Error\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status_code\": {\n                  \"type\": \"integer\",\n                  \"example\": 500\n                },\n                \"error\": {\n                  \"type\": \"string\",\n                  \"example\": \"Internal Server Error\"\n                },\n                \"message\": {\n                  \"type\": \"string\",\n                  \"example\": \"An unexpected response was received from the backend.\"\n                }\n              },\n              \"required\": [\n                \"status_code\",\n                \"error\",\n                \"message\"\n              ]\n            }\n          }\n        }\n      },\n      \"unauthorized_error\": {\n        \"description\": \"Authentication secret is missing or invalid\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status_code\": {\n                  \"type\": \"integer\",\n                  \"example\": 403\n                },\n                \"error\": {\n                  \"type\": \"string\",\n                  \"example\": \"Forbidden\"\n                },\n                \"message\": {\n                  \"type\": \"string\",\n                  \"example\": \"Invalid project token.\"\n                }\n              },\n              \"required\": [\n                \"status_code\",\n                \"error\",\n                \"message\"\n              ]\n            }\n          }\n        }\n      },\n      \"bad_request\": {\n        \"description\": \"Bad request\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status_code\": {\n                  \"type\": \"integer\",\n                  \"example\": 400\n                },\n                \"error\": {\n                  \"type\": \"string\",\n                  \"example\": \"Bad Request\"\n                },\n                \"message\": {\n                  \"type\": \"string\",\n                  \"example\": \"Backend did not understand your request.\"\n                }\n              },\n              \"required\": [\n                \"status_code\",\n                \"error\",\n                \"message\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"securitySchemes\": {\n      \"ApiKeyAuth\": {\n        \"type\": \"apiKey\",\n        \"in\": \"header\",\n        \"name\": \"project_id\",\n        \"description\": \"There are multiple token types available based on network you choose when creating a Blockfrost a project, for a list of token types see [Available networks](#section/Available-networks) \"\n      }\n    },\n    \"schemas\": {\n      \"block_content_array\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/block_content\"\n        }\n      },\n      \"block_content\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"time\": {\n            \"type\": \"integer\",\n            \"example\": 1641338934,\n            \"description\": \"Block creation time in UNIX time\"\n          },\n          \"height\": {\n            \"type\": \"integer\",\n            \"nullable\": true,\n            \"example\": 15243593,\n            \"description\": \"Block number\"\n          },\n          \"hash\": {\n            \"type\": \"string\",\n            \"example\": \"4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a\",\n            \"description\": \"Hash of the block\"\n          },\n          \"slot\": {\n            \"type\": \"integer\",\n            \"nullable\": true,\n            \"example\": 412162133,\n            \"description\": \"Slot number\"\n          },\n          \"epoch\": {\n            \"type\": \"integer\",\n            \"nullable\": true,\n            \"example\": 425,\n            \"description\": \"Epoch number\"\n          },\n          \"epoch_slot\": {\n            \"type\": \"integer\",\n            \"nullable\": true,\n            \"example\": 12,\n            \"description\": \"Slot within the epoch\"\n          },\n          \"slot_leader\": {\n            \"type\": \"string\",\n            \"example\": \"pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2qnikdy\",\n            \"description\": \"Bech32 ID of the slot leader or specific block description in case there is no slot leader\"\n          },\n          \"size\": {\n            \"type\": \"integer\",\n            \"example\": 3,\n            \"description\": \"Block size in Bytes\"\n          },\n          \"tx_count\": {\n            \"type\": \"integer\",\n            \"example\": 1,\n            \"description\": \"Number of transactions in the block\"\n          },\n          \"output\": {\n            \"type\": \"string\",\n            \"nullable\": true,\n            \"example\": \"128314491794\",\n            \"description\": \"Total output within the block in Lovelaces\"\n          },\n          \"fees\": {\n            \"type\": \"string\",\n            \"nullable\": true,\n            \"example\": \"592661\",\n            \"description\": \"Total fees within the block in Lovelaces\"\n          },\n          \"block_vrf\": {\n            \"type\": \"string\",\n            \"nullable\": true,\n            \"example\": \"vrf_vk1wf2k6lhujezqcfe00l6zetxpnmh9n6mwhpmhm0dvfh3fxgmdnrfqkms8ty\",\n            \"description\": \"VRF key of the block\",\n            \"minLength\": 65,\n            \"maxLength\": 65\n          },\n          \"previous_block\": {\n            \"type\": \"string\",\n            \"nullable\": true,\n            \"example\": \"43ebccb3ac72c7cebd0d9b755a4b08412c9f5dcb81b8a0ad1e3c197d29d47b05\",\n            \"description\": \"Hash of the previous block\"\n          },\n          \"next_block\": {\n            \"type\": \"string\",\n            \"nullable\": true,\n            \"example\": \"8367f026cf4b03e116ff8ee5daf149b55ba5a6ec6dec04803b8dc317721d15fa\",\n            \"description\": \"Hash of the next block\"\n          },\n          \"confirmations\": {\n            \"type\": \"integer\",\n            \"example\": 4698,\n            \"description\": \"Number of block confirmations\"\n          }\n        },\n        \"required\": [\n          \"time\",\n          \"height\",\n          \"hash\",\n          \"slot\",\n          \"epoch\",\n          \"epoch_slot\",\n          \"slot_leader\",\n          \"size\",\n          \"tx_count\",\n          \"output\",\n          \"fees\",\n          \"block_vrf\",\n          \"previous_block\",\n          \"next_block\",\n          \"confirmations\"\n        ]\n      },\n      \"block_content_txs\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\",\n          \"description\": \"Hash of the transaction\"\n        },\n        \"example\": [\n          \"8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b\",\n          \"4eef6bb7755d8afbeac526b799f3e32a624691d166657e9d862aaeb66682c036\",\n          \"52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f\",\n          \"e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b\"\n        ]\n      },\n      \"genesis_content\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"active_slots_coefficient\": {\n            \"type\": \"number\",\n            \"example\": 0.05,\n            \"description\": \"The proportion of slots in which blocks should be issued\"\n          },\n          \"update_quorum\": {\n            \"type\": \"integer\",\n            \"example\": 5,\n            \"description\": \"Determines the quorum needed for votes on the protocol parameter updates\"\n          },\n          \"max_lovelace_supply\": {\n            \"type\": \"string\",\n            \"example\": \"45000000000000000\",\n            \"description\": \"The total number of lovelace in the system\"\n          },\n          \"network_magic\": {\n            \"type\": \"integer\",\n            \"example\": 764824073,\n            \"description\": \"Network identifier\"\n          },\n          \"epoch_length\": {\n            \"type\": \"integer\",\n            \"example\": 432000,\n            \"description\": \"Number of slots in an epoch\"\n          },\n          \"system_start\": {\n            \"type\": \"integer\",\n            \"example\": 1506203091,\n            \"description\": \"Time of slot 0 in UNIX time\"\n          },\n          \"slots_per_kes_period\": {\n            \"type\": \"integer\",\n            \"example\": 129600,\n            \"description\": \"Number of slots in an KES period\"\n          },\n          \"slot_length\": {\n            \"type\": \"integer\",\n            \"example\": 1,\n            \"description\": \"Duration of one slot in seconds\"\n          },\n          \"max_kes_evolutions\": {\n            \"type\": \"integer\",\n            \"example\": 62,\n            \"description\": \"The maximum number of time a KES key can be evolved before a pool operator must create a new operational certificate\"\n          },\n          \"security_param\": {\n            \"type\": \"integer\",\n            \"example\": 2160,\n            \"description\": \"Security parameter k\"\n          }\n        },\n        \"required\": [\n          \"active_slots_coefficient\",\n          \"update_quorum\",\n          \"max_lovelace_supply\",\n          \"network_magic\",\n          \"epoch_length\",\n          \"system_start\",\n          \"slots_per_kes_period\",\n          \"slot_length\",\n          \"max_kes_evolutions\",\n          \"security_param\"\n        ]\n      },\n      \"pool_metadata\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"pool_id\": {\n            \"type\": \"string\",\n            \"example\": \"pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy\",\n            \"description\": \"Bech32 pool ID\"\n          },\n          \"hex\": {\n            \"type\": \"string\",\n            \"example\": \"0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735\",\n            \"description\": \"Hexadecimal pool ID\"\n          },\n          \"url\": {\n            \"type\": \"string\",\n            \"nullable\": true,\n            \"example\": \"https://stakenuts.com/mainnet.json\",\n            \"description\": \"URL to the stake pool metadata\"\n          },\n          \"hash\": {\n            \"type\": \"string\",\n            \"nullable\": true,\n            \"example\": \"47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c\",\n            \"description\": \"Hash of the metadata file\"\n          },\n          \"ticker\": {\n            \"type\": \"string\",\n            \"nullable\": true,\n            \"example\": \"NUTS\",\n            \"description\": \"Ticker of the stake pool\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"nullable\": true,\n            \"example\": \"Stake Nuts\",\n            \"description\": \"Name of the stake pool\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"nullable\": true,\n            \"example\": \"The best pool ever\",\n            \"description\": \"Description of the stake pool\"\n          },\n          \"homepage\": {\n            \"type\": \"string\",\n            \"nullable\": true,\n            \"example\": \"https://stakentus.com/\",\n            \"description\": \"Home page of the stake pool\"\n          }\n        },\n        \"required\": [\n          \"pool_id\",\n          \"hex\",\n          \"url\",\n          \"hash\",\n          \"ticker\",\n          \"name\",\n          \"description\",\n          \"homepage\"\n        ]\n      },\n      \"empty_object\": {\n        \"type\": \"object\"\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/blockfrost/blockfrost-dotnet@b8016c5b2e3322155d84c09dc3bea678702da62c/-/blob/tools/Blockfrost.Api.Generate.Tests/dat/swagger_simple.json",
			"externalURLs": [
				{
					"url": "https://github.com/blockfrost/blockfrost-dotnet/blob/b8016c5b2e3322155d84c09dc3bea678702da62c/tools/Blockfrost.Api.Generate.Tests/dat/swagger_simple.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/pools/{pool_id}/metadata\": get: responses: 200: contents: application/json: generate schema: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"complex anyOf"
	]
}