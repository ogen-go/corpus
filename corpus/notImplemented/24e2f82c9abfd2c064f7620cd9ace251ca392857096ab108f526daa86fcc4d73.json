{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/input-output-hk/jormungandr"
		},
		"file": {
			"name": "v1.yaml",
			"size": 0,
			"path": "doc/api/v1.yaml",
			"byteSize": 13592,
			"content": "openapi: 3.0.2\n\ninfo:\n  title: Generic blockchain node REST API\n  description: JÃ¶rmungandr Rest API v1\n  version: 0.0.1\n  contact:\n    url: 'https://github.com/input-output-hk/jormungandr/'\n\nservers:\n  - url: 'https://localhost'\n\ntags:\n  - name: fragment\n  - name: vote\n\npaths:\n  /api/v1/fragments:\n    post:\n      description: Post a batch of signed transactions\n      operationId: PostFragments\n      tags:\n        - fragment\n      requestBody:\n        description: An array of hex-encoded signed transactions\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                fail_fast:\n                  description: Stop processing the list of fragments upon meeting the first invalid fragment.\n                  type: boolean\n                fragments:\n                  description: The fragments to submit.\n                  type: array\n                  items:\n                    type: string\n                    pattern: '[0-9a-f]+'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FragmentsProcessingSummary'\n        '400':\n          description: An error occurred when processing this request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FragmentsProcessingSummary'\n  /api/v1/fragments/statuses:\n    get:\n      description: Get statuses of fragments\n      operationId: FragmentStatuses\n      tags:\n        - fragment\n      parameters:\n        - in: query\n          name: fragment_ids\n          description: Comma-separated list of fragment IDs\n          schema:\n            type: string\n            pattern: '[0-9a-f]+(,[0-9a-f]+)+'\n          required: true\n          example: '68dcc12fe0dfe5e7b66ca6f8c959f9aa43b273e120a77fc3e4e2f04f1ecd7968,b34bf76412138543d7b57ea23ff58b6b6c04a954c0badc3cadeafc564f1a771'\n      responses:\n        '200':\n          description: Success. If a fragment is missing from in-memory fragment logs it will not show up in the result dictionary.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  oneOf:\n                    - description: Fragment is yet to be processed\n                      type: string\n                      enum:\n                        - Pending\n                    - description: \"Fragment was rejected and won't be added to a block\"\n                      type: object\n                      required:\n                        - Rejected\n                      properties:\n                        Rejected:\n                          type: object\n                          required:\n                            - reason\n                          properties:\n                            reason:\n                              description: Reason for rejection\n                              type: string\n                    - description: Fragment was added to a block\n                      type: object\n                      required:\n                        - InABlock\n                      properties:\n                        InABlock:\n                          type: object\n                          required:\n                            - date\n                            - block\n                          properties:\n                            date:\n                              description: Epoch and slot ID of block containing fragment separated with a dot\n                              type: string\n                              pattern: \"[0-9]+\\\\.[0-9]+\"\n                            block:\n                              description: Block hash where the fragment was last seen\n                              type: string\n                              pattern: '[0-9a-fa-f]+'\n              example:\n                {\n                  '68dcc12fe0dfe5e7b66ca6f8c959f9aa43b273e120a77fc3e4e2f04f1ecd7968': 'Pending',\n                }\n  /api/v1/fragments/logs:\n    get:\n      description: Gets logs from node message pool\n      operationId: FragmentLogs\n      tags:\n        - fragment\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  required:\n                    - fragment_id\n                    - received_from\n                    - received_at\n                    - last_updated_at\n                    - status\n                  properties:\n                    fragment_id:\n                      description: Hex-encoded fragment ID\n                      type: string\n                      pattern: '[0-9a-f]+'\n                    received_from:\n                      description: Source of the fragment\n                      type: string\n                      enum:\n                        - Network\n                        - Rest\n                    received_at:\n                      description: When fragment was received by node\n                      type: string\n                      format: date-time\n                    last_updated_at:\n                      description: When fragment changed status last time\n                      type: string\n                      format: date-time\n                    status:\n                      description: Status of the fragment\n                      oneOf:\n                        - description: Fragment is yet to be processed\n                          type: string\n                          enum:\n                            - Pending\n                        - description: \"Fragment was rejected and won't be added to a block\"\n                          type: object\n                          required:\n                            - Rejected\n                          properties:\n                            Rejected:\n                              type: object\n                              required:\n                                - reason\n                              properties:\n                                reason:\n                                  description: Reason for rejection\n                                  type: string\n                        - description: Fragment was added to a block\n                          type: object\n                          required:\n                            - InABlock\n                          properties:\n                            InABlock:\n                              type: object\n                              required:\n                                - date\n                                - block\n                              properties:\n                                date:\n                                  description: Epoch and slot ID of block containing fragment separated with a dot\n                                  type: string\n                                  pattern: \"[0-9]+\\\\.[0-9]+\"\n                                block:\n                                  description: Block hash where the fragment was last seen\n                                  type: string\n                                  pattern: '[0-9a-fA-F]+'\n              examples:\n                Pending:\n                  value:\n                    [\n                      {\n                        'fragment_id': 'a50a80e0ce6cb8e19d4381dc2a521c1d3ab8a532029131e440548625b2a4d3e8',\n                        'received_from': 'Rest',\n                        'received_at': '2019-08-12T11:20:52.316544007+00:00',\n                        'last_updated_at': '2019-08-12T11:20:52.316544079+00:00',\n                        'status': 'Pending',\n                      },\n                    ]\n                Rejected:\n                  value:\n                    [\n                      {\n                        'fragment_id': '68b36b0e244ff571d4d01026c149a3986bbd7d7deaabac5e3b994171d9c50856',\n                        'received_from': 'Rest',\n                        'received_at': '2019-08-12T11:20:57.758070884+00:00',\n                        'last_updated_at': '2019-08-12T11:20:58.005548031+00:00',\n                        'status':\n                          {\n                            'Rejected':\n                              {\n                                'reason': 'The UTxO value (99) in the transaction does not match the actually state value: 100',\n                              },\n                          },\n                      },\n                    ]\n                InABlock:\n                  value:\n                    [\n                      {\n                        'fragment_id': '99e8fbb961e9956cab03779e427b9aad249ddcb4ad7c508f3a80f44091485f01',\n                        'received_from': 'Rest',\n                        'received_at': '2019-08-12T11:21:11.314829989+00:00',\n                        'last_updated_at': '2019-08-12T11:21:12.017821060+00:00',\n                        'status':\n                          {\n                            'InABlock':\n                              {\n                                'date': '114237.32',\n                                'block': 'd9040ca57e513a36ecd3bb54207dfcd10682200929cad6ada46b521417964174',\n                              },\n                          },\n                      },\n                    ]\n\n  /api/v1/votes/plan/{votePlanId}/account-votes/{account_id}:\n    get:\n      description: Get numbers of proposals within a vote plan a given user have voted for.\n      operationId: AccountVotesWithPlan\n      tags:\n        - vote\n      parameters:\n        - in: path\n          name: votePlanId\n          required: true\n          description: The ID of the vote plan to query.\n          schema:\n            type: string\n            pattern: '[0-9a-f]+'\n        - in: path\n          name: account_id\n          required: true\n          description: Hex-encoded account ID to get the information from.\n          schema:\n            type: string\n            pattern: '[0-9a-f]+'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n        '404':\n          description: The requested vote plan does not exist or is not active.\n\n  /api/v1/votes/plan/account-votes/{account_id}:\n    get:\n      description: Get indexes of proposals a given user has voted for across all active vote plans.\n      operationId: AccountVotes\n      tags:\n        - vote\n      parameters:\n        - in: path\n          name: account_id\n          required: true\n          description: Hex-encoded account ID to get the information from.\n          schema:\n            type: string\n            pattern: '[0-9a-f]+'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    vote_plan_id:\n                      description: The ID of the vote plan.\n                      type: string\n                      pattern: '[0-9a-f]+'\n                    votes:\n                      description: Numbers of proposals within a vote plan.\n                      type: array\n                      items:\n                        type: integer\n\n  /api/v1/votes/plan/accounts-votes-count:\n    get:\n      description: Get count of submitted and accepted ballots per account\n      tags:\n        - vote\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n                    description: hex encoded account identifier\n                  text:\n                    type: integer\n                    description: total votes casted\n\ncomponents:\n  schemas:\n    FragmentsProcessingSummary:\n      description: The information about whether a message was accepted or rejected\n      type: object\n      properties:\n        accepted:\n          description: IDs of accepted fragments\n          type: array\n          items:\n            type: string\n            format: '[0-9a-f]+'\n        rejected:\n          description: Detailed information about rejected fragments\n          type: array\n          items:\n            type: object\n            required:\n              - id\n              - reason\n            properties:\n              id:\n                description: The ID of a rejected fragment\n                type: string\n                format: '[0-9a-f]+'\n              pool_number:\n                description: The number of the pool that caused this error\n                type: integer\n              reason:\n                description: |\n                  * `FragmentAlreadyInLog` -- this fragment was already processed by this node.\n                  * `FragmentInvalid` -- this fragment failed validation.\n                  * `PreviousFragmentInvalid` -- one of the previous fragments was rejected and `fail_fast` is enabled.\n                  * `PoolOverflow` -- One of the pools rejected this fragment due to reaching the capacity limit.\n                type: string\n                enum:\n                  - FragmentAlreadyInLog\n                  - FragmentInvalid\n                  - PreviousFragmentInvalid\n                  - PoolOverflow\n",
			"canonicalURL": "/github.com/input-output-hk/jormungandr@8da9f06845b8a78395ef558d1fa177678ff0cc49/-/blob/doc/api/v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/input-output-hk/jormungandr/blob/8da9f06845b8a78395ef558d1fa177678ff0cc49/doc/api/v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v1/fragments/logs\": get: responses: 200: contents: application/json: generate schema: item: field status: oneOf: oneOf FragmentLogsOKItemStatus: variant FragmentLogsOKItemStatus0: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference"
	]
}