{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/factset/enterprise-sdk"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "code/java/Signals/v2/api/openapi.yaml",
			"byteSize": 55226,
			"content": "openapi: 3.0.2\ninfo:\n  contact:\n    email: signals.api@factset.com\n    name: Signals API Support\n  description: Collection of endpoints for providing Signal Events, Definitions and\n    Metadata\n  title: Signals API\n  version: 2.4.0\nservers:\n- description: Production\n  url: https://api.factset.com/signals/v2\nsecurity:\n- FactSetApiKey: []\n- FactSetOAuth2: []\ntags:\n- description: Fetch signal events\n  name: Events\n- description: Fetch signal metadata\n  name: Metadata\npaths:\n  /events/headlines:\n    get:\n      description: Fetch Signals event headlines based on the filtering criteria\n      operationId: getEventHeadlines\n      parameters:\n      - description: A date/time interval for filtering signal events based on their\n          creation date. Defaults to NOW - 7 days if omitted.\n        examples:\n          default:\n            value: {}\n          lowerBound:\n            $ref: '#/components/examples/lowerBound'\n          upperBound:\n            $ref: '#/components/examples/upperBound'\n          bothBounds:\n            $ref: '#/components/examples/bothBounds'\n        explode: true\n        in: query\n        name: created\n        required: false\n        schema:\n          $ref: '#/components/schemas/DateTimeInterval'\n        style: deepObject\n      - description: A date/time interval for filtering signal events based on their\n          last updated date. Defaults to NOW - 7 days if omitted.\n        examples:\n          default:\n            value: {}\n          lowerBound:\n            $ref: '#/components/examples/lowerBound'\n          upperBound:\n            $ref: '#/components/examples/upperBound'\n          bothBounds:\n            $ref: '#/components/examples/bothBounds'\n        explode: true\n        in: query\n        name: updated\n        required: false\n        schema:\n          $ref: '#/components/schemas/DateTimeInterval'\n        style: deepObject\n      - example: dilutionTrigger,freeCashFlow\n        explode: true\n        in: query\n        name: signalIds\n        required: false\n        schema:\n          description: Comma delimited string of signalIds\n          type: string\n        style: form\n      - description: Comma delimited string of identifiers. An identifier can be a\n          ticker, FactSet entity id, CUSIP or ISIN. You must provide a list of identifiers\n          either via a ids or a portfolios parameter. If both are provided, only ids\n          filter is used.\n        example: FDS-US,AMZN-US\n        explode: true\n        in: query\n        name: ids\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Name of a portfolio file stored by FactSet. If the portfolio\n          contains more than 1,000 ids, only the first 1,000 ids are processed. e.g.\n          client:techstocks.ofdb\n        explode: true\n        in: query\n        name: portfolios\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Comma delimited string of theme ids. Full list of signal themes\n          can be viewed at /themes.\n        explode: true\n        in: query\n        name: themes\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Comma delimited string of category ids. Full list of signal categories\n          can be viewed at /categories.\n        explode: true\n        in: query\n        name: categories\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: A range for filtering signal events based on their relevancy\n          score.\n        examples:\n          lowerBound:\n            value:\n              gte: 0\n          upperBound:\n            value:\n              lt: 1\n          bothBounds:\n            value:\n              gt: 0\n              lt: 1\n        explode: true\n        in: query\n        name: userRelevanceScore\n        required: false\n        schema:\n          $ref: '#/components/schemas/RelevanceScoreRange'\n        style: deepObject\n      - description: Comma delimited string of sortable attributes. The sort order\n          for each sort attribute is ascending unless it is prefixed with a minus\n          sign, in which case it is descending. If sort is not provided, the default\n          sort applied is -userRelevanceScore (userRelevanceScore in descending order).\n        example: -userRelevanceScore,-eventDate\n        explode: true\n        in: query\n        name: sort\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/eventHeadlines'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Internal Server Error\n      tags:\n      - Events\n      x-accepts: application/json\n    post:\n      description: Fetch Signals event headlines based on the filtering criteria for\n        up to 1000 identifiers\n      operationId: postEventHeadlines\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/eventRequestBody'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/eventHeadlines'\n          description: OK\n      tags:\n      - Events\n      x-contentType: application/json\n      x-accepts: application/json\n  /events/details:\n    get:\n      description: Fetch Signals event headlines plus all additional event details\n        based on the filtering criteria\n      operationId: getEventDetails\n      parameters:\n      - description: A date/time interval for filtering signal events based on their\n          creation date. Defaults to NOW - 7 days if omitted.\n        examples:\n          default:\n            value: {}\n          lowerBound:\n            $ref: '#/components/examples/lowerBound'\n          upperBound:\n            $ref: '#/components/examples/upperBound'\n          bothBounds:\n            $ref: '#/components/examples/bothBounds'\n        explode: true\n        in: query\n        name: created\n        required: false\n        schema:\n          $ref: '#/components/schemas/DateTimeInterval'\n        style: deepObject\n      - description: A date/time interval for filtering signal events based on their\n          last updated date. Defaults to NOW - 7 days if omitted.\n        examples:\n          default:\n            value: {}\n          lowerBound:\n            $ref: '#/components/examples/lowerBound'\n          upperBound:\n            $ref: '#/components/examples/upperBound'\n          bothBounds:\n            $ref: '#/components/examples/bothBounds'\n        explode: true\n        in: query\n        name: updated\n        required: false\n        schema:\n          $ref: '#/components/schemas/DateTimeInterval'\n        style: deepObject\n      - example: dilutionTrigger,freeCashFlow\n        explode: true\n        in: query\n        name: signalIds\n        required: false\n        schema:\n          description: Comma delimited string of signalIds\n          type: string\n        style: form\n      - description: Comma delimited string of identifiers. An identifier can be a\n          ticker, FactSet entity id, CUSIP or ISIN. You must provide a list of identifiers\n          either via a ids or a portfolios parameter. If both are provided, only ids\n          filter is used.\n        example: FDS-US,AMZN-US\n        explode: true\n        in: query\n        name: ids\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Name of a portfolio file stored by FactSet. If the portfolio\n          contains more than 1,000 ids, only the first 1,000 ids are processed. e.g.\n          client:techstocks.ofdb\n        explode: true\n        in: query\n        name: portfolios\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Comma delimited string of theme ids. Full list of signal themes\n          can be viewed at /themes.\n        explode: true\n        in: query\n        name: themes\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Comma delimited string of category ids. Full list of signal categories\n          can be viewed at /categories.\n        explode: true\n        in: query\n        name: categories\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: A range for filtering signal events based on their relevancy\n          score.\n        examples:\n          lowerBound:\n            value:\n              gte: 0\n          upperBound:\n            value:\n              lt: 1\n          bothBounds:\n            value:\n              gt: 0\n              lt: 1\n        explode: true\n        in: query\n        name: userRelevanceScore\n        required: false\n        schema:\n          $ref: '#/components/schemas/RelevanceScoreRange'\n        style: deepObject\n      - description: Comma delimited string of sortable attributes. The sort order\n          for each sort attribute is ascending unless it is prefixed with a minus\n          sign, in which case it is descending. If sort is not provided, the default\n          sort applied is -userRelevanceScore (userRelevanceScore in descending order).\n        example: -userRelevanceScore,-eventDate\n        explode: true\n        in: query\n        name: sort\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/eventDetails'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Internal Server Error\n      tags:\n      - Events\n      x-accepts: application/json\n    post:\n      description: Fetch Signals event headlines plus all additional event details\n        for up to 1000 identifiers\n      operationId: postEventDetails\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/eventRequestBody'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/eventDetails'\n          description: OK\n      tags:\n      - Events\n      x-contentType: application/json\n      x-accepts: application/json\n  /events/details/{eventId}:\n    get:\n      description: Fetch Signals event headlines plus all additional event details\n        for a single requested Signal event\n      operationId: getEventDetailById\n      parameters:\n      - description: The UUID of the event to return.\n        explode: false\n        in: path\n        name: eventId\n        required: true\n        schema:\n          format: uuid\n          minimum: 1\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/eventDetail'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Not Found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Internal Server Error\n      tags:\n      - Events\n      x-accepts: application/json\n  /events/adaptive-cards:\n    get:\n      description: Fetch Microsoft's Adaptive Cards, which includes headlines and\n        event details data plus hyperlinks to FactSet reports, based on the filtering\n        criteria\n      operationId: getEventAdaptiveCards\n      parameters:\n      - description: A date/time interval for filtering signal events based on their\n          creation date. Defaults to NOW - 7 days if omitted.\n        examples:\n          default:\n            value: {}\n          lowerBound:\n            $ref: '#/components/examples/lowerBound'\n          upperBound:\n            $ref: '#/components/examples/upperBound'\n          bothBounds:\n            $ref: '#/components/examples/bothBounds'\n        explode: true\n        in: query\n        name: created\n        required: false\n        schema:\n          $ref: '#/components/schemas/DateTimeInterval'\n        style: deepObject\n      - description: A date/time interval for filtering signal events based on their\n          last updated date. Defaults to NOW - 7 days if omitted.\n        examples:\n          default:\n            value: {}\n          lowerBound:\n            $ref: '#/components/examples/lowerBound'\n          upperBound:\n            $ref: '#/components/examples/upperBound'\n          bothBounds:\n            $ref: '#/components/examples/bothBounds'\n        explode: true\n        in: query\n        name: updated\n        required: false\n        schema:\n          $ref: '#/components/schemas/DateTimeInterval'\n        style: deepObject\n      - example: dilutionTrigger,freeCashFlow\n        explode: true\n        in: query\n        name: signalIds\n        required: false\n        schema:\n          description: Comma delimited string of signalIds\n          type: string\n        style: form\n      - description: Comma delimited string of identifiers. An identifier can be a\n          ticker, FactSet entity id, CUSIP or ISIN. You must provide a list of identifiers\n          either via a ids or a portfolios parameter. If both are provided, only ids\n          filter is used.\n        example: FDS-US,AMZN-US\n        explode: true\n        in: query\n        name: ids\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Name of a portfolio file stored by FactSet. If the portfolio\n          contains more than 1,000 ids, only the first 1,000 ids are processed. e.g.\n          client:techstocks.ofdb\n        explode: true\n        in: query\n        name: portfolios\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Comma delimited string of theme ids. Full list of signal themes\n          can be viewed at /themes.\n        explode: true\n        in: query\n        name: themes\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Comma delimited string of category ids. Full list of signal categories\n          can be viewed at /categories.\n        explode: true\n        in: query\n        name: categories\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: A range for filtering signal events based on their relevancy\n          score.\n        examples:\n          lowerBound:\n            value:\n              gte: 0\n          upperBound:\n            value:\n              lt: 1\n          bothBounds:\n            value:\n              gt: 0\n              lt: 1\n        explode: true\n        in: query\n        name: userRelevanceScore\n        required: false\n        schema:\n          $ref: '#/components/schemas/RelevanceScoreRange'\n        style: deepObject\n      - description: Comma delimited string of sortable attributes. The sort order\n          for each sort attribute is ascending unless it is prefixed with a minus\n          sign, in which case it is descending. If sort is not provided, the default\n          sort applied is -userRelevanceScore (userRelevanceScore in descending order).\n        example: -userRelevanceScore,-eventDate\n        explode: true\n        in: query\n        name: sort\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/eventAdaptiveCards'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Internal Server Error\n      tags:\n      - Events\n      x-accepts: application/json\n  /events/adaptive-cards/{eventId}:\n    get:\n      description: Fetch Microsoft's Adaptive Cards, which includes headlines and\n        event details data plus hyperlinks to FactSet reports, for a single requested\n        Signal event\n      operationId: getEventAdaptiveCardById\n      parameters:\n      - description: The UUID of the event to return.\n        explode: false\n        in: path\n        name: eventId\n        required: true\n        schema:\n          format: uuid\n          minimum: 1\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/eventAdaptiveCard'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Not Found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Internal Server Error\n      tags:\n      - Events\n      x-accepts: application/json\n  /events/entities:\n    get:\n      description: Fetch FactSet entity IDs for events that match the filtering criteria\n      operationId: getEventEntities\n      parameters:\n      - description: A date/time interval for filtering signal events based on their\n          creation date. Defaults to NOW - 7 days if omitted.\n        examples:\n          default:\n            value: {}\n          lowerBound:\n            $ref: '#/components/examples/lowerBound'\n          upperBound:\n            $ref: '#/components/examples/upperBound'\n          bothBounds:\n            $ref: '#/components/examples/bothBounds'\n        explode: true\n        in: query\n        name: created\n        required: false\n        schema:\n          $ref: '#/components/schemas/DateTimeInterval'\n        style: deepObject\n      - description: A date/time interval for filtering signal events based on their\n          last updated date. Defaults to NOW - 7 days if omitted.\n        examples:\n          default:\n            value: {}\n          lowerBound:\n            $ref: '#/components/examples/lowerBound'\n          upperBound:\n            $ref: '#/components/examples/upperBound'\n          bothBounds:\n            $ref: '#/components/examples/bothBounds'\n        explode: true\n        in: query\n        name: updated\n        required: false\n        schema:\n          $ref: '#/components/schemas/DateTimeInterval'\n        style: deepObject\n      - example: dilutionTrigger,freeCashFlow\n        explode: true\n        in: query\n        name: signalIds\n        required: false\n        schema:\n          description: Comma delimited string of signalIds\n          type: string\n        style: form\n      - description: Comma delimited string of theme ids. Full list of signal themes\n          can be viewed at /themes.\n        explode: true\n        in: query\n        name: themes\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Comma delimited string of category ids. Full list of signal categories\n          can be viewed at /categories.\n        explode: true\n        in: query\n        name: categories\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: A range for filtering signal events based on their relevancy\n          score.\n        examples:\n          lowerBound:\n            value:\n              gte: 0\n          upperBound:\n            value:\n              lt: 1\n          bothBounds:\n            value:\n              gt: 0\n              lt: 1\n        explode: true\n        in: query\n        name: userRelevanceScore\n        required: false\n        schema:\n          $ref: '#/components/schemas/RelevanceScoreRange'\n        style: deepObject\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/eventsEntities'\n          description: OK\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Bad Request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Internal Server Error\n      tags:\n      - Events\n      x-accepts: application/json\n  /data-dictionary:\n    get:\n      description: Fetch a list of all active signals\n      operationId: getDataDictionary\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/signalMetaData'\n          description: OK\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Internal Server Error\n      tags:\n      - Metadata\n      x-accepts: application/json\n  /data-dictionary/{signalId}:\n    get:\n      description: Fetch the metadata and contract for the requested signal\n      operationId: getDataDictionaryById\n      parameters:\n      - example: dilutionTrigger\n        explode: false\n        in: path\n        name: signalId\n        required: true\n        schema:\n          description: A single signalId.\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/signalDefinition'\n          description: OK\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Internal Server Error\n      tags:\n      - Metadata\n      x-accepts: application/json\n  /themes:\n    get:\n      description: Fetch a list of available signal themes\n      operationId: getThemes\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/signalMetaData'\n          description: OK\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Internal Server Error\n      tags:\n      - Metadata\n      x-accepts: application/json\n  /categories:\n    get:\n      description: Fetch a list of available signal categories\n      operationId: getCategories\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/signalMetaData'\n          description: OK\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/errorResponse'\n          description: Internal Server Error\n      tags:\n      - Metadata\n      x-accepts: application/json\ncomponents:\n  examples:\n    lowerBound:\n      value:\n        gt: 2022-01-01T00:00:00.000Z\n    upperBound:\n      value:\n        lt: 2022-01-02T00:00:00.000Z\n    bothBounds:\n      value:\n        gt: 2022-01-01T00:00:00.000Z\n        lt: 2022-01-02T00:00:00.000Z\n  parameters:\n    createdParam:\n      description: A date/time interval for filtering signal events based on their\n        creation date. Defaults to NOW - 7 days if omitted.\n      examples:\n        default:\n          value: {}\n        lowerBound:\n          $ref: '#/components/examples/lowerBound'\n        upperBound:\n          $ref: '#/components/examples/upperBound'\n        bothBounds:\n          $ref: '#/components/examples/bothBounds'\n      explode: true\n      in: query\n      name: created\n      required: false\n      schema:\n        $ref: '#/components/schemas/DateTimeInterval'\n      style: deepObject\n    updatedParam:\n      description: A date/time interval for filtering signal events based on their\n        last updated date. Defaults to NOW - 7 days if omitted.\n      examples:\n        default:\n          value: {}\n        lowerBound:\n          $ref: '#/components/examples/lowerBound'\n        upperBound:\n          $ref: '#/components/examples/upperBound'\n        bothBounds:\n          $ref: '#/components/examples/bothBounds'\n      explode: true\n      in: query\n      name: updated\n      required: false\n      schema:\n        $ref: '#/components/schemas/DateTimeInterval'\n      style: deepObject\n    signalIdsParam:\n      example: dilutionTrigger,freeCashFlow\n      explode: true\n      in: query\n      name: signalIds\n      required: false\n      schema:\n        description: Comma delimited string of signalIds\n        type: string\n      style: form\n    idsParam:\n      description: Comma delimited string of identifiers. An identifier can be a ticker,\n        FactSet entity id, CUSIP or ISIN. You must provide a list of identifiers either\n        via a ids or a portfolios parameter. If both are provided, only ids filter\n        is used.\n      example: FDS-US,AMZN-US\n      explode: true\n      in: query\n      name: ids\n      required: false\n      schema:\n        type: string\n      style: form\n    portfoliosParam:\n      description: Name of a portfolio file stored by FactSet. If the portfolio contains\n        more than 1,000 ids, only the first 1,000 ids are processed. e.g. client:techstocks.ofdb\n      explode: true\n      in: query\n      name: portfolios\n      required: false\n      schema:\n        type: string\n      style: form\n    themesParam:\n      description: Comma delimited string of theme ids. Full list of signal themes\n        can be viewed at /themes.\n      explode: true\n      in: query\n      name: themes\n      required: false\n      schema:\n        type: string\n      style: form\n    categoriesParam:\n      description: Comma delimited string of category ids. Full list of signal categories\n        can be viewed at /categories.\n      explode: true\n      in: query\n      name: categories\n      required: false\n      schema:\n        type: string\n      style: form\n    relevanceScoreParam:\n      description: A range for filtering signal events based on their relevancy score.\n      examples:\n        lowerBound:\n          value:\n            gte: 0\n        upperBound:\n          value:\n            lt: 1\n        bothBounds:\n          value:\n            gt: 0\n            lt: 1\n      explode: true\n      in: query\n      name: userRelevanceScore\n      required: false\n      schema:\n        $ref: '#/components/schemas/RelevanceScoreRange'\n      style: deepObject\n    eventIdParam:\n      description: The UUID of the event to return.\n      explode: false\n      in: path\n      name: eventId\n      required: true\n      schema:\n        format: uuid\n        minimum: 1\n        type: string\n      style: simple\n    signalIdParam:\n      example: dilutionTrigger\n      explode: false\n      in: path\n      name: signalId\n      required: true\n      schema:\n        description: A single signalId.\n        type: string\n      style: simple\n    sortParam:\n      description: Comma delimited string of sortable attributes. The sort order for\n        each sort attribute is ascending unless it is prefixed with a minus sign,\n        in which case it is descending. If sort is not provided, the default sort\n        applied is -userRelevanceScore (userRelevanceScore in descending order).\n      example: -userRelevanceScore,-eventDate\n      explode: true\n      in: query\n      name: sort\n      required: false\n      schema:\n        type: string\n      style: form\n  schemas:\n    errorResponse:\n      properties:\n        message:\n          description: A short description of the error.\n          example: There was an error processing your request. Please try again later.\n          type: string\n        errors:\n          description: Optional list of errors. e.g. Validation errors for multiple\n            parameters\n          items:\n            $ref: '#/components/schemas/errorItem'\n          type: array\n      required:\n      - message\n      type: object\n    errorItem:\n      example:\n        code: parameterError\n        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n        detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n        source:\n          parameter: parameter\n        title: Invalid type/value\n      properties:\n        id:\n          format: uuid\n          type: string\n        code:\n          example: parameterError\n          type: string\n        title:\n          example: Invalid type/value\n          type: string\n        detail:\n          example: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          type: string\n        source:\n          $ref: '#/components/schemas/errorItem_source'\n      required:\n      - code\n      - id\n      - title\n      type: object\n    eventMeta:\n      example:\n        signalRequestId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n        idResolutions:\n          tickerRegion:\n            key: tickerRegion\n          regionalPermId:\n            key: regionalPermId\n      properties:\n        signalRequestId:\n          format: uuid\n          type: string\n        idResolutions:\n          $ref: '#/components/schemas/idResolutionsMeta'\n      required:\n      - idResolutions\n      - signalRequestId\n      type: object\n    eventsMeta:\n      example:\n        pagination:\n          total: 6\n          isEstimatedTotal: true\n        signalRequestId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n        idResolutions:\n          tickerRegion:\n            key: tickerRegion\n          regionalPermId:\n            key: regionalPermId\n        dateRange:\n          created:\n            lt: 2021-01-01T00:00:00Z\n            gte: 2021-01-01T00:00:00Z\n            lte: 2021-01-01T00:00:00Z\n            gt: 2021-01-01T00:00:00Z\n          updated:\n            lt: 2021-01-01T00:00:00Z\n            gte: 2021-01-01T00:00:00Z\n            lte: 2021-01-01T00:00:00Z\n            gt: 2021-01-01T00:00:00Z\n        sort:\n        - sort\n        - sort\n      properties:\n        signalRequestId:\n          format: uuid\n          type: string\n        sort:\n          items:\n            type: string\n          type: array\n        pagination:\n          $ref: '#/components/schemas/eventsMeta_pagination'\n        idResolutions:\n          $ref: '#/components/schemas/idResolutionsMeta'\n        dateRange:\n          $ref: '#/components/schemas/eventsMeta_dateRange'\n      required:\n      - dateRange\n      - idResolutions\n      - signalRequestId\n      type: object\n    idResolutionsMeta:\n      example:\n        tickerRegion:\n          key: tickerRegion\n        regionalPermId:\n          key: regionalPermId\n      properties:\n        tickerRegion:\n          additionalProperties:\n            nullable: true\n            type: string\n          type: object\n        regionalPermId:\n          additionalProperties:\n            nullable: true\n            type: string\n          type: object\n      type: object\n    screenMeta:\n      example:\n        signalRequestId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n        dateRange:\n          created:\n            lt: 2021-01-01T00:00:00Z\n            gte: 2021-01-01T00:00:00Z\n            lte: 2021-01-01T00:00:00Z\n            gt: 2021-01-01T00:00:00Z\n          updated:\n            lt: 2021-01-01T00:00:00Z\n            gte: 2021-01-01T00:00:00Z\n            lte: 2021-01-01T00:00:00Z\n            gt: 2021-01-01T00:00:00Z\n      properties:\n        signalRequestId:\n          format: uuid\n          type: string\n        dateRange:\n          $ref: '#/components/schemas/eventsMeta_dateRange'\n      required:\n      - dateRange\n      - signalRequestId\n      type: object\n    eventHeadlineDataItem:\n      example:\n        summary: summary\n        signalName: signalName\n        eventId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n        userRelevanceScore: 0.8008282\n        requestId: requestId\n        created: 2021-04-26T06:39:40.094Z\n        signalId: signalId\n        theme: theme\n        source: source\n        eventDate: 2000-01-23\n      properties:\n        requestId:\n          description: The id that was requested. This can be a ticker, cusip or factset\n            entity id.\n          type: string\n        signalId:\n          description: Signal Id for this event. e.g. dilutionTrigger\n          type: string\n        signalName:\n          description: Signal Name for this event. e.g. dilutionTrigger\n          type: string\n        theme:\n          description: Theme name of the signal for this event. e.g. Debt Capital\n            Structure\n          type: string\n        source:\n          description: Primary data provider for the signal this event belongs to.\n            e.g. FactSet, Bitvore\n          type: string\n        eventId:\n          description: A unique id for this event.\n          format: uuid\n          type: string\n        eventDate:\n          description: The UTC date/time of the event in ISO 8601 format.\n          format: date\n          type: string\n        summary:\n          description: One sentence summary of the event.\n          type: string\n        userRelevanceScore:\n          description: Relevancy score of this event for the requesting user on a\n            scale of 0 to 1. Higher value indicates more relevancy.\n          format: float\n          type: number\n        created:\n          description: Date/Time in UTC the event was first recorded in our data store.\n          example: 2021-04-26T06:39:40.094Z\n          format: date-time\n          type: string\n      required:\n      - eventDate\n      - eventId\n      - requestId\n      - signalId\n      - signalName\n      - source\n      - summary\n      - theme\n      - userRelevanceScore\n      type: object\n    eventDetailDataItem:\n      allOf:\n      - $ref: '#/components/schemas/eventHeadlineDataItem'\n      - $ref: '#/components/schemas/eventDetailDataItem_allOf'\n    eventAdaptiveDataItem:\n      example:\n        requestId: FDS-US\n        signalId: dilutionTrigger\n        adaptiveCard:\n          key: '{}'\n      properties:\n        requestId:\n          description: The id that was requested, ticker, cusip, factset entity id\n            etc.\n          example: FDS-US\n          type: string\n        signalId:\n          description: Signal Id for this event.\n          example: dilutionTrigger\n          type: string\n        adaptiveCard:\n          additionalProperties: true\n          description: A JSON object that's compliant with MS adaptive card schema.\n          type: object\n      required:\n      - adaptiveCard\n      - requestId\n      - signalId\n      type: object\n    eventHeadlines:\n      example:\n        data:\n        - summary: summary\n          signalName: signalName\n          eventId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          userRelevanceScore: 0.8008282\n          requestId: requestId\n          created: 2021-04-26T06:39:40.094Z\n          signalId: signalId\n          theme: theme\n          source: source\n          eventDate: 2000-01-23\n        - summary: summary\n          signalName: signalName\n          eventId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          userRelevanceScore: 0.8008282\n          requestId: requestId\n          created: 2021-04-26T06:39:40.094Z\n          signalId: signalId\n          theme: theme\n          source: source\n          eventDate: 2000-01-23\n        meta:\n          pagination:\n            total: 6\n            isEstimatedTotal: true\n          signalRequestId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          idResolutions:\n            tickerRegion:\n              key: tickerRegion\n            regionalPermId:\n              key: regionalPermId\n          dateRange:\n            created:\n              lt: 2021-01-01T00:00:00Z\n              gte: 2021-01-01T00:00:00Z\n              lte: 2021-01-01T00:00:00Z\n              gt: 2021-01-01T00:00:00Z\n            updated:\n              lt: 2021-01-01T00:00:00Z\n              gte: 2021-01-01T00:00:00Z\n              lte: 2021-01-01T00:00:00Z\n              gt: 2021-01-01T00:00:00Z\n          sort:\n          - sort\n          - sort\n        errors:\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/eventHeadlineDataItem'\n          type: array\n        meta:\n          $ref: '#/components/schemas/eventsMeta'\n        errors:\n          items:\n            $ref: '#/components/schemas/errorItem'\n          type: array\n      required:\n      - data\n      - meta\n      type: object\n    eventDetail:\n      example:\n        meta:\n          signalRequestId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          idResolutions:\n            tickerRegion:\n              key: tickerRegion\n            regionalPermId:\n              key: regionalPermId\n        errors:\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n      properties:\n        data:\n          $ref: '#/components/schemas/eventDetailDataItem'\n        meta:\n          $ref: '#/components/schemas/eventMeta'\n        errors:\n          items:\n            $ref: '#/components/schemas/errorItem'\n          type: array\n      required:\n      - data\n      - meta\n      type: object\n    eventDetails:\n      example:\n        data:\n        - null\n        - null\n        meta:\n          signalRequestId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          idResolutions:\n            tickerRegion:\n              key: tickerRegion\n            regionalPermId:\n              key: regionalPermId\n        errors:\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/eventDetailDataItem'\n          type: array\n        meta:\n          $ref: '#/components/schemas/eventMeta'\n        errors:\n          items:\n            $ref: '#/components/schemas/errorItem'\n          type: array\n      required:\n      - data\n      - meta\n      type: object\n    eventAdaptiveCard:\n      example:\n        data:\n          requestId: FDS-US\n          signalId: dilutionTrigger\n          adaptiveCard:\n            key: '{}'\n        meta:\n          signalRequestId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          idResolutions:\n            tickerRegion:\n              key: tickerRegion\n            regionalPermId:\n              key: regionalPermId\n        errors:\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n      properties:\n        data:\n          $ref: '#/components/schemas/eventAdaptiveDataItem'\n        meta:\n          $ref: '#/components/schemas/eventMeta'\n        errors:\n          items:\n            $ref: '#/components/schemas/errorItem'\n          type: array\n      required:\n      - data\n      - meta\n      type: object\n    eventAdaptiveCards:\n      example:\n        data:\n        - requestId: FDS-US\n          signalId: dilutionTrigger\n          adaptiveCard:\n            key: '{}'\n        - requestId: FDS-US\n          signalId: dilutionTrigger\n          adaptiveCard:\n            key: '{}'\n        meta:\n          signalRequestId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          idResolutions:\n            tickerRegion:\n              key: tickerRegion\n            regionalPermId:\n              key: regionalPermId\n        errors:\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/eventAdaptiveDataItem'\n          type: array\n        meta:\n          $ref: '#/components/schemas/eventMeta'\n        errors:\n          items:\n            $ref: '#/components/schemas/errorItem'\n          type: array\n      required:\n      - data\n      - meta\n      type: object\n    eventRequestBody:\n      properties:\n        created:\n          allOf:\n          - $ref: '#/components/schemas/DateTimeInterval'\n          description: A date/time interval for filtering signal events based on their\n            creation date. Defaults to NOW - 7 days if omitted.\n        updated:\n          allOf:\n          - $ref: '#/components/schemas/DateTimeInterval'\n          description: A date/time interval for filtering signal events based on their\n            last updated date. Defaults to NOW - 24 hours if omitted.\n        signalIds:\n          description: Comma delimited string of signalIds\n          example: dilutionTrigger,freeCashFlow\n          type: string\n        ids:\n          description: Comma delimited string of identifiers. An identifier can be\n            a ticker, FactSet entity id, CUSIP or ISIN. Only the first 1,000 ids are\n            processed. You must provide a list of identifiers either via a ids or\n            a portfolios parameter. If both are provided, only ids filter is used.\n          example: FDS-US,AMZN-US\n          type: string\n        portfolios:\n          description: Name of a portfolio file stored by FactSet. If the portfolio\n            contains more than 1,000 ids, only the first 1,000 ids are processed.\n            e.g. client:techstocks.ofdb\n          type: string\n        themes:\n          description: Comma delimited string of theme ids. Full list of signal themes\n            can be viewed at /themes.\n          type: string\n        categories:\n          description: Comma delimited string of category ids. Full list of signal\n            categories can be viewed at /categories.\n          type: string\n        userRelevanceScore:\n          allOf:\n          - $ref: '#/components/schemas/RelevanceScoreRange'\n          description: A range for filtering signal events based on their relevancy\n            score.\n        sort:\n          description: Comma delimited string of sortable attributes. The sort order\n            for each sort attribute is ascending unless it is prefixed with a minus\n            sign, in which case it is descending.\n          type: string\n      type: object\n    eventsEntities:\n      example:\n        data:\n        - 0016YD-E\n        - 0016YD-E\n        meta:\n          signalRequestId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          dateRange:\n            created:\n              lt: 2021-01-01T00:00:00Z\n              gte: 2021-01-01T00:00:00Z\n              lte: 2021-01-01T00:00:00Z\n              gt: 2021-01-01T00:00:00Z\n            updated:\n              lt: 2021-01-01T00:00:00Z\n              gte: 2021-01-01T00:00:00Z\n              lte: 2021-01-01T00:00:00Z\n              gt: 2021-01-01T00:00:00Z\n        errors:\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n        - code: parameterError\n          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n          detail: Value must be a valid UTC date/time that conforms to ISO 8601 format\n          source:\n            parameter: parameter\n          title: Invalid type/value\n      properties:\n        data:\n          items:\n            description: The FactSet entity ID of a company with an event\n            example: 0016YD-E\n            type: string\n          type: array\n        meta:\n          $ref: '#/components/schemas/screenMeta'\n        errors:\n          items:\n            $ref: '#/components/schemas/errorItem'\n          type: array\n      required:\n      - data\n      - meta\n      type: object\n    signalMetaData:\n      example:\n        data:\n        - name: name\n          description: description\n          id: id\n        - name: name\n          description: description\n          id: id\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/signalMetaData_data'\n          type: array\n      required:\n      - data\n      type: object\n    signalDefinition:\n      example:\n        data:\n          signalId: signalId\n          contract:\n            fields:\n              summary:\n                description: description\n                type: type\n              additionalProperties:\n                description: description\n                optional: true\n                type: type\n                items:\n                  type: type\n              eventDate:\n                description: description\n                type: 2000-01-23T04:56:07.000+00:00\n            version: version\n          theme: theme\n          categories:\n          - categories\n          - categories\n      properties:\n        data:\n          $ref: '#/components/schemas/signalDefinition_data'\n      required:\n      - data\n      type: object\n    contract:\n      example:\n        fields:\n          summary:\n            description: description\n            type: type\n          additionalProperties:\n            description: description\n            optional: true\n            type: type\n            items:\n              type: type\n          eventDate:\n            description: description\n            type: 2000-01-23T04:56:07.000+00:00\n        version: version\n      properties:\n        fields:\n          $ref: '#/components/schemas/contractFields'\n        version:\n          type: string\n      required:\n      - fields\n      - version\n      type: object\n    contractFields:\n      example:\n        summary:\n          description: description\n          type: type\n        additionalProperties:\n          description: description\n          optional: true\n          type: type\n          items:\n            type: type\n        eventDate:\n          description: description\n          type: 2000-01-23T04:56:07.000+00:00\n      properties:\n        summary:\n          $ref: '#/components/schemas/contractFields_summary'\n        eventDate:\n          $ref: '#/components/schemas/contractFields_eventDate'\n        additionalProperties:\n          $ref: '#/components/schemas/contractProperty'\n      required:\n      - eventDate\n      - summary\n      type: object\n    contractProperty:\n      example:\n        description: description\n        optional: true\n        type: type\n        items:\n          type: type\n      properties:\n        description:\n          type: string\n        type:\n          type: string\n        optional:\n          type: boolean\n        items:\n          $ref: '#/components/schemas/contractProperty_items'\n      required:\n      - description\n      - type\n      type: object\n    DateTime:\n      description: A date/time string in ISO 8601 format.\n      example: 2021-01-01T00:00:00Z\n      format: date-time\n      type: string\n    RelevanceScoreRange:\n      description: |\n        Represents a valid range for user relevancy score for signal events. The upper bound of the range is represented by the attribute **gt** or **gte**. The lower bound of the range is presented by **lt** or **lte** The range can contain either of the bounds or both. e.g. { \"gt\": 0.4, \"lt\": 0.8 }\n      minProperties: 1\n      properties:\n        gt:\n          format: float\n          type: number\n        gte:\n          format: float\n          type: number\n        lt:\n          format: float\n          type: number\n        lte:\n          format: float\n          type: number\n      type: object\n    DateTimeInterval:\n      description: |\n        Represents a valid date/time interval. The upper bound of the interval is represented by the attribute **gt** or **gte**. The lower bound of the interval is presented by **lt** or **lte** The interval can contain either of the bounds or both. e.g. { \"gt\": \"2021-05-01T00:00:00.000Z\", \"lt\": \"2021-05-08T00:00:00.000Z\" }\n      example:\n        lt: 2021-01-01T00:00:00Z\n        gte: 2021-01-01T00:00:00Z\n        lte: 2021-01-01T00:00:00Z\n        gt: 2021-01-01T00:00:00Z\n      minProperties: 1\n      properties:\n        gt:\n          description: A date/time string in ISO 8601 format.\n          example: 2021-01-01T00:00:00Z\n          format: date-time\n          type: string\n        gte:\n          description: A date/time string in ISO 8601 format.\n          example: 2021-01-01T00:00:00Z\n          format: date-time\n          type: string\n        lt:\n          description: A date/time string in ISO 8601 format.\n          example: 2021-01-01T00:00:00Z\n          format: date-time\n          type: string\n        lte:\n          description: A date/time string in ISO 8601 format.\n          example: 2021-01-01T00:00:00Z\n          format: date-time\n          type: string\n      type: object\n    errorItem_source:\n      example:\n        parameter: parameter\n      properties:\n        parameter:\n          type: string\n      type: object\n    eventsMeta_pagination:\n      example:\n        total: 6\n        isEstimatedTotal: true\n      properties:\n        total:\n          type: integer\n        isEstimatedTotal:\n          type: boolean\n      type: object\n    eventsMeta_dateRange:\n      example:\n        created:\n          lt: 2021-01-01T00:00:00Z\n          gte: 2021-01-01T00:00:00Z\n          lte: 2021-01-01T00:00:00Z\n          gt: 2021-01-01T00:00:00Z\n        updated:\n          lt: 2021-01-01T00:00:00Z\n          gte: 2021-01-01T00:00:00Z\n          lte: 2021-01-01T00:00:00Z\n          gt: 2021-01-01T00:00:00Z\n      properties:\n        created:\n          $ref: '#/components/schemas/DateTimeInterval'\n        updated:\n          $ref: '#/components/schemas/DateTimeInterval'\n      type: object\n    eventDetailDataItem_allOf:\n      properties:\n        created:\n          description: Date/Time in UTC the event was first recorded in our data store.\n          example: 2021-04-26T06:39:40.094Z\n          format: date-time\n          type: string\n        updated:\n          description: Date/Time in UTC the event was last updated.\n          example: 2021-04-26T06:39:40.094Z\n          format: date-time\n          type: string\n        details:\n          additionalProperties: true\n          description: Signal specific event properties.\n          type: object\n      required:\n      - created\n      - details\n      - updated\n      type: object\n    signalMetaData_data:\n      example:\n        name: name\n        description: description\n        id: id\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n      required:\n      - description\n      - id\n      - name\n      type: object\n    signalDefinition_data:\n      example:\n        signalId: signalId\n        contract:\n          fields:\n            summary:\n              description: description\n              type: type\n            additionalProperties:\n              description: description\n              optional: true\n              type: type\n              items:\n                type: type\n            eventDate:\n              description: description\n              type: 2000-01-23T04:56:07.000+00:00\n          version: version\n        theme: theme\n        categories:\n        - categories\n        - categories\n      properties:\n        signalId:\n          type: string\n        theme:\n          type: string\n        categories:\n          items:\n            type: string\n          type: array\n        contract:\n          $ref: '#/components/schemas/contract'\n      required:\n      - categories\n      - contract\n      - signalId\n      - theme\n      type: object\n    contractFields_summary:\n      example:\n        description: description\n        type: type\n      properties:\n        description:\n          type: string\n        type:\n          type: string\n      type: object\n    contractFields_eventDate:\n      example:\n        description: description\n        type: 2000-01-23T04:56:07.000+00:00\n      properties:\n        description:\n          type: string\n        type:\n          format: date-time\n          type: string\n      type: object\n    contractProperty_items:\n      example:\n        type: type\n      properties:\n        type:\n          type: string\n      required:\n      - type\n      type: object\n  securitySchemes:\n    FactSetOAuth2:\n      flows:\n        clientCredentials:\n          scopes: {}\n          tokenUrl: https://auth.factset.com/as/token.oauth2\n      type: oauth2\n    FactSetApiKey:\n      scheme: basic\n      type: http\n\n",
			"canonicalURL": "/github.com/factset/enterprise-sdk@dcf75a02daedc726c313912a349d2863114bc92c/-/blob/code/java/Signals/v2/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/factset/enterprise-sdk/blob/dcf75a02daedc726c313912a349d2863114bc92c/code/java/Signals/v2/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/categories\": get: security: security \"FactSetOAuth2\" (index 1): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}