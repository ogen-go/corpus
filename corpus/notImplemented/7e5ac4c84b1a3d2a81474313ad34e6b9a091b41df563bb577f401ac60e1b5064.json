{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cosmo-workspace/cosmo"
		},
		"file": {
			"name": "openapi-v1alpha1.yaml",
			"size": 0,
			"path": "api/openapi/dashboard/openapi-v1alpha1.yaml",
			"byteSize": 29085,
			"content": "openapi: 3.0.3\ninfo:\n  title: Cosmo Dashboard API\n  description: Manipulate cosmo dashboard resource API\n  termsOfService: https://github.com/cosmo-workspace/cosmo/\n  contact:\n    name: Author\n    url: https://github.com/jlandowner\n    email: jlandowner8@gmail.com\n  license:\n    name: MIT\n    url: https://github.com/cosmo-workspace/cosmo/blob/main/LICENSE\n  version: v1alpha1\nservers:\n  - url: https://cosmo-dashboard.cosmo-system.svc.cluster.local:8443\n    description: Dashboard server in Kubernetes cluster\n\n#-------------------------------------------\n# paths\n#-------------------------------------------\npaths:\n  /api/v1alpha1/auth/login:\n    post:\n      tags:\n        - auth\n      operationId: login\n      summary: Login\n      description: Create session to login\n      parameters: []\n      requestBody:\n        description: ID and password to login\n        required: true\n        content:\n          application/json:\n            schema:\n              title: LoginRequest\n              type: object\n              required:\n                - id\n                - password\n              properties:\n                id:\n                  type: string\n                password:\n                  type: string\n      responses:\n        \"200\":\n          description: Successfully new session created\n          content:\n            application/json:\n              schema:\n                title: LoginResponse\n                type: object\n                required:\n                  - id\n                  - expireAt\n                properties:\n                  id:\n                    type: string\n                  expireAt:\n                    type: string\n                    format: date-time\n                  requirePasswordUpdate:\n                    type: boolean\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/auth/verify:\n    post:\n      tags:\n        - auth\n      operationId: verify\n      summary: Verify auth\n      description: Verify authorization\n      security:\n        - cookieAuth: []\n      parameters: []\n      responses:\n        \"200\":\n          description: Session verified\n          content:\n            application/json:\n              schema:\n                title: VerifyResponse\n                type: object\n                required:\n                  - id\n                  - expireAt\n                properties:\n                  id:\n                    type: string\n                  expireAt:\n                    type: string\n                    format: date-time\n                  requirePasswordUpdate:\n                    type: boolean\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/auth/logout:\n    post:\n      tags:\n        - auth\n      operationId: logout\n      summary: Logout\n      description: Delete session to logout\n      security:\n        - cookieAuth: []\n      parameters: []\n      responses:\n        \"200\":\n          description: Successfully logged out\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/template/workspace:\n    get:\n      tags:\n        - template\n      operationId: getWorkspaceTemplates\n      summary: List workspace templates\n      description: List templates typed workspace\n      security:\n        - cookieAuth: []\n      parameters: []\n      responses:\n        \"200\":\n          description: A JSON array of Template model\n          content:\n            application/json:\n              schema:\n                title: ListTemplatesResponse\n                type: object\n                required:\n                  - items\n                properties:\n                  message:\n                    type: string\n                  items:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Template\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/template/useraddon:\n    get:\n      tags:\n        - template\n      operationId: getUserAddonTemplates\n      summary: List useraddon templates\n      description: List templates typed useraddon\n      security:\n        - cookieAuth: []\n      parameters: []\n      responses:\n        \"200\":\n          description: A JSON array of Template model\n          content:\n            application/json:\n              schema:\n                title: ListTemplatesResponse\n                type: object\n                required:\n                  - items\n                properties:\n                  message:\n                    type: string\n                  items:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Template\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/user:\n    get:\n      tags:\n        - user\n      operationId: getUsers\n      summary: Get all users.\n      description: Returns an array of User model\n      security:\n        - cookieAuth: []\n      parameters: []\n      responses:\n        \"200\":\n          description: A JSON array of User model\n          content:\n            application/json:\n              schema:\n                title: ListUsersResponse\n                type: object\n                required:\n                  - items\n                properties:\n                  message:\n                    type: string\n                  items:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/User\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n    post:\n      tags:\n        - user\n      operationId: postUser\n      summary: Create a new User\n      description: Create a new User\n      security:\n        - cookieAuth: []\n      parameters: []\n      requestBody:\n        description: user to create\n        required: true\n        content:\n          application/json:\n            schema:\n              title: CreateUserRequest\n              type: object\n              required:\n                - id\n              properties:\n                id:\n                  type: string\n                displayName:\n                  type: string\n                role:\n                  type: string\n                authType:\n                  type: string\n                addons:\n                  type: array\n                  items:\n                    type: object\n                    required:\n                      - template\n                    properties:\n                      template:\n                        type: string\n                      vars:\n                        type: object\n                        additionalProperties:\n                          type: string\n\n      responses:\n        \"201\":\n          description: Successfully user created\n          content:\n            application/json:\n              schema:\n                title: CreateUserResponse\n                type: object\n                required:\n                  - message\n                  - user\n                properties:\n                  message:\n                    type: string\n                  user:\n                    $ref: \"#/components/schemas/User\"\n\n        \"400\": { $ref: \"#/components/responses/400_BadRequest\" }\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"429\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/user/{userid}:\n    get:\n      tags:\n        - user\n      operationId: getUser\n      summary: Get user by ID.\n      description: Returns a single User model\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: A single User model\n          content:\n            application/json:\n              schema:\n                title: GetUserResponse\n                type: object\n                required:\n                  - user\n                properties:\n                  user:\n                    $ref: \"#/components/schemas/User\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"404\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n    delete:\n      tags:\n        - user\n      operationId: deleteUser\n      summary: Delete user by ID.\n      description: Delete user by ID\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successfully user deleted\n          content:\n            application/json:\n              schema:\n                title: DeleteUserResponse\n                type: object\n                required:\n                  - message\n                  - user\n                properties:\n                  message:\n                    type: string\n                  user:\n                    $ref: \"#/components/schemas/User\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"404\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/user/{userid}/name:\n    put:\n      tags:\n        - user\n      operationId: putUserName\n      summary: Update user name\n      description: Update user display name\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: name to update\n        required: true\n        content:\n          application/json:\n            schema:\n              title: UpdateUserNameRequest\n              type: object\n              required:\n                - displayName\n              properties:\n                displayName:\n                  type: string\n      responses:\n        \"200\":\n          description: Successfully user updated\n          content:\n            application/json:\n              schema:\n                title: UpdateUserNameResponse\n                type: object\n                required:\n                  - message\n                  - user\n                properties:\n                  message:\n                    type: string\n                  user:\n                    $ref: \"#/components/schemas/User\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"404\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/user/{userid}/role:\n    put:\n      tags:\n        - user\n      operationId: putUserRole\n      summary: Update user role\n      description: Update a single User role\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: role to update\n        required: true\n        content:\n          application/json:\n            schema:\n              title: UpdateUserRoleRequest\n              type: object\n              properties:\n                role:\n                  type: string\n      responses:\n        \"200\":\n          description: Successfully user updated\n          content:\n            application/json:\n              schema:\n                title: UpdateUserRoleResponse\n                type: object\n                required:\n                  - message\n                  - user\n                properties:\n                  message:\n                    type: string\n                  user:\n                    $ref: \"#/components/schemas/User\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"404\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/user/{userid}/password:\n    put:\n      tags:\n        - user\n      operationId: putUserPassword\n      summary: Update user password\n      description: Update a single User password\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: password to update\n        required: true\n        content:\n          application/json:\n            schema:\n              title: UpdateUserPasswordRequest\n              type: object\n              required:\n                - currentPassword\n                - newPassword\n              properties:\n                currentPassword:\n                  type: string\n                newPassword:\n                  type: string\n      responses:\n        \"200\":\n          description: Successfully password updated\n          content:\n            application/json:\n              schema:\n                title: UpdateUserPasswordResponse\n                type: object\n                required:\n                  - message\n                properties:\n                  message:\n                    type: string\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"404\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/user/{userid}/workspace:\n    get:\n      tags:\n        - workspace\n      operationId: getWorkspaces\n      summary: Get all workspace of user.\n      description: Returns an array of Workspace model\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: A JSON array of Workspace model\n          content:\n            application/json:\n              schema:\n                title: ListWorkspaceResponse\n                type: object\n                required:\n                  - items\n                properties:\n                  message:\n                    type: string\n                  items:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Workspace\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n    post:\n      tags:\n        - workspace\n      operationId: postWorkspace\n      summary: Create a new Workspace\n      description: Create a new Workspace\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: workspace to create\n        required: true\n        content:\n          application/json:\n            schema:\n              title: CreateWorkspaceRequest\n              type: object\n              required:\n                - name\n                - template\n              properties:\n                name:\n                  type: string\n                template:\n                  type: string\n                vars:\n                  type: object\n                  additionalProperties:\n                    type: string\n      responses:\n        \"201\":\n          description: Successfully workspace created\n          content:\n            application/json:\n              schema:\n                title: CreateWorkspaceResponse\n                type: object\n                required:\n                  - message\n                  - workspace\n                properties:\n                  message:\n                    type: string\n                  workspace:\n                    $ref: \"#/components/schemas/Workspace\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"404\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"429\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/user/{userid}/workspace/{wsName}:\n    get:\n      tags:\n        - workspace\n      operationId: getWorkspace\n      summary: Get workspace by name.\n      description: Returns a single Workspace model\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n        - name: wsName\n          in: path\n          description: workspace name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: A single Workspace model\n          content:\n            application/json:\n              schema:\n                title: GetWorkspaceResponse\n                type: object\n                required:\n                  - workspace\n                properties:\n                  workspace:\n                    $ref: \"#/components/schemas/Workspace\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"404\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n    delete:\n      tags:\n        - workspace\n      operationId: deleteWorkspace\n      summary: Delete workspace.\n      description: Delete workspace\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n        - name: wsName\n          in: path\n          description: workspace name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successfully workspace deleted\n          content:\n            application/json:\n              schema:\n                title: DeleteWorkspaceResponse\n                type: object\n                required:\n                  - message\n                  - workspace\n                properties:\n                  message:\n                    type: string\n                  workspace:\n                    $ref: \"#/components/schemas/Workspace\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"404\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n    patch:\n      tags:\n        - workspace\n      operationId: patchWorkspace\n      summary: Update workspace.\n      description: Update workspace\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n        - name: wsName\n          in: path\n          description: workspace name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: workspace to update\n        required: true\n        content:\n          application/json:\n            schema:\n              title: PatchWorkspaceRequest\n              type: object\n              properties:\n                replicas:\n                  type: integer\n                  format: int64\n                  nullable: true\n      responses:\n        \"200\":\n          description: Successfully workspace updated\n          content:\n            application/json:\n              schema:\n                title: PatchWorkspaceResponse\n                type: object\n                required:\n                  - message\n                  - workspace\n                properties:\n                  message:\n                    type: string\n                  workspace:\n                    $ref: \"#/components/schemas/Workspace\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"404\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n  /api/v1alpha1/user/{userid}/workspace/{wsName}/network/{networkRuleName}:\n    put:\n      tags:\n        - workspace\n      operationId: putNetworkRule\n      summary: Upsert workspace network rule\n      description: Upsert workspace network rule\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n        - name: wsName\n          in: path\n          description: workspace name\n          required: true\n          schema:\n            type: string\n        - name: networkRuleName\n          in: path\n          description: network rule name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: network rule to upsert\n        required: true\n        content:\n          application/json:\n            schema:\n              title: UpsertNetworkRuleRequest\n              type: object\n              required:\n                - portNumber\n              properties:\n                portNumber:\n                  type: integer\n                group:\n                  type: string\n                httpPath:\n                  type: string\n                public:\n                  type: boolean\n\n      responses:\n        \"200\":\n          description: Successfully network rule upserted\n          content:\n            application/json:\n              schema:\n                title: UpsertNetworkRuleResponse\n                type: object\n                required:\n                  - message\n                  - networkRule\n                properties:\n                  message:\n                    type: string\n                  networkRule:\n                    $ref: \"#/components/schemas/NetworkRule\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n    delete:\n      tags:\n        - workspace\n      operationId: deleteNetworkRule\n      summary: Remove workspace network rule\n      description: Remove workspace network rule\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: userid\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: string\n        - name: wsName\n          in: path\n          description: workspace name\n          required: true\n          schema:\n            type: string\n        - name: networkRuleName\n          in: path\n          description: network rule name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successfully network rule removed\n          content:\n            application/json:\n              schema:\n                title: RemoveNetworkRuleResponse\n                type: object\n                required:\n                  - message\n                  - networkRule\n                properties:\n                  message:\n                    type: string\n                  networkRule:\n                    $ref: \"#/components/schemas/NetworkRule\"\n\n        \"401\": { $ref: \"#/components/responses/401_Unauthorized\" }\n        \"403\": { $ref: \"#/components/responses/403_Forbidden\" }\n        \"404\": { $ref: \"#/components/responses/404_NotFound\" }\n        \"500\": { $ref: \"#/components/responses/500_InternalServerError\" }\n\n#-------------------------------------------\n# components\n#-------------------------------------------\ncomponents:\n  responses:\n    400_BadRequest:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorResponse\"\n\n    401_Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorResponse\"\n\n    403_Forbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorResponse\"\n\n    404_NotFound:\n      description: Not found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorResponse\"\n\n    429_TooManyRequests:\n      description: Too many requests, or Already exist.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorResponse\"\n\n    500_InternalServerError:\n      description: Internal server error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorResponse\"\n\n    503_ServiceUnavailable:\n      description: Service unavailable\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorResponse\"\n\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: cosmo-dashboard\n\n  schemas:\n    ErrorResponse:\n      type: object\n      properties:\n        message:\n          type: string\n\n    Template:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        requiredVars:\n          type: array\n          items:\n            type: object\n            required:\n              - varName\n            properties:\n              varName:\n                type: string\n              defaultValue:\n                type: string\n        isDefaultUserAddon:\n          nullable: true\n          type: boolean\n\n    User:\n      type: object\n      nullable: true\n      required:\n        - id\n      properties:\n        id:\n          type: string\n        displayName:\n          type: string\n        role:\n          type: string\n          enum:\n            - cosmo-admin\n        authType:\n          type: string\n          enum:\n            - kosmo-secret\n        addons:\n          type: array\n          items:\n            type: object\n            required:\n              - template\n            properties:\n              template:\n                type: string\n              vars:\n                type: object\n                additionalProperties:\n                  type: string\n        defaultPassword:\n          type: string\n        status:\n          type: string\n\n    Workspace:\n      type: object\n      nullable: true\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        ownerID: # todo: require\n          type: string\n        spec: # todo: require\n          $ref: \"#/components/schemas/WorkspaceSpec\"\n        status: # todo: require\n          $ref: \"#/components/schemas/WorkspaceStatus\"\n\n    WorkspaceSpec:\n      type: object\n      required:\n        - template\n        - replicas\n      properties:\n        template:\n          type: string\n        replicas:\n          type: integer\n          format: int64\n        vars:\n          type: object\n          additionalProperties:\n            type: string\n        additionalNetwork:\n          type: array\n          items:\n            $ref: \"#/components/schemas/NetworkRule\"\n\n    WorkspaceStatus:\n      type: object\n      required:\n        - phase\n      properties:\n        phase:\n          type: string\n        mainUrl:\n          type: string\n        urlBase:\n          type: string\n\n    NetworkRule:\n      type: object\n      required:\n        - portName\n        - portNumber\n        - public\n      properties:\n        portName:\n          type: string\n        portNumber:\n          type: integer\n        group:\n          type: string\n        httpPath:\n          type: string\n        url:\n          type: string\n        public:\n          type: boolean\n",
			"canonicalURL": "/github.com/cosmo-workspace/cosmo@fad7f7422bb8878b55d5d49ebb1f293f554246d2/-/blob/api/openapi/dashboard/openapi-v1alpha1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/cosmo-workspace/cosmo/blob/fad7f7422bb8878b55d5d49ebb1f293f554246d2/api/openapi/dashboard/openapi-v1alpha1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v1alpha1/user/{userid}/name\": put: security: security \"cookieAuth\" (index 0): cookie security not implemented",
	"NotImplemented": [
		"cookie security"
	]
}