{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/rudder.example.local/13/openapi.yaml",
			"byteSize": 326956,
			"content": "openapi: 3.0.3\nservers:\n  - description: Rudder server\n    url: https://rudder.example.local/rudder/api/latest/\ninfo:\n  contact:\n    email: dev@rudder.io\n    name: Rudder developers\n    url: https://www.rudder.io\n  description: |+\n    Download OpenAPI specification: [openapi.yml](openapi.yml)\n\n    # Introduction\n\n    Rudder exposes a REST API, enabling the user to interact with Rudder without using the webapp, for example in scripts or cronjobs.\n\n    ## Versioning\n\n    Each time the API is extended with new features (new functions, new parameters, new responses, ...), it will be assigned a new version number. This will allow you\n    to keep your existing scripts (based on previous behavior). Versions will always be integers (no 2.1 or 3.3, just 2, 3, 4, ...) or `latest`.\n\n    You can change the version of the API used by setting it either within the url or in a header:\n\n    * the URL: each URL is prefixed by its version id, like `/api/version/function`.\n\n\n        # Version 10\n        curl -X GET -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/10/rules\n        # Latest\n        curl -X GET -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/rules\n        # Wrong (not an integer) =\u003e 404 not found\n        curl -X GET -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/3.14/rules\n\n\n    * the HTTP headers. You can add the **X-API-Version** header to your request. The value needs to be an integer or `latest`.\n\n\n        # Version 10\n        curl -X GET -H \"X-API-Token: yourToken\" -H \"X-API-Version: 10\" https://rudder.example.com/rudder/api/rules\n        # Wrong =\u003e Error response indicating which versions are available\n        curl -X GET -H \"X-API-Token: yourToken\" -H \"X-API-Version: 3.14\" https://rudder.example.com/rudder/api/rules\n\n\n    In the future, we may declare some versions as deprecated, in order to remove them in a later version of Rudder, but we will never remove any versions without warning, or without a safe\n    period of time to allow migration from previous versions.\n\n\n    \u003ch4\u003eExisting versions\u003c/h4\u003e\n    \u003ctable\u003e\n      \u003cthead\u003e\n        \u003ctr\u003e\n          \u003cth style=\"width: 20%\"\u003eVersion\u003c/th\u003e\n          \u003cth style=\"width: 20%\"\u003eRudder versions it appeared in\u003c/th\u003e\n          \u003cth style=\"width: 70%\"\u003eDescription\u003c/th\u003e\n        \u003c/tr\u003e\n      \u003c/thead\u003e\n      \u003ctbody\u003e\n        \u003ctr\u003e\n          \u003ctd class=\"code\"\u003e1\u003c/td\u003e\n          \u003ctd class=\"code\"\u003eNever released (for internal use only)\u003c/td\u003e\n          \u003ctd\u003eExperimental version\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd class=\"code\"\u003e2 to 10 (deprecated)\u003c/td\u003e\n          \u003ctd class=\"code\"\u003e4.3 and before\u003c/td\u003e\n          \u003ctd\u003eThese versions provided the core set of API features for rules, directives, nodes global parameters, change requests and compliance, rudder settings and system API\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd class=\"code\"\u003e11\u003c/td\u003e\n          \u003ctd class=\"code\"\u003e5.0\u003c/td\u003e\n          \u003ctd\u003eNew system API (replacing old localhost v1 api): status, maintenance operations and server behavior\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd class=\"code\"\u003e12\u003c/td\u003e\n          \u003ctd class=\"code\"\u003e6.0 and 6.1\u003c/td\u003e\n          \u003ctd\u003eNode key management\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd class=\"code\"\u003e13\u003c/td\u003e\n          \u003ctd class=\"code\"\u003e6.2\u003c/td\u003e\n          \u003ctd\u003e\u003cul\u003e\n            \u003cli\u003eNode status endpoint\u003c/li\u003e\n            \u003cli\u003eSystem health check\u003c/li\u003e\n            \u003cli\u003eSystem maintenance job to purge software [that endpoint was back-ported in 6.1]\u003c/li\u003e\n          \u003c/ul\u003e\u003c/td\u003e\n        \u003c/tr\u003e\n\n      \u003c/tbody\u003e\n    \u003c/table\u003e\n\n\n    ## Response format\n\n    All responses from the API are in the JSON format.\n\n\n        {\n          \"action\": The name of the called function,\n          \"id\": The ID of the element you want, if relevant,\n          \"result\": The result of your action: success or error,\n          \"data\": Only present if this is a success and depends on the function, it's usually a JSON object,\n          \"errorDetails\": Only present if this is an error, it contains the error message\n        }\n\n\n\n    * __Success__ responses are sent with the 200 HTTP (Success) code\n\n    * __Error__ responses are sent with a HTTP error code (mostly 5xx...)\n\n\n    ## HTTP method\n\n    Rudder's REST API is based on the usage of [HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html). We use them to indicate what action will be done by the request. Currently, we use four of them:\n\n\n    * **GET**: search or retrieve information (get rule details, get a group, ...)\n\n    * **PUT**: add new objects (create a directive, clone a Rule, ...)\n\n    * **DELETE**: remove objects (delete a node, delete a parameter, ...)\n\n    * **POST**: update existing objects (update a directive, reload a group, ...)\n\n\n    ## Parameters\n\n    ### General parameters\n\n    Some parameters are available for almost all API functions. They will be described in this section.\n    They must be part of the query and can't be submitted in a JSON form.\n\n    #### Available for all requests\n\n    \u003ctable\u003e\n      \u003cthead\u003e\n        \u003ctr\u003e\n          \u003cth style=\"width: 30%\"\u003eField\u003c/th\u003e\n          \u003cth style=\"width: 10%\"\u003eType\u003c/th\u003e\n          \u003cth style=\"width: 70%\"\u003eDescription\u003c/th\u003e\n        \u003c/tr\u003e\n      \u003c/thead\u003e\n      \u003ctbody\u003e\n        \u003ctr\u003e\n          \u003ctd class=\"code\"\u003eprettify\u003c/td\u003e\n          \u003ctd\u003e\u003cb\u003eboolean\u003c/b\u003e\u003cbr\u003e\u003ci\u003eoptional\u003c/i\u003e\u003c/td\u003e\n          \u003ctd\u003e\n            Determine if the answer should be prettified (human friendly) or not. We recommend using this for debugging purposes, but not for general script usage as this does add some unnecessary load on the server side.\n            \u003cp class=\"default-value\"\u003eDefault value: \u003ccode\u003efalse\u003c/code\u003e\u003c/p\u003e\n          \u003c/td\u003e\n        \u003c/tr\u003e\n      \u003c/tbody\u003e\n    \u003c/table\u003e\n\n\n    #### Available for modification requests (PUT/POST/DELETE)\n\n    \u003ctable\u003e\n      \u003cthead\u003e\n        \u003ctr\u003e\n          \u003cth style=\"width: 25%\"\u003eField\u003c/th\u003e\n          \u003cth style=\"width: 12%\"\u003eType\u003c/th\u003e\n          \u003cth style=\"width: 70%\"\u003eDescription\u003c/th\u003e\n        \u003c/tr\u003e\n      \u003c/thead\u003e\n      \u003ctbody\u003e\n        \u003ctr\u003e\n          \u003ctd class=\"code\"\u003ereason\u003c/td\u003e\n          \u003ctd\u003e\u003cb\u003estring\u003c/b\u003e\u003cbr\u003e\u003ci\u003eoptional\u003c/i\u003e or \u003ci\u003erequired\u003c/i\u003e\u003c/td\u003e\n          \u003ctd\u003e\n            Set a message to explain the change. If you set the reason messages to be mandatory in the web interface, failing to supply this value will lead to an error.\n            \u003cp class=\"default-value\"\u003eDefault value: \u003ccode\u003e\"\"\u003c/code\u003e\u003c/p\u003e\n          \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd class=\"code\"\u003echangeRequestName\u003c/td\u003e\n          \u003ctd\u003e\u003cb\u003estring\u003c/b\u003e\u003cbr\u003e\u003ci\u003eoptional\u003c/i\u003e\u003c/td\u003e\n          \u003ctd\u003e\n            Set the change request name, is used only if workflows are enabled. The default value depends on the function called\n            \u003cp class=\"default-value\"\u003eDefault value: \u003ccode\u003eA default string for each function\u003c/code\u003e\u003c/p\u003e\n          \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd class=\"code\"\u003echangeRequestDescription\u003c/td\u003e\n          \u003ctd\u003e\u003cb\u003estring\u003c/b\u003e\u003cbr\u003e\u003ci\u003eoptional\u003c/i\u003e\u003c/td\u003e\n          \u003ctd\u003e\n            Set the change request description, is used only if workflows are enabled.\n            \u003cp class=\"default-value\"\u003eDefault value: \u003ccode\u003e\"\"\u003c/code\u003e\u003c/p\u003e\n          \u003c/td\u003e\n        \u003c/tr\u003e\n      \u003c/tbody\u003e\n    \u003c/table\u003e\n\n\n    ### Passing parameters\n\n    Parameters to the API can be sent:\n\n    * As part of the URL for resource identification\n\n    * As data for POST/PUT requests\n\n      * Directly in JSON format\n\n      * As request arguments\n\n    #### As part of the URL for resource identification\n\n    Parameters in URLs are used to indicate which resource you want to interact with. The function will not work if this resource is missing.\n\n\n        # Get the Rule of ID \"id\"\n        curl -H \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/rules/id\n\n    #### Sending data for POST/PUT requests\n\n    ##### Directly in JSON format\n\n    JSON format is the preferred way to interact with Rudder API for creating or updating resources.\n    You'll also have to set the *Content-Type* header to **application/json** (without it the JSON content would be ignored).\n    In a `curl` `POST` request, that header can be provided with the `-H` parameter:\n\n        curl -X POST -H \"Content-Type: application/json\" ...\n\n\n    The supplied file must contain a valid JSON: strings need quotes, booleans and integers don't, etc.\n\n    The (human readable) format is:\n\n    ```json\n    {\n      \"key1\": \"value1\",\n      \"key2\": false,\n      \"key3\": 42\n    }\n    ```\n\n\n    Here is an example with inlined data:\n\n\n\n        # Update the Rule 'id' with a new name, disabled, and setting it one directive\n        curl -X POST -H \"X-API-Token: yourToken\" -H  \"Content-Type: application/json\"\n          https://rudder.example.com/rudder/api/rules/latest/{id}\n          -d '{ \"displayName\": \"new name\", \"enabled\": false, \"directives\": \"directiveId\"}'\n\n\n\n    You can also pass a supply the JSON in a file:\n\n\n        # Update the Rule 'id' with a new name, disabled, and setting it one directive\n        curl -X POST -H \"X-API-Token: yourToken\" -H \"Content-Type: application/json\" https://rudder.example.com/rudder/api/rules/latest/{id} -d @jsonParam\n\n\n    Note that the general parameters view in the previous chapter cannot be passed in a JSON, and you will need to pass them a URL parameters if you want them to be taken into account (you can't mix JSON and request parameters):\n\n        # Update the Rule 'id' with a new name, disabled, and setting it one directive with reason message \"Reason used\"\n        curl -X POST -H \"X-API-Token: yourToken\" -H \"Content-Type: application/json\" \"https://rudder.example.com/rudder/api/rules/latest/{id}?reason=Reason used\" -d @jsonParam -d \"reason=Reason ignored\"\n\n\n    ##### Request parameters\n\n    In some cases, when you have little, simple data to update, JSON can feel bloated. In such cases, you can use\n    request parameters. You will need to pass one parameter for each data you want to change.\n\n    Parameters follow the following schema:\n\n\n        key=value\n\n\n    You can pass parameters by two means:\n\n    * As query parameters: At the end of your url, put a **?** then your first parameter and then a **\u0026** before next parameters\n\n\n        # Update the Rule 'id' with a new name, disabled, and setting it one directive\n        curl -X POST -H \"X-API-Token: yourToken\"  https://rudder.example.com/rudder/api/rules/latest/{id}?\"displayName=my new name\"\u0026\"enabled=false\"\u0026\"directives=aDirectiveId\"\n\n\n    * As request data: You can pass those parameters in the request data, they won't figure in the URL, making it lighter to read, You can pass a file that contains data.\n\n\n        # Update the Rule 'id' with a new name, disabled, and setting it one directive (in file directive-info.json)\n        curl -X POST -H \"X-API-Token: yourToken\"\n        https://rudder.example.com/rudder/api/rules/latest/{id} -d \"displayName=my new name\" -d \"enabled=false\" -d @directive-info.json\n\n  license:\n    name: CC-BY-SA 2.0\n    url: https://spdx.org/licenses/CC-BY-SA-2.0.html\n  title: Rudder API\n  version: \"13\"\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    url: https://www.rudder.io/wp-content/uploads/2019/11/color_logo_horizontal_dark_bg-1024x176.png\n  x-origin:\n    - format: openapi\n      url: https://docs.rudder.io/api/openapi.yml\n      version: \"3.0\"\n  x-providerName: rudder.example.local\nexternalDocs:\n  description: Learn more about Rudder.\n  url: https://docs.rudder.io\nsecurity:\n  - API-Tokens: []\ntags:\n  - description: Information about API endpoints and versions\n    name: API Info\n  - description: Access compliance data\n    name: Compliance\n  - description: Rules management\n    name: Rules\n  - description: Directives management\n    name: Directives\n  - description: Techniques management\n    name: Techniques\n  - description: Groups management\n    name: Groups\n  - description: Nodes management\n    name: Nodes\n  - description: Inventory processing service\n    name: Inventories\n  - description: Global parameters\n    name: Parameters\n  - description: Server configuration\n    name: Settings\n  - description: Internal components and administration\n    name: System\n  - description: |-\n      **Requires that the `changes-validation` plugin is installed on the server.**\n\n      Manage change requests.\n    name: 🧩 Change requests\n  - description: |-\n      **Requires that the `cve` plugin is installed on the server.**\n\n      Manage CVE plugins data and configuration.\n    name: 🧩 CVE\n  - description: |-\n      **Requires that the `datasources` plugin is installed on the server.**\n\n      Data sources plugin configuration.\n    name: 🧩 Data sources\n  - description: |-\n      **Requires that the `scale-out-relay` plugin is installed on the server.**\n\n      Manage relays.\n    name: 🧩 Scale out Relay\n  - description: |-\n      **Requires that the `create-node` plugin is installed on the server.**\n\n      Add new nodes.\n    name: 🧩 Create Node\n  - description: |-\n      **Requires that the `user-management` plugin is installed on the server.**\n\n      Manage users settings and configuration file.\n    name: 🧩 User Management\n  - description: |-\n      **Requires that the `branding` plugin is installed on the server.**\n\n      Manage web interface customization.\n    name: 🧩 Branding\npaths:\n  /api/changeRequests:\n    get:\n      description: List all change requests\n      operationId: listChangeRequests\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listChangeRequests\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          $ref: \"#/components/schemas/change-request\"\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Change requests information\n      summary: List all change requests\n      tags:\n        - 🧩 Change requests\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/changeRequests --data \"status=open\"\n  /branding:\n    get:\n      description: Get all web interface customization parameters\n      operationId: getBrandingConf\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getBrandingConf\n                    type: string\n                  data:\n                    properties:\n                      branding:\n                        $ref: \"#/components/schemas/branding-conf\"\n                    required:\n                      - branding\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Branding configuration\n      summary: Get branding configuration\n      tags:\n        - 🧩 Branding\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/branding\n    post:\n      description: change color, logo, label etc.\n      operationId: updateBRandingConf\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/branding-conf\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updateBRandingConf\n                    type: string\n                  data:\n                    properties:\n                      branding:\n                        $ref: \"#/components/schemas/branding-conf\"\n                    required:\n                      - branding\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Updated\n      summary: Update web interface customization\n      tags:\n        - 🧩 Branding\n      x-code-samples:\n        - lang: curl\n          source: |+\n            update.json:\n\n            {\n            \t\"displayBar\":true,\n            \t\"displayLabel\":false,\n            \t\"labelText\":\"Production\",\n            \t\"barColor\":{\n            \t\t\"red\":1,\n            \t\t\"blue\":1,\n            \t\t\"green\":1,\n            \t\t\"alpha\":1\n            \t},\n            \t\"labelColor\":{\n            \t\t\"red\":0,\n            \t\t\"blue\":0,\n            \t\t\"green\":0,\n            \t\t\"alpha\":1\n            \t},\n            \t\"wideLogo\":{\n            \t\t\"enable\":true\n            \t},\n            \t\"smallLogo\":{\n            \t\t\"enable\":true\n            \t},\n            \t\"displayBarLogin\":true,\n            \t\"displayMotd\":true,\n            \t\"motd\":\"Welcome, please sign in:\"\n            }\n\n            curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/branding --header \"Content-type: application/json\" --data @update.json\n\n  /branding/reload:\n    post:\n      description: Reload the configuration from file\n      operationId: reloadBrandingConf\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getBrandingConf\n                    type: string\n                  data:\n                    properties:\n                      branding:\n                        $ref: \"#/components/schemas/branding-conf\"\n                    required:\n                      - branding\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Branding configuration\n      summary: Reload branding file\n      tags:\n        - 🧩 Branding\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/branding/reload\n  \"/changeRequests/{changeRequestId}\":\n    delete:\n      description: Refuse a change request\n      operationId: declineChangeRequest\n      parameters:\n        - $ref: \"#/components/parameters/change-request-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - declineChangeRequest\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          $ref: \"#/components/schemas/change-request\"\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Change requests information\n      summary: Decline a request details\n      tags:\n        - 🧩 Change requests\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request DELETE https://rudder.example.com/rudder/api/latest/changeRequests/43'\n    get:\n      description: Get a change request details\n      operationId: changeRequestDetails\n      parameters:\n        - $ref: \"#/components/parameters/change-request-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - changeRequestDetails\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          $ref: \"#/components/schemas/change-request\"\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Change requests information\n      summary: Get a change request details\n      tags:\n        - 🧩 Change requests\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/changeRequests --data \"status=open\"\n    post:\n      description: Update a change request\n      operationId: updateChangeRequest\n      parameters:\n        - $ref: \"#/components/parameters/change-request-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                description:\n                  description: Change request description\n                  type: string\n                name:\n                  description: Change request name\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updateChangeRequest\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          $ref: \"#/components/schemas/change-request\"\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Change requests information\n      summary: Update a request details\n      tags:\n        - 🧩 Change requests\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/changeRequests/42  --data \"name=new Name of change request\" -d \"description=add a new description\"'\n  \"/changeRequests/{changeRequestId}/accept\":\n    post:\n      description: Accept a change request\n      operationId: acceptChangeRequest\n      parameters:\n        - $ref: \"#/components/parameters/change-request-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                status:\n                  description: New status of the change request\n                  enum:\n                    - pending deployment\n                    - deployed\n                  example: deployed\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - acceptChangeRequest\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          $ref: \"#/components/schemas/change-request\"\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Change requests information\n      summary: Accept a request details\n      tags:\n        - 🧩 Change requests\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/changeRequests --data \"status=open\"'\n  /compliance:\n    get:\n      description: Get current global compliance of a Rudder server\n      operationId: getGlobalCompliance\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getGlobalCompliance\n                    type: string\n                  data:\n                    properties:\n                      globalCompliance:\n                        properties:\n                          compliance:\n                            description: Global compliance level (`-1` when no policies are defined)\n                            example: 57\n                            format: integer\n                            type: number\n                          complianceDetails:\n                            properties:\n                              error:\n                                example: 1.32\n                                format: float\n                                type: number\n                              noReport:\n                                example: 36.18\n                                format: float\n                                type: number\n                              successAlreadyOK:\n                                example: 48.68\n                                format: float\n                                type: number\n                              successNotApplicable:\n                                example: 5.92\n                                format: float\n                                type: number\n                              successRepaired:\n                                example: 2.63\n                                format: float\n                                type: number\n                              unexpectedMissingComponent:\n                                example: 2.63\n                                format: float\n                                type: number\n                              unexpectedUnknownComponent:\n                                example: 2.63\n                                format: float\n                                type: number\n                            type: object\n                        required:\n                          - compliance\n                        type: object\n                    required:\n                      - globalCompliance\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    example: success\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Success\n      summary: Global compliance\n      tags:\n        - Compliance\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/compliance?prettify=true'\"\n  /compliance/nodes:\n    get:\n      description: Get current compliance of all the nodes of a Rudder server\n      operationId: getNodesCompliance\n      parameters:\n        - $ref: \"#/components/parameters/compliance-level\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getNodesCompliance\n                    type: string\n                  data:\n                    properties:\n                      nodes:\n                        items:\n                          properties:\n                            compliance:\n                              description: Rule compliance level\n                              example: 57.43\n                              format: float\n                              type: number\n                            complianceDetails:\n                              properties:\n                                error:\n                                  example: 1.32\n                                  format: float\n                                  type: number\n                                noReport:\n                                  example: 36.18\n                                  format: float\n                                  type: number\n                                successAlreadyOK:\n                                  example: 48.68\n                                  format: float\n                                  type: number\n                                successNotApplicable:\n                                  example: 5.92\n                                  format: float\n                                  type: number\n                                successRepaired:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                                unexpectedMissingComponent:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                                unexpectedUnknownComponent:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                              type: object\n                            id:\n                              description: id of the node\n                              example: f37f4928-fcb5-4acf-a422-d40f123a9670\n                              format: uuid\n                              type: string\n                            mode:\n                              enum:\n                                - full-compliance\n                                - changes-only\n                                - reports-disabled\n                              type: string\n                          required:\n                            - id\n                            - mode\n                            - compliance\n                            - complianceDetails\n                          type: object\n                        type: array\n                    required:\n                      - nodes\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    example: success\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Success\n      summary: Compliance details for all nodes\n      tags:\n        - Compliance\n      x-code-samples:\n        - lang: curl\n          source: |+\n            # To get the compliance information of a specific node\n            curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/compliance/nodes?level=2'\n\n            # To get the list of nodes which have a compliance \u003c100 for a given directive (c5881268-5612-48f2-8ef4-0ab8387fccd6) \n            curl -k -H \"X-API-Token: yourToken\" -X GET \"https://rudder.example.com/rudder/api/latest/compliance/nodes?level=3\" \\\n            | jq '[.data.nodes[] \n              | {\n                  \"nodeid\":.id, \n                  \"dirs\": [.rules[].directives[]] \n                    | map(select(.id == \"c5881268-5612-48f2-8ef4-0ab8387fccd6\" and .compliance \u003c 100)) \n                }\n              ] \n            | map(select(.dirs | length != 0)) \n            | [.[] |\n                {\"nodeid\":.nodeid, \"comp\":.dirs[0].complianceDetails}\n              ]'\n\n  \"/compliance/nodes/{nodeId}\":\n    get:\n      description: Get current compliance of a node of a Rudder server\n      operationId: getNodeCompliance\n      parameters:\n        - $ref: \"#/components/parameters/compliance-level\"\n        - $ref: \"#/components/parameters/node-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getNodeCompliance\n                    type: string\n                  data:\n                    properties:\n                      nodes:\n                        items:\n                          properties:\n                            compliance:\n                              description: Rule compliance level\n                              example: 57.43\n                              format: float\n                              type: number\n                            complianceDetails:\n                              properties:\n                                error:\n                                  example: 1.32\n                                  format: float\n                                  type: number\n                                noReport:\n                                  example: 36.18\n                                  format: float\n                                  type: number\n                                successAlreadyOK:\n                                  example: 48.68\n                                  format: float\n                                  type: number\n                                successNotApplicable:\n                                  example: 5.92\n                                  format: float\n                                  type: number\n                                successRepaired:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                                unexpectedMissingComponent:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                                unexpectedUnknownComponent:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                              type: object\n                            id:\n                              description: id of the node\n                              example: f37f4928-fcb5-4acf-a422-d40f123a9670\n                              format: uuid\n                              type: string\n                            mode:\n                              enum:\n                                - full-compliance\n                                - changes-only\n                                - reports-disabled\n                              type: string\n                          required:\n                            - id\n                            - mode\n                            - compliance\n                            - complianceDetails\n                          type: object\n                        type: array\n                    required:\n                      - nodes\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    example: success\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Success\n      summary: Compliance details by node\n      tags:\n        - Compliance\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/compliance/nodes/root?level=1'\"\n  /compliance/rules:\n    get:\n      description: Get current compliance of all the rules of a Rudder server\n      operationId: getRulesCompliance\n      parameters:\n        - $ref: \"#/components/parameters/compliance-level\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getRulesCompliance\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          properties:\n                            compliance:\n                              description: Rule compliance level\n                              example: 57.43\n                              format: float\n                              type: number\n                            complianceDetails:\n                              properties:\n                                error:\n                                  example: 1.32\n                                  format: float\n                                  type: number\n                                noReport:\n                                  example: 36.18\n                                  format: float\n                                  type: number\n                                successAlreadyOK:\n                                  example: 48.68\n                                  format: float\n                                  type: number\n                                successNotApplicable:\n                                  example: 5.92\n                                  format: float\n                                  type: number\n                                successRepaired:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                                unexpectedMissingComponent:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                                unexpectedUnknownComponent:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                              type: object\n                            id:\n                              description: id of the rule\n                              example: f37f4928-fcb5-4acf-a422-d40f123a9670\n                              format: uuid\n                              type: string\n                            mode:\n                              enum:\n                                - full-compliance\n                                - changes-only\n                                - reports-disabled\n                              type: string\n                          required:\n                            - id\n                            - mode\n                            - compliance\n                            - complianceDetails\n                          type: object\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    example: success\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Success\n      summary: Compliance details for all rules\n      tags:\n        - Compliance\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/compliance/rules?level=2'\"\n  \"/compliance/rules/{ruleId}\":\n    get:\n      description: Get current compliance of a rule of a Rudder server\n      operationId: getRuleCompliance\n      parameters:\n        - $ref: \"#/components/parameters/compliance-level\"\n        - $ref: \"#/components/parameters/rule-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getRuleCompliance\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          properties:\n                            compliance:\n                              description: Rule compliance level\n                              example: 57.43\n                              format: float\n                              type: number\n                            complianceDetails:\n                              properties:\n                                error:\n                                  example: 1.32\n                                  format: float\n                                  type: number\n                                noReport:\n                                  example: 36.18\n                                  format: float\n                                  type: number\n                                successAlreadyOK:\n                                  example: 48.68\n                                  format: float\n                                  type: number\n                                successNotApplicable:\n                                  example: 5.92\n                                  format: float\n                                  type: number\n                                successRepaired:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                                unexpectedMissingComponent:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                                unexpectedUnknownComponent:\n                                  example: 2.63\n                                  format: float\n                                  type: number\n                              type: object\n                            id:\n                              description: id of the rule\n                              example: f37f4928-fcb5-4acf-a422-d40f123a9670\n                              format: uuid\n                              type: string\n                            mode:\n                              enum:\n                                - full-compliance\n                                - changes-only\n                                - reports-disabled\n                              type: string\n                          required:\n                            - id\n                            - mode\n                            - compliance\n                            - complianceDetails\n                          type: object\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    example: success\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Success\n      summary: Compliance details by rule\n      tags:\n        - Compliance\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/compliance/rules?level=2'\"\n  /createnodes:\n    put:\n      description: Create a new node\n      operationId: createNodes\n      parameters:\n        - $ref: \"#/components/parameters/node-info\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - createNodes\n                    type: string\n                  data:\n                    properties:\n                      created:\n                        items:\n                          description: created nodes ID\n                          example: 378740d3-c4a9-4474-8485-478e7e52db52\n                          type: string\n                        type: array\n                      failed:\n                        items:\n                          description: failed nodes ID\n                          type: string\n                        type: array\n                    required:\n                      - created\n                      - failed\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Creation informations\n      summary: Create a new node\n      tags:\n        - 🧩 Create Node\n      x-code-samples:\n        - lang: curl\n          source: |+\n            nodes.json:\n\n            [\n              {\n                \"id\":\"378740d3-c4a9-4474-8485-478e7e52db52\",\n                \"hostname\":\"my.node.hostname.local\",\n                \"status\":\"accepted\",\n                \"os\":{\n                  \"type\":\"linux\",\n                  \"name\":\"debian\",\n                  \"version\":\"9.5\",\n                  \"fullName\":\"Debian GNU/Linux 9 (stretch)\"\n                },\n                \"policyServerId\":\"root\",\n                \"machineType\":\"vmware\",\n                \"state\":\"enabled\",\n                \"policyMode\":\"enforce\",\n                \"agentKey\":{\n                  \"value\":\"----BEGIN CERTIFICATE---- ....\"\n                },\n                \"properties\":{\n                  \"tags\":[\n                    \"some\",\n                    \"tags\"\n                  ],\n                  \"env\":\"prod\",\n                  \"vars\":{\n                    \"var1\":\"value1\",\n                    \"var2\":\"value2\"\n                  }\n                },\n                \"ipAddresses\":[\n                  \"192.168.180.90\",\n                  \"127.0.0.1\"\n                ],\n                \"timezone\":{\n                  \"name\":\"CEST\",\n                  \"offset\":\"+0200\"\n                }\n              }\n            ]\n\n            curl --header \"X-API-Token: yourToken\" --request PUT https://rudder.example.com/rudder/api/latest/createnodes --header \"Content-type: application/json\" --data @nodes.json\n\n  /cve:\n    get:\n      description: Get all CVE details\n      operationId: getAllCve\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getAllCve\n                    type: string\n                  data:\n                    properties:\n                      CVEs:\n                        items:\n                          $ref: \"#/components/schemas/cveDetails\"\n                        type: array\n                    required:\n                      - CVEs\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: CVE check result\n      summary: Get all CVE details\n      tags:\n        - 🧩 CVE\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/cve'\n  /cve/check:\n    post:\n      description: Trigger a CVE check\n      operationId: checkCVE\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - checkCVE\n                    type: string\n                  data:\n                    properties:\n                      cveChecks:\n                        items:\n                          $ref: \"#/components/schemas/cveCheck\"\n                        type: array\n                    required:\n                      - cveChecks\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: CVE check result\n      summary: Trigger a CVE check\n      tags:\n        - 🧩 CVE\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/cve/check'\n  /cve/check/config:\n    get:\n      description: Get CVE check config\n      operationId: getCVECheckConfiguration\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getCVECheckConfiguration\n                    type: string\n                  data:\n                    properties:\n                      apiKey:\n                        description: Token used by to contact the API to check CVE\n                        type: string\n                      url:\n                        description: Url used to check CVE\n                        example: https://api.rudder.io/cve/v1/\n                        type: string\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: CVE check config\n      summary: Get CVE check config\n      tags:\n        - 🧩 CVE\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/cve/check/config'\n    post:\n      description: Update cve check config\n      operationId: updateCVECheckConfiguration\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: CVE check config\n              properties:\n                apiKey:\n                  description: Token used by to contact the API to check CVE\n                  type: string\n                url:\n                  description: Url used to check CVE\n                  example: https://api.rudder.io/cve/v1/\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updateCVECheckConfiguration\n                    type: string\n                  data:\n                    properties:\n                      apiKey:\n                        description: Token used by to contact the API to check CVE\n                        type: string\n                      url:\n                        description: Url used to check CVE\n                        example: https://api.rudder.io/cve/v1/\n                        type: string\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: new CVE check config\n      summary: Update cve check config\n      tags:\n        - 🧩 CVE\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/cve/check/config'\n  /cve/check/last:\n    get:\n      description: Get last CVE check result\n      operationId: getLastCVECheck\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getLastCVECheck\n                    type: string\n                  data:\n                    properties:\n                      CVEChecks:\n                        items:\n                          $ref: \"#/components/schemas/cveCheck\"\n                        type: array\n                    required:\n                      - CVEChecks\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Last CVE check\n      summary: Get last CVE check result\n      tags:\n        - 🧩 CVE\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/cve/check/last'\n  /cve/list:\n    post:\n      description: Get CVE details, from a list passed a paremeter\n      operationId: getCVEList\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: cveList\n              properties:\n                cveIds:\n                  items:\n                    description: CVE id\n                    example: CVE-2019-5953\n                    type: string\n                  type: array\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getCVEList\n                    type: string\n                  data:\n                    properties:\n                      CVEs:\n                        items:\n                          $ref: \"#/components/schemas/cveDetails\"\n                        type: array\n                    required:\n                      - CVEs\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: CVE list\n      summary: Get a list of CVE details\n      tags:\n        - 🧩 CVE\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/cve/list'\n  /cve/update/:\n    post:\n      description: Update CVE database from remote source\n      operationId: updateCVE\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: CVE update config\n              properties:\n                url:\n                  description: Url used to update CVE, will default to one set in config\n                  example: https://nvd.nist.gov/feeds/json/cve/1.1\n                  type: string\n                years:\n                  items:\n                    description: Year of the CVE archive to download\n                    example: \"2019\"\n                    type: string\n                  type: array\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updateCVE\n                    type: string\n                  data:\n                    properties:\n                      CVEs:\n                        example: 12345\n                        type: integer\n                    required:\n                      - CVEs\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: updated CVE count\n      summary: Update CVE database from remote source\n      tags:\n        - 🧩 CVE\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/cve/update'\n  /cve/update/fs:\n    post:\n      description: Update CVE database from file system\n      operationId: readCVEfromFS\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - readCVEfromFS\n                    type: string\n                  data:\n                    properties:\n                      CVEs:\n                        example: 12345\n                        type: integer\n                    required:\n                      - CVEs\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: updated CVE count\n      summary: Update CVE database from file system\n      tags:\n        - 🧩 CVE\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/cve/update/FS'\n  /datasources:\n    get:\n      description: Get the configuration of all present data sources\n      operationId: getAllDataSources\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getAllDataSources\n                    type: string\n                  data:\n                    properties:\n                      datasources:\n                        items:\n                          $ref: \"#/components/schemas/datasource\"\n                        type: array\n                    required:\n                      - datasources\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Data sources information\n      summary: List all data sources\n      tags:\n        - 🧩 Data sources\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/datasources'\"\n    put:\n      description: Create a new data source\n      operationId: createDataSource\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/datasource\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - createDataSource\n                    type: string\n                  data:\n                    description: Information about the data sources\n                    properties:\n                      datasources:\n                        items:\n                          $ref: \"#/components/schemas/datasource\"\n                        type: array\n                    required:\n                      - datasources\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Created\n      summary: Create a data source\n      tags:\n        - 🧩 Data sources\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request PUT https://rudder.example.com/rudder/api/latest/datasources --header \"Content-type: application/json\" --data @datasources.json'\n  /datasources/reload:\n    post:\n      description: Update properties from all data source on all nodes. The call is asynchronous.\n      operationId: ReloadAllDatasourcesAllNodes\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - ReloadAllDatasourcesAllNodes\n                    type: string\n                  data:\n                    example: Data for all nodes, for all configured data sources are going to be updated\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Data source reloaded\n      summary: Update properties from data sources\n      tags:\n        - 🧩 Data sources\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/datasources/reload'\n  \"/datasources/reload/{datasourceId}\":\n    post:\n      description: Update properties from all data source on all nodes. The call is asynchronous.\n      operationId: ReloadOneDatasourceAllNodes\n      parameters:\n        - $ref: \"#/components/parameters/datasource-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - ReloadOneDatasourceAllNodes\n                    type: string\n                  data:\n                    example: Data for all nodes, for the 'test-data-source' data source are going to be updated\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Data source reloaded\n      summary: Update properties from data sources\n      tags:\n        - 🧩 Data sources\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/datasources/reload/datasourceId'\n  \"/datasources/{datasourceId}\":\n    delete:\n      description: Delete a data source configuration\n      operationId: deleteDataSource\n      parameters:\n        - $ref: \"#/components/parameters/datasource-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - deleteDataSource\n                    type: string\n                  data:\n                    properties:\n                      datasources:\n                        items:\n                          $ref: \"#/components/schemas/datasource\"\n                        type: array\n                    required:\n                      - datasources\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Data source information\n      summary: Delete a data source\n      tags:\n        - 🧩 Data sources\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request DELETE https://rudder.example.com/rudder/api/latest/datasources/my-data-source'\n    get:\n      description: Get the configuration of a data source\n      operationId: getDataSource\n      parameters:\n        - $ref: \"#/components/parameters/datasource-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getDataSource\n                    type: string\n                  data:\n                    properties:\n                      datasources:\n                        items:\n                          $ref: \"#/components/schemas/datasource\"\n                        type: array\n                    required:\n                      - datasources\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Data source information\n      summary: Get data source configuration\n      tags:\n        - 🧩 Data sources\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/datasources/my-data-source'\n    post:\n      description: Update the configuration of a data source\n      operationId: updateDataSource\n      parameters:\n        - $ref: \"#/components/parameters/datasource-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/datasource\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updateDataSource\n                    type: string\n                  data:\n                    properties:\n                      datasources:\n                        items:\n                          $ref: \"#/components/schemas/datasource\"\n                        type: array\n                    required:\n                      - datasources\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Data source information\n      summary: Update a data source configuration\n      tags:\n        - 🧩 Data sources\n      x-code-samples:\n        - lang: curl\n          source: |-\n            cat disable-datasource-1.json.json\n            {\n              \"description\": \"This data source is temporary no more used and so disabled\",\n              \"enabled\": false\n            }\n\n            curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/datasources/my-data-source --header \"Content-type: application/json\" --data @disable-datasource-1.json.json\n  /directives:\n    get:\n      description: List all directives\n      operationId: listDirectives\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listDirectives\n                    type: string\n                  data:\n                    properties:\n                      directives:\n                        items:\n                          $ref: \"#/components/schemas/directive\"\n                        type: array\n                    required:\n                      - directives\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Directives information\n      summary: List all directives\n      tags:\n        - Directives\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/directives'\n    put:\n      description: Create a new directive from provided parameters. You can specify a source directive to clone it.\n      operationId: createDirective\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/directive-new\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - createDirective\n                    type: string\n                  data:\n                    properties:\n                      directives:\n                        items:\n                          $ref: \"#/components/schemas/directive\"\n                        type: array\n                    required:\n                      - directives\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Directives information\n      summary: Create a directive\n      tags:\n        - Directives\n      x-code-samples:\n        - lang: curl\n          source: |+\n            directives.json:\n\n            {\n              \"id\": \"cf2a6c72-18ae-4f82-a12c-0b887792db41\",\n              \"displayName\": \"Example Directive\",\n              \"shortDescription\": \"This in an example Directive to use in Rudder api documentation\",\n              \"longDescription\": \"\",\n              \"techniqueName\": \"genericVariableDefinition\",\n              \"techniqueVersion\": \"2.0\",\n              \"tags\": {\n                \"env\" : \"production\",\n                \"country\" : \"FR\"\n              },\n              \"parameters\": {\n                \"section\": {\n                  \"name\": \"sections\",\n                  \"sections\": [\n                    {\n                      \"section\": {\n                        \"name\": \"Variable definition\",\n                        \"vars\": [\n                          {\n                            \"var\": {\n                              \"name\": \"GENERIC_VARIABLE_CONTENT\",\n                              \"value\": \"new variable content\"\n                            }\n                          },\n                          {\n                            \"var\": {\n                              \"name\": \"GENERIC_VARIABLE_NAME\",\n                              \"value\": \"new_variable\"\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  ]\n                }\n              },\n              \"priority\": 3,\n              \"enabled\": true,\n              \"system\": false,\n              \"policyMode\": \"default\"\n            }\n\n            curl --header \"X-API-Token: yourToken\" --request PUT https://rudder.example.com/rudder/api/latest/directives --header \"Content-type: application/json\" --data @directive.json\n\n  \"/directives/{directiveId}\":\n    delete:\n      description: Delete a directive\n      operationId: deleteDirective\n      parameters:\n        - $ref: \"#/components/parameters/directive-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - deleteDirective\n                    type: string\n                  data:\n                    properties:\n                      directives:\n                        items:\n                          $ref: \"#/components/schemas/directive\"\n                        type: array\n                    required:\n                      - directives\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Directives information\n      summary: Delete a directive\n      tags:\n        - Directives\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request DELETE https://rudder.example.com/rudder/api/latest/directives/17dadf50-6056-4c8b-a935-6b97d14b89a7'\n    get:\n      description: Get all information about a given directive\n      operationId: directiveDetails\n      parameters:\n        - $ref: \"#/components/parameters/directive-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - directiveDetails\n                    type: string\n                  data:\n                    properties:\n                      directives:\n                        items:\n                          $ref: \"#/components/schemas/directive\"\n                        type: array\n                    required:\n                      - directives\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Directives information\n      summary: Get directive details\n      tags:\n        - Directives\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/directives/17dadf50-6056-4c8b-a935-6b97d14b89a7'\n    post:\n      description: Update directive information\n      operationId: updateDirective\n      parameters:\n        - $ref: \"#/components/parameters/directive-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/directive\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updateDirective\n                    type: string\n                  data:\n                    properties:\n                      directives:\n                        items:\n                          $ref: \"#/components/schemas/directive\"\n                        type: array\n                    required:\n                      - directives\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Directives information\n      summary: Update a directive details\n      tags:\n        - Directives\n      x-code-samples:\n        - lang: curl\n          source: |-\n            directive.json:\n            {\n              \"longDescription\": \"Add a loooooooooooong description\",\n              \"parameters\": {\n                \"section\": {\n                  \"name\": \"sections\",\n                  \"sections\": [\n                    {\n                      \"section\": {\n                        \"name\": \"Variable definition\",\n                        \"vars\": [\n                          {\n                            \"var\": {\n                              \"name\": \"GENERIC_VARIABLE_CONTENT\",\n                              \"value\": \"Change Variable Content\"\n                            }\n                          },\n                          {\n                            \"var\": {\n                              \"name\": \"GENERIC_VARIABLE_NAME\",\n                              \"value\": \"new_variable\"\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  ]\n                }\n              },\n              \"priority\": 5\n            }\n\n            curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/directives/cf2a6c72-18ae-4f82-a12c-0b887792db41 --header \"Content-type: application/json\" --data @directive.json\n  \"/directives/{directiveId}/check\":\n    post:\n      description: Check that update on a directive is valid\n      operationId: checkDirective\n      parameters:\n        - $ref: \"#/components/parameters/directive-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/directive\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - checkDirective\n                    type: string\n                  data:\n                    properties:\n                      directives:\n                        items:\n                          $ref: \"#/components/schemas/directive\"\n                        type: array\n                    required:\n                      - directives\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Directives information\n      summary: Check that update on a directive is valid\n      tags:\n        - Directives\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/directives/17dadf50-6056-4c8b-a935-6b97d14b89a7/check  --data \"displayName=Name of new directive\"'\n  /groups:\n    get:\n      description: List all groups\n      operationId: listGroups\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listGroups\n                    type: string\n                  data:\n                    properties:\n                      groups:\n                        items:\n                          $ref: \"#/components/schemas/group\"\n                        type: array\n                    required:\n                      - groups\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Groups information\n      summary: List all groups\n      tags:\n        - Groups\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/groups'\n    put:\n      description: Create a new group based in provided parameters\n      operationId: createGroup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/group-new\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - createGroup\n                    type: string\n                  data:\n                    properties:\n                      groups:\n                        items:\n                          $ref: \"#/components/schemas/group\"\n                        type: array\n                    required:\n                      - groups\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Group information\n      summary: Create a group\n      tags:\n        - Groups\n      x-code-samples:\n        - lang: curl\n          source: |+\n            groups.json:\n            {\n             \"category\": \"c355f46e-11b0-4c7a-aedd-6a5f3b0303b6\",\n             \"displayName\": \"Example group\",\n             \"description\": \"This is an example Group to use in Rudder api documentation\",\n             \"query\":\n               {\"select\":\"node\",\"composition\":\"Or\",\"where\":\n                 [\n                   {\"objectType\":\"node\",\"attribute\":\"nodeId\",\"comparator\":\"eq\",\"value\":\"1ae6ccfe-00ba-44c0-b1aa-362d2f386032\"},\n                   {\"objectType\":\"node\",\"attribute\":\"nodeId\",\"comparator\":\"eq\",\"value\":\"e4a80fd8-373e-45fc-ad94-2ae618be32e3\"}\n                 ]\n               },\n              \"dynamic\": true,\n              \"enabled\": true\n            }\n\n            curl --header \"X-API-Token: yourToken\" --request PUT https://rudder.example.com/rudder/api/latest/groups --header \"Content-Type: application/json\" --data @group.json\n\n  /groups/categories:\n    put:\n      description: Create a new group category\n      operationId: CreateGroupCategory\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/group-category\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - CreateGroupCategory\n                    type: string\n                  data:\n                    properties:\n                      groupCategories:\n                        items:\n                          $ref: \"#/components/schemas/group-category\"\n                        type: array\n                    required:\n                      - groupCategories\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Groups category information\n      summary: Create a group category\n      tags:\n        - Groups\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request PUT 'https://rudder.example.com/rudder/api/latest/groups/categories' --data \"name=new category name\" -d \"parent=4306143d-eabf-4478-b7b1-1616f4aa02b5\" -d \"description=A new category created via API'\n  \"/groups/categories/{groupCategoryId}\":\n    delete:\n      description: Delete a group category. It must have no child groups and no children categories.\n      operationId: DeleteGroupCategory\n      parameters:\n        - $ref: \"#/components/parameters/group-category-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - DeleteGroupCategory\n                    type: string\n                  data:\n                    properties:\n                      groupCategories:\n                        items:\n                          $ref: \"#/components/schemas/group-category\"\n                        type: array\n                    required:\n                      - groupCategories\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Groups category information\n      summary: Delete group category\n      tags:\n        - Groups\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request DELETE 'https://rudder.example.com/rudder/api/latest/groups/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5'\"\n    get:\n      description: Get detailed information about a group category\n      operationId: GetGroupCategoryDetails\n      parameters:\n        - $ref: \"#/components/parameters/group-category-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - GetGroupCategoryDetails\n                    type: string\n                  data:\n                    properties:\n                      groupCategories:\n                        items:\n                          $ref: \"#/components/schemas/group-category\"\n                        type: array\n                    required:\n                      - groupCategories\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Groups category information\n      summary: Get group category details\n      tags:\n        - Groups\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/groups/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5'\"\n    post:\n      description: Update detailed information about a group category\n      operationId: UpdateGroupCategory\n      parameters:\n        - $ref: \"#/components/parameters/group-category-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/group-category-update\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - UpdateGroupCategory\n                    type: string\n                  data:\n                    properties:\n                      groupCategories:\n                        items:\n                          $ref: \"#/components/schemas/group-category\"\n                        type: array\n                    required:\n                      - groupCategories\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Groups category information\n      summary: Update group category details\n      tags:\n        - Groups\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/groups/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5' --data \"name=new category name\"\n  /groups/tree:\n    get:\n      description: Get all available groups and their categories in a tree\n      operationId: GetGroupTree\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - GetGroupTree\n                    type: string\n                  data:\n                    example:\n                      categories:\n                        - categories: []\n                          description: That category holds all the system and special target\n                          groups:\n                            - description: All nodes known by Rudder directly connected to the root server\n                              displayName: All nodes managed by root policy server\n                              dynamic: true\n                              enabled: true\n                              id: hasPolicyServer-root\n                              nodeIds:\n                                - dd404bda-2785-4959-abaa-8f37a0bbd85e\n                                - f6223b0e-e2aa-4d1f-b6d1-74de8ea8e513\n                                - root\n                              query:\n                                composition: And\n                                select: nodeAndPolicyServer\n                                where:\n                                  - attribute: policyServerId\n                                    comparator: eq\n                                    objectType: node\n                                    value: root\n                          id: SystemGroups\n                          name: System groups\n                          parent: GroupRoot\n                        - categories: []\n                          description: \"\"\n                          groups:\n                            - description: \"\"\n                              displayName: Linux nodes\n                              dynamic: false\n                              enabled: true\n                              id: 79d83ff9-24d8-4be6-b1f7-cbb1c173f7a5\n                              nodeIds: []\n                              query:\n                                composition: And\n                                select: node\n                                where:\n                                  - attribute: OS\n                                    comparator: eq\n                                    objectType: node\n                                    value: Linux\n                          id: 38dd2107-a73b-45fb-916d-e110312abb87\n                          name: production groups\n                          parent: GroupRoot\n                      description: This is the root category for the groups (both dynamic and static) and group categories\n                      groups:\n                        - description: \"\"\n                          displayName: Test Clients\n                          dynamic: true\n                          enabled: true\n                          id: af208515-c2f2-4577-bbf4-9fffebbe6629\n                          nodeIds: []\n                          query:\n                            composition: Or\n                            select: node\n                            where:\n                              - attribute: nodeHostname\n                                comparator: regex\n                                objectType: node\n                                value: servername.*company.net\n                              - attribute: nodeHostname\n                                comparator: regex\n                                objectType: node\n                                value: lt serverbla.*company.net\n                        - description: \"\"\n                          displayName: Test Clients\n                          dynamic: true\n                          enabled: true\n                          id: d7634b2d-7189-422b-9971-24c29b75da46\n                          nodeIds: []\n                          query:\n                            composition: Or\n                            select: node\n                            where:\n                              - attribute: nodeHostname\n                                comparator: regex\n                                objectType: node\n                                value: servername.*company.net\n                              - attribute: nodeHostname\n                                comparator: regex\n                                objectType: node\n                                value: lt serverbla.*company.net\n                      id: GroupRoot\n                      name: Root of the group and group categories\n                      parent: GroupRoot\n                    properties:\n                      groupCategories:\n                        description: Group tree\n                        example: null\n                        type: object\n                    required:\n                      - groupCategories\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Groups information\n      summary: Get groups tree\n      tags:\n        - Groups\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/groups/tree\n  \"/groups/{groupId}\":\n    delete:\n      description: Update detailed information about a group\n      operationId: deleteGroup\n      parameters:\n        - $ref: \"#/components/parameters/group-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - deleteGroup\n                    type: string\n                  data:\n                    properties:\n                      groups:\n                        items:\n                          $ref: \"#/components/schemas/group\"\n                        type: array\n                    required:\n                      - groups\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Groups information\n      summary: Delete a group\n      tags:\n        - Groups\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request DELETE 'https://rudder.example.com/rudder/api/latest/groups/17dadf50-6056-4c8b-a935-6b97d14b89a7'\"\n    get:\n      description: Get detailed information about a group\n      operationId: groupDetails\n      parameters:\n        - $ref: \"#/components/parameters/group-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - groupDetails\n                    type: string\n                  data:\n                    properties:\n                      groups:\n                        items:\n                          $ref: \"#/components/schemas/group\"\n                        type: array\n                    required:\n                      - groups\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Groups information\n      summary: Get group details\n      tags:\n        - Groups\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/groups/17dadf50-6056-4c8b-a935-6b97d14b89a7'\"\n    post:\n      description: Update detailed information about a group\n      operationId: updateGroup\n      parameters:\n        - $ref: \"#/components/parameters/group-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/group-update\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updateGroup\n                    type: string\n                  data:\n                    properties:\n                      groups:\n                        items:\n                          $ref: \"#/components/schemas/group\"\n                        type: array\n                    required:\n                      - groups\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Groups information\n      summary: Update group details\n      tags:\n        - Groups\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST 'https://rudder.example.com/rudder/api/latest/groups/17dadf50-6056-4c8b-a935-6b97d14b89a7' --data \\\"displayName=New name of group\\\"\"\n  \"/groups/{groupId}/reload\":\n    post:\n      description: Recompute the content of a group\n      operationId: reloadGroup\n      parameters:\n        - $ref: \"#/components/parameters/group-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - reloadGroup\n                    type: string\n                  data:\n                    properties:\n                      groups:\n                        items:\n                          $ref: \"#/components/schemas/group\"\n                        type: array\n                    required:\n                      - groups\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Groups information\n      summary: Reload a group\n      tags:\n        - Groups\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST 'https://rudder.example.com/rudder/api/latest/groups/17dadf50-6056-4c8b-a935-6b97d14b89a7/reload'\"\n  /info:\n    get:\n      description: List all endpoints and their version\n      operationId: apiGeneralInformations\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - apiGeneralInformations\n                    type: string\n                  data:\n                    properties:\n                      availableVersions:\n                        items:\n                          $ref: \"#/components/schemas/api-versions\"\n                        type: array\n                      documentation:\n                        description: Link to Rudder API description\n                        type: string\n                      endpoints:\n                        items:\n                          $ref: \"#/components/schemas/api-endpoints\"\n                        type: array\n                    required:\n                      - documentation\n                      - availableVersions\n                      - endpoints\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: API endpoints\n      summary: List all endoints\n      tags:\n        - API Info\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/info\n  \"/info/details/{endpointName}\":\n    get:\n      description: Get the description and the list of supported version for one API endpoint\n      operationId: apiInformations\n      parameters:\n        - description: Name of the endpoint for which one wants information\n          in: path\n          name: endpointName\n          required: true\n          schema:\n            example: listAcceptedNodes\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - apiInformations\n                    type: string\n                  data:\n                    properties:\n                      documentation:\n                        description: Link to Rudder API description\n                        type: string\n                      endpointName:\n                        description: The endpoint name as key and the endpoint description as value\n                        type: string\n                      endpoints:\n                        items:\n                          description: Supported path and version for that endpoint\n                          example: |-\n                            {\n                              \"listAcceptedNodes\": \"List all accepted nodes with configurable details level\",\n                              \"GET\": \"[8,9,10,11,12,13] /nodes\"\n                            }\n                          properties:\n                            httpVerb:\n                              format: The HTTP verb for the endpoint for key and the supported version and API path for value\n                            version:\n                              $ref: \"#/components/schemas/api-version\"\n                          type: object\n                        type: array\n                    required:\n                      - documentation\n                      - endpointName\n                      - endpoints\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: API Endpoint information\n      summary: Get information about one API endpoint\n      tags:\n        - API Info\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/info/details/listAcceptedNodes\n  \"/info/{sectionId}\":\n    get:\n      description: Get all endpoints in the given section with their supported version.\n      operationId: apiSubInformations\n      parameters:\n        - description: Id of the API section\n          in: path\n          name: sectionId\n          required: true\n          schema:\n            example: nodes\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - apiSubInformations\n                    type: string\n                  data:\n                    properties:\n                      availableVersions:\n                        items:\n                          $ref: \"#/components/schemas/api-versions\"\n                        type: array\n                      documentation:\n                        description: Link to Rudder API description\n                        type: string\n                      endpoints:\n                        items:\n                          $ref: \"#/components/schemas/api-endpoints\"\n                        type: array\n                    required:\n                      - documentation\n                      - availableVersions\n                      - endpoints\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Endpoint information\n      summary: Get information on endpoint in a section\n      tags:\n        - API Info\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/info/nodes\n  /inventories/info:\n    get:\n      description: Provide information about the current state of the inventory processor\n      operationId: queueInformation\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - queueInformation\n                    type: string\n                  data:\n                    description: Information about the service\n                    properties:\n                      queueMaxSize:\n                        example: 50\n                        type: integer\n                      queueSaturated:\n                        description: Is the inventory queue full\n                        example: false\n                        type: boolean\n                    required:\n                      - queueMaxSize\n                      - queueSaturated\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Inventories information\n      summary: Get information about inventory processing queue\n      tags:\n        - Inventories\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/'\n  /inventories/upload:\n    post:\n      description: Upload an inventory to the web application\n      operationId: uploadInventory\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                file:\n                  format: binary\n                  type: string\n                signature:\n                  format: binary\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - uploadInventory\n                    type: string\n                  data:\n                    example: Inventory 'file.xml' for Node 'c1bab9fc-bcf6-4d59-a397-84c8e2fc06c0' added to processing queue.\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Inventory uploaded\n      summary: Upload an inventory for processing\n      tags:\n        - Inventories\n      x-code-samples:\n        - lang: curl\n          source: 'curl --request POST --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/inventories/upload -F \"file=@inventory-file\" -F \"signature=@signature-file\"'\n  /inventories/watcher/restart:\n    post:\n      description: Restart the inventory watcher if necessary\n      operationId: fileWatcherRestart\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - fileWatcherRestart\n                    type: string\n                  data:\n                    example: Incoming inventory watcher restarted\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Started\n      summary: Restart inventory watcher\n      tags:\n        - Inventories\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST 'https://rudder.example.com/rudder/api/latest/inventories/watcher/restart'\"\n  /inventories/watcher/start:\n    post:\n      description: Start the inventory watcher if necessary\n      operationId: fileWatcherStart\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - fileWatcherStart\n                    type: string\n                  data:\n                    example: Incoming inventory watcher started\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Started\n      summary: Start inventory watcher\n      tags:\n        - Inventories\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST 'https://rudder.example.com/rudder/api/latest/inventories/watcher/start'\"\n  /inventories/watcher/stop:\n    post:\n      description: Stop the inventory watcher if necessary\n      operationId: fileWatcherStop\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - fileWatcherStop\n                    type: string\n                  data:\n                    example: Incoming inventory watcher stopped\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Stopped\n      summary: Stop inventory watcher\n      tags:\n        - Inventories\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST 'https://rudder.example.com/rudder/api/latest/inventories/watcher/stop'\"\n  /nodes:\n    get:\n      description: Get information about the nodes managed by the target server\n      operationId: listAcceptedNodes\n      parameters:\n        - $ref: \"#/components/parameters/include\"\n        - $ref: \"#/components/parameters/node-query\"\n        - $ref: \"#/components/parameters/node-where\"\n        - $ref: \"#/components/parameters/node-composition\"\n        - $ref: \"#/components/parameters/node-select\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listAcceptedNodes\n                    type: string\n                  data:\n                    description: Information about the nodes\n                    properties:\n                      nodes:\n                        items:\n                          $ref: \"#/components/schemas/node-full\"\n                        type: array\n                    required:\n                      - nodes\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Nodes\n      summary: List managed nodes\n      tags:\n        - Nodes\n      x-code-samples:\n        - lang: curl\n          source: |+\n            # To get the Linux nodes with a hostname starting with \"node1\"\n            curl --header \"X-API-Token: yourToken\" 'https://rudder.example.com/rudder/api/latest/nodes?where=\\[\\{\"objectType\":\"node\",\"attribute\":\"OS\",\"comparator\":\"eq\",\"value\":\"Linux\"\\},\\{\"objectType\":\"node\",\"attribute\":\"nodeHostname\",\"comparator\":\"regex\",\"value\":\"node1.*\"\\}\\]'\n\n            # To get the list of nodes with their agent version\n            curl -k -H \"X-API-Token: yourToken\" -X GET \"https://rudder.example.com/rudder/api/latest/nodes?include=minimal,managementTechnology\" | jq '.data.nodes[] | {\"id\": .id, \"version\": .managementTechnology[].version}'\n\n            # To get information about the eth0 interface of a specific node\n            curl -k -H \"X-API-Token: yourToken\" -H \"Content-Type: application/json\" -X GET 'https://rudder.example.com/rudder/api/latest/nodes/8b168194-c0b4-41ab-b2b5-9571a8906d59?include=networkInterfaces' | jq '.data.nodes[].networkInterfaces[] | select(.name == \"eth0\")'\n            # It gives:\n            #\n            #{\n            # \"name\": \"eth0\",\n            # \"type\": \"ethernet\",\n            # \"status\": \"Up\",\n            # \"macAddress\": \"52:54:00:49:45:ac\",\n            # \"ipAddresses\": [\n            #   \"fe80:0:0:0:5054:ff:fe49:45ac\",\n            #   \"192.168.110.21\"\n            # ]\n            #}\n\n\n        - lang: python\n          source: |\n            import json\n            import requests\n\n            # Get all nodes having a hostname starting with node1 and based on Linux and only display minimal information (id, hostname, status)\n            url = \"https://rudder.example.com/rudder/api/latest/nodes\"\n            linux = {\"objectType\": \"node\", \"attribute\": \"OS\",\n                     \"comparator\": \"eq\", \"value\": \"Linux\"}\n            node1 = {\"objectType\": \"node\", \"attribute\": \"nodeHostname\",\n                     \"comparator\": \"regex\", \"value\": \"node1.*\"}\n            where = [linux, node1]\n            params = {\"where\": json.dumps(where), \"include\": \"minimal\"}\n            headers = {\"X-API-TOKEN\": \"yourToken\"}\n            requests.get(url, params=params, headers=headers, verify=False)\n  /nodes/applyPolicy:\n    post:\n      description: This API allows to trigger an agent run on all nodes. Response contains a json stating if agent could be started on each node, but not if the run went fine and do not display any output from it. You can see the result of the run in Rudder web interface or in the each agent logs.\n      operationId: applyPolicyAllNodes\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - applyPolicyAllNodes\n                    type: string\n                  data:\n                    items:\n                      properties:\n                        hostname:\n                          description: Node hostname\n                          example: node.example.com\n                          type: string\n                        id:\n                          description: Rudder id of the node\n                          example: 249e14ac-2418-457c-a27d-1650907b13c7\n                          format: uuid (or \"root\")\n                          type: string\n                        result:\n                          description: Result or policy application trigger\n                          example: Started\n                          type: string\n                      type: object\n                    type: array\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Result\n      summary: Trigger an agent run on all nodes\n      tags:\n        - Nodes\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST --header \"Content-Type: application/json\" https://rudder.example.com/rudder/api/latest/nodes/applyPolicy'\n  /nodes/pending:\n    get:\n      description: Get information about the nodes pending acceptation\n      operationId: listPendingNodes\n      parameters:\n        - $ref: \"#/components/parameters/include\"\n        - $ref: \"#/components/parameters/node-query\"\n        - $ref: \"#/components/parameters/node-where\"\n        - $ref: \"#/components/parameters/node-composition\"\n        - $ref: \"#/components/parameters/node-select\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listPendingNodes\n                    type: string\n                  data:\n                    description: Information about the nodes\n                    properties:\n                      nodes:\n                        items:\n                          $ref: \"#/components/schemas/node-full\"\n                        type: array\n                    required:\n                      - nodes\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Nodes\n      summary: List pending nodes\n      tags:\n        - Nodes\n      x-code-samples:\n        - lang: curl\n          source: |+\n            # To get the list of pending nodes\n            curl --header \"X-API-Token: yourToken\" 'https://rudder.example.com/rudder/api/latest/nodes/pending'\n\n            # To get the pending Linux nodes with a hostname starting with \"node1\"\n            curl --header \"X-API-Token: yourToken\" 'https://rudder.example.com/rudder/api/latest/nodes/pending?where=\\[\\{\"objectType\":\"node\",\"attribute\":\"OS\",\"comparator\":\"eq\",\"value\":\"Linux\"\\},\\{\"objectType\":\"node\",\"attribute\":\"nodeHostname\",\"comparator\":\"regex\",\"value\":\"node1.*\"\\}\\]'\n\n            # To get the list of pending nodes with their agent version\n            curl -k -H \"X-API-Token: yourToken\" -X GET \"https://rudder.example.com/rudder/api/latest/nodes/pending?include=minimal,managementTechnology\" | jq '.data.nodes[] | {\"id\": .id, \"version\": .managementTechnology[].version}'\n\n\n\n  \"/nodes/pending/{nodeId}\":\n    post:\n      description: Accept or refuse a pending node\n      operationId: changePendingNodeStatus\n      parameters:\n        - $ref: \"#/components/parameters/node-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                status:\n                  description: New status of the pending node\n                  enum:\n                    - accepted\n                    - refused\n                  example: accepted\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - changePendingNodeStatus\n                    type: string\n                  data:\n                    description: Information about the node\n                    properties:\n                      nodes:\n                        items:\n                          $ref: \"#/components/schemas/node-full\"\n                        type: array\n                    required:\n                      - nodes\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Nodes\n      summary: Update pending Node status\n      tags:\n        - Nodes\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/nodes/pending/17dadf50-6056-4c8b-a935-6b97d14b89a7 --data \"status=accepted\"'\n  /nodes/status:\n    get:\n      description: Get acceptation status (pending, accepted, deleted, unknown) of a list of nodes\n      operationId: getNodesStatus\n      parameters:\n        - $ref: \"#/components/parameters/node-ids\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getNodesStatus\n                    type: string\n                  data:\n                    description: List of nodeId and associated status\n                    properties:\n                      nodes:\n                        description: List of nodeId and associated status\n                        items:\n                          properties:\n                            id:\n                              description: Unique id of the node\n                              example: 9a1773c9-0889-40b6-be89-f6504443ac1b\n                              format: uuid (or \"root\")\n                              type: string\n                            status:\n                              description: Status of the node\n                              enum:\n                                - pending\n                                - accepted\n                                - deleted\n                                - unknown\n                              type: string\n                          required:\n                            - id\n                            - status\n                          type: object\n                        type: array\n                    required:\n                      - nodes\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: nodes\n      summary: Get nodes acceptation status\n      tags:\n        - Nodes\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/nodes/status?ids=17dadf50-6056-4c8b-a935-6b97d14b89a7,b9a71482-5030-4699-984d-b03d28bbbf36'\n  \"/nodes/{nodeId}\":\n    delete:\n      description: Remove a node from the Rudder server. It won't be managed anymore.\n      operationId: deleteNode\n      parameters:\n        - $ref: \"#/components/parameters/node-id\"\n        - $ref: \"#/components/parameters/node-delete-mode\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - deleteNode\n                    type: string\n                  data:\n                    description: Information about the node\n                    properties:\n                      nodes:\n                        items:\n                          $ref: \"#/components/schemas/node-full\"\n                        type: array\n                    required:\n                      - nodes\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Nodes\n      summary: Delete a node\n      tags:\n        - Nodes\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request DELETE https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7\n    get:\n      description: Get details about a given node\n      operationId: nodeDetails\n      parameters:\n        - $ref: \"#/components/parameters/node-id\"\n        - $ref: \"#/components/parameters/include\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - nodeDetails\n                    type: string\n                  data:\n                    description: Information about the node\n                    properties:\n                      nodes:\n                        items:\n                          $ref: \"#/components/schemas/node-full\"\n                        type: array\n                    required:\n                      - nodes\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Nodes\n      summary: Get information about a node\n      tags:\n        - Nodes\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7\\?include=full'\n    post:\n      description: Update node settings and properties\n      operationId: updateNode\n      parameters:\n        - $ref: \"#/components/parameters/node-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/node-settings\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updateNode\n                    type: string\n                  data:\n                    description: Information about the node\n                    properties:\n                      nodes:\n                        items:\n                          $ref: \"#/components/schemas/node-full\"\n                        type: array\n                    required:\n                      - nodes\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Nodes\n      summary: Update node settings and properties\n      tags:\n        - Nodes\n      x-code-samples:\n        - lang: curl\n          source: |\n            # Given the \"data.json\" JSON file with content:\n            { \"properties\": [\n              { \"name\": \"env_type\"    , \"value\": \"production\" },\n              { \"name\": \"shell\"       , \"value\": \"/bin/sh\" },\n              { \"name\": \"utf-8 poetry\", \"value\": \"ᚠᛇᚻ᛫ᛒᛦᚦ᛫ᚠᚱᚩᚠᚢᚱ᛫ᚠᛁᚱᚪ᛫ᚷᛖᚻᚹᛦᛚᚳᚢᛗ\" }\n            ]\n            , \"policyMode\" : \"audit\"\n            }\n            # Setting properties from \"data.json\" and policy mode to audit:\n            curl --header \"X-API-Token: yourToken\" --request POST --header \"Content-Type: application/json\" https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7 --data @properties.json\n\n            # Removing the key \"utf-8 poetry\" from the command line and updating the \"env_type\" one\n            curl --header \"X-API-Token: yourToken\" --request POST --header \"Content-Type: application/json\" https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7 --data '{ \"properties\": [{ \"name\":\"utf-8 poetry\", \"value\":\"\"}, {\"name\":\"env_type\", \"value\":\"deprovisioned\"}] }'\n\n            # Removing the key \"env_type\" and changing \"shell\" and use default policy mode\n            curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7 --data \"properties=shell=/bin/false\" -d \"properties=env_type=\" -d \"policyMode=default\"\n\n            # Reset the key status to accept next inventory with its new key\n            curl --header \"X-API-Token: yourToken\" --request POST -H \"Content-Type: application/json\" 'https://rudder.example.com/rudder/api/latest/nodes/root' -d '{\"agentKey\":{\"status\":\"undefined\"}}'\n  \"/nodes/{nodeId}/applyPolicy\":\n    post:\n      description: This API allows to trigger an agent run on the target node. Response is a stream of the actual agent run on the node.\n      operationId: applyNode\n      parameters:\n        - $ref: \"#/components/parameters/node-id\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/agent-output\"\n      summary: Trigger an agent run\n      tags:\n        - Nodes\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7\\?include=full'\n  \"/nodes/{nodeId}/fetchData\":\n    post:\n      description: Update properties from all data sources on one nodes. The call is asynchronous.\n      operationId: ReloadAllDatasourcesOneNode\n      parameters:\n        - $ref: \"#/components/parameters/node-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - ReloadAllDatasourcesOneNode\n                    type: string\n                  data:\n                    example: Data for node '4e3336f9-ace8-44d6-8d07-496ff1631b01', for all configured data sources, is going to be updated\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Data sources reloaded\n      summary: Update properties for one node from all data sources\n      tags:\n        - 🧩 Data sources\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7/fetchData'\n  \"/nodes/{nodeId}/fetchData/{datasourceId}\":\n    post:\n      description: Update properties from a data source on one nodes. The call is asynchronous.\n      operationId: ReloadOneDatasourceOneNode\n      parameters:\n        - $ref: \"#/components/parameters/node-id\"\n        - $ref: \"#/components/parameters/datasource-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - ReloadOneDatasourceOneNode\n                    type: string\n                  data:\n                    example: Data for node '4e3336f9-ace8-44d6-8d07-496ff1631b01', for ' test-data-source' data source, is going to be updated\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Data sources reloaded\n      summary: Update properties for one node from a data source\n      tags:\n        - 🧩 Data sources\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/nodes/nodeId/fetchData/datasourceId'\n  \"/nodes/{nodeId}/inheritedProperties\":\n    get:\n      description: This API returns all node properties for a node, including group inherited ones.\n      operationId: nodeInheritedProperties\n      parameters:\n        - $ref: \"#/components/parameters/node-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - nodeInheritedProperties\n                    type: string\n                  data:\n                    description: Information about the node inherited properties\n                    items:\n                      $ref: \"#/components/schemas/node-inherited-properties\"\n                    type: array\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Node\n      summary: Get inherited node properties for a node\n      tags:\n        - Nodes\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/nodes/17dadf50-6056-4c8b-a935-6b97d14b89a7/inheritedProperties'\n  /parameters:\n    get:\n      description: Get the current value of all the global parameters\n      operationId: listParameters\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listParameters\n                    type: string\n                  data:\n                    description: Parameters\n                    properties:\n                      parameters:\n                        items:\n                          $ref: \"#/components/schemas/parameter\"\n                        type: array\n                    required:\n                      - parameters\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Settings\n      summary: List all global parameters\n      tags:\n        - Parameters\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/parameters'\n    put:\n      description: Create a new global parameter\n      operationId: createParameter\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/parameter\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - createParameter\n                    type: string\n                  data:\n                    description: Parameters\n                    properties:\n                      parameters:\n                        items:\n                          $ref: \"#/components/schemas/parameter\"\n                        type: array\n                    required:\n                      - parameters\n                    type: object\n                  id:\n                    description: Id of the parameter\n                    example: rudder_file_edit_footer\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                  - id\n                type: object\n          description: Settings\n      summary: Create a new parameter\n      tags:\n        - Parameters\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --header \"Content-Type: application/json\" --request PUT https://rudder.example.com/rudder/api/latest/parameters --data @JSON-file-name'\n  \"/parameters/{parameterId}\":\n    delete:\n      description: Delete an existing parameter\n      operationId: deleteParameter\n      parameters:\n        - $ref: \"#/components/parameters/parameter-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - deleteParameter\n                    type: string\n                  data:\n                    description: Parameters\n                    properties:\n                      parameters:\n                        items:\n                          $ref: \"#/components/schemas/parameter\"\n                        type: array\n                    required:\n                      - parameters\n                    type: object\n                  id:\n                    description: Id of the parameter\n                    example: rudder_file_edit_footer\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                  - id\n                type: object\n          description: Settings\n        \"500\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - deleteParameter\n                    type: string\n                  errorDetails:\n                    example: \"Could not delete Parameter rudder_file_edit_footer cause is: Could not find Parameter rudder_file_edit_footer.\"\n                    type: string\n                  id:\n                    description: Id of the parameter\n                    example: rudder_file_edit_footer\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                  - id\n                type: object\n          description: Non existing parameter\n      summary: Delete a parameter\n      tags:\n        - Parameters\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request DELETE https://rudder.example.com/rudder/api/latest/parameters/ParameterId'\n    get:\n      description: Get the current value of a given parameter\n      operationId: parameterDetails\n      parameters:\n        - $ref: \"#/components/parameters/parameter-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - parameterDetails\n                    type: string\n                  data:\n                    description: Parameters\n                    properties:\n                      parameters:\n                        items:\n                          $ref: \"#/components/schemas/parameter\"\n                        type: array\n                    required:\n                      - parameters\n                    type: object\n                  id:\n                    description: Id of the parameter\n                    example: rudder_file_edit_footer\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                  - id\n                type: object\n          description: Settings\n      summary: Get the value of a parameter\n      tags:\n        - Parameters\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/parameters/ParameterId'\n    post:\n      description: Update the properties of a parameter\n      operationId: updateParameter\n      parameters:\n        - $ref: \"#/components/parameters/parameter-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updateParameter\n                    type: string\n                  data:\n                    description: Parameters\n                    properties:\n                      parameters:\n                        items:\n                          $ref: \"#/components/schemas/parameter\"\n                        type: array\n                    required:\n                      - parameters\n                    type: object\n                  id:\n                    description: Id of the parameter\n                    example: rudder_file_edit_footer\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                  - id\n                type: object\n          description: Settings\n      summary: Update a parameter's value\n      tags:\n        - Parameters\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/parameters/ParameterId --data \"value=### Edited by Rudder ###\"'\n  /rules:\n    get:\n      description: List all rules\n      operationId: listRules\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listRules\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          $ref: \"#/components/schemas/rule\"\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Rules information\n      summary: List all rules\n      tags:\n        - Rules\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request GET 'https://rudder.example.com/rudder/api/latest/rules'\n\n            # To get information about the target (included/excluded) groups of the rules\n            curl -H \"X-API-Token: yourToken\" -X GET 'https://rudder.example.com/rudder/api/latest/rules' | jq '.data.rules[] | {\"d\": .displayName, \"id\":.id, \"inc\": .targets[].include?.or, \"exc\":.targets[].exclude?.or}'\n    put:\n      description: Create a new rule. You can specify a source rule to clone it.\n      operationId: createRule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/rule-new\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - createRule\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          $ref: \"#/components/schemas/rule\"\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Rules information\n      summary: Create a rule\n      tags:\n        - Rules\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request PUT 'https://rudder.example.com/rudder/api/latest/rules' --data \\\"displayName=Name of New Rule\\\"\"\n  /rules/categories:\n    put:\n      description: Create a new rule category\n      operationId: CreateRuleCategory\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/rule-category\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - CreateRuleCategory\n                    type: string\n                  data:\n                    properties:\n                      ruleCategories:\n                        items:\n                          $ref: \"#/components/schemas/rule-category\"\n                        type: array\n                    required:\n                      - ruleCategories\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Rules category information\n      summary: Create a rule category\n      tags:\n        - Rules\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request PUT 'https://rudder.example.com/rudder/api/latest/rules/categories' --data \"name=new category\" -d \"parent=4306143d-eabf-4478-b7b1-1616f4aa02b5\" -d \"description=A new category created via API\"\n  \"/rules/categories/{ruleCategoryId}\":\n    delete:\n      description: Delete a group category. It must have no child groups and no children categories.\n      operationId: DeleteRuleCategory\n      parameters:\n        - $ref: \"#/components/parameters/rule-category-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - DeleteRuleCategory\n                    type: string\n                  data:\n                    properties:\n                      groupCategories:\n                        items:\n                          $ref: \"#/components/schemas/rule-category\"\n                        type: array\n                    required:\n                      - groupCategories\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Groups category information\n      summary: Delete group category\n      tags:\n        - Rules\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request DELETE 'https://rudder.example.com/rudder/api/latest/rules/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5?prettify=true'\"\n    get:\n      description: Get detailed information about a rule category\n      operationId: GetRuleCategoryDetails\n      parameters:\n        - $ref: \"#/components/parameters/rule-category-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - GetRuleCategoryDetails\n                    type: string\n                  data:\n                    properties:\n                      rulesCategories:\n                        items:\n                          $ref: \"#/components/schemas/rule-category\"\n                        type: array\n                    required:\n                      - rulesCategories\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Rules category information\n      summary: Get rule category details\n      tags:\n        - Rules\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/rules/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5?prettify=true'\"\n    post:\n      description: Update detailed information about a rule category\n      operationId: UpdateRuleCategory\n      parameters:\n        - $ref: \"#/components/parameters/rule-category-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/rule-category-update\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - UpdateRuleCategory\n                    type: string\n                  data:\n                    properties:\n                      ruleCategories:\n                        items:\n                          $ref: \"#/components/schemas/rule-category\"\n                        type: array\n                    required:\n                      - ruleCategories\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Rules category information\n      summary: Update rule category details\n      tags:\n        - Rules\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST 'https://rudder.example.com/rudder/api/latest/rules/categories/4306143d-eabf-4478-b7b1-1616f4aa02b5?prettify=true' --data \\\"name=new category name\\\"\"\n  /rules/tree:\n    get:\n      description: Get all available rules and their categories in a tree\n      operationId: GetRuleTree\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - GetRuleTree\n                    type: string\n                  data:\n                    example:\n                      categories:\n                        - categories:\n                            - categories: []\n                              description: \"\"\n                              id: f45ec2fd-69f4-4669-9c22-1af3abe2a107\n                              name: Specific dev category\n                              parent: 4306143d-eabf-4478-b7b1-1616f4aa02b5\n                              rules:\n                                - directives: []\n                                  displayName: my specific Rule\n                                  enabled: true\n                                  id: b7fda4e7-3616-4e99-89b0-8ffadaf6b0f0\n                                  longDescription: \"\"\n                                  shortDescription: \"\"\n                                  system: false\n                                  targets: []\n                          description: \"\"\n                          id: 4306143d-eabf-4478-b7b1-1616f4aa02b5\n                          name: Dev category\n                          parent: rootRuleCategory\n                          rules:\n                            - directives: []\n                              displayName: dev Rule\n                              enabled: true\n                              id: f2aa50a9-961c-4cce-a266-380cffcdce32\n                              longDescription: \"\"\n                              shortDescription: \"\"\n                              system: false\n                              targets: []\n                      description: This is the main category of Rules\n                      id: rootRuleCategory\n                      name: Rules\n                      parent: rootRuleCategory\n                      rules:\n                        - directives: []\n                          displayName: Global security policy\n                          enabled: true\n                          id: 43cde273-5bb0-466f-8850-7d3fdde03253\n                          longDescription: \"\"\n                          shortDescription: \"\"\n                          system: false\n                          targets: []\n                        - directives:\n                            - bff45fe2-8233-4d28-96aa-78b0390b548b\n                          displayName: Global configuration for all nodes\n                          enabled: false\n                          id: 32377fd7-02fd-43d0-aab7-28460a91347b\n                          longDescription: This Rule was created automatically when Rudder was installed. It can be used to target Directives to all nodes (including the Rudder root server itself), or deleted if you would rather create your own set of Rules (it will never be created again).\n                          shortDescription: \"\"\n                          system: false\n                          targets:\n                            - exclude:\n                                or: []\n                              include:\n                                or:\n                                  - special:all\n                                  - special:all_exceptPolicyServers\n                                  - special:all_nodes_without_role\n                    properties:\n                      ruleCategories:\n                        description: Rule tree\n                        example: null\n                        type: object\n                    required:\n                      - ruleCategories\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Rules information\n      summary: Get rules tree\n      tags:\n        - Rules\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/rules/tree?prettify=true'\"\n  \"/rules/{ruleId}\":\n    delete:\n      description: Delete a rule.\n      operationId: deleteRule\n      parameters:\n        - $ref: \"#/components/parameters/rule-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - deleteRule\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          $ref: \"#/components/schemas/rule\"\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Rules information\n      summary: Delete a rule\n      tags:\n        - Rules\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request DELETE 'https://rudder.example.com/rudder/api/latest/rules/176ad06b-ed02-4da3-8053-16225d217741'\"\n    get:\n      description: Get the details of a rule\n      operationId: ruleDetails\n      parameters:\n        - $ref: \"#/components/parameters/rule-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - ruleDetails\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          $ref: \"#/components/schemas/rule\"\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Rules information\n      summary: Get a rule details\n      tags:\n        - Rules\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/rules/06ba8940-ed6c-4102-ba46-93d640a64c36'\"\n    post:\n      description: Update the details of a rule\n      operationId: updateRule\n      parameters:\n        - $ref: \"#/components/parameters/rule-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/rule-with-category\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updateRule\n                    type: string\n                  data:\n                    properties:\n                      rules:\n                        items:\n                          $ref: \"#/components/schemas/rule-with-category\"\n                        type: array\n                    required:\n                      - rules\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Rules information\n      summary: Update a rule details\n      tags:\n        - Rules\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST 'https://rudder.example.com/rudder/api/latest/rules/17dadf50-6056-4c8b-a935-6b97d14b89a7' --data \\\"displayName=Name of rule\\\"\"\n  \"/scaleoutrelay/promote/{nodeId}\":\n    post:\n      description: Promote a node to relay\n      operationId: promoteToRelay\n      parameters:\n        - $ref: \"#/components/parameters/node-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - promoteToRelay\n                    type: string\n                  data:\n                    description: Success or error message\n                    example: 17dadf50-6056-4c8b-a935-6b97d14b89a7\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - action\n                  - result\n                  - data\n                type: object\n          description: Promote response\n      summary: Promote a node to relay\n      tags:\n        - 🧩 Scale out Relay\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST --header \\\"Content-Type: application/json\\\" https://rudder.example.com/rudder/api/latest/scaleoutrelay/promote/17dadf50-6056-4c8b-a935-6b97d14b89a7?prettify=true'\"\n  /settings:\n    get:\n      description: Get the current value of all the settings\n      operationId: getAllSettings\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getAllSettings\n                    type: string\n                  data:\n                    description: Information about the setting\n                    properties:\n                      settings:\n                        properties:\n                          allowed_networks:\n                            description: List of allowed networks for each policy server (root and relays)\n                            items:\n                              properties:\n                                allowed_networks:\n                                  description: List of allowed networks\n                                  items:\n                                    description: Allowed network (`0.0.0.0/0` for no restriction `a.b.c.d/32` for one IP)\n                                    example: 192.168.40.0/24\n                                    format: CIDR network\n                                    type: string\n                                  type: array\n                                id:\n                                  description: Rudder id of the policy server\n                                  example: root\n                                  type: string\n                              type: object\n                            type: array\n                          change_message_prompt:\n                            description: Explanation to display\n                            example: Please provide a reason for this change\n                            type: string\n                          display_recent_changes_graphs:\n                            description: Display changes graphs\n                            example: true\n                            type: boolean\n                          enable_change_message:\n                            description: Enable change audit logs\n                            example: true\n                            type: boolean\n                          enable_change_request:\n                            description: Enable Change Requests\n                            example: false\n                            type: boolean\n                          enable_javascript_directives:\n                            description: Enable script evaluation in Directives\n                            example: enabled\n                            type: string\n                          enable_self_deployment:\n                            description: Allow self deployment\n                            example: true\n                            type: boolean\n                          enable_self_validation:\n                            description: Allow self validation\n                            example: true\n                            type: boolean\n                          first_run_hour:\n                            description: First agent run time - hour\n                            example: 0\n                            type: integer\n                          first_run_minute:\n                            description: First agent run time - minute\n                            example: 0\n                            type: integer\n                          global_policy_mode:\n                            description: Define the default setting for global policy mode\n                            enum:\n                              - enforce\n                              - audit\n                            example: enforce\n                            type: string\n                          global_policy_mode_overridable:\n                            description: Allow overrides on this default setting\n                            example: true\n                            type: boolean\n                          heartbeat_frequency:\n                            description: Send heartbeat every heartbeat_frequency runs (only on **changes-only** compliance mode)\n                            example: 10\n                            type: integer\n                          log_all_reports:\n                            description: Log all reports received to `/var/log/rudder/reports/all.log`\n                            example: true\n                            type: boolean\n                          mandatory_change_message:\n                            description: Make message mandatory\n                            example: false\n                            type: boolean\n                          modified_file_ttl:\n                            description: Number of days to retain modified files\n                            example: 7\n                            type: integer\n                          node_accept_duplicated_hostname:\n                            default: false\n                            description: Allow acceptation of a pending node when another one with the same hostname is already accepted\n                            example: false\n                            type: boolean\n                          node_onaccept_default_policyMode:\n                            description: Default policy mode for accepted node\n                            enum:\n                              - default\n                              - enforce\n                              - audit\n                            example: default\n                            type: string\n                          node_onaccept_default_state:\n                            description: Set default state for node when they are accepted within Rudder\n                            enum:\n                              - enabled\n                              - ignored\n                              - empty-policies\n                              - initializing\n                              - preparing-eol\n                            example: enabled\n                            type: string\n                          output_file_ttl:\n                            description: Number of days to retain agent output files\n                            example: 7\n                            type: integer\n                          relay_server_synchronization_method:\n                            description: Method used to synchronize data between server and relays, either \"classic\" (agent protocol, default), \"rsync\" (use rsync to synchronize, that you'll need to be manually set up), or \"disabled\" (use third party system to transmit data)\n                            enum:\n                              - classic\n                              - rsync\n                              - disabled\n                            example: classic\n                            type: string\n                          relay_server_synchronize_policies:\n                            description: If **rsync** is set as a synchronization method, use rsync to synchronize policies between Rudder server and relays. If false, you'll have to synchronize policies yourself.\n                            example: true\n                            type: boolean\n                          relay_server_synchronize_shared_files:\n                            description: If **rsync** is set as a synchronization method, use rsync to synchronize shared files between Rudder server and relays. If false, you'll have to synchronize shared files yourself.\n                            type: boolean\n                          reporting_mode:\n                            description: Compliance reporting mode\n                            enum:\n                              - full-compliance\n                              - changes-only\n                              - reports-disabled\n                            example: full-compliance\n                            type: string\n                          require_time_synchronization:\n                            description: Require time synchronization between nodes and policy server\n                            example: true\n                            type: boolean\n                          rsyslog_reporting_protocol:\n                            description: Protocol used for syslog communication between node and server\n                            enum:\n                              - TCP\n                              - UDP\n                            example: UDP\n                            type: string\n                          rudder_compute_changes:\n                            default: true\n                            description: Compute list of changes (repaired reports) per rule\n                            type: boolean\n                          rudder_compute_dyngroups_max_parallelism:\n                            default: \"1\"\n                            description: Set the parallelism to compute dynamic group, as a number of thread (i.e. 4), or a multiplicative of the number of core (x0.5)\n                            type: string\n                          rudder_generation_compute_dyngroups:\n                            default: true\n                            description: Recompute all dynamic groups at the start of policy generation\n                            type: boolean\n                          rudder_generation_continue_on_error:\n                            default: false\n                            description: Policy generation continues on error during NodeConfiguration evaluation\n                            type: boolean\n                          rudder_generation_delay:\n                            default: 0 seconds\n                            description: Set a delay before starting policy generation, this will allow you to accumulate changes before they are deployed to Nodes, and can also lessen webapp resources needs. The value is a number followed by the time unit needed (seconds/s, minutes/m, hours/h ...), ie \"5m\" for 5 minutes\n                            type: string\n                          rudder_generation_js_timeout:\n                            default: 30\n                            description: Policy generation JS evaluation of directive parameter timeout in seconds\n                            type: integer\n                          rudder_generation_max_parallelism:\n                            default: x0.5\n                            description: Set the policy generation parallelism, either as an number of thread (i.e. 4), or a multiplicative of the number of core (x0.5)\n                            type: string\n                          rudder_generation_policy:\n                            default: all\n                            description: Should policy generation be triggered automatically after a change (value 'all'), or should we wait until a manual launch (through api or UI, value 'onlyManual') or even no policy generation at all (value \"none\")\n                            type: string\n                          rudder_report_protocol_default:\n                            description: Default reporting protocol used\n                            enum:\n                              - HTTPS\n                              - SYSLOG\n                            example: HTTPS\n                            type: string\n                          rudder_save_db_compliance_details:\n                            default: false\n                            description: Store all compliance details in database\n                            type: boolean\n                          rudder_save_db_compliance_levels:\n                            default: true\n                            description: Store all compliance levels in database\n                            type: boolean\n                          rudder_verify_certificates:\n                            default: false\n                            description: Enforce certificate validation in all HTTPS calls\n                            type: boolean\n                          run_frequency:\n                            description: Agent run schedule - time between agent runs (in minutes)\n                            example: 5\n                            type: integer\n                          send_metrics:\n                            description: Send anonymous usage statistics\n                            example: not defined\n                            type: string\n                          splay_time:\n                            description: Maximum delay after scheduled run time (random interval)\n                            example: 5\n                            type: integer\n                          syslog_protocol_disabled:\n                            description: Completely disable syslog protocol\n                            example: true\n                            type: boolean\n                          unexpected_allows_duplicate:\n                            default: true\n                            description: Ignore duplicated compliance reports\n                            example: true\n                            type: boolean\n                          unexpected_unbound_var_values:\n                            default: true\n                            description: Allows multiple reports for configuration based on a multivalued variable\n                            type: boolean\n                    required:\n                      - settings\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Settings\n      summary: List all settings\n      tags:\n        - Settings\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/settings'\n  \"/settings/allowed_networks/{nodeId}\":\n    get:\n      description: Get the list of allowed networks for a policy server\n      operationId: getAllowedNetworks\n      parameters:\n        - $ref: \"#/components/parameters/setting-allowed-networks\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getAllowedNetworks\n                    type: string\n                  data:\n                    description: Information about the allowed_networks settings\n                    properties:\n                      settings:\n                        properties:\n                          allowed_networks:\n                            description: Array of allowed networks\n                            example:\n                              - 162.168.1.0/24\n                              - 162.168.2.0/24\n                            items: {}\n                            type: array\n                        required:\n                          - allowed_networks\n                        type: object\n                    required:\n                      - settings\n                    type: object\n                  id:\n                    description: Target policy server ID\n                    example: root\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - id\n                  - data\n                type: object\n          description: Allowed Networks\n      summary: Get allowed networks for a policy server\n      tags:\n        - Settings\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/settings/allowed_networks/root'\n    post:\n      description: Set the list of allowed networks for a policy server\n      operationId: setAllowedNetworks\n      parameters:\n        - $ref: \"#/components/parameters/setting-allowed-networks\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                value:\n                  description: New value of the allowed networks\n                  example: enforce\n                  type: object\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - modifyAllowedNetworks\n                    type: string\n                  data:\n                    description: Information about the allowed_networks settings\n                    properties:\n                      allowed_networks:\n                        description: Array of allowed networks\n                        example:\n                          - 162.168.1.0/24\n                          - 162.168.2.0/24\n                        items: {}\n                        type: array\n                    required:\n                      - settings\n                    type: object\n                  id:\n                    description: The id of the modified node\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Allowed Networks\n      summary: Set allowed networks for a policy server\n      tags:\n        - Settings\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --header  \"Content-Type: application/json\" --request POST https://rudder.example.com/rudder/api/latest/settings/allowed_networks/root --data '{\"allowed_networks\": [\"192.168.1.0/24\", \"192.168.2.0/24\"]}'\n  \"/settings/allowed_networks/{nodeId}/diff\":\n    post:\n      description: Add or delete allowed networks for a policy server\n      operationId: modifyAllowedNetworks\n      parameters:\n        - $ref: \"#/components/parameters/setting-allowed-networks\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                allowed_networks:\n                  properties:\n                    add:\n                      description: List of networks to add to existing allowed networks for that server\n                      example:\n                        - 162.168.2.0/24\n                        - 192.168.0.0/16\n                      items: {}\n                      type: array\n                    delete:\n                      description: List of networks to remove from existing allowed networks for that server\n                      example:\n                        - 162.168.1.0/24\n                      items: {}\n                      type: array\n                  type: object\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - modifySetting\n                    type: string\n                  data:\n                    description: Information about the allowed_networks settings\n                    properties:\n                      allowed_networks:\n                        description: Array of allowed networks\n                        example:\n                          - 162.168.2.0/24\n                          - 192.168.0.0/16\n                        items: {}\n                        type: array\n                    required:\n                      - settings\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Allowed Networks\n      summary: Modify allowed networks for a policy server\n      tags:\n        - Settings\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST https://rudder.example.com/rudder/api/latest/settings/allowed_networks/root --data '{\\\"allowed_networks\\\": { \\\"delete\\\": [\\\"192.168.1.0/24\\\"], \\\"add\\\": [\\\"192.168.2.0/24\\\"] } }'\"\n  \"/settings/{settingId}\":\n    get:\n      description: Get the current value of a specific setting\n      operationId: getSetting\n      parameters:\n        - $ref: \"#/components/parameters/setting-id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getSetting\n                    type: string\n                  data:\n                    description: Information about the setting\n                    properties:\n                      settingId:\n                        description: Id and value of the property\n                        example: value\n                        type: string\n                    required:\n                      - settings\n                    type: object\n                  id:\n                    description: Id of the setting\n                    example: global_policy_mode\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                  - id\n                type: object\n          description: Settings\n      summary: Get the value of a setting\n      tags:\n        - Settings\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/settings/run_frequency'\n    post:\n      description: Set the current value of a specific setting\n      operationId: modifySetting\n      parameters:\n        - $ref: \"#/components/parameters/setting-id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                value:\n                  description: New value of the setting\n                  example: enforce\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - modifySetting\n                    type: string\n                  data:\n                    description: Information about the setting\n                    properties:\n                      settingId:\n                        description: Id and value of the property\n                        example: value\n                        type: string\n                    required:\n                      - settings\n                    type: object\n                  id:\n                    description: Id of the setting\n                    example: global_policy_mode\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                  - id\n                type: object\n          description: Settings\n      summary: Set the value of a setting\n      tags:\n        - Settings\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/settings/global_policy_mode_overridable --data \"value=true\"'\n  \"/system/archives/{archiveKind}\":\n    get:\n      description: List configuration archives\n      operationId: listArchives\n      parameters:\n        - $ref: \"#/components/parameters/archive-kind\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The kind of the archive\n                    enum:\n                      - archiveFull\n                      - archiveGroups\n                      - archiveRules\n                      - archiveDirectives\n                      - archiveParameters\n                    example: archiveFull\n                    type: string\n                  data:\n                    properties:\n                      full:\n                        items:\n                          properties:\n                            commiter:\n                              example: Rudder system account\n                              type: string\n                            gitCommit:\n                              example: 546de1b211ecc5b7ca295abac2191bc6bb05d44e\n                              format: hash\n                              type: string\n                            id:\n                              example: 2019-09-17_16-06-15.255\n                              type: string\n                          required:\n                            - commiter\n                            - gitCommit\n                            - id\n                          type: object\n                        type: array\n                    required:\n                      - full\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Success\n      summary: List archives\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/system/archives/full'\n    post:\n      description: Create new archive of the given kind\n      operationId: createArchive\n      parameters:\n        - $ref: \"#/components/parameters/archive-kind\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The kind of the archive\n                    enum:\n                      - archiveFull\n                      - archiveGroups\n                      - archiveRules\n                      - archiveDirectives\n                      - archiveParameters\n                    example: archiveFull\n                    type: string\n                  data:\n                    properties:\n                      full:\n                        properties:\n                          commiter:\n                            example: Rudder system account\n                            type: string\n                          gitCommit:\n                            example: 546de1b211ecc5b7ca295abac2191bc6bb05d44e\n                            format: hash\n                            type: string\n                          id:\n                            example: 2019-09-17_16-06-15.255\n                            type: string\n                        required:\n                          - commiter\n                          - gitCommit\n                          - id\n                        type: object\n                    required:\n                      - full\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Success\n      summary: Create an archive\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/system/archives/full'\n  \"/system/archives/{archiveKind}/restore/{archiveRestoreKind}\":\n    post:\n      description: Restore an archive of the given kind for the given moment\n      operationId: restoreArchive\n      parameters:\n        - $ref: \"#/components/parameters/archive-kind\"\n        - in: path\n          name: archiveRestoreKind\n          required: true\n          schema:\n            description: What archive to restore (latest archive, latest commit in configuration repository, or archive with ID as given by listArchive)\n            enum:\n              - latestArchive\n              - latestCommit\n              - archive ID\n            example: latestCommit\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The kind of the archive\n                    enum:\n                      - restoreFullLatestArchive\n                      - restoreGroupLatestArchive\n                      - restoreRulesLatestArchive\n                      - restoreDirectivesLatestArchive\n                      - restoreParametersLatestArchive\n                      - restoreFullLatestCommit\n                      - restoreGroupLatestCommit\n                      - restoreRulesLatestCommit\n                      - restoreDirectivesLatestCommit\n                      - restoreParametersLatestCommit\n                      - archiveFullDateRestore\n                      - archiveGroupDateRestore\n                      - archiveRulesDateRestore\n                      - archiveDirectivesDateRestore\n                      - archiveParametersDateRestore\n                    example: archirestoreFullLatestCommitveFull\n                    type: string\n                  data:\n                    properties:\n                      directive:\n                        example: Started\n                        type: string\n                      full:\n                        example: Started\n                        type: string\n                      groups:\n                        example: Started\n                        type: string\n                      parameters:\n                        example: Started\n                        type: string\n                      rules:\n                        example: Started\n                        type: string\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Success\n      summary: Restore an archive\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/system/archives/full/restore/latestCommit'\n  \"/system/archives/{archiveKind}/zip/{commitId}\":\n    get:\n      description: Get an archive of the given kind as a zip\n      operationId: getZipArchive\n      parameters:\n        - $ref: \"#/components/parameters/archive-kind\"\n        - description: commit ID of the archive to get as a ZIP file\n          in: path\n          name: commitId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              schema:\n                format: binary\n                type: string\n          description: Success\n      summary: Get an archive as a ZIP\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/system/archives/full/zip/cad7d5f0729f06d22878b99869b8d43629e05a78 -o full-archive.zip'\n  /system/healthcheck:\n    get:\n      description: Run and get the result of all checks\n      operationId: getHealthcheckResult\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getHealthcheckResult\n                    type: string\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/check\"\n                    type: array\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Healthcheck information\n      summary: Get healthcheck\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/system/healthcheck?prettify=true'\"\n  /system/info:\n    get:\n      description: Get information about the server version\n      operationId: getSystemInfo\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getSystemInfo\n                    type: string\n                  data:\n                    description: Information about the service\n                    properties:\n                      rudder:\n                        properties:\n                          build-time:\n                            example: 2019-03-25T10:11:23.000Z\n                            format: date\n                            type: string\n                          full-version:\n                            example: 6.0.4\n                            format: X.Y.Z\n                            type: string\n                          major-version:\n                            example: \"6.0\"\n                            format: X.Y\n                            type: string\n                        required:\n                          - major-version\n                          - full-version\n                          - build-time\n                    required:\n                      - rudder\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Service information\n      summary: Get server information\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/system/info'\n  /system/maintenance/purgeSoftware:\n    post:\n      description: Start the software cleaning batch asynchronously.\n      operationId: purgeSoftware\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - purgeSoftware\n                    type: string\n                  data:\n                    items:\n                      description: a success message.\n                      type: string\n                    type: array\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Purge Software\n      summary: Trigger batch for cleaning unreferenced software\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/system/maintenance/purgeSoftware?prettify=true'\n  /system/regenerate/policies:\n    post:\n      description: Trigger a full policy generation\n      operationId: regeneratePolicies\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - regeneratePolicies\n                    type: string\n                  data:\n                    properties:\n                      policies:\n                        enum:\n                          - Started\n                        type: string\n                    required:\n                      - policies\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Success\n      summary: Trigger a new policy generation\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST 'https://rudder.example.com/rudder/api/latest/system/regenerate/policies'\"\n  /system/reload:\n    post:\n      description: Reload both techniques and dynamic groups\n      operationId: reloadAll\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - reloadAll\n                    type: string\n                  data:\n                    properties:\n                      groups:\n                        enum:\n                          - Started\n                        type: string\n                      techniques:\n                        enum:\n                          - Started\n                        type: string\n                    required:\n                      - groups\n                      - techniques\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Service reload\n      summary: Reload both techniques and dynamic groups\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST 'https://rudder.example.com/rudder/api/latest/system/reload'\"\n  /system/reload/groups:\n    post:\n      description: Reload dynamic groups\n      operationId: reloadGroups\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - reloadGroups\n                    type: string\n                  data:\n                    properties:\n                      groups:\n                        enum:\n                          - Started\n                        type: string\n                    required:\n                      - groups\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Service reload\n      summary: Reload dynamic groups\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/system/reload/groups'\n  /system/reload/techniques:\n    post:\n      description: Reload techniques from local technique library\n      operationId: reloadTechniques\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - reloadTechniques\n                    type: string\n                  data:\n                    properties:\n                      techniques:\n                        enum:\n                          - Started\n                        type: string\n                    required:\n                      - techniques\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Service reload\n      summary: Reload techniques\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request POST 'https://rudder.example.com/rudder/api/latest/system/reload/techniques'\n  /system/status:\n    get:\n      description: Get information about current server status\n      operationId: getStatus\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getStatus\n                    type: string\n                  data:\n                    description: Status of the service\n                    properties:\n                      global:\n                        enum:\n                          - OK\n                        type: string\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Service status\n      summary: Get server status\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/system/status'\n  /system/update/policies:\n    post:\n      description: Update configuration policies if needed\n      operationId: updatePolicies\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updatePolicies\n                    type: string\n                  data:\n                    properties:\n                      policies:\n                        enum:\n                          - Started\n                        type: string\n                    required:\n                      - policies\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Success\n      summary: Trigger update of policies\n      tags:\n        - System\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST 'https://rudder.example.com/rudder/api/latest/system/update/policies'\"\n  /techniques:\n    get:\n      description: List all technique with their versions\n      operationId: listTechniques\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listTechniques\n                    type: string\n                  data:\n                    properties:\n                      techniques:\n                        $ref: \"#/components/schemas/techniques\"\n                    required:\n                      - techniques\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Techniques information\n      summary: List all techniques\n      tags:\n        - Techniques\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/techniques'\n  \"/techniques/{techniqueName}/directives\":\n    get:\n      description: List all directives based on all version of a technique\n      operationId: listTechniquesDirectives\n      parameters:\n        - $ref: \"#/components/parameters/technique-name\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listTechniquesDirectives\n                    type: string\n                  data:\n                    properties:\n                      directives:\n                        items:\n                          $ref: \"#/components/schemas/directive\"\n                        type: array\n                    required:\n                      - directives\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Techniques information\n      summary: List all directives based on a technique\n      tags:\n        - Techniques\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/techniques/checkGenericFileContent/directives'\n  \"/techniques/{techniqueName}/{techniqueVersion}/directives\":\n    get:\n      description: List all directives based on a version of a technique\n      operationId: listTechniqueVersionDirectives\n      parameters:\n        - $ref: \"#/components/parameters/technique-name\"\n        - $ref: \"#/components/parameters/technique-version\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listTechniqueDirectives\n                    type: string\n                  data:\n                    properties:\n                      directives:\n                        items:\n                          $ref: \"#/components/schemas/directive\"\n                        type: array\n                    required:\n                      - directives\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Techniques information\n      summary: List all directives based on a version of a technique\n      tags:\n        - Techniques\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/techniques/checkGenericFileContent/6.0/directives'\n  /usermanagement:\n    post:\n      description: Add a new user\n      operationId: addUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/users\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - addUser\n                    type: string\n                  data:\n                    properties:\n                      addedUser:\n                        properties:\n                          password:\n                            description: this password will be hashed for you if the `isPreHashed` is set on false\n                            example: passwdWillBeStoredHashed\n                            type: string\n                          role:\n                            description: defined user's permissions\n                            items:\n                              example: user\n                              type: string\n                            type: array\n                          username:\n                            example: John Doe\n                            type: string\n                        type: object\n                    required:\n                      - addedUser\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Updated\n      summary: Add user\n      tags:\n        - 🧩 User Management\n      x-code-samples:\n        - lang: curl\n          source: |+\n            add.json:\n\n            {\n            \t\"isPreHashed\" : false,\n            \t\"username\" : \"John Doe\",\n              \"password\" : \"passwdWillBeStoredHashed\",\n            \t\"role\" : [\"user\"]\n            }\n\n            curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/usermanagement --header \"Content-type: application/json\" --data @add.json\n\n  /usermanagement/roles:\n    get:\n      description: Get all available roles and their rights\n      operationId: getRole\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getRole\n                    type: string\n                  data:\n                    items:\n                      properties:\n                        id:\n                          description: Name of the role\n                          enum:\n                            - inventory\n                            - compliance\n                            - administrator\n                            - etc\n                          type: string\n                        rights:\n                          description: Role's rights\n                          items:\n                            enum:\n                              - node_read\n                              - userAccount_all\n                            type: string\n                          type: array\n                      required:\n                        - id\n                        - rights\n                      type: object\n                    type: array\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Roles informations\n      summary: List all roles\n      tags:\n        - 🧩 User Management\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/usermanagement/roles'\"\n  \"/usermanagement/update/{username}\":\n    post:\n      description: Rename, change password (pre-hashed or not) and change permission of an user. If a parameter is empty, it will be ignored.\n      operationId: updateUser\n      parameters:\n        - $ref: \"#/components/parameters/username\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/users\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - updateUser\n                    type: string\n                  data:\n                    properties:\n                      updatedUser:\n                        properties:\n                          password:\n                            description: New password given\n                            example: Titi\n                            type: string\n                          role:\n                            description: defined user's permissions\n                            items:\n                              example: user\n                              type: string\n                            type: array\n                          username:\n                            description: New Username\n                            example: Titi\n                            type: string\n                        required:\n                          - username\n                          - password\n                          - role\n                        type: object\n                    required:\n                      - updatedUser\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Updated\n      summary: Update user's infos\n      tags:\n        - 🧩 User Management\n      x-code-samples:\n        - lang: curl\n          source: |+\n            update.json:\n\n            {\n            \t\"isPreHashed\" : false,\n            \t\"username\"    : \"\",\n              \"password\"    : \"Safer password\",\n            \t\"role\"        : [\"user\", \"deployer\", \"inventory\"]\n            }\n\n            curl --header \"X-API-Token: yourToken\" --request PUT https://rudder.example.com/rudder/api/latest/usermanagement/Toto --header \"Content-type: application/json\" --data @update.json\n\n  /usermanagement/users:\n    get:\n      description: Get the list of all present users and their permissions\n      operationId: getUserInfo\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - getUserInfo\n                    type: string\n                  data:\n                    properties:\n                      digest:\n                        enum:\n                          - BCRYPT\n                          - SHA512\n                          - SHA256\n                          - SHA1\n                          - MD5\n                        type: string\n                      users:\n                        items:\n                          $ref: \"#/components/schemas/users\"\n                        type: array\n                    required:\n                      - digest\n                      - users\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Users information\n      summary: List all users\n      tags:\n        - 🧩 User Management\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request GET 'https://rudder.example.com/rudder/api/latest/usermanagement/users'\"\n  /usermanagement/users/reload:\n    get:\n      description: Reload the users from the file system, in the configuration file\n      operationId: reloadUserConf\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - reloadUserConf\n                    type: string\n                  data:\n                    properties:\n                      reload:\n                        properties:\n                          status:\n                            example: Done\n                            type: string\n                        required:\n                          - status\n                        type: object\n                    required:\n                      - reload\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Reload information\n      summary: Reload user\n      tags:\n        - 🧩 User Management\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request POST 'https://rudder.example.com/rudder/api/latest/usermanagement/users/reload'\"\n  \"/usermanagement/{username}\":\n    delete:\n      description: Delete the user and his permissions\n      operationId: deleteUser\n      parameters:\n        - $ref: \"#/components/parameters/username\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - deleteUser\n                    type: string\n                  data:\n                    properties:\n                      deletedUser:\n                        properties:\n                          username:\n                            description: Username of the deleted user\n                            example: Toto\n                            type: string\n                        required:\n                          - username\n                        type: object\n                    required:\n                      - deletedUser\n                    type: object\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Deleted user\n      summary: Delete an user\n      tags:\n        - 🧩 User Management\n      x-code-samples:\n        - lang: curl\n          source: \"curl --header \\\"X-API-Token: yourToken\\\" --request DELETE 'https://rudder.example.com/rudder/api/latest/usermanagement/Toto'\"\n  /users:\n    get:\n      description: List all validated and unvalidated users\n      operationId: listUsers\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listUsers\n                    type: string\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/validated-user\"\n                    type: array\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: List users\n      summary: List user\n      tags:\n        - 🧩 Change requests\n      x-code-samples:\n        - lang: curl\n          source: 'curl --header \"X-API-Token: yourToken\" --request GET https://rudder.example.com/rudder/api/latest/users'\n  /validatedUsers:\n    post:\n      description: Add and remove user from validated users\n      operationId: saveWorkflowUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                validatedUsers:\n                  description: list of user to put in validated list\n                  items:\n                    example: John Do\n                    type: string\n                  type: array\n              required:\n                - validatedUsers\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - addUser\n                    type: string\n                  data:\n                    $ref: \"#/components/schemas/validated-user\"\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Updated\n      summary: Update validated user list\n      tags:\n        - 🧩 Change requests\n      x-code-samples:\n        - lang: curl\n          source: |+\n            update.json:\n\n            {\n            \t\"validatedUsers\": [\"John Do\", \"Jane Doe\"]\n            }\n\n            curl --header \"X-API-Token: yourToken\" --request POST https://rudder.example.com/rudder/api/latest/validatedUsers --header \"Content-type: application/json\" --data @update.json\n\n  \"/validatedUsers/{username}\":\n    delete:\n      description: The user is again subject to workflow validation\n      operationId: removeValidatedUser\n      parameters:\n        - $ref: \"#/components/parameters/username\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  action:\n                    description: The id of the action\n                    enum:\n                      - listUsers\n                    type: string\n                  data:\n                    description: the user removed from validated list\n                    example: John Do\n                    type: string\n                  result:\n                    description: Result of the request\n                    enum:\n                      - success\n                      - error\n                    type: string\n                required:\n                  - result\n                  - action\n                  - data\n                type: object\n          description: Removed user\n      summary: Remove an user from validated user list\n      tags:\n        - 🧩 Change requests\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl --header \"X-API-Token: yourToken\" --request DELETE https://rudder.example.com/rudder/api/latest/validatedUsers/John Do\ncomponents:\n  parameters:\n    archive-kind:\n      description: Type of archive to make\n      in: path\n      name: archiveKind\n      required: true\n      schema:\n        enum:\n          - full\n          - groups\n          - rules\n          - directives\n          - parameters\n        example: full\n        type: string\n    change-request-id:\n      in: path\n      name: changeRequestId\n      required: true\n      schema:\n        description: Change request id\n        example: 37\n        type: integer\n    compliance-level:\n      description: Number of depth level of compliance objects to display (1:rules, 2:directives, 3:components, 4:nodes, 5:values, 6:reports)\n      in: query\n      name: level\n      schema:\n        default: 10\n        example: 4\n        type: integer\n    datasource-id:\n      description: Id of the data source\n      in: path\n      name: datasourceId\n      required: true\n      schema:\n        example: test-data-source\n        type: string\n    directive-id:\n      description: Id of the directive\n      in: path\n      name: directiveId\n      required: true\n      schema:\n        example: 9a1773c9-0889-40b6-be89-f6504443ac1b\n        format: uuid\n        type: string\n    group-category-id:\n      in: path\n      name: groupCategoryId\n      required: true\n      schema:\n        description: Group category id\n        example: e0a311fa-f7b2-4f9e-89a9-db517b9c6b90\n        format: uuid\n        type: string\n    group-id:\n      description: Id of the group\n      in: path\n      name: groupId\n      required: true\n      schema:\n        example: 9a1773c9-0889-40b6-be89-f6504443ac1b\n        format: uuid\n        type: string\n    include:\n      description: |-\n        Level of information to include from the node inventory. Some base levels are defined (**minimal**, **default**, **full**). You can add fields you want to a base level by adding them to the list, possible values are keys from json answer. If you don't provide a base level, they will be added to `default` level, so if you only want os details, use `minimal,os` as the value for this parameter.\n        * **minimal** includes: `id`, `hostname` and `status`\n        * **default** includes **minimal** plus `architectureDescription`, `description`, `ipAddresses`, `lastRunDate`, `lastInventoryDate`, `machine`, `os`, `managementTechnology`, `policyServerId`, `properties` (be careful! Only node own properties, if you also need inherited properties, look at the dedicated `/nodes/{id}/inheritedProperties` endpoint), `policyMode `, `ram` and `timezone`\n        * **full** includes: **default** plus `accounts`, `bios`, `controllers`, `environmentVariables`, `fileSystems`, `managementTechnologyDetails`, `memories`, `networkInterfaces`, `ports`, `processes`, `processors`, `slots`, `software`, `sound`, `storage`, `videos` and `virtualMachines`\n      in: query\n      name: include\n      schema:\n        default: default\n        example: minimal\n        format: comma-separated list\n        type: string\n    node-composition:\n      description: Boolean operator to use between each  `where` criteria.\n      in: query\n      name: composition\n      schema:\n        default: and\n        enum:\n          - and\n          - or\n        example: and\n        type: string\n    node-delete-mode:\n      description: Deletion mode to use, either move to trash ('move', default) or erase ('erase')\n      in: query\n      name: mode\n      required: false\n      schema:\n        default: move\n        enum:\n          - move\n          - erase\n        example: move\n        type: string\n    node-id:\n      description: Id of the target node\n      in: path\n      name: nodeId\n      required: true\n      schema:\n        example: 9a1773c9-0889-40b6-be89-f6504443ac1b\n        format: uuid (or \"root\")\n        type: string\n    node-ids:\n      description: Comma separated list of node Ids\n      in: query\n      name: ids\n      required: true\n      schema:\n        default: default\n        example: 8403353b-42c4-46f5-a08d-bc77a1a0bad9,root\n        format: comma-separated list\n        type: string\n    node-info:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/node-add\"\n      description: Description of a node configuration\n      in: query\n      name: Node parameters\n    node-query:\n      content:\n        application/json:\n          schema:\n            properties:\n              composition:\n                default: and\n                description: Boolean operator to use between each  `where` criteria.\n                enum:\n                  - and\n                  - or\n                example: and\n                type: string\n              select:\n                default: node\n                description: What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.\n                type: string\n              where:\n                description: List of criteria\n                items:\n                  properties:\n                    attribute:\n                      description: Attribute to compare\n                      example: OS\n                      type: string\n                    comparator:\n                      description: Comparator to use\n                      example: eq\n                      type: string\n                    objectType:\n                      description: Type of the object\n                      example: node\n                      type: string\n                    value:\n                      description: Value to compare against\n                      example: Linux\n                      type: string\n                  type: object\n                type: array\n            type: object\n      description: The criterion you want to find for your nodes. Replaces the `where`, `composition` and `select` parameters in a single parameter.\n      in: query\n      name: query\n    node-select:\n      description: What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.\n      in: query\n      name: select\n      schema:\n        default: node\n        type: string\n    node-where:\n      content:\n        application/json:\n          schema:\n            description: List of criteria\n            items:\n              properties:\n                attribute:\n                  description: Attribute to compare\n                  example: OS\n                  type: string\n                comparator:\n                  description: Comparator to use\n                  example: eq\n                  type: string\n                objectType:\n                  description: Type of the object\n                  example: node\n                  type: string\n                value:\n                  description: Value to compare against\n                  example: Linux\n                  type: string\n              type: object\n            type: array\n      description: The criterion you want to find for your nodes\n      in: query\n      name: where\n    parameter-id:\n      description: Id of the parameter to manage\n      in: path\n      name: parameterId\n      required: true\n      schema:\n        example: rudder_file_edit_header\n        type: string\n    rule-category-id:\n      in: path\n      name: ruleCategoryId\n      required: true\n      schema:\n        description: Rule category id\n        example: e0a311fa-f7b2-4f9e-89a9-db517b9c6b90\n        format: uuid\n        type: string\n    rule-id:\n      description: Id of the target rule\n      in: path\n      name: ruleId\n      required: true\n      schema:\n        example: 9a1773c9-0889-40b6-be89-f6504443ac1b\n        format: uuid\n        type: string\n    setting-allowed-networks:\n      description: Policy server ID for which you want to manage allowed networks.\n      in: path\n      name: nodeId\n      required: true\n      schema:\n        example: 9a1773c9-0889-40b6-be89-f6504443ac1b\n        format: uuid (or \"root\")\n        type: string\n    setting-id:\n      description: Id of the setting to set\n      in: path\n      name: settingId\n      required: true\n      schema:\n        example: global_policy_mode\n        type: string\n    technique-name:\n      description: Technique name\n      in: path\n      name: techniqueName\n      required: true\n      schema:\n        description: Technique name\n        example: userManagement\n        type: string\n    technique-version:\n      description: Technique version\n      in: path\n      name: techniqueVersion\n      required: true\n      schema:\n        description: Technique version\n        example: \"6.0\"\n        type: string\n    username:\n      description: Username of an user (unique)\n      in: path\n      name: username\n      required: true\n      schema:\n        example: JaneDoe\n        type: string\n  responses:\n    agent-output:\n      content:\n        text/plain:\n          schema:\n            example: |-\n              Start execution with config [20200218-112602-11ce4f64]\n              Hostname        M| State         Technique                 Component                 Key                Message 192.168.210.5   E| compliant     Common                    ncf Initialization                           Configuration library initialization was correct 192.168.210.5   E| compliant     Common                    Update                                       Policy and configuration library are already up to date. No action required. [...]\n              ## Summary ##################################################################### 90 components verified in 15 directives\n                =\u003e 62 components in Enforce mode\n                    -\u003e 48 compliant\n                    -\u003e 13 not-applicable\n                    -\u003e 1 error\n                =\u003e 28 components in Audit mode\n                    -\u003e 15 compliant\n                    -\u003e 3 not-applicable\n                    -\u003e 10 non-compliant\n              Execution time: 8.89s ################################################################################\n            type: string\n      description: Agent output\n  schemas:\n    agent-key:\n      description: Information about agent key or certificate\n      properties:\n        status:\n          description: Certification status of the security token (reset to `undefined` to trust a new certificate). If `certified`, inventory signature check will be enforced\n          enum:\n            - certified\n            - undefined\n          type: string\n        value:\n          description: Certificate (or public key for \u003c6.0 agents) used by the agent. Be careful write a \"\\n\" after header line and before footer line, JSON does not keep formatting in string.\n          example: |-\n            -----BEGIN CERTIFICATE-----\n            MIIFqDCC[...]3tALNn\n            -----END CERTIFICATE-----\n          format: PEM\n          type: string\n      required:\n        - value\n      type: object\n    api-endpoints:\n      items:\n        description: objects with two fields, the first one has the endpoint name as key and its description as value, the second one has HTTP verb to use (GET, POST PUT, DELETE) as key and the supported version an API path for value.\n        example: \"{ 'listAcceptedNodes': 'List all accepted nodes with configurable details level', 'GET': '[8,9,10,11,12,13] /nodes' }\"\n        properties:\n          endpointName:\n            description: The endpoint name for key and its description for value\n            type: string\n          httpVerb:\n            format: The HTTP verb for the endpoint for key and the supported version and API path for value\n        type: object\n      type: array\n    api-version:\n      properties:\n        all:\n          description: List of API version and status\n          items:\n            properties:\n              status:\n                description: Status of the API, either maintained or deprecated\n                example: maintained\n                format: string\n                required:\n                  - maintained\n                  - deprecated\n              version:\n                description: API Version\n                example: 12\n                type: integer\n            required:\n              - version\n              - status\n            type: object\n          type: array\n        latest:\n          description: Lastest API version available\n          example: 12\n          type: integer\n      type: object\n    api-versions:\n      properties:\n        all:\n          description: List of API version and status\n          items:\n            $ref: \"#/components/schemas/api-version\"\n          type: array\n        latest:\n          description: Lastest API version available\n          example: 12\n          type: integer\n      type: object\n    branding-conf:\n      properties:\n        barColor:\n          $ref: \"#/components/schemas/color\"\n        displayBar:\n          description: Whether header bar is displayed or not\n          type: boolean\n        displayBarLogin:\n          description: Whether header bar is displayed in loggin page or not\n          type: boolean\n        displayLabel:\n          description: Whether header bar's label is displayed or not\n          type: boolean\n        displayMotd:\n          description: Whether the message of the day is displayed in loggin page or not\n          type: boolean\n        labelColor:\n          $ref: \"#/components/schemas/color\"\n        labelText:\n          description: The header bar's label title\n          example: Production\n          type: string\n        motd:\n          description: Message of the day in loggin page\n          example: \"Welcome, please sign in:\"\n          type: string\n        smallLogo:\n          $ref: \"#/components/schemas/logo\"\n        wideLogo:\n          $ref: \"#/components/schemas/logo\"\n      required:\n        - displayBar\n        - displayLabel\n        - labelText\n        - barColor\n        - labelColor\n        - wideLogo\n        - smallLogo\n        - displayBarLogin\n        - displayMotd\n        - motd\n      type: object\n    change-request:\n      description: Content of the change request\n      properties:\n        acceptable:\n          example: true\n          type: boolean\n        changes:\n          properties:\n            rules:\n              items:\n                properties:\n                  action:\n                    example: modify Rule\n                    type: string\n                type: object\n              type: array\n          type: object\n        created by:\n          example: Matthieu C.\n          type: string\n        description:\n          type: string\n        id:\n          example: 42\n          type: integer\n        name:\n          example: Remove unused security policy\n          type: string\n        status:\n          enum:\n            - Deployed\n            - Pending deployment\n            - Cancelled\n            - Pending validation\n            - Open\n          type: string\n      type: object\n    check:\n      properties:\n        msg:\n          description: Message about the check\n          example: Only 2GB of RAM left\n          type: string\n        name:\n          description: Name of the check\n          example: RAM available\n          type: string\n        status:\n          description: The severity status of the check\n          enum:\n            - Critical\n            - Warning\n            - Ok\n          type: string\n      required:\n        - name\n        - msg\n        - status\n      type: object\n    color:\n      properties:\n        alpha:\n          description: percentage of opacity\n          example: 0.5\n          maximum: 1\n          minimum: 0\n          type: number\n        blue:\n          description: percentage of blue component\n          example: 0.235\n          maximum: 1\n          minimum: 0\n          type: number\n        green:\n          description: percentage of green component\n          example: 0.01\n          maximum: 1\n          minimum: 0\n          type: number\n        red:\n          description: percentage of red component\n          example: 0.2\n          maximum: 1\n          minimum: 0\n          type: number\n      required:\n        - red\n        - blue\n        - green\n        - alpha\n      type: object\n    cveCheck:\n      properties:\n        cveId:\n          description: CVE id\n          example: CVE-2019-5953\n          format: cve id\n          type: string\n        nodes:\n          description: Id of Nodes affected by this CVE\n          items:\n            description: Node id\n            type: string\n          type: array\n        packages:\n          description: packages affected by this CVE\n          items:\n            description: Packages affected by this CVE\n            properties:\n              name:\n                description: Name of the package affected\n                example: libssh2-1\n                type: string\n              version:\n                description: Version of the package affected\n                example: 1.7.0-1\n                type: string\n            type: object\n          type: array\n      type: object\n    cveDetails:\n      properties:\n        cvssv2:\n          description: CVSS V2 of the CVE\n          properties:\n            baseScore:\n              description: CVSS V2 base score\n              type: integer\n            vector:\n              description: CVSS V2 vector\n              type: string\n          type: object\n        cvssv3:\n          description: CVSS V3 of the CVE\n          properties:\n            baseScore:\n              description: CVSS V3 base score\n              example: 9.8\n              format: float (0 to 10)\n              type: number\n            baseSeverity:\n              description: CVSS V3 Severity\n              enum:\n                - critical\n                - high\n                - medium\n                - low\n                - none\n              type: string\n            vector:\n              description: CVSS V3 vector\n              example: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\n              type: string\n          type: object\n        cweIds:\n          description: List of CWE (Common Weakness Enumeration) of the CVE\n          items:\n            description: id of a CWE\n            example: CWE-119\n            type: string\n          type: array\n        description:\n          description: CVE Description\n          example: Buffer overflow in GNU Wget 1.20.1 and earlier allows remote attackers to cause a denial-of-service (DoS) or may execute an arbitrary code via unspecified vectors.\n          format: date\n          type: string\n        id:\n          description: CVE id\n          example: CVE-2019-5953\n          format: cve id\n          type: string\n        lastModifiedDate:\n          description: last Date the CVE was modified\n          example: 2019-07-02T23:15:00.000Z\n          format: date\n          type: string\n        publishedDate:\n          description: Date the CVE was published\n          example: 2019-05-17T16:29:00.000Z\n          format: date\n          type: string\n      type: object\n    datasource:\n      properties:\n        description:\n          description: Description of the goal of the data source to create.\n          example: Synchronize example data from the CMDB\n          type: string\n        enabled:\n          description: Enable or disable data source.\n          example: true\n          type: boolean\n        id:\n          description: Unique identifier of the data source to create.\n          example: test-data-source\n          type: string\n        name:\n          description: The human readable name of the data source to create.\n          example: Test data source\n          type: string\n        runParameters:\n          description: Parameters to configure when the data source is fetched to update node properties.\n          properties:\n            onGeneration:\n              description: Trigger a fetch at the beginning of a policy generation\n              example: true\n              type: boolean\n            onNewNode:\n              description: Trigger a fetch when a new node is accepted, for that node\n              example: true\n              type: boolean\n            schedule:\n              description: Configure if data source should be fetch periodically\n              properties:\n                type:\n                  description: \"`scheduled` enables periodic update, `notscheduled` disables them\"\n                  enum:\n                    - scheduled\n                    - notscheduled\n                  example: scheduled\n                  type: string\n              type: object\n          type: object\n        type:\n          description: Define and configure data source type.\n          properties:\n            name:\n              description: Data source type name\n              enum:\n                - HTTP\n              example: HTTP\n              type: string\n            parameters:\n              description: You can use Rudder variable expansion (`${rudder.node`, `${node.properties...}`)\n              properties:\n                checkSsl:\n                  description: Check SSL certificate validity for https. Must be set to false for self-signed certificate\n                  example: true\n                  type: boolean\n                headers:\n                  description: Represent HTTP headers for the query. Rudder expansion available.\n                  items:\n                    properties:\n                      name:\n                        description: Name of the header\n                        example: X-API-Key\n                        type: string\n                      value:\n                        description: Value of the header\n                        example: 05ce8e3d9df6\n                        type: string\n                    type: object\n                  type: array\n                path:\n                  description: JSON path (as defined in [the specification](https://github.com/jayway/JsonPath/), without the leading `$.`) to find the interesting sub-json or string/number/boolean value in the answer. Let empty to use the whole answer as value.\n                  type: string\n                requestMethod:\n                  description: HTTP method to use to contact the URL.\n                  enum:\n                    - GET\n                    - POST\n                  example: GET\n                  type: string\n                requestMode:\n                  description: Configure the strategy used to query the HTTP data source.\n                  properties:\n                    name:\n                      description: Node by node strategy\n                      enum:\n                        - byNode\n                      example: byNode\n                      type: string\n                  type: object\n                requestTimeout:\n                  description: Timeout in seconds for each HTTP request\n                  example: 10\n                  type: integer\n                url:\n                  description: URL to contact. Rudder expansion available.\n                  example: http://jsonplaceholder.typicode.com/users/1\n                  type: string\n              type: object\n          type: object\n        updateTimeout:\n          description: Duration in seconds before aborting data source update. The main goal is to prevent never ending requests. If a periodicity if configured, you should set that timeout at a lower value.\n          example: 30\n          type: integer\n      type: object\n    directive:\n      properties:\n        displayName:\n          description: Human readable name of the directive\n          example: 91252ea2-feb2-412d-8599-c6945fee02c4\n          type: string\n        enabled:\n          description: Is the directive enabled\n          example: true\n          type: boolean\n        id:\n          description: Directive id\n          example: 91252ea2-feb2-412d-8599-c6945fee02c4\n          format: uuid\n          type: string\n        longDescription:\n          description: Description of the technique (rendered as markdown)\n          example: |-\n            # Documentation\n            * [Ticket link](https://tickets.example.com/issues/3456)\n          format: markdown\n          type: string\n        parameters:\n          description: Directive parameters (depends on the source technique)\n          example:\n            name: sections\n            sections:\n              - section:\n                  name: File to manage\n                  sections:\n                    - section:\n                        name: File\n                        vars:\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_PATH\n                              value: /root/test\n                    - section:\n                        name: File cleaning options\n                        vars:\n                          - var:\n                              name: FILE_AND_FOLDER_DELETION_DAYS\n                              value: \"0\"\n                          - var:\n                              name: FILE_AND_FOLDER_DELETION_OPTION\n                              value: none\n                          - var:\n                              name: FILE_AND_FOLDER_DELETION_PATTERN\n                              value: .*\n                    - section:\n                        name: Permissions\n                        vars:\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_CHECK_PERMISSIONS\n                              value: \"false\"\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_GROUP\n                              value: \"\"\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_OWNER\n                              value: \"\"\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_PERM\n                              value: \"000\"\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_RECURSIVE\n                              value: \"1\"\n                    - section:\n                        name: Post-modification hook\n                        vars:\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_POST_HOOK_COMMAND\n                              value: \"\"\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_POST_HOOK_RUN\n                              value: \"false\"\n                  vars:\n                    - var:\n                        name: FILE_AND_FOLDER_MANAGEMENT_ACTION\n                        value: copy\n                    - var:\n                        name: FILE_AND_FOLDER_MANAGEMENT_SOURCE\n                        value: /vagrant/node.sh\n                    - var:\n                        name: FILE_AND_FOLDER_MANAGEMENT_SYMLINK_ENFORCE\n                        value: \"false\"\n          type: object\n        policyMode:\n          description: Policy mode of the directive\n          enum:\n            - enforce\n            - audit\n          example: audit\n          type: string\n        priority:\n          description: Directive priority. `0` has highest priority.\n          example: 5\n          maximum: 10\n          minimum: 0\n          type: integer\n        shortDescription:\n          description: One line directive description\n          example: 91252ea2-feb2-412d-8599-c6945fee02c4\n          type: string\n        system:\n          description: If true it is an internal Rudder directive\n          example: false\n          type: boolean\n        tags:\n          items:\n            example:\n              customer: MyCompany\n            properties:\n              name:\n                description: Value of the `name` key\n                example: value\n                type: string\n            type: object\n          type: array\n        techniqueName:\n          description: Directive id\n          example: userManagement\n          type: string\n        techniqueVersion:\n          description: Directive id\n          example: \"8.0\"\n          type: string\n      type: object\n    directive-new:\n      properties:\n        displayName:\n          description: Human readable name of the directive\n          example: 91252ea2-feb2-412d-8599-c6945fee02c4\n          type: string\n        enabled:\n          description: Is the directive enabled\n          example: true\n          type: boolean\n        id:\n          description: Directive id\n          example: 91252ea2-feb2-412d-8599-c6945fee02c4\n          format: uuid\n          type: string\n        longDescription:\n          description: Description of the technique (rendered as markdown)\n          example: |-\n            # Documentation\n            * [Ticket link](https://tickets.example.com/issues/3456)\n          format: markdown\n          type: string\n        parameters:\n          description: Directive parameters (depends on the source technique)\n          example:\n            name: sections\n            sections:\n              - section:\n                  name: File to manage\n                  sections:\n                    - section:\n                        name: File\n                        vars:\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_PATH\n                              value: /root/test\n                    - section:\n                        name: File cleaning options\n                        vars:\n                          - var:\n                              name: FILE_AND_FOLDER_DELETION_DAYS\n                              value: \"0\"\n                          - var:\n                              name: FILE_AND_FOLDER_DELETION_OPTION\n                              value: none\n                          - var:\n                              name: FILE_AND_FOLDER_DELETION_PATTERN\n                              value: .*\n                    - section:\n                        name: Permissions\n                        vars:\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_CHECK_PERMISSIONS\n                              value: \"false\"\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_GROUP\n                              value: \"\"\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_OWNER\n                              value: \"\"\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_PERM\n                              value: \"000\"\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_RECURSIVE\n                              value: \"1\"\n                    - section:\n                        name: Post-modification hook\n                        vars:\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_POST_HOOK_COMMAND\n                              value: \"\"\n                          - var:\n                              name: FILE_AND_FOLDER_MANAGEMENT_POST_HOOK_RUN\n                              value: \"false\"\n                  vars:\n                    - var:\n                        name: FILE_AND_FOLDER_MANAGEMENT_ACTION\n                        value: copy\n                    - var:\n                        name: FILE_AND_FOLDER_MANAGEMENT_SOURCE\n                        value: /vagrant/node.sh\n                    - var:\n                        name: FILE_AND_FOLDER_MANAGEMENT_SYMLINK_ENFORCE\n                        value: \"false\"\n          type: object\n        priority:\n          description: Directive priority. `0` has highest priority.\n          example: 5\n          maximum: 10\n          minimum: 0\n          type: integer\n        shortDescription:\n          description: One line directive description\n          example: 91252ea2-feb2-412d-8599-c6945fee02c4\n          type: string\n        source:\n          description: The id of the directive the clone will be based onto. If this parameter if provided,  the new directive will be a clone of this source. Other value will override values from the source.\n          example: b9f6d98a-28bc-4d80-90f7-d2f14269e215\n          format: uuid\n          type: string\n        system:\n          description: If true it is an internal Rudder directive\n          example: false\n          type: boolean\n        tags:\n          items:\n            example:\n              customer: MyCompany\n            properties:\n              name:\n                description: Value of the `name` key\n                example: value\n                type: string\n            type: object\n          type: array\n        techniqueName:\n          description: Directive id\n          example: userManagement\n          type: string\n        techniqueVersion:\n          description: Directive id\n          example: \"8.0\"\n          type: string\n      type: object\n    group:\n      properties:\n        description:\n          description: Group description\n          example: Documentation for the group\n          type: string\n        displayName:\n          description: Name of the group\n          example: Ubuntu 18.04 nodes\n          type: string\n        dynamic:\n          default: true\n          description: Should the group be dynamically refreshed (if not, it is a static group)\n          type: boolean\n        enabled:\n          default: true\n          description: Enable or disable the group\n          type: boolean\n        groupClass:\n          items:\n            description: Conditions defined on nodes in the groups. There is one based on the group id, and one based on the group name.\n            example: group_ubuntu\n            format: condition\n            type: string\n          type: array\n        id:\n          default: \"{autogenerated}\"\n          description: Group id\n          example: 32d013f7-b6d8-46c8-99d3-016307fa66c0\n          format: uuid\n          type: string\n        nodeIds:\n          description: List of nodes in the group\n          items:\n            description: Node in the group\n            example: 109142a2-40eb-4e6d-84b4-7ebe3670474c\n            format: uuid (or \"root\")\n            type: string\n          type: array\n        properties:\n          description: Group properties\n          items:\n            properties:\n              name:\n                description: Property name\n                example: os\n                type: string\n              value:\n                description: Property value (can be a string or JSON object)\n                example: debian10\n                format: string or JSON\n            required:\n              - name\n              - value\n            type: object\n          type: array\n        query:\n          description: The criteria defining the group\n          properties:\n            composition:\n              default: and\n              description: Boolean operator to use between each  `where` criteria.\n              enum:\n                - and\n                - or\n              example: and\n              type: string\n            select:\n              default: node\n              description: What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.\n              type: string\n            where:\n              description: List of criteria\n              items:\n                properties:\n                  attribute:\n                    description: Attribute to compare\n                    example: OS\n                    type: string\n                  comparator:\n                    description: Comparator to use\n                    example: eq\n                    type: string\n                  objectType:\n                    description: Type of the object\n                    example: node\n                    type: string\n                  value:\n                    description: Value to compare against\n                    example: Linux\n                    type: string\n                type: object\n              type: array\n          type: object\n      type: object\n    group-category:\n      properties:\n        description:\n          description: Group category description\n          example: Nodes by hardware provider\n          type: string\n        id:\n          default: \"{autogenerated}\"\n          description: Group category id, only provide it when needed.\n          example: 32d013f7-b6d8-46c8-99d3-016307fa66c0\n          format: uuid\n          type: string\n        name:\n          description: Name of the group category\n          example: Hardware groups\n          type: string\n        parent:\n          description: The parent category of the groups\n          example: b9f6d98a-28bc-4d80-90f7-d2f14269e215\n          format: uuid\n          type: string\n      required:\n        - parent\n        - name\n      type: object\n    group-category-update:\n      properties:\n        description:\n          description: Group category description\n          example: Nodes by hardware provider\n          type: string\n        name:\n          description: Name of the group category\n          example: Hardware groups\n          type: string\n        parent:\n          description: The parent category of the groups\n          example: b9f6d98a-28bc-4d80-90f7-d2f14269e215\n          format: uuid\n          type: string\n      required:\n        - parent\n        - name\n      type: object\n    group-new:\n      properties:\n        category:\n          description: Id of the new group's category\n          example: e17ecf6a-a9f2-44de-a97c-116d24d30ff4\n          format: uuid\n          type: string\n        description:\n          description: Group description\n          example: Documentation for the group\n          type: string\n        displayName:\n          description: Name of the group\n          example: Ubuntu 18.04 nodes\n          type: string\n        dynamic:\n          default: true\n          description: Should the group be dynamically refreshed (if not, it is a static group)\n          type: boolean\n        enabled:\n          default: true\n          description: Enable or disable the group\n          type: boolean\n        id:\n          default: \"{autogenerated}\"\n          description: Group id, only provide it when needed.\n          example: 32d013f7-b6d8-46c8-99d3-016307fa66c0\n          format: uuid\n          type: string\n        properties:\n          description: Group properties\n          items:\n            properties:\n              name:\n                description: Property name\n                example: os\n                type: string\n              value:\n                description: Property value (can be a string or JSON object)\n                example: debian10\n                format: string or JSON\n            required:\n              - name\n              - value\n            type: object\n          type: array\n        query:\n          description: The criteria defining the group. If not provided, the group will be empty.\n          properties:\n            composition:\n              default: and\n              description: Boolean operator to use between each  `where` criteria.\n              enum:\n                - and\n                - or\n              example: and\n              type: string\n            select:\n              default: node\n              description: What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.\n              type: string\n            where:\n              description: List of criteria\n              items:\n                properties:\n                  attribute:\n                    description: Attribute to compare\n                    example: OS\n                    type: string\n                  comparator:\n                    description: Comparator to use\n                    example: eq\n                    type: string\n                  objectType:\n                    description: Type of the object\n                    example: node\n                    type: string\n                  value:\n                    description: Value to compare against\n                    example: Linux\n                    type: string\n                type: object\n              type: array\n          type: object\n        source:\n          description: The id of the group the clone will be based onto. If this parameter if provided,  the new group will be a clone of this source. Other value will override values from the source.\n          example: b9f6d98a-28bc-4d80-90f7-d2f14269e215\n          format: uuid\n          type: string\n      required:\n        - displayName\n        - category\n      type: object\n    group-update:\n      properties:\n        category:\n          description: Id of the new group's category\n          example: e17ecf6a-a9f2-44de-a97c-116d24d30ff4\n          format: uuid\n          type: string\n        description:\n          description: Group description\n          example: Documentation for the group\n          type: string\n        displayName:\n          description: Name of the group\n          example: Ubuntu 18.04 nodes\n          type: string\n        dynamic:\n          default: true\n          description: Should the group be dynamically refreshed (if not, it is a static group)\n          type: boolean\n        enabled:\n          default: true\n          description: Enable or disable the group\n          type: boolean\n        query:\n          description: The criteria defining the group. If not provided, the group will be empty.\n          properties:\n            composition:\n              default: and\n              description: Boolean operator to use between each  `where` criteria.\n              enum:\n                - and\n                - or\n              example: and\n              type: string\n            select:\n              default: node\n              description: What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.\n              type: string\n            where:\n              description: List of criteria\n              items:\n                properties:\n                  attribute:\n                    description: Attribute to compare\n                    example: OS\n                    type: string\n                  comparator:\n                    description: Comparator to use\n                    example: eq\n                    type: string\n                  objectType:\n                    description: Type of the object\n                    example: node\n                    type: string\n                  value:\n                    description: Value to compare against\n                    example: Linux\n                    type: string\n                type: object\n              type: array\n          type: object\n      type: object\n    logo:\n      properties:\n        enable:\n          description: Whether the wide logo is displayed or not\n          type: boolean\n      required:\n        - enable\n      type: object\n    node-add:\n      items:\n        properties:\n          agentKey:\n            $ref: \"#/components/schemas/agent-key\"\n          hostname:\n            description: The fully qualified name of the node\n            example: my.node.hostname.local\n            type: string\n          id:\n            description: The Rudder node unique identifier in /opt/rudder/etc/uuid.hive\n            example: 378740d3-c4a9-4474-8485-478e7e52db52\n            type: string\n          ipAddresses:\n            description: an array of IPs.\n            items:\n              example: 192.168.180.90\n              type: string\n            type: array\n          machineType:\n            description: The kind of machine for the node (use vm for a generic VM)\n            enum:\n              - vmware\n              - physical\n              - vm\n              - solariszone\n              - qemu\n              - xen\n              - aixlpar\n              - hyperv\n              - bsdjail\n            type: string\n          os:\n            $ref: \"#/components/schemas/os\"\n          policyMode:\n            description: The policy mode for the node. Can only be specified when status=accepted. If not specified, the default (global) mode will be used\n            enum:\n              - enforce\n              - audit\n            type: string\n          policyServerId:\n            description: The policy server ID for that node. By default, \"root\"\n            example: root\n            type: string\n          properties:\n            description: Node properties in \"key\":\"value\" format, where \"key\" is a string, and \"value\" is either a string, a json array, or a json object. The following example shows you three example of \u0026#58; \u0026#173; a json array on the example of \"tags\":[ \"some\", \"tags\" ] \u0026#173; a simple string on the example of \"env\":\"prod\" \u0026#173; a complex json object on the example of \"vars\":{ \"var1\":\"value1\", \"var2\":\"value2\" } They are optional and can be used in any combination as long the keys are unique within the properties object.\n            properties:\n              env:\n                example: prod\n                type: string\n              tags:\n                items:\n                  enum:\n                    - some\n                    - tags\n                  type: string\n                type: array\n              vars:\n                properties:\n                  var1:\n                    example: value1\n                    type: string\n                  vars2:\n                    example: value2\n                    type: string\n                type: object\n            type: object\n          state:\n            description: Node lifecycle state. Can only be specified when status=accepted. If not specified, enable is used\n            enum:\n              - enable\n              - ignored\n              - empty-policies\n              - initializing\n              - preparing-eol\n            type: string\n          status:\n            description: Target status of the node\n            enum:\n              - accepted\n              - pending\n            type: string\n          timezone:\n            $ref: \"#/components/schemas/timezone\"\n        required:\n          - id\n          - hostname\n          - status\n          - os\n          - machineType\n          - properties\n          - ipAddresses\n        type: object\n      type: array\n    node-full:\n      properties:\n        accounts:\n          description: User accounts declared in the node\n          items:\n            description: User present on the system\n            example: root\n            type: string\n          type: array\n        architectureDescription:\n          description: Information about CPU architecture (32/64 bits)\n          example: x86_64\n          type: string\n        bios:\n          description: BIOS information\n          properties:\n            description:\n              description: System provided description of the BIOS (long name)\n              example: FIXME\n              type: string\n            editor:\n              description: BIOS editor\n              example: innotek GmbH\n              type: string\n            name:\n              description: BIOS name\n              example: VirtualBox\n              type: string\n            quantity:\n              description: Number of BIOS on the machine\n              example: 1\n              type: integer\n            releaseDate:\n              description: Release date of the BIOS\n              example: 2006-12-01 00:00:00+0000\n              type: string\n            version:\n              description: BIOS version\n              example: 1.2.3\n              type: string\n          type: object\n        controllers:\n          description: Physical controller information\n          items:\n            properties:\n              description:\n                description: System provided description of the controller\n                type: string\n              manufacturer:\n                description: Controller manufacturer\n                type: string\n              name:\n                description: Controller name\n                type: string\n              quantity:\n                description: Quantity of that controller\n                example: 1\n                type: integer\n              type:\n                description: Controller type\n                type: string\n            type: object\n          type: array\n        description:\n          description: A human intended description of the node (not used)\n          example: \"\"\n          type: string\n        environmentVariables:\n          description: Environment variables defined on the node in the context of the agent\n          items:\n            properties:\n              name:\n                description: Environment variable name\n                example: LANG\n                type: string\n              value:\n                description: Environment variable value\n                example: en_US.UTF-8\n                type: string\n            type: object\n          type: array\n        fileSystems:\n          description: File system declared on the node\n          items:\n            properties:\n              description:\n                description: Description of the file system\n                type: string\n              fileCount:\n                description: Number of files\n                example: 1456\n                type: integer\n              freeSpace:\n                description: Free space remaining\n                example: 3487\n                type: integer\n              mountPoint:\n                description: Mount point\n                example: /srv\n                type: string\n              name:\n                description: Type of file system (`ext4`, `swap`, etc.)\n                example: ext4\n                type: string\n              totalSpace:\n                description: Total space\n                example: 208869\n                type: integer\n            type: object\n          type: array\n        hostname:\n          description: Fully qualified name of the node\n          example: node1.example.com\n          type: string\n        id:\n          description: Unique id of the node\n          example: 9a1773c9-0889-40b6-be89-f6504443ac1b\n          format: uuid (or \"root\")\n          type: string\n        ipAddresses:\n          description: IP addresses of the node (IPv4 and IPv6)\n          items:\n            description: IP of the node\n            example: 192.168.23.45\n            type: string\n          type: array\n        lastInventoryDate:\n          description: 'Date and time of the latest generated inventory, if one is available (node time). Up to API v11, format was: \"YYYY-MM-dd HH:mm\"'\n          example: 2020-02-29T10:11:32Z\n          format: date\n          type: string\n        lastRunDate:\n          description: 'Date and time of the latest run, if one is available (node time). Up to API v11, format was: \"YYYY-MM-dd HH:mm\"'\n          example: 2020-02-29T14:48:28Z\n          format: date\n          type: string\n        machine:\n          description: Information about the underlying machine\n          properties:\n            id:\n              description: Rudder unique identifier for the machine\n              type: string\n            manufacturer:\n              description: Information about machine manufacturer\n              example: innotek GmbH\n              type: string\n            provider:\n              description: In the case of VM, the VM technology\n              example: vbox\n              type: string\n            serialNumber:\n              description: If available, a unique identifier provided by the machine\n              example: ece12459-2b90-49c9-ab1e-72e38f797421\n              type: string\n            type:\n              description: Type of the machine\n              enum:\n                - Physical\n                - Virtual\n              example: Virtual\n              type: string\n          type: object\n        managementTechnology:\n          description: Management agents running on the node\n          items:\n            properties:\n              capabilities:\n                description: List of agent capabilities\n                items:\n                  description: Special capacities of the agent, like parsing xml or yaml, support of advanced acl, etc.\n                  example: xml\n                  type: string\n                type: array\n              name:\n                description: Agent name\n                example: Rudder\n                type: string\n              nodeKind:\n                description: kind of node for the management engine, like `root`, `relay`, `node`, `root-component`\n                example: node\n                type: string\n              rootComponents:\n                description: Roles fulfilled by the agent\n                items:\n                  description: A role that node fulfills in management technology\n                  example: rudder-db\n                  type: string\n                type: array\n              version:\n                description: Agent version\n                example: 6.0.3.release-1.EL.7\n                type: string\n            required:\n              - name\n              - value\n            type: object\n          type: array\n        managementTechnologyDetails:\n          description: Additional information about management technology\n          properties:\n            cfengineKeys:\n              description: Certificates used by the agent\n              items:\n                description: Certificate (or public key for \u003c6.0 agents) used by the agent\n                example: -----BEGIN CERTIFICATE-----\\nMIIFqDCC[...]3tALNn\\n-----END CERTIFICATE-----\n                format: PEM\n                type: string\n              type: array\n            cfengineUser:\n              description: Local user account used by the agent\n              example: root\n              type: string\n          type: object\n        memories:\n          description: Memory slots\n          items:\n            description: Memory slots\n            properties:\n              capacity:\n                description: Size of modules\n                example: 2\n                type: integer\n              caption:\n                description: Manufacturer provided information about the module\n                type: string\n              description:\n                description: System provided description\n                type: string\n              name:\n                description: Name of the memory slot or memory module\n                type: string\n              quantity:\n                description: Number of modules in that slot\n                example: 1\n                type: string\n              serialNumber:\n                description: Serial number of the module\n                type: string\n              slotNumber:\n                description: Slot number\n                example: 3\n                type: integer\n              speed:\n                description: Memory speed (frequency)\n                example: 1066\n                type: integer\n              type:\n                description: Memory slot type\n                type: string\n            type: object\n          type: array\n        networkInterfaces:\n          description: Detailed information about registered network interfaces on the node\n          items:\n            properties:\n              dhcpServer:\n                description: DHCP server managing that network interface\n                example: 192.168.34.5\n                type: string\n              ipAddresses:\n                description: IP addresses of the network interface\n                items:\n                  description: IP address\n                  example: 192.168.76.4\n                  type: string\n                type: array\n              macAddress:\n                description: MAC address of the network interface\n                example: 08:00:27:6f:5c:14\n                type: string\n              mask:\n                items:\n                  description: Network interface mask\n                  example: 255.255.255.0\n                  format: CIDR\n                  type: string\n                type: array\n              name:\n                description: Interface name (for ex \"eth0\")\n                example: eth0\n                type: string\n              speed:\n                description: Information about synchronization speed\n                example: \"1000\"\n                type: string\n              status:\n                description: network interface status (enabled or not, up or down)\n                example: Up\n                type: string\n              type:\n                description: Information about the type of network interface\n                example: ethernet\n                type: string\n            type: object\n          type: array\n        os:\n          description: Information about the operating system\n          properties:\n            fullName:\n              description: Full operating system name\n              example: CentOS Linux release 7.6.1810 (Core)\n              type: string\n            kernelVersion:\n              description: Version of the OS kernel\n              example: 3.10.0-957.1.3.el7.x86_64\n              type: string\n            name:\n              description: Operating system name (distribution on Linux, etc.)\n              example: Centos\n              type: string\n            servicePack:\n              description: If relevant, the service pack of the OS\n              example: \"3\"\n              type: string\n            type:\n              description: Family of the OS\n              enum:\n                - Windows\n                - Linux\n                - AIX\n                - FreeBSD\n              example: Linux\n              type: string\n            version:\n              description: OS version\n              example: 7.6.1810\n              type: string\n          required:\n            - type\n            - name\n            - version\n            - fullName\n            - kernelVersion\n          type: object\n        policyMode:\n          description: Rudder policy mode for the node (`default` follows the global configuration)\n          enum:\n            - enforce\n            - audit\n            - default\n          example: audit\n          type: string\n        policyServerId:\n          description: Rudder policy server managing the node\n          example: root\n          format: uuid (or \"root\")\n          type: string\n        ports:\n          description: Physical port information objects\n          items:\n            properties:\n              description:\n                description: System provided description of the port\n                type: string\n              name:\n                description: Port name\n                type: string\n              quantity:\n                description: Quantity of similar ports\n                example: 1\n                type: integer\n              type:\n                description: Port type\n                type: string\n            type: object\n          type: array\n        processes:\n          description: Process running (at inventory time)\n          items:\n            description: Process information\n            properties:\n              cpuUsage:\n                description: CPU used by the process (at inventory time)\n                example: 1\n                type: integer\n              description:\n                description: System provided description about the process\n                type: string\n              memory:\n                description: Memory allocated to the process (at inventory time)\n                example: 0.4000000059604645\n                format: float\n                type: number\n              name:\n                description: Process name\n                example: /usr/sbin/httpd -DFOREGROUND\n                type: string\n              pid:\n                description: PID of the process\n                example: 3576\n                type: integer\n              started:\n                description: Started date and time of the process\n                example: 2020-02-29 00:24\n                format: date\n                type: string\n              tty:\n                description: TTY to which the process is\n                example: \"?\"\n                type: string\n              user:\n                description: User account who started the process\n                example: apache\n                type: string\n              virtualMemory:\n                description: Virtual memory allocated to the process (at inventory time)\n                example: 4380\n                type: integer\n            type: object\n          type: array\n        processors:\n          description: CPU information\n          items:\n            properties:\n              arch:\n                description: CPU architecture\n                example: i386\n                type: string\n              core:\n                description: Number of core for that CPU\n                example: 1\n                type: integer\n              cpuid:\n                description: Identifier of the CPU\n                type: string\n              description:\n                description: System provided description of the CPU\n                type: string\n              externalClock:\n                description: External clock used by the CPU\n                type: string\n              familyName:\n                description: CPU family\n                type: string\n              manufacturer:\n                description: CPU manufacturer\n                example: Intel\n                type: string\n              model:\n                description: CPU model\n                example: 158\n                type: integer\n              name:\n                description: CPU name\n                example: Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz\n                type: string\n              quantity:\n                description: Number of CPU with these features\n                example: 1\n                type: integer\n              speed:\n                description: Speed (frequency) of the CPU\n                example: 2800\n                type: integer\n              stepping:\n                description: Stepping or power management information\n                example: 9\n                type: integer\n              thread:\n                description: Number of thread by core for the CPU\n                example: 1\n                type: integer\n            type: object\n          type: array\n        properties:\n          description: Node properties (either set by user or filled by third party sources)\n          items:\n            properties:\n              name:\n                description: Property name\n                example: datacenter\n                type: string\n              value:\n                description: Property value (can be a string or JSON object)\n                example: AMS2\n                format: string or JSON\n            required:\n              - name\n              - value\n            type: object\n          type: array\n        ram:\n          description: Size of RAM in MB\n          type: integer\n        slots:\n          description: Physical extension slot information\n          items:\n            properties:\n              description:\n                description: System provided description of the slots\n                type: string\n              name:\n                description: Slot name or identifier\n                type: string\n              quantity:\n                description: Quantity of similar slots\n                type: integer\n              status:\n                description: Slot status (used, powered, etc)\n                type: string\n            type: object\n          type: array\n        software:\n          description: Software installed on the node (can have thousands items)\n          items:\n            properties:\n              description:\n                description: A description of the software\n                example: A library for getting files from web servers\n                type: string\n              editor:\n                description: Editor of the software\n                example: CentOS\n                type: string\n              license:\n                description: Information about the license\n                properties:\n                  description:\n                    description: License description\n                    type: string\n                  expirationDate:\n                    description: License expiration date\n                    format: date\n                    type: string\n                  name:\n                    description: License name\n                    type: string\n                  oem:\n                    description: Is this an OEM license (and information)\n                    type: string\n                  productId:\n                    description: License product identifier\n                    type: string\n                  productKey:\n                    description: License key\n                    type: string\n                type: object\n              name:\n                description: Name of the software (as reported by the node)\n                example: libcurl\n                type: string\n              releaseDate:\n                description: Release date of the software\n                format: date\n                type: string\n              version:\n                description: Version of the software\n                example: 7.29.0-54.el7_7.2\n                type: string\n            type: object\n          type: array\n        sound:\n          description: Sound card information\n          items:\n            properties:\n              description:\n                description: System provided description of the sound card\n                type: string\n              name:\n                description: Sound card name\n                type: string\n              quantity:\n                description: Quantity of similar sound cards\n                example: 1\n                type: integer\n            type: object\n          type: array\n        status:\n          description: Status of the node\n          enum:\n            - pending\n            - accepted\n            - deleted\n          example: accepted\n          type: string\n        storage:\n          description: Storage (disks) information objects\n          items:\n            properties:\n              description:\n                description: System provided information about the storage\n                type: string\n              firmware:\n                description: Storage firmware information\n                example: \"10\"\n                type: string\n              manufacturer:\n                description: Storage manufacturer\n                type: string\n              model:\n                description: Storage model\n                example: VBOXHARDDISK\n                type: string\n              name:\n                description: Storage name\n                example: sda\n                type: string\n              quantity:\n                description: Quantity of similar storage\n                example: 1\n                type: integer\n              serialNumber:\n                description: Storage serial number\n                example: 000a1954\n                type: string\n              size:\n                description: Storage size in MB\n                example: 85899\n                type: integer\n              type:\n                description: Storage type\n                example: disk\n                type: string\n            type: object\n          type: array\n        timezone:\n          properties:\n            name:\n              description: Timezone name\n              example: UTC\n              type: string\n            offset:\n              description: Timezone offset to UTC\n              example: \"+0000\"\n              format: +/-difference\n              type: string\n          required:\n            - name\n            - value\n          type: object\n        videos:\n          description: Video card information\n          items:\n            properties:\n              chipset:\n                description: information about video card chipset\n                type: string\n              description:\n                description: System provided description for that video card\n                type: string\n              memory:\n                description: Quantity of memory for that video card\n                type: string\n              name:\n                description: Video card name\n                type: string\n              quantity:\n                description: Quantity of similar video cards\n                example: 1\n                type: integer\n              resolution:\n                description: Resolution used by that video card at inventory time\n                type: string\n            type: object\n          type: array\n        virtualMachines:\n          description: Hosted virtual machine information\n          items:\n            properties:\n              description:\n                description: System provided description of the hosted virtual machine\n                type: string\n              memory:\n                description: Memory allocated to the hosted virtual machine\n                type: string\n              name:\n                description: Name of the hosted virtual machine\n                type: string\n              owner:\n                description: Owner of the hosted virtual machine\n                type: string\n              status:\n                description: Status (up, starting, etc) of the hosted virtual machine\n                type: string\n              subsystem:\n                description: Technology of the hosted virtual machine\n                type: string\n              type:\n                description: Type of the hosted virtual machine\n                type: string\n              uuid:\n                description: Unique identifier of the hosted virtual machine\n                type: string\n              vcpu:\n                description: Number of virtual CPU allocated to the hosted virtual machine\n                type: string\n            type: object\n          type: array\n      required:\n        - id\n        - hostname\n        - status\n        - ipAddresses\n        - managementTechnology\n        - policyServerId\n        - properties\n      type: object\n    node-inherited-properties:\n      properties:\n        id:\n          description: Unique id of the node\n          example: 9a1773c9-0889-40b6-be89-f6504443ac1b\n          format: uuid (or \"root\")\n          type: string\n        properties:\n          description: Node properties (either set by user or filled by third party sources)\n          items:\n            properties:\n              hierarchy:\n                description: A description of the inheritance hierarchy for that property, with most direct parent at head and oldest one at tail\n                items:\n                  properties:\n                    id:\n                      description: in the case of a group, its identifier\n                      example: 9180b869-08a3-4173-9dd4-ab68f227e76c\n                      type: string\n                    kind:\n                      description: The kind of object from which the property's value is inherited\n                      enum:\n                        - global\n                        - group\n                      example: global\n                      type: string\n                    name:\n                      description: in the case of a group, its name\n                      example: all centos7\n                      type: string\n                    value:\n                      description: a string representation of the value. If it was a json value, it will be escaped.\n                      example: '{\"array\":[1,2],\"object\":{\"parent\":\"value\"},\"string\":\"parent\"}'\n                      type: string\n                  required:\n                    - kind\n                    - value\n                  type: object\n                type: array\n              name:\n                description: Property name\n                example: datacenter\n                type: string\n              origval:\n                description: The original value (ie, before overriding and inheritance resolution) for that node\n                example: AMS2\n                format: string or JSON\n              provider:\n                description: Property provider (if the property is not a simple node property)\n                enum:\n                  - inherited\n                  - overridden\n                  - plugin name like datasources\n                type: string\n              value:\n                description: Resolved (ie, with inheritance and overriding done) property value (can be a string or JSON object)\n                example: AMS2\n                format: string or JSON\n            required:\n              - name\n              - value\n            type: object\n          type: array\n      required:\n        - id\n        - properties\n      type: object\n    node-settings:\n      properties:\n        agentKey:\n          $ref: \"#/components/schemas/agent-key\"\n        policyMode:\n          description: In which mode the node will apply its configuration policy. Use `default` to use the global mode.\n          enum:\n            - audit\n            - enforce\n            - default\n          example: audit\n          type: string\n        properties:\n          items:\n            properties:\n              name:\n                description: Property name\n                example: datacenter\n                type: string\n              value:\n                description: Property value (can be a string or JSON object)\n                example: AMS2\n                format: string or JSON\n            required:\n              - name\n              - value\n            type: object\n          type: array\n        state:\n          description: The node life cycle state. See [dedicated doc](https://docs.rudder.io/reference/current/usage/advanced_node_management.html#node-lifecycle) for more information.\n          enum:\n            - enabled\n            - ignored\n            - empty-policies\n            - initializing\n            - preparing-eol\n          example: enabled\n          type: string\n      type: object\n    os:\n      properties:\n        fullName:\n          description: The long description name of the os\n          example: Debian GNU/Linux 9 (stretch)\n          type: string\n        name:\n          description: For Linux, a distribution, for Windows, the commercial name\n          enum:\n            - debian\n            - kali\n            - ubuntu\n            - redhat\n            - centos\n            - fedora\n            - suse\n            - oracle\n            - scientific\n            - slackware\n            - xp\n            - vista\n            - seven\n            - \"10\"\n            - \"2000\"\n            - \"2003\"\n            - 2008 r2\n            - \"2012\"\n            - 2012 r2\n            - \"2016\"\n          type: string\n        servicePack:\n          description: a service pack informationnal string\n          type: string\n        type:\n          enum:\n            - linux\n            - windows\n            - solaris\n            - aix\n            - freebsd\n            - unknown\n          type: string\n        version:\n          description: A string representation of the version\n          example: 9.5\n          type: string\n      required:\n        - type\n        - name\n        - version\n        - fullName\n      type: object\n    parameter:\n      properties:\n        description:\n          description: Description of the parameter\n          example: Default inform message put in footer of managed files by Rudder\n          type: string\n        id:\n          description: Name of the parameter\n          example: rudder_file_edit_footer\n          type: string\n        overridable:\n          description: Is the global parameter overridable by node\n          example: false\n          type: boolean\n        value:\n          description: Value of the parameter\n          example: \"### End of file managed by Rudder ###\"\n          format: string or JSON\n      required:\n        - id\n      type: object\n    rule:\n      properties:\n        directives:\n          description: Directives linked to the rule\n          items:\n            description: Directive id\n            type: string\n          type: array\n        displayName:\n          description: Rule name\n          example: Security policy\n          type: string\n        enabled:\n          description: Is the rule enabled\n          example: true\n          type: boolean\n        id:\n          description: Rule id\n          example: 0c1713ae-cb9d-4f7b-abda-ca38c5d643ea\n          format: uuid\n          type: string\n        longDescription:\n          description: Rule documentation\n          example: This rules should be applied to all Linux nodes required basic hardening\n          type: string\n        shortDescription:\n          description: One line rule description\n          example: Baseline applying CIS guidelines\n          type: string\n        system:\n          description: If true it is an internal Rudder rule\n          example: false\n          type: boolean\n        tags:\n          items:\n            example:\n              customer: MyCompany\n            properties:\n              name:\n                description: Value of the `name` key\n                example: value\n                type: string\n            type: object\n          type: array\n        targets:\n          $ref: \"#/components/schemas/rule-targets\"\n      type: object\n    rule-category:\n      properties:\n        description:\n          description: Rules category description\n          example: Baseline applying CIS guidelines\n          type: string\n        id:\n          default: \"{autogenerated}\"\n          description: Rule category id, only provide it when needed.\n          example: 32d013f7-b6d8-46c8-99d3-016307fa66c0\n          format: uuid\n          type: string\n        name:\n          description: Name of the rule category\n          example: Security policies\n          type: string\n        parent:\n          description: The parent category of the rules\n          example: b9f6d98a-28bc-4d80-90f7-d2f14269e215\n          format: uuid\n          type: string\n      required:\n        - parent\n        - name\n      type: object\n    rule-category-update:\n      properties:\n        description:\n          description: Rules category description\n          example: Baseline applying CIS guidelines\n          type: string\n        name:\n          description: Name of the rule category\n          example: Security policies\n          type: string\n        parent:\n          description: The parent category of the rules\n          example: b9f6d98a-28bc-4d80-90f7-d2f14269e215\n          format: uuid\n          type: string\n      required:\n        - parent\n        - name\n      type: object\n    rule-new:\n      properties:\n        category:\n          description: The parent category id. If provided, the new rule will be in this parent category\n          example: 38e0c6ea-917f-47b8-82e0-e6a1d3dd62ca\n          format: uuid\n          type: string\n        directives:\n          description: Directives linked to the rule\n          items:\n            description: Directive id\n            type: string\n          type: array\n        displayName:\n          description: Rule name\n          example: Security policy\n          type: string\n        enabled:\n          description: Is the rule enabled\n          example: true\n          type: boolean\n        id:\n          description: Rule id\n          example: 0c1713ae-cb9d-4f7b-abda-ca38c5d643ea\n          format: uuid\n          type: string\n        longDescription:\n          description: Rule documentation\n          example: This rules should be applied to all Linux nodes required basic hardening\n          type: string\n        shortDescription:\n          description: One line rule description\n          example: Baseline applying CIS guidelines\n          type: string\n        source:\n          description: The id of the rule the clone will be based onto. If this parameter if provided, the new rule will be a clone of this source. Other value will override values from the source.\n          example: b9f6d98a-28bc-4d80-90f7-d2f14269e215\n          format: uuid\n          type: string\n        system:\n          description: If true it is an internal Rudder rule\n          example: false\n          type: boolean\n        tags:\n          items:\n            example:\n              customer: MyCompany\n            properties:\n              name:\n                description: Value of the `name` key\n                example: value\n                type: string\n            type: object\n          type: array\n        targets:\n          description: Groups linked to the rule\n          items:\n            description: Group id\n            type: string\n          type: array\n      type: object\n    rule-target:\n      description: Node and special groups targeted by that rule\n      enum:\n        - special:all\n        - special:all_exceptPolicyServers\n        - special:all_servers_with_role\n        - special:all_nodes_without_role\n        - policyServer:${policyServerId}\n        - group:${nodeGroupId}\n      example: policyServer:root\n      type: string\n    rule-targets:\n      description: Node and special groups targeted by that rule\n      items:\n        example:\n          - exclude:\n              or:\n                - policyServer:root\n                - group:cd377524-808b-4b42-8724-6ef308efeac7\n            include:\n              or:\n                - special:all\n        properties:\n          exclude:\n            description: list of groups to exclude from rule application\n            properties:\n              or:\n                items:\n                  $ref: \"#/components/schemas/rule-target\"\n                type: array\n            type: object\n          include:\n            description: list of groups to include in rule application\n            properties:\n              or:\n                items:\n                  $ref: \"#/components/schemas/rule-target\"\n                type: array\n            type: object\n        required:\n          - include\n          - exclude\n        type: object\n      type: array\n    rule-with-category:\n      properties:\n        category:\n          description: The parent category id.\n          example: 38e0c6ea-917f-47b8-82e0-e6a1d3dd62ca\n          format: uuid\n          type: string\n        directives:\n          description: Directives linked to the rule\n          items:\n            description: Directive id\n            type: string\n          type: array\n        displayName:\n          description: Rule name\n          example: Security policy\n          type: string\n        enabled:\n          description: Is the rule enabled\n          example: true\n          type: boolean\n        id:\n          description: Rule id\n          example: 0c1713ae-cb9d-4f7b-abda-ca38c5d643ea\n          format: uuid\n          type: string\n        longDescription:\n          description: Rule documentation\n          example: This rules should be applied to all Linux nodes required basic hardening\n          type: string\n        shortDescription:\n          description: One line rule description\n          example: Baseline applying CIS guidelines\n          type: string\n        system:\n          description: If true it is an internal Rudder rule\n          example: false\n          type: boolean\n        tags:\n          items:\n            example:\n              customer: MyCompany\n            properties:\n              name:\n                description: Value of the `name` key\n                example: value\n                type: string\n            type: object\n          type: array\n        targets:\n          description: Groups linked to the rule\n          items:\n            description: Group id\n            type: string\n          type: array\n      type: object\n    techniques:\n      items:\n        properties:\n          name:\n            description: Technique name\n            example: userManagement\n            type: string\n          versions:\n            description: Available versions for this technique\n            items:\n              description: Technique version\n              example: \"6.0\"\n              type: string\n            type: array\n        type: object\n      type: array\n    timezone:\n      description: Timezone information of the node.\n      properties:\n        name:\n          description: The standard name of the timezone\n          example: CEST\n          type: string\n        offset:\n          description: Timezone offset compared to UTC, in +/-HHMM format\n          example: 128\n          type: string\n      required:\n        - name\n        - offset\n      type: object\n    users:\n      properties:\n        isPreHahed:\n          description: If you want to provide hashed password set this propertie to `true` otherwise we will hash the plain password and store the hash\n          enum:\n            - false\n            - true\n          type: boolean\n        password:\n          description: this password will be hashed for you if the `isPreHashed` is set on false\n          example: passwdWillBeStoredHashed\n          type: string\n        role:\n          description: Defined user's permissions\n          items:\n            example: user\n            type: string\n          type: array\n        username:\n          example: John Doe\n          type: string\n      type: object\n    validated-user:\n      description: list of users with their workflow settings\n      properties:\n        isValidated:\n          description: whether the user's actions generate chanque-request or not\n          type: boolean\n        userExists:\n          description: whether the user exists in file or not\n          type: boolean\n        username:\n          example: John Do\n          type: string\n      required:\n        - username\n        - isValidated\n        - userExists\n      type: object\n  securitySchemes:\n    API-Tokens:\n      description: |-\n        Authenticating against the API is mandatory for every request, as sensitive information like inventories or configuration rules may get exposed. It is done using a dedicated API Account, than can be created in the web interface on the 'API Accounts' page located inside the Administration part.\n\n        ![API Tokens settings](assets/APISettings.png \"API Tokens settings\")\n\n        API Accounts are not linked to standard user accounts, and currently give full administrative privileges: they must be secured adequately. Once you have created an API account, you get a token that will be needed to authenticate every request. This token is the API equivalent of a password, and must be secured just like a password would be.\n\n        On any call to the API, you will need to add a **X-API-Token** header to your request to authenticate:\n\n\n            curl --request GET --header \"X-API-Token: yourToken\" https://rudder.example.com/rudder/api/latest/rules\n\n\n        If you perform any action (creation, update, deletion) using the API, the event log generated will record the API account as the user.\n      in: header\n      name: X-API-Token\n      type: apiKey\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/rudder.example.local/13/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/rudder.example.local/13/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/nodes/{nodeId}/applyPolicy\": post: responses: 200: contents: unsupported content types: [text/plain]",
	"NotImplemented": [
		"unsupported content types"
	]
}