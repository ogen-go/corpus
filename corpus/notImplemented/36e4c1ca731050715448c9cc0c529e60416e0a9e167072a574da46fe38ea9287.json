{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/alpacahq/alpaca-docs"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "oas/trading/openapi.yaml",
			"byteSize": 70580,
			"content": "openapi: 3.0.0\ninfo:\n  title: Trader API\n  description: |-\n    Alpaca's Trading API is a modern platform for algorithmic trading.\n\n    For complete documentation on the Trading API and to obtain your keys head to https://alpaca.markets/docs/api-documentation/api-v2/. Once you have your keys, head to the environments tab to quickly get started.\n  version: 2.0.0\n  contact:\n    name: Alpaca Support\n    email: support@alpaca.markets\n    url: 'https://alpaca.markets/support'\n  termsOfService: 'https://s3.amazonaws.com/files.alpaca.markets/disclosures/library/TermsAndConditions.pdf'\nservers:\n  - url: 'https://paper-api.alpaca.markets'\n    description: Paper\n  - url: 'https://api.alpaca.markets'\n    description: Live\ntags:\n  - name: Accounts\n    description: 'Head to https://alpaca.markets/docs/api-references/trading-api/account/ to view complete documentation on the Accounts API.'\n  - name: Orders\n    description: 'Head to https://alpaca.markets/docs/api-documentation/api-v2/orders/ to view complete documentation on the Orders API.'\n  - name: Positions\n    description: 'Head to https://alpaca.markets/docs/api-documentation/api-v2/positions/ to view complete documentation on the Positions API.'\n  - name: Portfolio History\n    description: 'Head to https://alpaca.markets/docs/api-documentation/api-v2/portfolio-history/ to view complete documentation on the Portfolio History API.'\n  - name: Watchlists\n    description: 'Head to https://alpaca.markets/docs/api-documentation/api-v2/watchlist/ to view complete documentation on the Watchlist API.'\n  - name: Account Configurations\n    description: 'Head to https://alpaca.markets/docs/api-documentation/api-v2/account-configuration/ to view complete documentation on the Account Configurations API.'\n  - name: Account Activities\n    description: 'Head to https://alpaca.markets/docs/api-references/trading-api/account-activities/ to view complete documentation on the Account Activities API.'\n  - name: Calendar\n    description: 'Head to https://alpaca.markets/docs/api-references/trading-api/calendar/ to view complete documentation on the Market Calendar API.'\n  - name: Clock\n    description: 'Head to https://alpaca.markets/docs/api-references/trading-api/clock/ to view complete documentation on the Market Clock API.'\npaths:\n  /v2/account:\n    get:\n      summary: Get account\n      tags:\n        - Accounts\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n      operationId: getAccount\n      parameters: []\n      description: Returns the account associated with the API key.\n  /v2/orders:\n    post:\n      tags:\n        - Orders\n      summary: Order\n      operationId: postOrder\n      description: 'Places a new order for the given account. An order request may be rejected if the account is not authorized for trading, or if the tradable balance is insufficient to fill the order..'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n        description: ''\n      parameters: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '403':\n          description: |-\n            Forbidden\n\n            Buying power or shares is not sufficient.\n        '422':\n          description: |-\n            Unprocessable\n\n            Input parameters are not recognized.\n    get:\n      tags:\n        - Orders\n      summary: All Orders\n      parameters:\n        - schema:\n            type: string\n            enum:\n              - open\n              - closed\n              - all\n            example: open\n          in: query\n          name: status\n          description: 'Order status to be queried. open, closed or all. Defaults to open.'\n        - schema:\n            type: integer\n          in: query\n          name: limit\n          description: The maximum number of orders in response. Defaults to 50 and max is 500.\n        - schema:\n            type: string\n          in: query\n          name: after\n          description: The response will include only ones submitted after this timestamp (exclusive.)\n        - schema:\n            type: string\n          in: query\n          name: until\n          description: The response will include only ones submitted until this timestamp (exclusive.)\n        - schema:\n            type: string\n            enum:\n              - asc\n              - desc\n          in: query\n          name: direction\n          description: The chronological order of response based on the submission time. asc or desc. Defaults to desc.\n        - schema:\n            type: boolean\n          in: query\n          name: nested\n          description: 'If true, the result will roll up multi-leg orders under the legs field of primary order.'\n        - schema:\n            type: string\n          in: query\n          name: symbols\n          description: 'A comma-separated list of symbols to filter by (ex. “AAPL,TSLA,MSFT”). A currency pair is required for crypto orders (ex. “BTCUSD,BCHUSD,LTCUSD,ETCUSD”).'\n      responses:\n        '200':\n          description: |-\n            Successful response\n\n            An array of Order objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Order'\n      operationId: getAllOrders\n      description: 'Retrieves a list of orders for the account, filtered by the supplied query parameters.'\n      x-internal: false\n    delete:\n      tags:\n        - Orders\n      summary: All Orders\n      parameters: []\n      responses:\n        '207':\n          description: |-\n            Multi-Status with body.\n\n            an array of objects that include the order id and http status code for each status request.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CanceledOrderResponse'\n        '500':\n          description: Failed to cancel order.\n      operationId: deleteAllOrders\n      description: 'Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.'\n  '/v2/orders/{order_id}':\n    get:\n      tags:\n        - Orders\n      summary: Order by Order ID\n      parameters:\n        - schema:\n            type: boolean\n          in: query\n          name: nested\n          description: 'If true, the result will roll up multi-leg orders under the legs field of primary order.'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n      operationId: getOrderByOrderID\n      description: Retrieves a single order for the given order_id.\n    patch:\n      tags:\n        - Orders\n      summary: Order\n      description: |\n        Replaces a single order with updated parameters. Each parameter overrides the corresponding attribute of the existing order. The other attributes remain the same as the existing order.\n\n        A success return code from a replaced order does NOT guarantee the existing open order has been replaced. If the existing open order is filled before the replacing (new) order reaches the execution venue, the replacing (new) order is rejected, and these events are sent in the trade_updates stream channel. \n\n        While an order is being replaced, buying power is reduced by the larger of the two orders that have been placed (the old order being replaced, and the newly placed order to replace it). If you are replacing a buy entry order with a higher limit price than the original order, the buying power is calculated based on the newly placed order. If you are replacing it with a lower limit price, the buying power is calculated based on the old order.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchOrderRequest'\n      responses:\n        '200':\n          description: |-\n            Successful response\n\n            The new Order object with the new order ID.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n      operationId: patchOrderByOrderId\n    delete:\n      tags:\n        - Orders\n      summary: Order by Order ID\n      parameters: []\n      responses:\n        '204':\n          description: No Content\n        '422':\n          description: The order status is not cancelable.\n      operationId: deleteOrderByOrderID\n      description: 'Attempts to cancel an Open Order. If the order is no longer cancelable, the request will be rejected with status 422; otherwise accepted with return status 204.'\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: order_id\n        in: path\n        required: true\n        description: order id\n  /v2/positions:\n    get:\n      tags:\n        - Positions\n      summary: All Open Positions\n      parameters: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Position'\n      operationId: getAllOpenPositions\n      description: |-\n        The positions API provides information about an account’s current open positions. The response will include information such as cost basis, shares traded, and market value, which will be updated live as price information is updated. Once a position is closed, it will no longer be queryable through this API\n\n        Retrieves a list of the account’s open positions\n    delete:\n      tags:\n        - Positions\n      summary: All Positions\n      parameters:\n        - schema:\n            type: boolean\n          in: query\n          name: cancel_orders\n          description: 'If true is specified, cancel all open orders before liquidating all positions.'\n      responses:\n        '207':\n          description: |-\n            Multi-Status with body.\n\n            an array of PositionClosed responses\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PositionClosedReponse'\n        '500':\n          description: Failed to liquidate\n      operationId: deleteAllOpenPositions\n      description: 'Closes (liquidates) all of the account’s open long and short positions. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.'\n  '/v2/positions/{symbol_or_asset_id}':\n    get:\n      tags:\n        - Positions\n      summary: Open Position\n      description: Retrieves the account’s open position for the given symbol or assetId.\n      parameters: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Position'\n      operationId: getOpenPosition\n    delete:\n      tags:\n        - Positions\n      summary: Position\n      parameters:\n        - schema:\n            type: number\n          in: query\n          name: qty\n          description: the number of shares to liquidate. Can accept up to 9 decimal points. Cannot work with percentage\n        - schema:\n            type: number\n          in: query\n          name: percentage\n          description: percentage of position to liquidate. Must be between 0 and 100. Would only sell fractional if position is originally fractional. Can accept up to 9 decimal points. Cannot work with qty\n      responses:\n        '200':\n          description: |-\n            Successful response\n\n            Returns the order created to close out this position\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n      description: Closes (liquidates) the account’s open position for the given symbol. Works for both long and short positions.\n      operationId: deleteOpenPosition\n    parameters:\n      - schema:\n          type: string\n        name: symbol_or_asset_id\n        in: path\n        required: true\n        description: symbol or assetId\n  /v2/account/portfolio/history:\n    get:\n      tags:\n        - Portfolio History\n      summary: Account Portfolio History\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: period\n          description: 'The duration of the data in \u003cnumber\u003e + \u003cunit\u003e, such as 1D, where \u003cunit\u003e can be D for day, W for week, M for month and A for year. Defaults to 1M.'\n        - schema:\n            type: string\n          in: query\n          name: timeframe\n          description: 'The resolution of time window. 1Min, 5Min, 15Min, 1H, or 1D. If omitted, 1Min for less than 7 days period, 15Min for less than 30 days, or otherwise 1D.'\n        - schema:\n            type: string\n            format: date\n            example: '2022-05-15'\n          in: query\n          name: date_end\n          description: 'The date the data is returned up to, in “YYYY-MM-DD” format. Defaults to the current market date (rolls over at the market open if extended_hours is false, otherwise at 7am ET)'\n        - schema:\n            type: string\n          in: query\n          name: extended_hours\n          description: 'If true, include extended hours in the result. This is effective only for timeframe less than 1D.'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortfolioHistory'\n      operationId: getAccountPortfolioHistory\n      description: Returns timeseries data about equity and profit/loss (P/L) of the account in requested timespan.\n  /v2/watchlists:\n    get:\n      tags:\n        - Watchlists\n      summary: Watchlists\n      parameters: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              examples:\n                example-1:\n                  value:\n                    - id: 3174d6df-7726-44b4-a5bd-7fda5ae6e009\n                      account_id: abe25343-a7ba-4255-bdeb-f7e013e9ee5d\n                      created_at: '2022-01-31T21:49:05.14628Z'\n                      updated_at: '2022-01-31T21:49:05.14628Z'\n                      name: Primary Watchlist\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Watchlist'\n      operationId: getWatchlists\n      description: Returns the list of watchlists registered under the account.\n    post:\n      tags:\n        - Watchlists\n      summary: Watchlist\n      description: Create a new watchlist with initial set of assets.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateWatchlistRequest'\n      parameters: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Watchlist'\n      operationId: postWatchlist\n  '/v2/watchlists/{watchlist_id}':\n    get:\n      tags:\n        - Watchlists\n      summary: Get Watchlist by ID\n      parameters: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Watchlist'\n      operationId: getWatchlistById\n      description: Returns a watchlist identified by the ID.\n    put:\n      tags:\n        - Watchlists\n      summary: Update Watchlist By Id\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateWatchlistRequest'\n      parameters: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Watchlist'\n      operationId: updateWatchlistById\n      description: Update the name and/or content of watchlist\n    post:\n      tags:\n        - Watchlists\n      summary: Add Asset to Watchlist\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddAssetToWatchlistRequest'\n      parameters: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Watchlist'\n      operationId: addAssetToWatchlist\n      description: Append an asset for the symbol to the end of watchlist asset list\n    delete:\n      tags:\n        - Watchlists\n      summary: Delete Watchlist By Id\n      parameters: []\n      responses:\n        '204':\n          description: No Content\n      operationId: deleteWatchlistById\n      description: Delete a watchlist. This is a permanent deletion.\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: watchlist_id\n        in: path\n        required: true\n        description: watchlist id\n  '/v2/watchlists:by_name':\n    get:\n      tags:\n        - Watchlists\n      summary: Get Watchlist by Name\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: name\n          required: true\n          description: name of the watchlist\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Watchlist'\n      operationId: getWatchlistByName\n      description: Returns a watchlist by name\n    put:\n      tags:\n        - Watchlists\n      summary: Update Watchlist By Name\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateWatchlistRequest'\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: name\n          required: true\n          description: name of the watchlist\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Watchlist'\n      operationId: updateWatchlistByName\n      description: Update the name and/or content of watchlist\n    post:\n      tags:\n        - Watchlists\n      summary: Add Asset to Watchlist By Name\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddAssetToWatchlistRequest'\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: name\n          required: true\n          description: name of the watchlist\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Watchlist'\n      operationId: addAssetToWatchlistByName\n      description: Append an asset for the symbol to the end of watchlist asset list\n    delete:\n      tags:\n        - Watchlists\n      summary: Delete Watchlist By Name\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: name\n          required: true\n          description: name of the watchlist\n      responses:\n        '204':\n          description: No Content\n      operationId: deleteWatchlistByName\n      description: Delete a watchlist. This is a permanent deletion.\n    parameters: []\n  '/v2/watchlists/{watchlist_id}/{symbol}':\n    delete:\n      tags:\n        - Watchlists\n      summary: Symbol from Watchlist\n      parameters: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Watchlist'\n          description: Returns the updated watchlist\n      operationId: removeAssetFromWatchlist\n      description: Delete one entry for an asset by symbol name\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: watchlist_id\n        in: path\n        required: true\n        description: Watchlist ID\n      - schema:\n          type: string\n        name: symbol\n        in: path\n        required: true\n        description: symbol name to remove from the watchlist content\n  /v2/account/configurations:\n    get:\n      tags:\n        - Account Configurations\n      summary: Account Configurations\n      parameters: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountConfigurations'\n      operationId: getAccountConfig\n      description: gets the current account configuration values\n    patch:\n      tags:\n        - Account Configurations\n      summary: Account Configurations\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AccountConfigurations'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountConfigurations'\n      operationId: patchAccountConfig\n      description: Updates and returns the current account configuration values\n  /v2/account/activities:\n    get:\n      summary: Get account activities of one type\n      tags:\n        - Account Activities\n      responses:\n        '200':\n          description: returns an array of Account activities\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  anyOf:\n                    - $ref: '#/components/schemas/TradingActivities'\n                    - $ref: '#/components/schemas/NonTradeActivities'\n                  description: Will be a mix of TradingActivity or NonTradeActivity objects based on what is passed in the activity_types parameter\n      operationId: getAccountActivities\n      description: Returns account activity entries for many types of activities.\n      parameters:\n        - schema:\n            type: string\n            format: date-time\n          in: query\n          name: date\n          description: The date for which you want to see activities.\n        - schema:\n            type: string\n            format: date-time\n          in: query\n          description: The response will contain only activities submitted before this date. (Cannot be used with date.)\n          name: until\n        - schema:\n            type: string\n            format: date-time\n          in: query\n          description: The response will contain only activities submitted after this date. (Cannot be used with date.)\n          name: after\n        - schema:\n            type: string\n            enum:\n              - asc\n              - desc\n            example: desc\n          in: query\n          name: direction\n          description: asc or desc (default desc if unspecified.)\n        - schema:\n            type: integer\n          in: query\n          name: page_size\n          description: The maximum number of entries to return in the response. (See the section on paging above.)\n        - schema:\n            type: string\n          in: query\n          description: 'The ID of the end of your current page of results. '\n          name: page_token\n        - schema:\n            type: string\n            example: FILL\n          in: query\n          name: activity_types\n          description: 'A comma-separated list of the activity types to include in the response. If unspecified, activities of all types will be returned. See ActivityType model for values'\n  '/v2/account/activities/{activity_type}':\n    parameters:\n      - schema:\n          type: string\n        name: activity_type\n        in: path\n        description: The activity type you want to view entries for. A list of valid activity types can be found at the bottom of this page.\n        required: true\n    get:\n      summary: Get account activities of one type\n      tags:\n        - Account Activities\n      responses:\n        '200':\n          description: returns an array of Account activities\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                    - $ref: '#/components/schemas/TradingActivities'\n                    - $ref: '#/components/schemas/NonTradeActivities'\n                  description: Will be one of a TradingActivity or NonTradeActivity based on activity_type used in path\n      operationId: getAccountActivitiesByActivityType\n      description: Returns account activity entries for a specific type of activity.\n      parameters:\n        - schema:\n            type: string\n            format: date-time\n          in: query\n          name: date\n          description: The date for which you want to see activities.\n        - schema:\n            type: string\n            format: date-time\n          in: query\n          description: The response will contain only activities submitted before this date. (Cannot be used with date.)\n          name: until\n        - schema:\n            type: string\n            format: date-time\n          in: query\n          description: The response will contain only activities submitted after this date. (Cannot be used with date.)\n          name: after\n        - schema:\n            type: string\n            enum:\n              - asc\n              - desc\n            example: desc\n          in: query\n          name: direction\n          description: asc or desc (default desc if unspecified.)\n        - schema:\n            type: integer\n          in: query\n          name: page_size\n          description: The maximum number of entries to return in the response. (See the section on paging above.)\n        - schema:\n            type: string\n          in: query\n          description: 'The ID of the end of your current page of results. '\n          name: page_token\n  /v2/calendar:\n    get:\n      summary: Get Market Calendar info\n      tags:\n        - Calendar\n      parameters:\n        - schema:\n            type: string\n            format: date-time\n          in: query\n          name: start\n          description: The first date to retrieve data for (inclusive)\n        - schema:\n            type: string\n            format: date-time\n          in: query\n          name: end\n          description: The last date to retrieve data for (inclusive)\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Calendar'\n      operationId: getCalendar\n      description: Returns the market calendar.\n  /v2/clock:\n    get:\n      summary: Get Market Clock info\n      parameters: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Clock'\n      operationId: getClock\n      description: |-\n        The clock API serves the current market timestamp, whether or not the market is currently open, as well as the times of the next market open and close.\n\n        Returns the market clock.\n      tags:\n        - Clock\ncomponents:\n  securitySchemes:\n    API_Key:\n      name: APCA-API-KEY-ID\n      type: apiKey\n      in: header\n      description: ''\n    API_Secret:\n      name: APCA-API-SECRET-KEY\n      type: apiKey\n      in: header\n      description: ''\n  schemas:\n    Account:\n      title: Account\n      type: object\n      description: |\n        The account API serves important information related to an account, including account status, funds available for trade, funds available for withdrawal, and various flags relevant to an account’s ability to trade. An account maybe be blocked for just for trades (trades_blocked flag) or for both trades and transfers (account_blocked flag) if Alpaca identifies the account to engaging in any suspicious activity. Also, in accordance with FINRA’s pattern day trading rule, an account may be flagged for pattern day trading (pattern_day_trader flag), which would inhibit an account from placing any further day-trades. Please note that cryptocurrencies are not eligible assets to be used as collateral for margin accounts and will require the asset be traded using cash only.\n      x-examples:\n        example-1:\n          account_blocked: false\n          account_number: 010203ABCD\n          buying_power: '262113.632'\n          cash: '-23140.2'\n          created_at: '2019-06-12T22:47:07.99658Z'\n          currency: USD\n          daytrade_count: 0\n          daytrading_buying_power: '262113.632'\n          equity: '103820.56'\n          id: e6fe16f3-64a4-4921-8928-cadf02f92f98\n          initial_margin: '63480.38'\n          last_equity: '103529.24'\n          last_maintenance_margin: '38000.832'\n          long_market_value: '126960.76'\n          maintenance_margin: '38088.228'\n          multiplier: '4'\n          pattern_day_trader: false\n          portfolio_value: '103820.56'\n          regt_buying_power: '80680.36'\n          short_market_value: '0'\n          shorting_enabled: true\n          sma: '0'\n          status: ACTIVE\n          trade_suspended_by_user: false\n          trading_blocked: false\n          transfers_blocked: false\n      properties:\n        id:\n          type: string\n          description: |\n            Account Id.\n          format: uuid\n        account_number:\n          type: string\n          description: Account number.\n        status:\n          $ref: '#/components/schemas/AccountStatus'\n        currency:\n          type: string\n          description: |\n            USD\n          example: USD\n        cash:\n          description: |\n            Cash Balance\n          type: string\n        portfolio_value:\n          description: Total value of cash + holding positions (This field is deprecated. It is equivalent to the equity field.)\n          type: string\n        pattern_day_trader:\n          type: boolean\n          description: Whether or not the account has been flagged as a pattern day trader\n        trade_suspended_by_user:\n          type: boolean\n          description: 'User setting. If true, the account is not allowed to place orders.'\n        trading_blocked:\n          type: boolean\n          description: |\n            If true, the account is not allowed to place orders.\n        transfers_blocked:\n          type: boolean\n          description: 'If true, the account is not allowed to request money transfers.'\n        account_blocked:\n          type: boolean\n          description: 'If true, the account activity by user is prohibited.'\n        created_at:\n          type: string\n          description: |\n            Timestamp this account was created at\n          format: date-time\n        shorting_enabled:\n          type: boolean\n          description: Flag to denote whether or not the account is permitted to short\n        long_market_value:\n          description: |\n            Real-time MtM value of all long positions held in the account\n          type: string\n        short_market_value:\n          description: Real-time MtM value of all short positions held in the account\n          type: string\n        equity:\n          description: Cash + long_market_value + short_market_value\n          type: string\n        last_equity:\n          description: 'Equity as of previous trading day at 16:00:00 ET'\n          type: string\n        multiplier:\n          description: 'Buying power multiplier that represents account margin classification; valid values 1 (standard limited margin account with 1x buying power), 2 (reg T margin account with 2x intraday and overnight buying power; this is the default for all non-PDT accounts with $2,000 or more equity), 4 (PDT account with 4x intraday buying power and 2x reg T overnight buying power)'\n          type: string\n        buying_power:\n          description: 'Current available $ buying power; If multiplier = 4, this is your daytrade buying power which is calculated as (last_equity - (last) maintenance_margin) * 4; If multiplier = 2, buying_power = max(equity – initial_margin,0) * 2; If multiplier = 1, buying_power = cash'\n          type: string\n        initial_margin:\n          description: Reg T initial margin requirement (continuously updated value)\n          type: string\n        maintenance_margin:\n          description: Maintenance margin requirement (continuously updated value)\n          type: string\n        sma:\n          type: string\n          description: Value of special memorandum account (will be used at a later date to provide additional buying_power)\n        daytrade_count:\n          type: integer\n          description: The current number of daytrades that have been made in the last 5 trading days (inclusive of today)\n        last_maintenance_margin:\n          description: Your maintenance margin requirement on the previous trading day\n          type: string\n        daytrading_buying_power:\n          description: Your buying power for day trades (continuously updated value)\n          type: string\n        regt_buying_power:\n          description: |\n            Your buying power under Regulation T (your excess equity - equity minus margin value - times your margin multiplier)\n          type: string\n      required:\n        - id\n        - status\n    AccountStatus:\n      type: string\n      title: AccountStatus\n      enum:\n        - ONBOARDING\n        - SUBMISSION_FAILED\n        - SUBMITTED\n        - ACCOUNT_UPDATED\n        - APPROVAL_PENDING\n        - ACTIVE\n        - REJECTED\n      description: |-\n        An enum representing the various possible account status values.\n\n        Most likely, the account status is ACTIVE unless there is any problem. The account status may get in ACCOUNT_UPDATED when personal information is being updated from the dashboard, in which case you may not be allowed trading for a short period of time until the change is approved.\n\n        - ONBOARDING\n          The account is onboarding.\n        - SUBMISSION_FAILED\n          The account application submission failed for some reason.\n        - SUBMITTED\n          The account application has been submitted for review.\n        - ACCOUNT_UPDATED\n          The account information is being updated.\n        - APPROVAL_PENDING\n          The final account approval is pending.\n        - ACTIVE\n          The account is active for trading.\n        - REJECTED\n          The account application has been rejected.\n      x-examples:\n        example-1: ACTIVE\n      example: ACTIVE\n    AccountConfigurations:\n      title: AccountConfigurations\n      type: object\n      x-examples:\n        example-1:\n          dtbp_check: entry\n          trade_confirm_email: all\n          suspend_trade: false\n          no_shorting: false\n          fractional_trading: true\n          max_margin_multiplier: '4'\n          pdt_check: entry\n      description: The account configuration API provides custom configurations about your trading account settings. These configurations control various allow you to modify settings to suit your trading needs.\n      properties:\n        dtbp_check:\n          type: string\n          description: 'both, entry, or exit. Controls Day Trading Margin Call (DTMC) checks.'\n          enum:\n            - both\n            - entry\n            - exit\n        trade_confirm_email:\n          type: string\n          description: 'all or none. If none, emails for order fills are not sent.'\n        suspend_trade:\n          type: boolean\n          description: 'If true, new orders are blocked.'\n        no_shorting:\n          type: boolean\n          description: 'If true, account becomes long-only mode.'\n        fractional_trading:\n          type: boolean\n          description: 'If true, account is able to participate in fractional trading'\n        max_margin_multiplier:\n          type: string\n          description: Can be \"1\" or \"2\"\n        pdt_check:\n          type: string\n          example: entry\n    TradingActivities:\n      title: AccountTradingActivities\n      type: object\n      x-examples:\n        example-1:\n          id: '20220202135509981::2d7be4ff-d1f3-43e9-856a-0f5cf5c5088e'\n          activity_type: FILL\n          transaction_time: '2022-02-02T18:55:09.981482Z'\n          type: fill\n          price: '174.78'\n          qty: '2'\n          side: buy\n          symbol: AAPL\n          leaves_qty: '0'\n          order_id: b5abe576-6a8a-49f3-a353-46b72c1ccae9\n          cum_qty: '2'\n          order_status: filled\n      properties:\n        activity_type:\n          $ref: '#/components/schemas/ActivityType'\n        id:\n          type: string\n          description: 'An id for the activity. Always in “::” format. Can be sent as page_token in requests to facilitate the paging of results.'\n        cum_qty:\n          description: The cumulative quantity of shares involved in the execution.\n          type: string\n        leaves_qty:\n          type: string\n          description: |\n            For partially_filled orders, the quantity of shares that are left to be filled.\n        price:\n          type: string\n          description: The per-share price that the trade was executed at.\n        qty:\n          type: string\n          description: The number of shares involved in the trade execution.\n        side:\n          type: string\n          description: buy or sell\n        symbol:\n          type: string\n          description: The symbol of the security being traded.\n          example: AAPL\n        transaction_time:\n          type: string\n          description: The time at which the execution occurred.\n          format: date-time\n        order_id:\n          type: string\n          description: The id for the order that filled.\n          format: uuid\n        type:\n          type: string\n          description: fill or partial_fill\n          enum:\n            - fill\n            - partial_fill\n          example: fill\n        order_status:\n          $ref: '#/components/schemas/OrderStatus'\n    NonTradeActivities:\n      title: AccountNonTradeActivities\n      type: object\n      properties:\n        activity_type:\n          $ref: '#/components/schemas/ActivityType'\n        id:\n          type: string\n          description: 'An ID for the activity, always in “::” format. Can be sent as page_token in requests to facilitate the paging of results.'\n        date:\n          type: string\n          description: The date on which the activity occurred or on which the transaction associated with the activity settled.\n          format: date-time\n        net_amount:\n          type: string\n          description: The net amount of money (positive or negative) associated with the activity.\n        symbol:\n          type: string\n          description: The symbol of the security involved with the activity. Not present for all activity types.\n        qty:\n          type: string\n          description: |\n            For dividend activities, the number of shares that contributed to the payment. Not present for other activity types.\n        per_share_amount:\n          type: string\n          description: 'For dividend activities, the average amount paid per share. Not present for other activity types.'\n      x-examples:\n        example-1:\n          activity_type: DIV\n          id: '20190801011955195::5f596936-6f23-4cef-bdf1-3806aae57dbf'\n          date: '2019-08-01'\n          net_amount: '1.02'\n          symbol: T\n          qty: '2'\n          per_share_amount: '0.51'\n    ActivityType:\n      type: string\n      title: ActivityType\n      description: |-\n        - FILL\n          Order fills (both partial and full fills)\n\n        - TRANS\n          Cash transactions (both CSD and CSW)\n\n        - MISC\n          Miscellaneous or rarely used activity types (All types except those in TRANS, DIV, or FILL)\n\n        - ACATC\n          ACATS IN/OUT (Cash)\n\n        - ACATS\n          ACATS IN/OUT (Securities)\n\n        - CSD\n          Cash deposit(+)\n\n        - CSW\n          Cash withdrawal(-)\n\n        - DIV\n          Dividends\n\n        - DIVCGL\n          Dividend (capital gain long term)\n\n        - DIVCGS\n          Dividend (capital gain short term)\n\n        - DIVFEE\n          Dividend fee\n\n        - DIVFT\n          Dividend adjusted (Foreign Tax Withheld)\n\n        - DIVNRA\n          Dividend adjusted (NRA Withheld)\n\n        - DIVROC\n          Dividend return of capital\n\n        - DIVTW\n          Dividend adjusted (Tefra Withheld)\n\n        - DIVTXEX\n          Dividend (tax exempt)\n\n        - INT\n          Interest (credit/margin)\n\n        - INTNRA\n          Interest adjusted (NRA Withheld)\n\n        - INTTW\n          Interest adjusted (Tefra Withheld)\n\n        - JNL\n          Journal entry\n\n        - JNLC\n          Journal entry (cash)\n\n        - JNLS\n          Journal entry (stock)\n\n        - MA\n          Merger/Acquisition\n\n        - NC\n          Name change\n\n        - OPASN\n          Option assignment\n\n        - OPEXP\n          Option expiration\n\n        - OPXRC\n          Option exercise\n\n        - PTC\n          Pass Thru Charge\n\n        - PTR\n          Pass Thru Rebate\n\n        - REORG\n          Reorg CA\n\n        - SC\n          Symbol change\n\n        - SSO\n          Stock spinoff\n\n        - SSP\n          Stock split\n      enum:\n        - FILL\n        - TRANS\n        - MISC\n        - ACATC\n        - ACATS\n        - CSD\n        - CSW\n        - DIV\n        - DIVCGL\n        - DIVCGS\n        - DIVFEE\n        - DIVFT\n        - DIVNRA\n        - DIVROC\n        - DIVTW\n        - DIVTXEX\n        - INT\n        - INTNRA\n        - INTTW\n        - JNL\n        - JNLC\n        - JNLS\n        - MA\n        - NC\n        - OPASN\n        - OPEXP\n        - OPXRC\n        - PTC\n        - PTR\n        - REORG\n        - SC\n        - SSO\n        - SSP\n    Order:\n      description: |-\n        The Orders API allows a user to monitor, place and cancel their orders with Alpaca.\n\n        Each order has a unique identifier provided by the client. This client-side unique order ID will be automatically generated by the system if not provided by the client, and will be returned as part of the order object along with the rest of the fields described below. Once an order is placed, it can be queried using the client-side order ID to check the status.\n\n        Updates on open orders at Alpaca will also be sent over the streaming interface, which is the recommended method of maintaining order state.\n      type: object\n      x-examples:\n        example-1:\n          id: 61e69015-8549-4bfd-b9c3-01e75843f47d\n          client_order_id: eb9e2aaa-f71a-4f51-b5b4-52a6c565dad4\n          created_at: '2021-03-16T18:38:01.942282Z'\n          updated_at: '2021-03-16T18:38:01.942282Z'\n          submitted_at: '2021-03-16T18:38:01.937734Z'\n          filled_at: null\n          expired_at: null\n          canceled_at: null\n          failed_at: null\n          replaced_at: null\n          replaced_by: null\n          replaces: null\n          asset_id: b0b6dd9d-8b9b-48a9-ba46-b9d54906e415\n          symbol: AAPL\n          asset_class: us_equity\n          notional: '500'\n          qty: null\n          filled_qty: '0'\n          filled_avg_price: null\n          order_class: ''\n          order_type: market\n          type: market\n          side: buy\n          time_in_force: day\n          limit_price: null\n          stop_price: null\n          status: accepted\n          extended_hours: false\n          legs: null\n          trail_percent: null\n          trail_price: null\n          hwm: null\n      title: Order\n      properties:\n        id:\n          type: string\n          description: Order ID\n        client_order_id:\n          type: string\n          description: Client unique order ID\n          maxLength: 48\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n          nullable: true\n        submitted_at:\n          type: string\n          format: date-time\n          nullable: true\n        filled_at:\n          type: string\n          format: date-time\n          nullable: true\n        expired_at:\n          type: string\n          format: date-time\n          nullable: true\n        canceled_at:\n          type: string\n          format: date-time\n          nullable: true\n        failed_at:\n          type: string\n          format: date-time\n          nullable: true\n        replaced_at:\n          type: string\n          format: date-time\n          nullable: true\n        replaced_by:\n          type: string\n          format: uuid\n          description: The order ID that this order was replaced by\n          nullable: true\n        replaces:\n          type: string\n          format: uuid\n          description: The order ID that this order replaces\n          nullable: true\n        asset_id:\n          type: string\n          format: uuid\n          description: Asset ID\n        symbol:\n          type: string\n          minLength: 1\n          description: Asset symbol\n        asset_class:\n          $ref: '#/components/schemas/AssetClass'\n        notional:\n          type: string\n          minLength: 1\n          description: 'Ordered notional amount. If entered, qty will be null. Can take up to 9 decimal points.'\n          nullable: true\n        qty:\n          type: string\n          minLength: 1\n          description: 'Ordered quantity. If entered, notional will be null. Can take up to 9 decimal points.'\n          nullable: true\n        filled_qty:\n          type: string\n          minLength: 1\n          description: Filled quantity\n        filled_avg_price:\n          type: string\n          description: Filled average price\n          nullable: true\n        order_class:\n          $ref: '#/components/schemas/OrderClass'\n        order_type:\n          type: string\n          deprecated: true\n          description: 'Deprecated in favour of the field \"type\" '\n        type:\n          $ref: '#/components/schemas/OrderType'\n        side:\n          $ref: '#/components/schemas/OrderSide'\n        time_in_force:\n          $ref: '#/components/schemas/TimeInForce'\n        limit_price:\n          type: string\n          description: Limit price\n          nullable: true\n        stop_price:\n          description: Stop price\n          type: string\n          nullable: true\n        status:\n          $ref: '#/components/schemas/OrderStatus'\n        extended_hours:\n          type: boolean\n          description: 'If true, eligible for execution outside regular trading hours.'\n        legs:\n          type: array\n          description: 'When querying non-simple order_class orders in a nested style, an array of Order entities associated with this order. Otherwise, null.'\n          nullable: true\n          items:\n            $ref: '#/components/schemas/Order'\n        trail_percent:\n          type: string\n          description: The percent value away from the high water mark for trailing stop orders.\n        trail_price:\n          type: string\n          description: The dollar value away from the high water mark for trailing stop orders.\n        hwm:\n          type: string\n          description: The highest (lowest) market price seen since the trailing stop order was submitted.\n      required:\n        - symbol\n        - notional\n        - qty\n        - type\n        - side\n        - time_in_force\n    OrderType:\n      type: string\n      enum:\n        - market\n        - limit\n        - stop\n        - stop_limit\n        - trailing_stop\n      example: stop\n      description: |-\n        Represents the types of orders Alpaca currently supports\n\n        - market\n        - limit\n        - stop\n        - stop_limit\n        - trailing_stop\n      title: OrderType\n    OrderSide:\n      type: string\n      enum:\n        - buy\n        - sell\n      example: buy\n      title: OrderSide\n      description: |-\n        Represents which side this order was on:\n\n        - buy\n        - sell\n    OrderClass:\n      type: string\n      enum:\n        - simple\n        - bracket\n        - oco\n        - oto\n        - ''\n      example: bracket\n      description: 'This will either be the empty string \"\", \"simple\", \"bracket\", \"oco\", or \"oto\".'\n      title: OrderClass\n    OrderStatus:\n      type: string\n      title: OrderStatus\n      description: |-\n        An order executed through Alpaca can experience several status changes during its lifecycle. The most common statuses are described in detail below:\n\n        - new\n          The order has been received by Alpaca, and routed to exchanges for execution. This is the usual initial state of an order.\n\n        - partially_filled\n          The order has been partially filled.\n\n        - filled\n          The order has been filled, and no further updates will occur for the order.\n\n        - done_for_day\n          The order is done executing for the day, and will not receive further updates until the next trading day.\n\n        - canceled\n          The order has been canceled, and no further updates will occur for the order. This can be either due to a cancel request by the user, or the order has been canceled by the exchanges due to its time-in-force.\n\n        - expired\n          The order has expired, and no further updates will occur for the order.\n\n        - replaced\n          The order was replaced by another order, or was updated due to a market event such as corporate action.\n\n        - pending_cancel\n          The order is waiting to be canceled.\n\n        - pending_replace\n          The order is waiting to be replaced by another order. The order will reject cancel request while in this state.\n\n        Less common states are described below. Note that these states only occur on very rare occasions, and most users will likely never see their orders reach these states:\n\n        - accepted\n          The order has been received by Alpaca, but hasn’t yet been routed to the execution venue. This could be seen often out side of trading session hours.\n\n        - pending_new\n          The order has been received by Alpaca, and routed to the exchanges, but has not yet been accepted for execution. This state only occurs on rare occasions.\n\n        - accepted_for_bidding\n          The order has been received by exchanges, and is evaluated for pricing. This state only occurs on rare occasions.\n\n        - stopped\n          The order has been stopped, and a trade is guaranteed for the order, usually at a stated price or better, but has not yet occurred. This state only occurs on rare occasions.\n\n        - rejected\n          The order has been rejected, and no further updates will occur for the order. This state occurs on rare occasions and may occur based on various conditions decided by the exchanges.\n\n        - suspended\n          The order has been suspended, and is not eligible for trading. This state only occurs on rare occasions.\n\n        - calculated\n          The order has been completed for the day (either filled or done for day), but remaining settlement calculations are still pending. This state only occurs on rare occasions.\n\n\n        An order may be canceled through the API up until the point it reaches a state of either filled, canceled, or expired.\n      enum:\n        - new\n        - partially_filled\n        - filled\n        - done_for_day\n        - canceled\n        - expired\n        - replaced\n        - pending_cancel\n        - pending_replace\n        - accepted\n        - pending_new\n        - accepted_for_bidding\n        - stopped\n        - rejected\n        - suspended\n        - calculated\n      example: new\n    TimeInForce:\n      type: string\n      title: TimeInForce\n      description: |-\n        Note: For Crypto Trading, Alpaca supports the following Time-In-Force designations: day, gtc, ioc and fok. OPG and CLS are not supported.\n\n        Alpaca supports the following Time-In-Force designations:\n\n        - day\n          A day order is eligible for execution only on the day it is live. By default, the order is only valid during Regular Trading Hours (9:30am - 4:00pm ET). If unfilled after the closing auction, it is automatically canceled. If submitted after the close, it is queued and submitted the following trading day. However, if marked as eligible for extended hours, the order can also execute during supported extended hours.\n\n        - gtc\n          The order is good until canceled. Non-marketable GTC limit orders are subject to price adjustments to offset corporate actions affecting the issue. We do not currently support Do Not Reduce(DNR) orders to opt out of such price adjustments.\n\n        - opg\n          Use this TIF with a market/limit order type to submit “market on open” (MOO) and “limit on open” (LOO) orders. This order is eligible to execute only in the market opening auction. Any unfilled orders after the open will be cancelled. OPG orders submitted after 9:28am but before 7:00pm ET will be rejected. OPG orders submitted after 7:00pm will be queued and routed to the following day’s opening auction. On open/on close orders are routed to the primary exchange. Such orders do not necessarily execute exactly at 9:30am / 4:00pm ET but execute per the exchange’s auction rules.\n\n        - cls\n          Use this TIF with a market/limit order type to submit “market on close” (MOC) and “limit on close” (LOC) orders. This order is eligible to execute only in the market closing auction. Any unfilled orders after the close will be cancelled. CLS orders submitted after 3:50pm but before 7:00pm ET will be rejected. CLS orders submitted after 7:00pm will be queued and routed to the following day’s closing auction. Only available with API v2.\n\n        - ioc\n          An Immediate Or Cancel (IOC) order requires all or part of the order to be executed immediately. Any unfilled portion of the order is canceled. Only available with API v2. Most market makers who receive IOC orders will attempt to fill the order on a principal basis only, and cancel any unfilled balance. On occasion, this can result in the entire order being cancelled if the market maker does not have any existing inventory of the security in question.\n\n        - fok\n          A Fill or Kill (FOK) order is only executed if the entire order quantity can be filled, otherwise the order is canceled. Only available with API v2.\n      enum:\n        - day\n        - gtc\n        - opg\n        - cls\n        - ioc\n        - fok\n      example: day\n    Assets:\n      description: |\n        The assets API serves as the master list of assets available for trade and data consumption from Alpaca. Assets are sorted by asset class, exchange and symbol. Some assets are only available for data consumption via Polygon, and are not tradable with Alpaca. These assets will be marked with the flag tradable=false.\n      type: object\n      x-examples:\n        example-1:\n          id: b0b6dd9d-8b9b-48a9-ba46-b9d54906e415\n          class: us_equity\n          exchange: NASDAQ\n          symbol: AAPL\n          name: Apple Inc. Common Stock\n          status: active\n          tradable: true\n          marginable: true\n          shortable: true\n          easy_to_borrow: true\n          fractionable: true\n      title: Assets\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: Asset ID\n        class:\n          $ref: '#/components/schemas/AssetClass'\n        exchange:\n          $ref: '#/components/schemas/Exchange'\n        symbol:\n          type: string\n          description: The symbol of the asset\n          example: AAPL\n        name:\n          type: string\n          minLength: 1\n          description: The official name of the asset\n        status:\n          type: string\n          description: active or inactive\n          example: active\n          enum:\n            - active\n            - inactive\n        tradable:\n          type: boolean\n          description: Asset is tradable on Alpaca or not\n        marginable:\n          type: boolean\n          description: Asset is marginable or not\n        shortable:\n          type: boolean\n          description: Asset is shortable or not\n        easy_to_borrow:\n          type: boolean\n          description: Asset is easy-to-borrow or not (filtering for easy_to_borrow = True is the best way to check whether the name is currently available to short at Alpaca).\n        fractionable:\n          type: boolean\n          description: Asset is fractionable or not\n      required:\n        - id\n        - class\n        - exchange\n        - symbol\n        - name\n        - status\n        - tradable\n        - marginable\n        - shortable\n        - easy_to_borrow\n        - fractionable\n    AssetClass:\n      type: string\n      title: AssetClass\n      enum:\n        - us_equity\n        - crypto\n      example: us_equity\n      description: Represents what class of asset this is. Currently only supports `us_equity` or `crypto`\n      x-examples:\n        example-1: us_equity\n    Position:\n      description: 'The positions API provides information about an account’s current open positions. The response will include information such as cost basis, shares traded, and market value, which will be updated live as price information is updated. Once a position is closed, it will no longer be queryable through this API.'\n      type: object\n      x-examples:\n        example-1:\n          asset_id: 904837e3-3b76-47ec-b432-046db621571b\n          symbol: AAPL\n          exchange: NASDAQ\n          asset_class: us_equity\n          avg_entry_price: '100.0'\n          qty: '5'\n          side: long\n          market_value: '600.0'\n          cost_basis: '500.0'\n          unrealized_pl: '100.0'\n          unrealized_plpc: '0.20'\n          unrealized_intraday_pl: '10.0'\n          unrealized_intraday_plpc: '0.0084'\n          current_price: '120.0'\n          lastday_price: '119.0'\n          change_today: '0.0084'\n        example-2:\n          asset_id: b0b6dd9d-8b9b-48a9-ba46-b9d54906e415\n          symbol: AAPL\n          exchange: NASDAQ\n          asset_class: us_equity\n          asset_marginable: false\n          qty: '2'\n          avg_entry_price: '174.78'\n          side: long\n          market_value: '348.58'\n          cost_basis: '349.56'\n          unrealized_pl: '-0.98'\n          unrealized_plpc: '-0.0028035244307129'\n          unrealized_intraday_pl: '-0.98'\n          unrealized_intraday_plpc: '-0.0028035244307129'\n          current_price: '174.29'\n          lastday_price: '174.61'\n          change_today: '-0.0018326556325525'\n      title: Position\n      properties:\n        asset_id:\n          type: string\n          description: Asset ID\n          format: uuid\n        symbol:\n          type: string\n          description: Symbol name of the asset\n          example: AAPL\n        exchange:\n          $ref: '#/components/schemas/Exchange'\n        asset_class:\n          $ref: '#/components/schemas/AssetClass'\n        avg_entry_price:\n          type: string\n          minLength: 1\n          description: Average entry price of the position\n        qty:\n          type: string\n          minLength: 1\n          description: The number of shares\n        side:\n          type: string\n          minLength: 1\n          description: “long”\n        market_value:\n          type: string\n          minLength: 1\n          description: Total dollar amount of the position\n        cost_basis:\n          type: string\n          minLength: 1\n          description: Total cost basis in dollar\n        unrealized_pl:\n          type: string\n          minLength: 1\n          description: Unrealized profit/loss in dollars\n        unrealized_plpc:\n          type: string\n          minLength: 1\n          description: Unrealized profit/loss percent (by a factor of 1)\n        unrealized_intraday_pl:\n          type: string\n          minLength: 1\n          description: Unrealized profit/loss in dollars for the day\n        unrealized_intraday_plpc:\n          type: string\n          minLength: 1\n          description: Unrealized profit/loss percent (by a factor of 1)\n        current_price:\n          type: string\n          minLength: 1\n          description: Current asset price per share\n        lastday_price:\n          type: string\n          minLength: 1\n          description: Last day’s asset price per share based on the closing value of the last trading day\n        change_today:\n          type: string\n          minLength: 1\n          description: Percent change from last day price (by a factor of 1)\n        asset_marginable:\n          type: boolean\n      required:\n        - asset_id\n        - symbol\n        - exchange\n        - asset_class\n        - avg_entry_price\n        - qty\n        - side\n        - market_value\n        - cost_basis\n        - unrealized_pl\n        - unrealized_plpc\n        - unrealized_intraday_pl\n        - unrealized_intraday_plpc\n        - current_price\n        - lastday_price\n        - change_today\n        - asset_marginable\n    Watchlist:\n      description: |\n        The watchlist API provides CRUD operation for the account’s watchlist. An account can have multiple watchlists and each is uniquely identified by id but can also be addressed by user-defined name. Each watchlist is an ordered list of assets.\n      type: object\n      x-examples:\n        example-1:\n          id: 3174d6df-7726-44b4-a5bd-7fda5ae6e009\n          account_id: abe25343-a7ba-4255-bdeb-f7e013e9ee5d\n          created_at: '2022-01-31T21:49:05.14628Z'\n          updated_at: '2022-01-31T21:49:05.14628Z'\n          name: Primary Watchlist\n          assets:\n            - id: 8ccae427-5dd0-45b3-b5fe-7ba5e422c766\n              class: us_equity\n              exchange: NASDAQ\n              symbol: TSLA\n              name: 'Tesla, Inc. Common Stock'\n              status: active\n              tradable: true\n              marginable: true\n              shortable: true\n              easy_to_borrow: true\n              fractionable: true\n      title: Watchlist\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: watchlist id\n        account_id:\n          type: string\n          format: uuid\n          description: account ID\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n        name:\n          type: string\n          minLength: 1\n          description: user-defined watchlist name (up to 64 characters)\n        assets:\n          type: array\n          description: 'the content of this watchlist, in the order as registered by the client'\n          items:\n            $ref: '#/components/schemas/Assets'\n      required:\n        - id\n        - account_id\n        - created_at\n        - updated_at\n        - name\n    Calendar:\n      description: ''\n      type: object\n      x-examples:\n        example-1:\n          date: '2022-02-01'\n          open: '09:30'\n          close: '16:00'\n          session_open: '0700'\n          session_close: '1900'\n      title: Calendar\n      properties:\n        date:\n          type: string\n          minLength: 1\n          description: Date string in “%Y-%m-%d” format\n        open:\n          type: string\n          minLength: 1\n          description: 'The time the market opens at on this date in “%H:%M” format'\n        close:\n          type: string\n          minLength: 1\n          description: 'The time the market closes at on this date in “%H:%M” format'\n        session_open:\n          type: string\n          minLength: 1\n        session_close:\n          type: string\n          minLength: 1\n      required:\n        - date\n        - open\n        - close\n        - session_open\n        - session_close\n    Clock:\n      title: Clock\n      type: object\n      properties:\n        timestamp:\n          type: string\n          description: |\n            Current timestamp\n          format: date-time\n        is_open:\n          type: boolean\n          description: |\n            Whether or not the market is open\n        next_open:\n          type: string\n          description: Next Market open timestamp\n          format: date-time\n        next_close:\n          type: string\n          description: Next market close timestamp\n          format: date-time\n      x-examples:\n        example-1:\n          timestamp: '2019-08-24T14:15:22Z'\n          is_open: true\n          next_open: '2019-08-24T14:15:22Z'\n          next_close: '2019-08-24T14:15:22Z'\n    PortfolioHistory:\n      title: PortfolioHistory\n      type: object\n      properties:\n        timestamp:\n          type: array\n          description: 'time of each data element, left-labeled (the beginning of time window)'\n          items:\n            type: integer\n        equity:\n          type: array\n          description: equity value of the account in dollar amount as of the end of each time window\n          items:\n            type: number\n        profit_loss:\n          type: array\n          description: profit/loss in dollar from the base value\n          items:\n            type: number\n        profit_loss_pct:\n          type: array\n          description: profit/loss in percentage from the base value\n          items:\n            type: number\n        base_value:\n          type: number\n          description: basis in dollar of the profit loss calculation\n        timeframe:\n          type: string\n          description: time window size of each data element\n          example: 15Min\n    Exchange:\n      title: Exchange\n      type: string\n      description: |-\n        Represents the current exchanges Alpaca supports. List is currently:\n\n        - AMEX\n        - ARCA\n        - BATS\n        - NYSE\n        - NASDAQ\n        - NYSEARCA\n        - OTC\n      enum:\n        - AMEX\n        - ARCA\n        - BATS\n        - NYSE\n        - NASDAQ\n        - NYSEARCA\n        - OTC\n      example: NYSE\n    CanceledOrderResponse:\n      title: CanceledOrderResponse\n      type: object\n      x-examples:\n        example-1:\n          id: d56ba3ea-6d04-48ce-8175-817e242ee608\n          status: 200\n      description: Represents the result of a request to cancel and order\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: orderId\n        status:\n          type: integer\n          description: http response code\n          example: 200\n    PatchOrderRequest:\n      title: PatchOrderRequest\n      type: object\n      description: Represents a request to patch an order.\n      properties:\n        qty:\n          type: string\n          description: number of shares to trade\n        time_in_force:\n          $ref: '#/components/schemas/TimeInForce'\n        limit_price:\n          type: string\n          description: required if original order type is limit or stop_limit\n        stop_price:\n          type: string\n          description: required if original order type is limit or stop_limit\n        trail:\n          type: string\n          description: the new value of the trail_price or trail_percent value (works only for type=“trailing_stop”)\n        client_order_id:\n          type: string\n          description: A unique identifier for the order. Automatically generated if not sent.\n          maxLength: 48\n    PositionClosedReponse:\n      title: PositionClosedReponse\n      type: object\n      description: 'Represents the result of asking the api to close a position. '\n      properties:\n        symbol:\n          type: string\n          description: Symbol name of the asset\n        status:\n          type: string\n          description: Http status code for the attempt to close this position\n        body:\n          $ref: '#/components/schemas/Order'\n      required:\n        - symbol\n        - status\n      x-examples:\n        example-1:\n          symbol: AAPL\n          status: 200\n          body:\n            id: f7f25e89-939a-4587-aaf6-414a6b3c341d\n            client_order_id: 52f8574c-96d5-49b6-94c1-2570a268434e\n            created_at: '2022-02-04T16:53:29.53427917Z'\n            updated_at: '2022-02-04T16:53:29.53427917Z'\n            submitted_at: '2022-02-04T16:53:29.533738219Z'\n            filled_at: null\n            expired_at: null\n            canceled_at: null\n            failed_at: null\n            replaced_at: null\n            replaced_by: null\n            replaces: null\n            asset_id: b0b6dd9d-8b9b-48a9-ba46-b9d54906e415\n            symbol: AAPL\n            asset_class: us_equity\n            notional: null\n            qty: '2'\n            filled_qty: '0'\n            filled_avg_price: null\n            order_class: ''\n            order_type: market\n            type: market\n            side: sell\n            time_in_force: day\n            limit_price: null\n            stop_price: null\n            status: accepted\n            extended_hours: false\n            legs: null\n            trail_percent: null\n            trail_price: null\n            hwm: null\n    UpdateWatchlistRequest:\n      title: PostWatchlistRequest\n      type: object\n      description: Request format used for creating a new watchlist or updating an existing watchlist with a set of assets and name.\n      properties:\n        name:\n          type: string\n        symbols:\n          type: array\n          items:\n            type: string\n            nullable: true\n      required:\n        - name\n    AddAssetToWatchlistRequest:\n      title: AddAssetToWatchlistRequest\n      type: object\n      description: Append an asset for the symbol to the end of watchlist asset list\n      properties:\n        symbol:\n          type: string\n          example: AAPL\n          description: symbol name to append to watchlist\nsecurity:\n  - API_Key: []\n    API_Secret: []\n",
			"canonicalURL": "/github.com/alpacahq/alpaca-docs@7cec702640ecf11a47e80f9c4b28bfaff6f59a4e/-/blob/oas/trading/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/alpacahq/alpaca-docs/blob/7cec702640ecf11a47e80f9c4b28bfaff6f59a4e/oas/trading/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v2/account/activities\": get: responses: 200: contents: application/json: generate schema: item: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"complex anyOf"
	]
}