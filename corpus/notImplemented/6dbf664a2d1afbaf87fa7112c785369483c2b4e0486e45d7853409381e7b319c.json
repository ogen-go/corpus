{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jitsucom/jitsu"
		},
		"file": {
			"name": "configurator.yaml",
			"size": 0,
			"path": "openapi/configurator.yaml",
			"byteSize": 38232,
			"content": "openapi: 3.0.0\ninfo:\n  title: Jitsu API\n  description: Jitsu API\n  contact:\n    name: Jitsu\n    email: dev@jitsu.com\n  license:\n    name: MIT License\n    url: \"https://opensource.org/licenses/MIT\"\n  version: 1.0.0\n\ntags:\n  - name: configuration-management\n    x-displayName: Configuration Management\n    description: \u003e\n      API for managing Jitsu configuration: sources, destinations, API keys etc\n  - name: user-provisioning\n    x-displayName: User Provisioning\n    description: \u003e\n      API for provisioning users. Works only for clusters with Redis-backed authorization, not\n      for Firebase-backed. Requires authorization with cluster admin token\n  - name: cluster-admin\n    x-displayName: Cluster Admin\n    description: \u003e\n      This API is used by Jitsu internally to communicate between components (Jitsu Server and Jitsu Configurator).\ncomponents:\n  securitySchemes:\n    clusterAdminAuth:\n      x-displayName: 'Cluster Admin Auth'\n      name: 'HTTP Authorization Bearer Auth'\n      description: \u003e\n        HTTP Bearer Auth.\n        Use `Authorization: Bearer \u003caccess token\u003e` header.\u003cbr /\u003e\n\n        You should use possible to use an admin token\n      type: http\n      scheme: bearer\n    configurationManagementAuth:\n      name: 'HTTP Authorization Bearer Auth for managing configuration'\n      description: \u003e\n        HTTP Bearer Auth.\n        Use `Authorization: Bearer \u003caccess token\u003e` header.\u003cbr /\u003e\n        To obtain `\u003caccess token\u003e` call **User sign in** method: `/api/v1/users/signin`; \u003cbr /\u003e\n        Alternatively it's possible to use an admin token\n      type: http\n      scheme: bearer\n  parameters:\n    projectIdQuery:\n      in: query\n      name: project_id\n      description: ID of the project\n      required: true\n      schema:\n        type: string\n    projectId:\n      in: path\n      name: projectId\n      description: ID of the project\n      required: true\n      schema:\n        type: string\n    objectType:\n      in: path\n      name: objectType\n      description: 'Type of object. Currently, following values are supported: destinations, sources, api_keys'\n      required: true\n      schema:\n        type: string\n    objectUid:\n      in: path\n      name: objectUid\n      description: 'Unique ID of the object. The object id is sitting in /uid node of JSON object'\n      required: true\n      schema:\n        type: string\n\n  schemas:\n    #Object that represents error with message and\n    ErrorObject:\n      type: object\n      properties:\n        message:\n          type: string\n        error:\n          type: string\n      required:\n        - message\n    StatusObject:\n      type: object\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n      required:\n        - status\n    VersionObject:\n      type: object\n      properties:\n        version:\n          type: string\n        builtAt:\n          type: string\n      required:\n        - version\n        - builtAt\n    NotificationConfig:\n      type: object\n      properties:\n        slack:\n          type: object\n          properties:\n            url: { type: string }\n    ProjectSettings:\n      type: object\n      properties:\n        notifications:\n          $ref: \"#/components/schemas/NotificationConfig\"\n    AnyObject:\n      description: Any JSON Object\n      type: object\n      additionalProperties: { }\n      example: # Sample object\n        any_field1: 10\n        any_field2: Some data\n    AnyArray:\n      description: Array of any JSON objects\n      type: array\n      items:\n        $ref: \"#/components/schemas/AnyObject\"\n\n    EmailAndPasswordRequest:\n      type: object\n      properties:\n        email: { type: \"string\" }\n        password: { type: \"string\" }\n      required: [ 'email', 'password' ]\n    TokensResponse:\n      type: object\n      properties:\n        access_token: { type: \"string\" }\n        refresh_token: { type: \"string\" }\n        user_id: { type: \"string\" }\n      required: [ access_token, refresh_token, user_id ]\n    TokenResponse:\n      type: object\n      properties:\n        token: { type: string }\n      required: [ token ]\n    SignupRequest:\n      allOf:\n        - $ref: '#/components/schemas/EmailAndPasswordRequest'\n        - type: object\n          properties:\n            name: { type: \"string\" }\n            company: { type: \"string\" }\n            emailOptout: { type: \"boolean\" }\n            usageOptout: { type: \"boolean\" }\n          required: [ name, company, emailOptout, usageOptout ]\n    ProjectIdRequest:\n      type: object\n      properties:\n        projectID: { type: \"string\" }\n      required: [ 'projectID' ]\n    Project:\n      type: object\n      properties:\n        id: { type: \"string\" }\n        name: { type: \"string\" }\n        requiresSetup: { type: \"boolean\" }\n      required: [ 'id', 'name' ]\n    CreateProjectRequest:\n      type: object\n      properties:\n        name: { type: string }\n      required: [ 'name' ]\n\n    UserBasicInfo:\n      description: 'Basic information about user'\n      type: object\n      properties:\n        id: { type: \"string\" }\n        email: { type: \"string\" }\n      required: [ 'id', 'email' ]\n\n    User:\n      allOf: # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/UserBasicInfo'\n        - type: object\n          properties:\n            name: { type: \"string\" }\n            created: { type: \"string\" }\n            emailOptout: { type: \"boolean\" }\n            forcePasswordChange: { type: \"boolean\" }\n            suggestedCompanyName: { type: \"string\" }\n            platformAdmin: { type: \"boolean\" }\n          required: [ 'created' ]\n    CreateUserRequest:\n      type: object\n      properties:\n        name: { type: string }\n        email: { type: string }\n        projectName: { type: string }\n        projectId: { type: string }\n        platformAdmin: { type: boolean }\n      required: [ 'email' ]\n    PatchUserRequest:\n      type: object\n      properties:\n        name: { type: \"string\" }\n        forcePasswordChange:\n          type: boolean\n          description: if set to true, user will be forced to change the password during next login\n        password:\n          type: string\n          description: New password to assign a user\n        platformAdmin:\n          type: boolean\n          description: if set to true, user will become platform admin\n    ProjectInfo:\n      type: object\n      properties:\n        _id: { type: string }\n        _name: { type: string }\n        _requireSetup: { type: boolean }\n      required: [ '_id', '_name' ]\n    SuggestedInfo:\n      type: object\n      properties:\n        companyName: { type: string }\n        email: { type: string }\n        name: { type: string }\n    UserInfo:\n      type: object\n      properties:\n        _uid: { type: string }\n        _created: { type: string }\n        _lastUpdated: { type: string }\n        _email: { type: string }\n        _emailOptout: { type: boolean }\n        _name: { type: string }\n        _forcePasswordChange: { type: boolean }\n        _onboarded: { type: boolean }\n        _platformAdmin: { type: boolean }\n        _suggestedInfo:\n          $ref: '#/components/schemas/SuggestedInfo'\n        _project:\n          $ref: '#/components/schemas/ProjectInfo'\n      required: [ '_uid', '_created', '_email' ]\n    ProjectInfoUpdate:\n      type: object\n      properties:\n        _id: { type: string }\n        _name: { type: string }\n        _requireSetup: { type: boolean }\n    UpdateUserInfoRequest:\n      type: object\n      properties:\n        _emailOptout: { type: boolean }\n        _name: { type: string }\n        _forcePasswordChange: { type: boolean }\n        _onboarded: { type: boolean }\n        _platformAdmin: { type: boolean }\n        _suggestedInfo:\n          $ref: '#/components/schemas/SuggestedInfo'\n        _project:\n          $ref: '#/components/schemas/ProjectInfoUpdate'\n    LinkProjectRequest:\n      type: object\n      properties:\n        userId:\n          type: string\n          description: User Id to link to the project. Alternatively, userEmail could be specified\n        userEmail:\n          type: string\n          description: User email to link to the project. Alternatively, userId could be specified\n        callback:\n          type: string\n          description: \u003e\n            Callback URL will be used for generating reset password links \n            when creating a new user (only on Redis-backed authorization).\n    PatchProjectRequest:\n      type: object\n      properties:\n        name: { type: \"string\" }\n        requiresSetup: { type: \"boolean\" }\n\n  responses:\n    Error:\n      description: \"Error response\"\n      content:\n        \"application/json\":\n          schema:\n            $ref: \"#/components/schemas/ErrorObject\"\n    StatusResponse:\n      description: \"Response contains status and message\"\n      content:\n        \"application/json\":\n          schema:\n            $ref: \"#/components/schemas/StatusObject\"\n    VersionResponse:\n      description: \"Response contains Jitsu version\"\n      content:\n        \"application/json\":\n          schema:\n            $ref: \"#/components/schemas/VersionObject\"\n    AnyObjectResponse:\n      description: \"Any JSON object\"\n      content:\n        \"application/json\":\n          schema:\n            $ref: \"#/components/schemas/AnyObject\"\n    AnyArrayResponse:\n      description: \"Array of any JSON objects\"\n      content:\n        \"application/json\":\n          schema:\n            $ref: \"#/components/schemas/AnyArray\"\n    ProjectSettingsResponse:\n      description: \"Project settings\"\n      content:\n        \"application/json\":\n          schema:\n            $ref: \"#/components/schemas/ProjectSettings\"\n    CreateUserResponse:\n      description: \u003e\n        New user. Some fields (created, emailOptout, forcePasswordChange) will be assigned automatically. If new project is created,\n        the project node will contain an id with new project. Otherwise project node will be present too, but it will contain\n        the linked project object\n      content:\n        \"application/json\":\n          schema:\n            type: object\n            properties:\n              user:\n                $ref: \"#/components/schemas/User\"\n              project:\n                $ref: \"#/components/schemas/Project\"\n              resetId:\n                type: string\n                description: The reset ID may further be submitted to /api/v1/users/password/change in order to set user password.\n            required: [ user, project, resetId ]\n    LinkProjectResponse:\n      description: \"List of users with access to given project\"\n      content:\n        \"application/json\":\n          schema:\n            type: object\n            properties:\n              projectUsers:\n                type: array\n                items: { $ref: '#/components/schemas/UserBasicInfo' }\n              userStatus:\n                type: string\n                description: existing if user has been found, or created if user has been created\n            required: ['projectUsers', 'userStatus']\npaths:\n  /api/v1/users/signin:\n    post:\n      tags:\n        - configuration-management\n      operationId: 'User sign in'\n      description: Sign-in user with login and password\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EmailAndPasswordRequest'\n      responses:\n        \"200\":\n          description: 'Success login'\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/TokensResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/users/signup:\n    post:\n      tags:\n        - configuration-management\n      operationId: 'User sign up'\n      description: Create a user account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SignupRequest'\n      responses:\n        \"200\":\n          description: 'Success login'\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/TokensResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/users/signout:\n    post:\n      tags:\n        - configuration-management\n      operationId: 'User sign out'\n      description: Delete token from DB\n      security:\n        - configurationManagementAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/StatusResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/users/token/refresh:\n    post:\n      tags:\n        - configuration-management\n      operationId: 'User authorization token refresh'\n      description: Refresh user access token\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              title: TokenRefreshRequest\n              type: object\n              properties:\n                refresh_token: { type: \"string\" }\n              required: [ refresh_token ]\n      responses:\n        200:\n          description: Success refresh\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/TokensResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/users/password/reset:\n    post:\n      tags:\n        - configuration-management\n      operationId: 'User password reset'\n      description: 'Request password reset'\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              title: UserPasswordResetRequest\n              description: callback field will be used in a password reset email as reset link URL\n              type: object\n              properties:\n                email: { type: string }\n                callback: { type: string }\n              required: [ email ]\n      responses:\n        \"200\":\n          $ref: '#/components/responses/StatusResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/users/password/change:\n    post:\n      tags:\n        - configuration-management\n      operationId: 'User password change'\n      description: 'Change password'\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              title: UserPasswordChangeRequest\n              type: object\n              properties:\n                new_password: { type: string }\n                reset_id: { type: string }\n              required: [ 'new_password' ]\n      responses:\n        \"200\":\n          description: 'Success password changing'\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/TokensResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/users/info:\n    get:\n      tags:\n        - configuration-management\n      operationId: 'Get User info'\n      description: 'Returns a current authenticated user'\n      security:\n        - configurationManagementAuth: [ ]\n      responses:\n        '200':\n          description: \"User info\"\n          content:\n            \"application/json\":\n              schema:\n                $ref: \"#/components/schemas/UserInfo\"\n        default:\n          $ref: '#/components/responses/Error'\n    post:\n      tags:\n        - configuration-management\n      operationId: \"Update user info\"\n      description: \u003e\n        Merge (patch) users settings with into an existing user object. Changes to some fields (such as security settings), will not have an effect. All fields\n        will be ignored, except: _emailOptout, _name, _forcePasswordChange, _name, _onboarded, _suggestedInfo, _project\n      security:\n        - configurationManagementAuth: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUserInfoRequest'\n      responses:\n        '200':\n          description: \"Updated user info\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserInfo'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/users/email/change:\n    post:\n      tags:\n        - cluster-admin\n      operationId: 'User email change'\n      description: 'Change email'\n      security:\n        - clusterAdminAuth: [ ]\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              title: UserEmailChangeRequest\n              type: object\n              properties:\n                old_email: { type: string }\n                new_email: { type: string }\n              required: [ old_email, new_email ]\n      responses:\n        \"200\":\n          $ref: '#/components/responses/StatusResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/system/configuration:\n    get:\n      tags:\n        - configuration-management\n      operationId: 'Get system configuration'\n      description: Returns system configuration\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/system/version:\n    get:\n      tags:\n        - configuration-management\n      operationId: 'Get system version'\n      description: Returns the version of Jitsu sotware running on the server\n      responses:\n        '200':\n          $ref: '#/components/responses/VersionResponse'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v1/geo_data_resolvers:\n    get:\n      tags:\n        - cluster-admin\n      operationId: 'Get geo data resolvers'\n      description: Returns available geo resolvers\n      security:\n        - clusterAdminAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v2/audit/purge:\n    get:\n      parameters:\n        - name: from\n          description: Interval start in Unix millis. If not set, the interval will not be bounded on the left.\n          in: query\n          schema:\n            type: integer\n            x-go-type: int64\n        - name: to\n          description: Interval end in Unix millis. If not set, the interval will not be bounded on the right.\n          in: query\n          schema:\n            type: integer\n            x-go-type: int64\n      tags:\n        - cluster-admin\n      operationId: 'Purge audit'\n      description: Purges ALL audit records in the specified interval.\n      security:\n        - clusterAdminAuth: []\n      responses:\n        '200':\n          $ref: '#/components/responses/StatusResponse'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v2/project/{projectId}/users:\n    get:\n      parameters:\n        - name: projectId\n          description: Project id\n          in: path\n          required: true\n          schema:\n            type: string\n      tags:\n        - configuration-management\n      operationId: \"Get users link to projects\"\n      description: Returns users linked to project\n      security:\n        - configurationManagementAuth: [ ]\n      responses:\n        '200':\n          description: \"List of users with access to given project\"\n          content:\n            \"application/json\":\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserBasicInfo'\n\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v2/project/{projectId}/link:\n    post:\n      parameters:\n        - name: projectId\n          description: Project id\n          in: path\n          required: true\n          schema:\n            type: string\n      tags:\n        - user-provisioning\n      operationId: \"Link user to project\"\n      description: \u003e\n        Links user to project. If userId is specified, the user should just be linked. If userEmail is specified, the logic should be as follows:\n         - Try to find user with userEmail. If user has been found, just link it\n         - If user is not found, the user should be created and linked to the project. Later we'll add email notification\n      security:\n        - configurationManagementAuth: [ ]\n      requestBody:\n        content:\n          \"application/json\":\n            schema:\n              $ref: '#/components/schemas/LinkProjectRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/LinkProjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v2/project/{projectId}/unlink:\n    get:\n      parameters:\n        - name: projectId\n          description: Project id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: userId\n          description: User Id to link to the project. Alternatively, userEmail could be specified\n          in: query\n          required: true\n          schema:\n            type: string\n      tags:\n        - user-provisioning\n      operationId: \"Unlink user from project\"\n      description: \u003e\n        Removes user from the project. Note: users can remove themselves from the project\n      security:\n        - configurationManagementAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/StatusResponse'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v2/users:\n    get:\n      operationId: List users\n      description: Get all users. Available only for Redis-backed authorization\n      tags:\n        - user-provisioning\n      security:\n        - clusterAdminAuth: [ ]\n      responses:\n        '200':\n          description: List of users\n          content:\n            \"application/json\":\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        default:\n          $ref: '#/components/responses/Error'\n    post:\n      operationId: Create new user\n      description: Create new user. Available only for Redis-backed authorization\n      tags:\n        - user-provisioning\n      security:\n        - clusterAdminAuth: [ ]\n      requestBody:\n        description: \u003e\n          Email and (optional) password. If password is not set, a random one\n          will be generated and returned with response.\n\n          projectId or projectName should be specified. If projectId is set, user will be linked to\n          existing project (project with such id should exist). Otherwise a new project will be created\n          with name=projectName\n        content:\n          \"application/json\":\n            schema:\n              $ref: '#/components/schemas/CreateUserRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/CreateUserResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v2/users/{userId}:\n    delete:\n      tags:\n        - user-provisioning\n      operationId: Delete User\n      description: Delete user by id. Available only for Redis-backed authorization\n      security:\n        - clusterAdminAuth: [ ]\n      parameters:\n        - name: userId\n          description: Id of the user\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/StatusResponse'\n        default:\n          $ref: '#/components/responses/Error'\n    patch:\n      tags:\n        - user-provisioning\n      operationId: Update user\n      description: Update user. See documentation on request body. Available only for Redis-backed authorization\n      security:\n        - clusterAdminAuth: [ ]\n      parameters:\n        - name: userId\n          description: Id of the user\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: \u003e\n          Any combination of the fields should be present. Only fields present in request will be updated\n        content:\n          \"application/json\":\n            schema:\n              $ref: \"#/components/schemas/PatchUserRequest\"\n      responses:\n        '200':\n          description: Updated user data\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/User'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v2/projects:\n    get:\n      parameters:\n        - name: allProjects\n          description: \u003e\n            Should the method return all projects, not only available to current user. Only users\n            authenticated with cluster-admin token (or users with cluster admin permission) can set this\n            to true. Otherwise, error will be thrown\n          in: query\n          required: false\n          schema:\n            type: boolean\n      tags:\n        - configuration-management\n      operationId: \"Get projects\"\n      description: Returns a list of projects available for current user\n      security:\n        - configurationManagementAuth: [ ]\n      responses:\n        '200':\n          description: \"List of projects\"\n          content:\n            \"application/json\":\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Project'\n        default:\n          $ref: '#/components/responses/Error'\n    post:\n      tags:\n        - configuration-management\n      operationId: \"Create project and link user\"\n      description: \u003e\n        Creates a new project, links current user and returns the project with ID.\n        If id is present in request body, it should be ignored\n      security:\n        - configurationManagementAuth: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateProjectRequest'\n      responses:\n        '200':\n          description: \"Created project\"\n          content:\n            \"application/json\":\n              schema:\n                $ref: \"#/components/schemas/Project\"\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v2/projects/{projectId}:\n    parameters:\n      - $ref: '#/components/parameters/projectId'\n    patch:\n      tags:\n        - configuration-management\n      operationId: 'Patch project'\n      security:\n        - configurationManagementAuth: [ ]\n      description: \u003e\n        Updates a project for a given project ID. Object will be patched: request body properties will be merged into an original object,\n        it's ok to send partial objects. Some fields might be ignored and overwritten.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchProjectRequest'\n      responses:\n        '200':\n          description: \"Updated project\"\n          content:\n            \"application/json\":\n              schema:\n                $ref: '#/components/schemas/Project'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v2/projects/{projectId}/settings:\n    parameters:\n      - $ref: '#/components/parameters/projectId'\n    get:\n      tags:\n        - configuration-management\n      operationId: 'Get project settings'\n      security:\n        - configurationManagementAuth: [ ]\n      description: Get project settings for a given project ID\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectSettingsResponse'\n        default:\n          $ref: '#/components/responses/Error'\n    patch:\n      tags:\n        - configuration-management\n      operationId: 'Patch project settings'\n      security:\n        - configurationManagementAuth: [ ]\n      description: \u003e\n        Updates a project settings for a given project ID. Object will be patched: request body properties will be merged into an original object,\n        it's ok to send partial objects. Some fields might be ignored and overwritten. The method returns an updated object\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectSettings'\n      responses:\n        '200':\n          $ref: '#/components/responses/ProjectSettingsResponse'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v2/objects/{projectId}/{objectType}:\n    parameters:\n      - $ref: '#/components/parameters/projectId'\n      - $ref: '#/components/parameters/objectType'\n    get:\n      tags:\n        - configuration-management\n      operationId: 'Get objects by projectId and objectType'\n      security:\n        - configurationManagementAuth: [ ]\n      description: Returns the list of objects of given type\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyArrayResponse'\n        default:\n          $ref: '#/components/responses/Error'\n    post:\n      tags:\n        - configuration-management\n      operationId: 'Create object in project'\n      description: \u003e\n        Create new object. The method returns newly created object. Some properties of\n        newly created object might different from on which has been posted (for example, ID)\n      security:\n        - configurationManagementAuth: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v2/objects/{projectId}/{objectType}/{objectUid}:\n    parameters:\n      - $ref: '#/components/parameters/projectId'\n      - $ref: '#/components/parameters/objectType'\n      - $ref: '#/components/parameters/objectUid'\n    get:\n      tags:\n        - configuration-management\n      operationId: 'Get object by uid'\n      description: Get an object with given UID\n      security:\n        - configurationManagementAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n\n    delete:\n      tags:\n        - configuration-management\n      operationId: \"Delete object by uid\"\n      description: Delete an object with given UID. Returns a deleted object\n      security:\n        - configurationManagementAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n    patch:\n      tags:\n        - configuration-management\n      operationId: \"Patch object by uid\"\n      description: \u003e\n        Patches object with given ID. Object will be patched: request body properties will be merged into an original object, it's ok to send partial objects\n        Some fields might be ignored and overwritten. The method returns an updated object\n      security:\n        - configurationManagementAuth: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n    put:\n      tags:\n        - configuration-management\n      operationId: \"Replace object by uid\"\n      description: \u003e\n        Save object with given ID. The whole object except id field will be overwritten. The method returns an updated object\n      security:\n        - configurationManagementAuth: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/telemetry:\n    get:\n      tags:\n        - cluster-admin\n      operationId: 'Get telemetry settings'\n      description: Returns current telemetry configuration\n      security:\n        - clusterAdminAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/sources:\n    get:\n      tags:\n        - cluster-admin\n      operationId: 'Get sources configuration'\n      description: Returns all configured sources\n      security:\n        - clusterAdminAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v1/sources/test:\n    post:\n      tags:\n        - configuration-management\n      operationId: 'Test source configuration'\n      description: \u003e\n        Test configured source connection. This method is used on Configurator UI on source save.\n        Proxies request to Jitsu Server.\n      security:\n        - configurationManagementAuth: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/StatusResponse'\n        default:\n          $ref: '#/components/responses/AnyObjectResponse'\n\n  /api/v1/destinations:\n    get:\n      tags:\n        - cluster-admin\n      operationId: 'Get destinations configuration'\n      description: Returns all configured destinations\n      security:\n        - clusterAdminAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v1/destinations/test:\n    post:\n      tags:\n        - configuration-management\n      operationId: 'Test destination configuration'\n      description: \u003e\n        Test configured destination connection. This method is used on Configurator UI on destination save.\n        Proxies request to Jitsu Server.\n      security:\n        - configurationManagementAuth: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/StatusResponse'\n        default:\n          $ref: '#/components/responses/AnyObjectResponse'\n\n  /api/v1/destinations/evaluate:\n    post:\n      tags:\n        - configuration-management\n      operationId: 'Evaluate destination JS transformation script'\n      description: \u003e\n        Evaluate destination Javascript transformation script and return the result.\n      security:\n        - configurationManagementAuth: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v1/apikeys:\n    get:\n      tags:\n        - cluster-admin\n      operationId: 'Get api keys configuration'\n      description: Returns all configured api keys\n      security:\n        - clusterAdminAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v1/ssl:\n    parameters:\n      - $ref: '#/components/parameters/projectIdQuery'\n      - in: query\n        name: async\n        description: Flag for reissue certificates asynchonisly\n        required: false\n        schema:\n          type: boolean\n    post:\n      tags:\n        - configuration-management\n      operationId: 'Reissue project SSL certificates'\n      description: \u003e\n        Initiate the reissue project SSL certificate pipeline. Method is only available on cloud.jitsu.com.\n      security:\n        - configurationManagementAuth: [ ]\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnyObject'\n      responses:\n        '200':\n          $ref: '#/components/responses/StatusResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/ssl/all:\n    parameters:\n      - in: query\n        name: async\n        description: Flag for reissue certificates asynchonisly\n        required: false\n        schema:\n          type: boolean\n    post:\n      tags:\n        - cluster-admin\n      operationId: 'Reissue all configured SSL certificates'\n      description: \u003e\n        Initiate the reissue all configured SSL certificates pipeline. Method is only available on cloud.jitsu.com.\n      security:\n        - clusterAdminAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/StatusResponse'\n        default:\n          $ref: '#/components/responses/Error'\n  /api/v1/jitsu/configuration:\n    parameters:\n      - $ref: '#/components/parameters/projectIdQuery'\n    get:\n      tags:\n        - configuration-management\n      operationId: 'Generate Jitsu Server yaml configuration'\n      description: \u003e\n        Generate Jitsu Server yaml configuration payload for the current project (including api keys, sources, destinations configs)\n      security:\n        - configurationManagementAuth: [ ]\n      responses:\n        '200':\n          description: \"Response contains Jitsu Server yaml configuration\"\n          content:\n            \"application/yaml\":\n              schema:\n                description: Any YAML Object\n                type: object\n                additionalProperties: { }\n                example: # Sample object\n                  server:\n                    name: Uvsnj # rename server if another name is desired\n                  api_keys:\n                    - id: 'apikey1'\n                      client_secret: 'client_secret1'\n                      server_secret: 'server_secret1'\n        default:\n          $ref: '#/components/responses/Error'\n\n  /api/v1/database:\n    post:\n      tags:\n        - configuration-management\n      operationId: 'Create free tier Postgres database'\n      description: \u003e\n        Create free tier Postgres database. Method is only available on cloud.jitsu.com.\n        Return Postgres destination configuration.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProjectIdRequest'\n      security:\n        - configurationManagementAuth: [ ]\n      responses:\n        '200':\n          $ref: '#/components/responses/AnyObjectResponse'\n        default:\n          $ref: '#/components/responses/Error'\n",
			"canonicalURL": "/github.com/jitsucom/jitsu@b3d83fdbe30448a4db8676b9bff7a726aaee94e4/-/blob/openapi/configurator.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/jitsucom/jitsu/blob/b3d83fdbe30448a4db8676b9bff7a726aaee94e4/openapi/configurator.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/v1/jitsu/configuration\": get: responses: 200: contents: unsupported content types: [application/yaml]",
	"NotImplemented": [
		"unsupported content types"
	]
}