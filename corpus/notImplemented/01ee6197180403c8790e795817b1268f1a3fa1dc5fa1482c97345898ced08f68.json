{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bojanz/broom"
		},
		"file": {
			"name": "openapi3.yaml",
			"size": 0,
			"path": "testdata/openapi3.yaml",
			"byteSize": 9018,
			"content": "openapi: 3.0.3\ninfo:\n  version: 1.0.0\n  title: Product API\n  description: An imaginary API used for testing Broom.\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: https://api.test-product-api.io\ntags:\n  - name: Products\npaths:\n  /products:\n    get:\n      summary: List products\n      description: Retrieves a list of \u003cb\u003eproducts\u003c/b\u003e matching the specified criteria.\n      operationId: list-products\n      tags:\n        - Products\n      parameters:\n        - $ref: '#/components/parameters/Vendor'\n        - in: query\n          name: filter[owner_id]\n          description: Allows filtering by owner_id.\n          schema:\n            type: string\n        - in: query\n          name: page[before]\n          description: Shows 50 products before the given ID.\n          schema:\n            type: string\n            format: ulid\n        - in: query\n          name: page[after]\n          description: Shows 50 products after the given ID.\n          schema:\n            type: string\n            format: ulid\n        - in: query\n          name: sort\n          description: |\n            Allows \u003cb\u003esorting\u003c/b\u003e by a single field.\u003cbr\u003e\n            Use a dash (\"-\") to sort descending.\n          schema:\n            type: string\n            default: created_at\n      responses:\n        '200':\n          description: Successful response.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  items:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Product'\n                  _links:\n                    $ref: '#/components/schemas/ListLinks'\n        default:\n          description: Error response.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Create product\n      description: Creates a new product.\n      operationId: create-product\n      tags:\n        - Products\n      parameters:\n        - $ref: '#/components/parameters/Vendor'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n                - price\n                - currency_code\n              properties:\n                owner_id:\n                  type: string\n                  format: uuid\n                  description: ID of the owner. Defaults to the requester.\n                name:\n                  type: string\n                  description: The product name.\n                sku:\n                  type: string\n                  description: The product sku.\n                price:\n                  type: integer\n                  description: The product price, in cents.\n                  default: 1099\n                currency_code:\n                  type: string\n                  description: The currency code.\n                  enum: [EUR, USD]\n                  default: USD\n                status:\n                  type: boolean\n                  description: Whether the product is available for purchase.\n                  default: true\n      responses:\n        '201':\n          description: Successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        default:\n          description: Error response.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  '/products/{product_id}':\n    parameters:\n      - $ref: '#/components/parameters/ProductID'\n      - $ref: '#/components/parameters/Vendor'\n    get:\n      summary: Get product\n      description: Retrieves the specified product.\n      operationId: get-product\n      tags:\n        - Products\n      responses:\n        '200':\n          description: Successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        default:\n          description: Error response.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    patch:\n      summary: Update product\n      description: Updates the specified product.\n      operationId: update-product\n      tags:\n        - Products\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The product name.\n                sku:\n                  type: string\n                  description: The product sku.\n                price:\n                  type: integer\n                  description: The product price, in cents.\n                currency_code:\n                  type: string\n                  description: The currency code.\n                  enum: [EUR, USD]\n                status:\n                  type: boolean\n                  description: Whether the product is available for purchase.\n      responses:\n        '200':\n          description: Successful response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        default:\n          description: Error response.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Delete product\n      description: Deletes the specified product.\n      operationId: delete-product\n      tags:\n        - Products\n      responses:\n        '204':\n          description: Product deleted.\n        default:\n          description: Error response.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    Product:\n      type: object\n      properties:\n        id:\n          type: string\n          format: ulid\n          description: The ID of the product.\n        owner_id:\n          type: string\n          format: uuid\n          description: The ID of the owner.\n        name:\n          type: string\n          description: The product name.\n        sku:\n          type: string\n          description: The product sku.\n        price:\n          type: integer\n          description: The product price, in cents.\n        currency_code:\n          type: string\n          description: The currency code.\n          enum: [EUR, USD]\n        status:\n          type: boolean\n          description: Whether the product is available for purchase.\n        created_at:\n          type: string\n          format: date-time\n          description: The date and time when the product was created.\n        updated_at:\n          type: string\n          format: date-time\n          description: The date and time when the product was last updated.\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              description: Link to the current product.\n              properties:\n                href:\n                  type: string\n                  description: URL of the link.\n    ListLinks:\n      type: object\n      properties:\n        self:\n          type: object\n          description: Link to the current set of items.\n          properties:\n            href:\n              type: string\n              description: URL of the link.\n        previous:\n          type: object\n          description: Link to the previous set of items.\n          properties:\n            href:\n              type: string\n              description: URL of the link.\n        next:\n          type: object\n          description: Link to the next set of items.\n          properties:\n            href:\n              type: string\n              description: URL of the link\n    Error:\n      type: object\n      properties:\n        type:\n          type: string\n          format: uri\n          description: A URI reference that identifies the problem type.\n        title:\n          type: string\n          description: 'A short, human-readable summary of the problem type.'\n        status:\n          type: integer\n          format: int32\n          description: The HTTP status code generated by the origin server.\n          minimum: 100\n          maximum: 600\n          exclusiveMaximum: true\n          example: 404\n        detail:\n          type: string\n          description: \u003e-\n            A human-readable explanation specific to this occurrence of the\n            problem.\n  parameters:\n    ProductID:\n      in: path\n      name: product_id\n      description: The ID of the product.\n      required: true\n      schema:\n        type: string\n        format: ulid\n    Vendor:\n      in: header\n      name: X-Vendor\n      description: The vendor.\n      schema:\n        type: string\n",
			"canonicalURL": "/github.com/bojanz/broom@322fbd7d1a61ede59b4b6b8c485d8f1398fccff7/-/blob/testdata/openapi3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/bojanz/broom/blob/322fbd7d1a61ede59b4b6b8c485d8f1398fccff7/testdata/openapi3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/products\": get: responses: default: contents: unsupported content types: [application/problem+json]",
	"NotImplemented": [
		"unsupported content types"
	]
}