{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/treeverse/lakeFS"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "clients/java/api/openapi.yaml",
			"byteSize": 155929,
			"content": "openapi: 3.0.0\ninfo:\n  description: lakeFS HTTP API\n  title: lakeFS API\n  version: 0.1.0\nservers:\n- description: lakeFS server endpoint\n  url: /api/v1\nsecurity:\n- jwt_token: []\n- basic_auth: []\n- cookie_auth: []\n- oidc_auth: []\npaths:\n  /setup_lakefs:\n    get:\n      operationId: getSetupState\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SetupState'\n          description: lakeFS setup state\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      security: []\n      summary: check if the lakeFS installation is already set up\n      tags:\n      - config\n      x-accepts: application/json\n    post:\n      operationId: setup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Setup'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialsWithSecret'\n          description: user created successfully\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: bad request\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: setup was already called\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      security: []\n      summary: setup lakeFS and create a first user\n      tags:\n      - config\n      x-contentType: application/json\n      x-accepts: application/json\n  /user:\n    get:\n      operationId: getCurrentUser\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CurrentUser'\n          description: user\n      summary: get current user\n      tags:\n      - auth\n      x-accepts: application/json\n  /oidc/callback:\n    get:\n      operationId: oauthCallback\n      responses:\n        \"302\":\n          description: successfully got token\n        \"401\":\n          description: failed to exchange authorization code for token\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      security: []\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/login:\n    post:\n      operationId: login\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LoginInformation'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthenticationToken'\n          description: successful login\n          headers:\n            Set-Cookie:\n              explode: false\n              schema:\n                example: access_token=abcde12356; Path=/; HttpOnly\n                type: string\n              style: simple\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      security: []\n      summary: perform a login\n      tags:\n      - auth\n      x-contentType: application/json\n      x-accepts: application/json\n  /auth/logout:\n    post:\n      operationId: logout\n      responses:\n        \"200\":\n          description: successful logout\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      security:\n      - cookie_auth: []\n      summary: logs out a cookie-authenticated user\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/password:\n    post:\n      operationId: updatePassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdatePasswordByToken'\n        required: true\n      responses:\n        \"201\":\n          description: successful reset\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      security:\n      - cookie_auth: []\n      summary: Update user password by reset_password token\n      tags:\n      - auth\n      x-contentType: application/json\n      x-accepts: application/json\n  /auth/password/forgot:\n    post:\n      operationId: forgotPassword\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ForgotPasswordRequest'\n        required: true\n      responses:\n        \"204\":\n          description: No content\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: bad request\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      security: []\n      summary: forgot password request initiates the password reset process\n      tags:\n      - auth\n      x-contentType: application/json\n      x-accepts: application/json\n  /auth/capabilities:\n    get:\n      operationId: getAuthCapabilities\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthCapabilities'\n          description: auth capabilities\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      security: []\n      summary: list authentication capabilities supported\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/users:\n    get:\n      operationId: listUsers\n      parameters:\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserList'\n          description: user list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list users\n      tags:\n      - auth\n      x-accepts: application/json\n    post:\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserCreation'\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: user\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: validation error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: create user\n      tags:\n      - auth\n      x-contentType: application/json\n      x-accepts: application/json\n  /auth/users/{userId}:\n    delete:\n      operationId: deleteUser\n      parameters:\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: user deleted successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: delete user\n      tags:\n      - auth\n      x-accepts: application/json\n    get:\n      operationId: getUser\n      parameters:\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: user\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get user\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/groups:\n    get:\n      operationId: listGroups\n      parameters:\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupList'\n          description: group list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list groups\n      tags:\n      - auth\n      x-accepts: application/json\n    post:\n      operationId: createGroup\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupCreation'\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n          description: group\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: create group\n      tags:\n      - auth\n      x-contentType: application/json\n      x-accepts: application/json\n  /auth/groups/{groupId}:\n    delete:\n      operationId: deleteGroup\n      parameters:\n      - explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: group deleted successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: delete group\n      tags:\n      - auth\n      x-accepts: application/json\n    get:\n      operationId: getGroup\n      parameters:\n      - explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n          description: group\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get group\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/policies:\n    get:\n      operationId: listPolicies\n      parameters:\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyList'\n          description: policy list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list policies\n      tags:\n      - auth\n      x-accepts: application/json\n    post:\n      operationId: createPolicy\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Policy'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n          description: policy\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: create policy\n      tags:\n      - auth\n      x-contentType: application/json\n      x-accepts: application/json\n  /auth/policies/{policyId}:\n    delete:\n      operationId: deletePolicy\n      parameters:\n      - explode: false\n        in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: policy deleted successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: delete policy\n      tags:\n      - auth\n      x-accepts: application/json\n    get:\n      operationId: getPolicy\n      parameters:\n      - explode: false\n        in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n          description: policy\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get policy\n      tags:\n      - auth\n      x-accepts: application/json\n    put:\n      operationId: updatePolicy\n      parameters:\n      - explode: false\n        in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Policy'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Policy'\n          description: policy\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: update policy\n      tags:\n      - auth\n      x-contentType: application/json\n      x-accepts: application/json\n  /auth/groups/{groupId}/members:\n    get:\n      operationId: listGroupMembers\n      parameters:\n      - explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserList'\n          description: group memeber list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list group members\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/groups/{groupId}/members/{userId}:\n    delete:\n      operationId: deleteGroupMembership\n      parameters:\n      - explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: membership deleted successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: delete group membership\n      tags:\n      - auth\n      x-accepts: application/json\n    put:\n      operationId: addGroupMembership\n      parameters:\n      - explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"201\":\n          description: membership added successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: add group membership\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/users/{userId}/credentials:\n    get:\n      operationId: listUserCredentials\n      parameters:\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialsList'\n          description: credential list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list user credentials\n      tags:\n      - auth\n      x-accepts: application/json\n    post:\n      operationId: createCredentials\n      parameters:\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CredentialsWithSecret'\n          description: credentials\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: create credentials\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/users/{userId}/credentials/{accessKeyId}:\n    delete:\n      operationId: deleteCredentials\n      parameters:\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: accessKeyId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: credentials deleted successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: delete credentials\n      tags:\n      - auth\n      x-accepts: application/json\n    get:\n      operationId: getCredentials\n      parameters:\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: accessKeyId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Credentials'\n          description: credentials\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get credentials\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/users/{userId}/groups:\n    get:\n      operationId: listUserGroups\n      parameters:\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroupList'\n          description: group list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list user groups\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/users/{userId}/policies:\n    get:\n      operationId: listUserPolicies\n      parameters:\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      - description: will return all distinct policies attached to the user or any\n          of its groups\n        explode: true\n        in: query\n        name: effective\n        required: false\n        schema:\n          default: false\n          type: boolean\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyList'\n          description: policy list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list user policies\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/users/{userId}/policies/{policyId}:\n    delete:\n      operationId: detachPolicyFromUser\n      parameters:\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: policy detached successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: detach policy from user\n      tags:\n      - auth\n      x-accepts: application/json\n    put:\n      operationId: attachPolicyToUser\n      parameters:\n      - explode: false\n        in: path\n        name: userId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"201\":\n          description: policy attached successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: attach policy to user\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/groups/{groupId}/policies:\n    get:\n      operationId: listGroupPolicies\n      parameters:\n      - explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyList'\n          description: policy list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list group policies\n      tags:\n      - auth\n      x-accepts: application/json\n  /auth/groups/{groupId}/policies/{policyId}:\n    delete:\n      operationId: detachPolicyFromGroup\n      parameters:\n      - explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: policy detached successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: detach policy from group\n      tags:\n      - auth\n      x-accepts: application/json\n    put:\n      operationId: attachPolicyToGroup\n      parameters:\n      - explode: false\n        in: path\n        name: groupId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: policyId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"201\":\n          description: policy attached successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: attach policy to group\n      tags:\n      - auth\n      x-accepts: application/json\n  /repositories:\n    get:\n      operationId: listRepositories\n      parameters:\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RepositoryList'\n          description: repository list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list repositories\n      tags:\n      - repositories\n      x-accepts: application/json\n    post:\n      operationId: createRepository\n      parameters:\n      - description: If true, create a bare repository with no initial commit and\n          branch\n        explode: true\n        in: query\n        name: bare\n        required: false\n        schema:\n          default: false\n          type: boolean\n        style: form\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RepositoryCreation'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Repository'\n          description: repository\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Conflicts With Target\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: create repository\n      tags:\n      - repositories\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}:\n    delete:\n      operationId: deleteRepository\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: repository deleted successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: delete repository\n      tags:\n      - repositories\n      x-accepts: application/json\n    get:\n      operationId: getRepository\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Repository'\n          description: repository\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get repository\n      tags:\n      - repositories\n      x-accepts: application/json\n  /repositories/{repository}/refs/dump:\n    put:\n      operationId: dumpRefs\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefsDump'\n          description: refs dump\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: Dump repository refs (tags, commits, branches) to object store\n      tags:\n      - refs\n      x-accepts: application/json\n  /repositories/{repository}/refs/restore:\n    put:\n      operationId: restoreRefs\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RefsDump'\n        required: true\n      responses:\n        \"200\":\n          description: refs successfully loaded\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: Restore repository refs (tags, commits, branches) from object store\n      tags:\n      - refs\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/tags:\n    get:\n      operationId: listTags\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefList'\n          description: tag list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list tags\n      tags:\n      - tags\n      x-accepts: application/json\n    post:\n      operationId: createTag\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TagCreation'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ref'\n          description: tag\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Conflicts With Target\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: create tag\n      tags:\n      - tags\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/tags/{tag}:\n    delete:\n      operationId: deleteTag\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: tag\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: tag deleted successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: delete tag\n      tags:\n      - tags\n      x-accepts: application/json\n    get:\n      operationId: getTag\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: tag\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ref'\n          description: tag\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get tag\n      tags:\n      - tags\n      x-accepts: application/json\n  /repositories/{repository}/branches:\n    get:\n      operationId: listBranches\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RefList'\n          description: branch list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list branches\n      tags:\n      - branches\n      x-accepts: application/json\n    post:\n      operationId: createBranch\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BranchCreation'\n        required: true\n      responses:\n        \"201\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: reference\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Conflicts With Target\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: create branch\n      tags:\n      - branches\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/refs/{ref}/commits:\n    get:\n      operationId: logCommits\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: ref\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      - description: list of paths, each element is a path of a specific object\n        explode: true\n        in: query\n        name: objects\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      - description: list of paths, each element is a path of a prefix\n        explode: true\n        in: query\n        name: prefixes\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommitList'\n          description: commit log\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get commit log from ref. If both objects and prefixes are empty, return\n        all commits.\n      tags:\n      - refs\n      x-accepts: application/json\n  /repositories/{repository}/branches/{branch}/commits:\n    get:\n      deprecated: true\n      operationId: logBranchCommits\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommitList'\n          description: commit log\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: |\n        get commit log from branch.\n        Deprecated: replaced by logCommits by passing branch name as ref\n      tags:\n      - commits\n      x-accepts: application/json\n    post:\n      operationId: commit\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The source metarange to commit. Branch must not have uncommitted\n          changes.\n        explode: true\n        in: query\n        name: source_metarange\n        required: false\n        schema:\n          type: string\n        style: form\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CommitCreation'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Commit'\n          description: commit\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n        \"412\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Precondition Failed (e.g. a pre-commit hook returned a failure)\n      summary: create commit\n      tags:\n      - commits\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/branches/{branch}:\n    delete:\n      operationId: deleteBranch\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"204\":\n          description: branch deleted successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: delete branch\n      tags:\n      - branches\n      x-accepts: application/json\n    get:\n      operationId: getBranch\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ref'\n          description: branch\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get branch\n      tags:\n      - branches\n      x-accepts: application/json\n    put:\n      operationId: resetBranch\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResetCreation'\n        required: true\n      responses:\n        \"204\":\n          description: reset successful\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: reset branch\n      tags:\n      - branches\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/branches/{branch}/revert:\n    post:\n      operationId: revertBranch\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RevertCreation'\n        required: true\n      responses:\n        \"204\":\n          description: revert successful\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Conflict Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: revert\n      tags:\n      - branches\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/refs/{sourceRef}/merge/{destinationBranch}:\n    post:\n      operationId: mergeIntoBranch\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: source ref\n        explode: false\n        in: path\n        name: sourceRef\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: destination branch name\n        explode: false\n        in: path\n        name: destinationBranch\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Merge'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MergeResult'\n          description: merge completed\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MergeResult'\n          description: conflict\n        \"412\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: precondition failed (e.g. a pre-merge hook returned a failure)\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: merge references\n      tags:\n      - refs\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/branches/{branch}/diff:\n    get:\n      operationId: diffBranch\n      parameters:\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: delimiter used to group common prefixes by\n        explode: true\n        in: query\n        name: delimiter\n        required: false\n        schema:\n          type: string\n        style: form\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiffList'\n          description: diff of branch uncommitted changes\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: diff branch\n      tags:\n      - branches\n      x-accepts: application/json\n  /repositories/{repository}/refs/{leftRef}/diff/{rightRef}:\n    get:\n      operationId: diffRefs\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: a reference (could be either a branch or a commit ID)\n        explode: false\n        in: path\n        name: leftRef\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: a reference (could be either a branch or a commit ID) to compare\n          against\n        explode: false\n        in: path\n        name: rightRef\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: delimiter used to group common prefixes by\n        explode: true\n        in: query\n        name: delimiter\n        required: false\n        schema:\n          type: string\n        style: form\n      - explode: true\n        in: query\n        name: type\n        required: false\n        schema:\n          type: string\n        style: form\n      - explode: true\n        in: query\n        name: diff_type\n        required: false\n        schema:\n          default: three_dot\n          enum:\n          - two_dot\n          - three_dot\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DiffList'\n          description: diff between refs\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: diff references\n      tags:\n      - refs\n      x-accepts: application/json\n  /repositories/{repository}/commits/{commitId}:\n    get:\n      operationId: getCommit\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: commitId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Commit'\n          description: commit\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get commit\n      tags:\n      - commits\n      x-accepts: application/json\n  /repositories/{repository}/refs/{ref}/objects:\n    get:\n      operationId: getObject\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: a reference (could be either a branch or a commit ID)\n        explode: false\n        in: path\n        name: ref\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: relative to the ref\n        explode: true\n        in: query\n        name: path\n        required: true\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              schema:\n                format: binary\n                type: string\n          description: object content\n          headers:\n            Content-Length:\n              explode: false\n              schema:\n                format: int64\n                type: integer\n              style: simple\n            Last-Modified:\n              explode: false\n              schema:\n                type: string\n              style: simple\n            ETag:\n              explode: false\n              schema:\n                type: string\n              style: simple\n            Content-Disposition:\n              explode: false\n              schema:\n                type: string\n              style: simple\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n        \"410\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: object expired\n      summary: get object content\n      tags:\n      - objects\n      x-accepts: application/json\n  /repositories/{repository}/branches/{branch}/staging/backing:\n    get:\n      operationId: getPhysicalAddress\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: relative to the branch\n        explode: true\n        in: query\n        name: path\n        required: true\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StagingLocation'\n          description: physical address for staging area\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get a physical address and a return token to write object to underlying\n        storage\n      tags:\n      - staging\n      x-accepts: application/json\n    put:\n      description: |\n        If the supplied token matches the current staging token, associate the object as the\n        physical address with the supplied path.\n\n        Otherwise, if staging has been committed and the token has expired, return a conflict\n        and hint where to place the object to try again.  Caller should copy the object to the\n        new physical address and PUT again with the new staging token.  (No need to back off,\n        this is due to losing the race against a concurrent commit operation.)\n      operationId: linkPhysicalAddress\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: relative to the branch\n        explode: true\n        in: query\n        name: path\n        required: true\n        schema:\n          type: string\n        style: form\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StagingMetadata'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectStats'\n          description: object metadata\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StagingLocation'\n          description: conflict with a commit, try here\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: associate staging on this physical address with a path\n      tags:\n      - staging\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/branches/metaranges:\n    post:\n      operationId: createMetaRange\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetaRangeCreation'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaRangeCreationResponse'\n          description: metarange metadata\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: create a lakeFS metarange file from the given ranges\n      tags:\n      - import\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/branches/ranges:\n    post:\n      operationId: ingestRange\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StageRangeCreation'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IngestRangeCreationResponse'\n          description: range metadata\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: create a lakeFS range file from the source uri\n      tags:\n      - import\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/branches/{branch}/objects:\n    delete:\n      operationId: deleteObject\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: relative to the branch\n        explode: true\n        in: query\n        name: path\n        required: true\n        schema:\n          type: string\n        style: form\n      responses:\n        \"204\":\n          description: object deleted successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: delete object\n      tags:\n      - objects\n      x-accepts: application/json\n    post:\n      operationId: uploadObject\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: relative to the branch\n        explode: true\n        in: query\n        name: path\n        required: true\n        schema:\n          type: string\n        style: form\n      - explode: true\n        in: query\n        name: storageClass\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: Currently supports only \"*\" to allow uploading an object only\n          if one doesn't exist yet\n        example: '*'\n        explode: false\n        in: header\n        name: If-None-Match\n        required: false\n        schema:\n          pattern: ^\\*$\n          type: string\n        style: simple\n      requestBody:\n        $ref: '#/components/requestBodies/inline_object'\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                content:\n                  description: Only a single file per upload which must be named \"content\".\n                  format: binary\n                  type: string\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectStats'\n          description: object metadata\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        \"412\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Precondition Failed\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      tags:\n      - objects\n      x-validation-exclude-body: true\n      x-contentType: multipart/form-data\n      x-accepts: application/json\n    put:\n      operationId: stageObject\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: relative to the branch\n        explode: true\n        in: query\n        name: path\n        required: true\n        schema:\n          type: string\n        style: form\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObjectStageCreation'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectStats'\n          description: object metadata\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation Error\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: stage an object's metadata for the given branch\n      tags:\n      - objects\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/branches/{branch}/objects/delete:\n    post:\n      operationId: deleteObjects\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PathList'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectErrorList'\n          description: Delete objects response\n        \"204\":\n          description: all requested objects successfully deleted\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: delete objects\n      tags:\n      - objects\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/refs/{ref}/objects/stat:\n    get:\n      operationId: statObject\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: a reference (could be either a branch or a commit ID)\n        explode: false\n        in: path\n        name: ref\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: relative to the branch\n        explode: true\n        in: query\n        name: path\n        required: true\n        schema:\n          type: string\n        style: form\n      - explode: true\n        in: query\n        name: user_metadata\n        required: false\n        schema:\n          default: true\n          type: boolean\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectStats'\n          description: object metadata\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n        \"410\":\n          description: object gone (but partial metadata may be available)\n      summary: get object metadata\n      tags:\n      - objects\n      x-accepts: application/json\n  /repositories/{repository}/refs/{ref}/objects/underlyingProperties:\n    get:\n      operationId: getUnderlyingProperties\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: a reference (could be either a branch or a commit ID)\n        explode: false\n        in: path\n        name: ref\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: relative to the branch\n        explode: true\n        in: query\n        name: path\n        required: true\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnderlyingObjectProperties'\n          description: object metadata on underlying storage\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get object properties on underlying storage\n      tags:\n      - objects\n      x-accepts: application/json\n  /repositories/{repository}/refs/{ref}/objects/ls:\n    get:\n      operationId: listObjects\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: a reference (could be either a branch or a commit ID)\n        explode: false\n        in: path\n        name: ref\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: true\n        in: query\n        name: user_metadata\n        required: false\n        schema:\n          default: true\n          type: boolean\n        style: form\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      - description: delimiter used to group common prefixes by\n        explode: true\n        in: query\n        name: delimiter\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: return items prefixed with this value\n        explode: true\n        in: query\n        name: prefix\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectStatsList'\n          description: object listing\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list objects under a given prefix\n      tags:\n      - objects\n      x-accepts: application/json\n  /repositories/{repository}/refs/{branch}/symlink:\n    post:\n      operationId: createSymlinkFile\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: branch\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: path to the table data\n        explode: true\n        in: query\n        name: location\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageURI'\n          description: location created\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: creates symlink files corresponding to the given directory\n      tags:\n      - metadata\n      x-accepts: application/json\n  /repositories/{repository}/actions/runs:\n    get:\n      operationId: listRepositoryRuns\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      - explode: true\n        in: query\n        name: branch\n        required: false\n        schema:\n          type: string\n        style: form\n      - explode: true\n        in: query\n        name: commit\n        required: false\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActionRunList'\n          description: list action runs\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list runs\n      tags:\n      - actions\n      x-accepts: application/json\n  /repositories/{repository}/actions/runs/{run_id}:\n    get:\n      operationId: getRun\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: run_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActionRun'\n          description: action run result\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get a run\n      tags:\n      - actions\n      x-accepts: application/json\n  /repositories/{repository}/actions/runs/{run_id}/hooks:\n    get:\n      operationId: listRunHooks\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: run_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: return items after this value\n        explode: true\n        in: query\n        name: after\n        required: false\n        schema:\n          type: string\n        style: form\n      - description: how many items to return\n        explode: true\n        in: query\n        name: amount\n        required: false\n        schema:\n          default: 100\n          maximum: 1000\n          minimum: -1\n          type: integer\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HookRunList'\n          description: list specific run hooks\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: list run hooks\n      tags:\n      - actions\n      x-accepts: application/json\n  /repositories/{repository}/actions/runs/{run_id}/hooks/{hook_run_id}/output:\n    get:\n      operationId: getRunHookOutput\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: run_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: hook_run_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/octet-stream:\n              schema:\n                format: binary\n                type: string\n          description: run hook output\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get run hook output\n      tags:\n      - actions\n      x-accepts: application/json\n  /repositories/{repository}/metadata/meta_range/{meta_range}:\n    get:\n      operationId: getMetaRange\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: meta_range\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageURI'\n          description: meta-range URI\n          headers:\n            Location:\n              description: redirect to S3\n              explode: false\n              schema:\n                type: string\n              style: simple\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: return URI to a meta-range file\n      tags:\n      - metadata\n      x-accepts: application/json\n  /repositories/{repository}/metadata/range/{range}:\n    get:\n      operationId: getRange\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      - explode: false\n        in: path\n        name: range\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageURI'\n          description: range URI\n          headers:\n            Location:\n              description: redirect to S3\n              explode: false\n              schema:\n                type: string\n              style: simple\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: return URI to a range file\n      tags:\n      - metadata\n      x-accepts: application/json\n  /repositories/{repository}/gc/rules:\n    get:\n      operationId: getGarbageCollectionRules\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GarbageCollectionRules'\n          description: gc rule list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      tags:\n      - retention\n      x-accepts: application/json\n    post:\n      operationId: set garbage collection rules\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GarbageCollectionRules'\n        required: true\n      responses:\n        \"204\":\n          description: set garbage collection rules successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      tags:\n      - retention\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/gc/prepare_commits:\n    post:\n      operationId: prepareGarbageCollectionCommits\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GarbageCollectionPrepareRequest'\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GarbageCollectionPrepareResponse'\n          description: paths to commit dataset\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: save lists of active and expired commits for garbage collection\n      tags:\n      - retention\n      x-contentType: application/json\n      x-accepts: application/json\n  /repositories/{repository}/branch_protection:\n    delete:\n      operationId: deleteBranchProtectionRule\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        $ref: '#/components/requestBodies/inline_object_1'\n        content:\n          application/json:\n            schema:\n              properties:\n                pattern:\n                  type: string\n              required:\n              - pattern\n              type: object\n        required: true\n      responses:\n        \"204\":\n          description: branch protection rule deleted successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      tags:\n      - repositories\n      x-contentType: application/json\n      x-accepts: application/json\n    get:\n      operationId: getBranchProtectionRules\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/BranchProtectionRule'\n                type: array\n          description: branch protection rules\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      summary: get branch protection rules\n      tags:\n      - repositories\n      x-accepts: application/json\n    post:\n      operationId: createBranchProtectionRule\n      parameters:\n      - explode: false\n        in: path\n        name: repository\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BranchProtectionRule'\n        required: true\n      responses:\n        \"204\":\n          description: branch protection rule created successfully\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource Not Found\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Internal Server Error\n      tags:\n      - repositories\n      x-contentType: application/json\n      x-accepts: application/json\n  /healthcheck:\n    get:\n      description: check that the API server is up and running\n      operationId: healthCheck\n      responses:\n        \"204\":\n          description: NoContent\n      security: []\n      tags:\n      - healthCheck\n      x-accepts: application/json\n  /config/version:\n    get:\n      description: get version of lakeFS server\n      operationId: getLakeFSVersion\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VersionConfig'\n          description: lakeFS version\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n      tags:\n      - config\n      x-accepts: application/json\n  /config/storage:\n    get:\n      description: retrieve lakeFS storage configuration\n      operationId: getStorageConfig\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageConfig'\n          description: lakeFS storage configuration\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Unauthorized\n      tags:\n      - config\n      x-accepts: application/json\ncomponents:\n  parameters:\n    PaginationPrefix:\n      description: return items prefixed with this value\n      explode: true\n      in: query\n      name: prefix\n      required: false\n      schema:\n        type: string\n      style: form\n    PaginationAfter:\n      description: return items after this value\n      explode: true\n      in: query\n      name: after\n      required: false\n      schema:\n        type: string\n      style: form\n    PaginationAmount:\n      description: how many items to return\n      explode: true\n      in: query\n      name: amount\n      required: false\n      schema:\n        default: 100\n        maximum: 1000\n        minimum: -1\n        type: integer\n      style: form\n    PaginationDelimiter:\n      description: delimiter used to group common prefixes by\n      explode: true\n      in: query\n      name: delimiter\n      required: false\n      schema:\n        type: string\n      style: form\n  requestBodies:\n    inline_object_1:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/inline_object_1'\n      required: true\n    inline_object:\n      content:\n        multipart/form-data:\n          schema:\n            $ref: '#/components/schemas/inline_object'\n  responses:\n    Unauthorized:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Unauthorized\n    ServerError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Internal Server Error\n    NotFound:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Resource Not Found\n    Conflict:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Resource Conflicts With Target\n    PreconditionFailed:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Precondition Failed\n    ValidationError:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Validation Error\n  schemas:\n    Pagination:\n      example:\n        max_per_page: 0\n        has_more: true\n        next_offset: next_offset\n        results: 0\n      properties:\n        has_more:\n          description: Next page is available\n          type: boolean\n        next_offset:\n          description: Token used to retrieve the next page\n          type: string\n        results:\n          description: Number of values found in the results\n          minimum: 0\n          type: integer\n        max_per_page:\n          description: Maximal number of entries per page\n          minimum: 0\n          type: integer\n      required:\n      - has_more\n      - max_per_page\n      - next_offset\n      - results\n      type: object\n    ImportPagination:\n      example:\n        continuation_token: continuation_token\n        has_more: true\n        last_key: last_key\n      properties:\n        has_more:\n          description: More keys to be ingested.\n          type: boolean\n        continuation_token:\n          description: Opaque. Token used to import the next range.\n          type: string\n        last_key:\n          description: Last object store key that was ingested.\n          type: string\n      required:\n      - has_more\n      - last_key\n      type: object\n    Repository:\n      example:\n        default_branch: default_branch\n        id: id\n        creation_date: 0\n        storage_namespace: storage_namespace\n      properties:\n        id:\n          type: string\n        creation_date:\n          description: Unix Epoch in seconds\n          format: int64\n          type: integer\n        default_branch:\n          type: string\n        storage_namespace:\n          description: Filesystem URI to store the underlying data in (e.g. \"s3://my-bucket/some/path/\")\n          type: string\n      required:\n      - creation_date\n      - default_branch\n      - id\n      - storage_namespace\n      type: object\n    RepositoryList:\n      example:\n        pagination:\n          max_per_page: 0\n          has_more: true\n          next_offset: next_offset\n          results: 0\n        results:\n        - default_branch: default_branch\n          id: id\n          creation_date: 0\n          storage_namespace: storage_namespace\n        - default_branch: default_branch\n          id: id\n          creation_date: 0\n          storage_namespace: storage_namespace\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        results:\n          items:\n            $ref: '#/components/schemas/Repository'\n          type: array\n      required:\n      - pagination\n      - results\n      type: object\n    MergeResult:\n      example:\n        summary:\n          removed: 6\n          added: 0\n          changed: 1\n          conflict: 5\n        reference: reference\n      properties:\n        summary:\n          $ref: '#/components/schemas/MergeResult_summary'\n        reference:\n          type: string\n      required:\n      - reference\n      - summary\n      type: object\n    RepositoryCreation:\n      example:\n        name: name\n        default_branch: main\n        storage_namespace: s3://example-bucket/\n      properties:\n        name:\n          pattern: ^[a-z0-9][a-z0-9-]{2,62}$\n          type: string\n        storage_namespace:\n          description: Filesystem URI to store the underlying data in (e.g. \"s3://my-bucket/some/path/\")\n          example: s3://example-bucket/\n          pattern: ^(s3|gs|https?|mem|local|transient)://.*$\n          type: string\n        default_branch:\n          example: main\n          type: string\n      required:\n      - name\n      - storage_namespace\n      type: object\n    PathList:\n      example:\n        paths:\n        - paths\n        - paths\n      properties:\n        paths:\n          items:\n            description: Object path\n            type: string\n          type: array\n      required:\n      - paths\n      type: object\n    ObjectStats:\n      example:\n        physical_address: physical_address\n        path: path\n        metadata:\n          key: metadata\n        size_bytes: 0\n        content_type: content_type\n        checksum: checksum\n        path_type: common_prefix\n        mtime: 6\n      properties:\n        path:\n          type: string\n        path_type:\n          enum:\n          - common_prefix\n          - object\n          type: string\n        physical_address:\n          type: string\n        checksum:\n          type: string\n        size_bytes:\n          format: int64\n          type: integer\n        mtime:\n          description: Unix Epoch in seconds\n          format: int64\n          type: integer\n        metadata:\n          additionalProperties:\n            type: string\n          type: object\n        content_type:\n          description: Object media type\n          type: string\n      required:\n      - checksum\n      - mtime\n      - path\n      - path_type\n      - physical_address\n      type: object\n    ObjectStatsList:\n      example:\n        pagination:\n          max_per_page: 0\n          has_more: true\n          next_offset: next_offset\n          results: 0\n        results:\n        - physical_address: physical_address\n          path: path\n          metadata:\n            key: metadata\n          size_bytes: 0\n          content_type: content_type\n          checksum: checksum\n          path_type: common_prefix\n          mtime: 6\n        - physical_address: physical_address\n          path: path\n          metadata:\n            key: metadata\n          size_bytes: 0\n          content_type: content_type\n          checksum: checksum\n          path_type: common_prefix\n          mtime: 6\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        results:\n          items:\n            $ref: '#/components/schemas/ObjectStats'\n          type: array\n      required:\n      - pagination\n      - results\n      type: object\n    ObjectStageCreation:\n      example:\n        physical_address: physical_address\n        metadata:\n          key: metadata\n        size_bytes: 0\n        content_type: content_type\n        checksum: checksum\n        mtime: 6\n      properties:\n        physical_address:\n          type: string\n        checksum:\n          type: string\n        size_bytes:\n          format: int64\n          type: integer\n        mtime:\n          description: Unix Epoch in seconds\n          format: int64\n          type: integer\n        metadata:\n          additionalProperties:\n            type: string\n          type: object\n        content_type:\n          description: Object media type\n          type: string\n      required:\n      - checksum\n      - physical_address\n      - size_bytes\n      type: object\n    ObjectUserMetadata:\n      additionalProperties:\n        type: string\n      type: object\n    UnderlyingObjectProperties:\n      example:\n        storage_class: storage_class\n      properties:\n        storage_class:\n          nullable: true\n          type: string\n      type: object\n    Ref:\n      example:\n        id: id\n        commit_id: commit_id\n      properties:\n        id:\n          type: string\n        commit_id:\n          type: string\n      required:\n      - commit_id\n      - id\n      type: object\n    RefList:\n      example:\n        pagination:\n          max_per_page: 0\n          has_more: true\n          next_offset: next_offset\n          results: 0\n        results:\n        - id: id\n          commit_id: commit_id\n        - id: id\n          commit_id: commit_id\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        results:\n          items:\n            $ref: '#/components/schemas/Ref'\n          type: array\n      required:\n      - pagination\n      - results\n      type: object\n    Diff:\n      example:\n        path: path\n        size_bytes: 0\n        path_type: common_prefix\n        type: added\n      properties:\n        type:\n          enum:\n          - added\n          - removed\n          - changed\n          - conflict\n          type: string\n        path:\n          type: string\n        path_type:\n          enum:\n          - common_prefix\n          - object\n          type: string\n        size_bytes:\n          description: represents the size of the added/changed/deleted entry\n          format: int64\n          type: integer\n      required:\n      - path\n      - path_type\n      - type\n      type: object\n    DiffList:\n      example:\n        pagination:\n          max_per_page: 0\n          has_more: true\n          next_offset: next_offset\n          results: 0\n        results:\n        - path: path\n          size_bytes: 0\n          path_type: common_prefix\n          type: added\n        - path: path\n          size_bytes: 0\n          path_type: common_prefix\n          type: added\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        results:\n          items:\n            $ref: '#/components/schemas/Diff'\n          type: array\n      required:\n      - pagination\n      - results\n      type: object\n    ResetCreation:\n      example:\n        path: path\n        type: object\n      properties:\n        type:\n          enum:\n          - object\n          - common_prefix\n          - reset\n          type: string\n        path:\n          type: string\n      required:\n      - type\n      type: object\n    RevertCreation:\n      example:\n        ref: ref\n        parent_number: 0\n      properties:\n        ref:\n          description: the commit to revert, given by a ref\n          type: string\n        parent_number:\n          description: when reverting a merge commit, the parent number (starting\n            from 1) relative to which to perform the revert.\n          type: integer\n      required:\n      - parent_number\n      - ref\n      type: object\n    Commit:\n      example:\n        metadata:\n          key: metadata\n        committer: committer\n        id: id\n        creation_date: 0\n        meta_range_id: meta_range_id\n        message: message\n        parents:\n        - parents\n        - parents\n      properties:\n        id:\n          type: string\n        parents:\n          items:\n            type: string\n          type: array\n        committer:\n          type: string\n        message:\n          type: string\n        creation_date:\n          description: Unix Epoch in seconds\n          format: int64\n          type: integer\n        meta_range_id:\n          type: string\n        metadata:\n          additionalProperties:\n            type: string\n          type: object\n      required:\n      - committer\n      - creation_date\n      - id\n      - message\n      - meta_range_id\n      - parents\n      type: object\n    CommitList:\n      example:\n        pagination:\n          max_per_page: 0\n          has_more: true\n          next_offset: next_offset\n          results: 0\n        results:\n        - metadata:\n            key: metadata\n          committer: committer\n          id: id\n          creation_date: 0\n          meta_range_id: meta_range_id\n          message: message\n          parents:\n          - parents\n          - parents\n        - metadata:\n            key: metadata\n          committer: committer\n          id: id\n          creation_date: 0\n          meta_range_id: meta_range_id\n          message: message\n          parents:\n          - parents\n          - parents\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        results:\n          items:\n            $ref: '#/components/schemas/Commit'\n          type: array\n      required:\n      - pagination\n      - results\n      type: object\n    CommitCreation:\n      example:\n        date: 0\n        metadata:\n          key: metadata\n        message: message\n      properties:\n        message:\n          type: string\n        metadata:\n          additionalProperties:\n            type: string\n          type: object\n        date:\n          description: set date to override creation date in the commit (Unix Epoch\n            in seconds)\n          format: int64\n          type: integer\n      required:\n      - message\n      type: object\n    Merge:\n      example:\n        metadata:\n          key: metadata\n        message: message\n        strategy: strategy\n      properties:\n        message:\n          type: string\n        metadata:\n          additionalProperties:\n            type: string\n          type: object\n        strategy:\n          description: In case of a merge conflict, this option will force the merge\n            process to automatically favor changes from the dest branch ('dest-wins')\n            or from the source branch('source-wins'). In case no selection is made,\n            the merge process will fail in case of a conflict\n          type: string\n      type: object\n    BranchCreation:\n      example:\n        name: name\n        source: source\n      properties:\n        name:\n          type: string\n        source:\n          type: string\n      required:\n      - name\n      - source\n      type: object\n    TagCreation:\n      example:\n        ref: ref\n        id: id\n      properties:\n        id:\n          type: string\n        ref:\n          type: string\n      required:\n      - id\n      - ref\n      type: object\n    RefsDump:\n      example:\n        tags_meta_range_id: tags_meta_range_id\n        branches_meta_range_id: branches_meta_range_id\n        commits_meta_range_id: commits_meta_range_id\n      properties:\n        commits_meta_range_id:\n          type: string\n        tags_meta_range_id:\n          type: string\n        branches_meta_range_id:\n          type: string\n      required:\n      - branches_meta_range_id\n      - commits_meta_range_id\n      - tags_meta_range_id\n      type: object\n    StorageURI:\n      description: URI to a path in a storage provider (e.g. \"s3://bucket1/path/to/object\")\n      example:\n        location: location\n      properties:\n        location:\n          type: string\n      required:\n      - location\n      type: object\n    Error:\n      example:\n        message: message\n      properties:\n        message:\n          description: short message explaining the error\n          type: string\n      required:\n      - message\n      type: object\n    ObjectError:\n      example:\n        path: path\n        status_code: 0\n        message: message\n      properties:\n        status_code:\n          description: HTTP status code associated for operation on path\n          type: integer\n        message:\n          description: short message explaining status_code\n          type: string\n        path:\n          description: affected path\n          type: string\n      required:\n      - message\n      - status_code\n      type: object\n    ObjectErrorList:\n      example:\n        errors:\n        - path: path\n          status_code: 0\n          message: message\n        - path: path\n          status_code: 0\n          message: message\n      properties:\n        errors:\n          items:\n            $ref: '#/components/schemas/ObjectError'\n          type: array\n      required:\n      - errors\n      type: object\n    User:\n      example:\n        friendly_name: friendly_name\n        id: id\n        creation_date: 0\n        email: email\n      properties:\n        id:\n          type: string\n        creation_date:\n          description: Unix Epoch in seconds\n          format: int64\n          type: integer\n        friendly_name:\n          type: string\n        email:\n          type: string\n      required:\n      - creation_date\n      - id\n      type: object\n    CurrentUser:\n      example:\n        user:\n          friendly_name: friendly_name\n          id: id\n          creation_date: 0\n          email: email\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n      required:\n      - user\n      type: object\n    ForgotPasswordRequest:\n      example:\n        email: email\n      properties:\n        email:\n          type: string\n      required:\n      - email\n      type: object\n    UserCreation:\n      example:\n        invite_user: true\n        id: id\n      properties:\n        id:\n          type: string\n        invite_user:\n          type: boolean\n      required:\n      - id\n      type: object\n    SetupState:\n      example:\n        oidc_enabled: true\n        state: initialized\n      properties:\n        state:\n          enum:\n          - initialized\n          - not_initialized\n          type: string\n        oidc_enabled:\n          type: boolean\n      type: object\n    AccessKeyCredentials:\n      example:\n        access_key_id: AKIAIOSFODNN7EXAMPLE\n        secret_access_key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n      properties:\n        access_key_id:\n          description: access key ID to set for user for use in integration testing.\n          example: AKIAIOSFODNN7EXAMPLE\n          minLength: 1\n          type: string\n        secret_access_key:\n          description: secret access key to set for user for use in integration testing.\n          example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n          minLength: 1\n          type: string\n      required:\n      - access_key_id\n      - secret_access_key\n      type: object\n    Setup:\n      example:\n        key:\n          access_key_id: AKIAIOSFODNN7EXAMPLE\n          secret_access_key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n        username: username\n      properties:\n        username:\n          description: an identifier for the user (e.g. jane.doe)\n          type: string\n        key:\n          $ref: '#/components/schemas/AccessKeyCredentials'\n      required:\n      - username\n      type: object\n    UpdatePasswordByToken:\n      example:\n        newPassword: newPassword\n        email: email\n        token: token\n      properties:\n        token:\n          description: token used for authentication\n          type: string\n        newPassword:\n          description: new password to update\n          type: string\n        email:\n          description: optional user email to match the token for verification\n          type: string\n      required:\n      - newPassword\n      - token\n      type: object\n    Credentials:\n      example:\n        access_key_id: access_key_id\n        creation_date: 0\n      properties:\n        access_key_id:\n          type: string\n        creation_date:\n          description: Unix Epoch in seconds\n          format: int64\n          type: integer\n      required:\n      - access_key_id\n      - creation_date\n      type: object\n    CredentialsList:\n      example:\n        pagination:\n          max_per_page: 0\n          has_more: true\n          next_offset: next_offset\n          results: 0\n        results:\n        - access_key_id: access_key_id\n          creation_date: 0\n        - access_key_id: access_key_id\n          creation_date: 0\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        results:\n          items:\n            $ref: '#/components/schemas/Credentials'\n          type: array\n      required:\n      - pagination\n      - results\n      type: object\n    CredentialsWithSecret:\n      example:\n        access_key_id: access_key_id\n        secret_access_key: secret_access_key\n        creation_date: 0\n      properties:\n        access_key_id:\n          type: string\n        secret_access_key:\n          type: string\n        creation_date:\n          description: Unix Epoch in seconds\n          format: int64\n          type: integer\n      required:\n      - access_key_id\n      - creation_date\n      - secret_access_key\n      type: object\n    Group:\n      example:\n        id: id\n        creation_date: 0\n      properties:\n        id:\n          type: string\n        creation_date:\n          description: Unix Epoch in seconds\n          format: int64\n          type: integer\n      required:\n      - creation_date\n      - id\n      type: object\n    GroupList:\n      example:\n        pagination:\n          max_per_page: 0\n          has_more: true\n          next_offset: next_offset\n          results: 0\n        results:\n        - id: id\n          creation_date: 0\n        - id: id\n          creation_date: 0\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        results:\n          items:\n            $ref: '#/components/schemas/Group'\n          type: array\n      required:\n      - pagination\n      - results\n      type: object\n    AuthCapabilities:\n      example:\n        invite_user: true\n        forgot_password: true\n      properties:\n        invite_user:\n          type: boolean\n        forgot_password:\n          type: boolean\n      type: object\n    UserList:\n      example:\n        pagination:\n          max_per_page: 0\n          has_more: true\n          next_offset: next_offset\n          results: 0\n        results:\n        - friendly_name: friendly_name\n          id: id\n          creation_date: 0\n          email: email\n        - friendly_name: friendly_name\n          id: id\n          creation_date: 0\n          email: email\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        results:\n          items:\n            $ref: '#/components/schemas/User'\n          type: array\n      required:\n      - pagination\n      - results\n      type: object\n    LoginInformation:\n      example:\n        access_key_id: access_key_id\n        secret_access_key: secret_access_key\n      properties:\n        access_key_id:\n          type: string\n        secret_access_key:\n          type: string\n      required:\n      - access_key_id\n      - secret_access_key\n      type: object\n    AuthenticationToken:\n      example:\n        token: token\n      properties:\n        token:\n          description: a JWT token that could be used to authenticate requests\n          type: string\n      required:\n      - token\n      type: object\n    GroupCreation:\n      example:\n        id: id\n      properties:\n        id:\n          type: string\n      required:\n      - id\n      type: object\n    Statement:\n      example:\n        resource: resource\n        effect: allow\n        action:\n        - action\n        - action\n      properties:\n        effect:\n          enum:\n          - allow\n          - deny\n          type: string\n        resource:\n          type: string\n        action:\n          items:\n            type: string\n          minItems: 1\n          type: array\n      required:\n      - action\n      - effect\n      - resource\n      type: object\n    Policy:\n      example:\n        statement:\n        - resource: resource\n          effect: allow\n          action:\n          - action\n          - action\n        - resource: resource\n          effect: allow\n          action:\n          - action\n          - action\n        id: id\n        creation_date: 0\n      properties:\n        id:\n          type: string\n        creation_date:\n          description: Unix Epoch in seconds\n          format: int64\n          type: integer\n        statement:\n          items:\n            $ref: '#/components/schemas/Statement'\n          minItems: 1\n          type: array\n      required:\n      - id\n      - statement\n      type: object\n    PolicyList:\n      example:\n        pagination:\n          max_per_page: 0\n          has_more: true\n          next_offset: next_offset\n          results: 0\n        results:\n        - statement:\n          - resource: resource\n            effect: allow\n            action:\n            - action\n            - action\n          - resource: resource\n            effect: allow\n            action:\n            - action\n            - action\n          id: id\n          creation_date: 0\n        - statement:\n          - resource: resource\n            effect: allow\n            action:\n            - action\n            - action\n          - resource: resource\n            effect: allow\n            action:\n            - action\n            - action\n          id: id\n          creation_date: 0\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        results:\n          items:\n            $ref: '#/components/schemas/Policy'\n          type: array\n      required:\n      - pagination\n      - results\n      type: object\n    StorageConfig:\n      example:\n        blockstore_namespace_example: blockstore_namespace_example\n        blockstore_namespace_ValidityRegex: blockstore_namespace_ValidityRegex\n        blockstore_type: blockstore_type\n        default_namespace_prefix: default_namespace_prefix\n      properties:\n        blockstore_type:\n          type: string\n        blockstore_namespace_example:\n          type: string\n        blockstore_namespace_ValidityRegex:\n          type: string\n        default_namespace_prefix:\n          type: string\n      required:\n      - blockstore_namespace_ValidityRegex\n      - blockstore_namespace_example\n      - blockstore_type\n      type: object\n    VersionConfig:\n      example:\n        version: version\n        upgrade_recommended: true\n        upgrade_url: upgrade_url\n      properties:\n        version:\n          type: string\n        upgrade_recommended:\n          type: boolean\n        upgrade_url:\n          type: string\n      type: object\n    ActionRun:\n      example:\n        start_time: 2000-01-23T04:56:07.000+00:00\n        run_id: run_id\n        event_type: pre_commit\n        end_time: 2000-01-23T04:56:07.000+00:00\n        branch: branch\n        commit_id: commit_id\n        status: failed\n      properties:\n        run_id:\n          type: string\n        branch:\n          type: string\n        start_time:\n          format: date-time\n          type: string\n        end_time:\n          format: date-time\n          type: string\n        event_type:\n          enum:\n          - pre_commit\n          - pre_merge\n          type: string\n        status:\n          enum:\n          - failed\n          - completed\n          type: string\n        commit_id:\n          type: string\n      required:\n      - branch\n      - commit_id\n      - event_type\n      - run_id\n      - start_time\n      - status\n      type: object\n    ActionRunList:\n      example:\n        pagination:\n          max_per_page: 0\n          has_more: true\n          next_offset: next_offset\n          results: 0\n        results:\n        - start_time: 2000-01-23T04:56:07.000+00:00\n          run_id: run_id\n          event_type: pre_commit\n          end_time: 2000-01-23T04:56:07.000+00:00\n          branch: branch\n          commit_id: commit_id\n          status: failed\n        - start_time: 2000-01-23T04:56:07.000+00:00\n          run_id: run_id\n          event_type: pre_commit\n          end_time: 2000-01-23T04:56:07.000+00:00\n          branch: branch\n          commit_id: commit_id\n          status: failed\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        results:\n          items:\n            $ref: '#/components/schemas/ActionRun'\n          type: array\n      required:\n      - pagination\n      - results\n      type: object\n    HookRun:\n      example:\n        start_time: 2000-01-23T04:56:07.000+00:00\n        hook_id: hook_id\n        end_time: 2000-01-23T04:56:07.000+00:00\n        action: action\n        hook_run_id: hook_run_id\n        status: failed\n      properties:\n        hook_run_id:\n          type: string\n        action:\n          type: string\n        hook_id:\n          type: string\n        start_time:\n          format: date-time\n          type: string\n        end_time:\n          format: date-time\n          type: string\n        status:\n          enum:\n          - failed\n          - completed\n          type: string\n      required:\n      - action\n      - hook_id\n      - hook_run_id\n      - start_time\n      - status\n      type: object\n    HookRunList:\n      example:\n        pagination:\n          max_per_page: 0\n          has_more: true\n          next_offset: next_offset\n          results: 0\n        results:\n        - start_time: 2000-01-23T04:56:07.000+00:00\n          hook_id: hook_id\n          end_time: 2000-01-23T04:56:07.000+00:00\n          action: action\n          hook_run_id: hook_run_id\n          status: failed\n        - start_time: 2000-01-23T04:56:07.000+00:00\n          hook_id: hook_id\n          end_time: 2000-01-23T04:56:07.000+00:00\n          action: action\n          hook_run_id: hook_run_id\n          status: failed\n      properties:\n        pagination:\n          $ref: '#/components/schemas/Pagination'\n        results:\n          items:\n            $ref: '#/components/schemas/HookRun'\n          type: array\n      required:\n      - pagination\n      - results\n      type: object\n    StagingLocation:\n      description: location for placing an object when staging it\n      example:\n        physical_address: physical_address\n        token: token\n      properties:\n        physical_address:\n          type: string\n        token:\n          description: opaque staging token to use to link uploaded object\n          type: string\n      required:\n      - token\n      type: object\n    StagingMetadata:\n      description: information about uploaded object\n      example:\n        size_bytes: 0\n        user_metadata:\n          key: user_metadata\n        content_type: content_type\n        checksum: checksum\n        staging:\n          physical_address: physical_address\n          token: token\n      properties:\n        staging:\n          $ref: '#/components/schemas/StagingLocation'\n        checksum:\n          description: unique identifier of object content on backing store (typically\n            ETag)\n          type: string\n        size_bytes:\n          format: int64\n          type: integer\n        user_metadata:\n          additionalProperties:\n            type: string\n          type: object\n        content_type:\n          description: Object media type\n          type: string\n      required:\n      - checksum\n      - size_bytes\n      - staging\n      type: object\n    GarbageCollectionPrepareRequest:\n      example:\n        previous_run_id: 64eaa103-d726-4a33-bcb8-7c0b4abfe09e\n      properties:\n        previous_run_id:\n          description: run id of a previous successful GC job\n          example: 64eaa103-d726-4a33-bcb8-7c0b4abfe09e\n          type: string\n      type: object\n    GarbageCollectionPrepareResponse:\n      example:\n        run_id: 64eaa103-d726-4a33-bcb8-7c0b4abfe09e\n        gc_addresses_location: s3://my-storage-namespace/_lakefs/retention/addresses\n        gc_commits_location: s3://my-storage-namespace/_lakefs/retention/commits\n      properties:\n        run_id:\n          description: a unique identifier generated for this GC job\n          example: 64eaa103-d726-4a33-bcb8-7c0b4abfe09e\n          type: string\n        gc_commits_location:\n          description: location of the resulting commits csv table (partitioned by\n            run_id)\n          example: s3://my-storage-namespace/_lakefs/retention/commits\n          type: string\n        gc_addresses_location:\n          description: location to use for expired addresses parquet table (partitioned\n            by run_id)\n          example: s3://my-storage-namespace/_lakefs/retention/addresses\n          type: string\n      required:\n      - gc_addresses_location\n      - gc_commits_location\n      - run_id\n      type: object\n    GarbageCollectionRule:\n      example:\n        branch_id: branch_id\n        retention_days: 6\n      properties:\n        branch_id:\n          type: string\n        retention_days:\n          type: integer\n      required:\n      - branch_id\n      - retention_days\n      type: object\n    GarbageCollectionRules:\n      example:\n        branches:\n        - branch_id: branch_id\n          retention_days: 6\n        - branch_id: branch_id\n          retention_days: 6\n        default_retention_days: 0\n      properties:\n        default_retention_days:\n          type: integer\n        branches:\n          items:\n            $ref: '#/components/schemas/GarbageCollectionRule'\n          type: array\n      required:\n      - branches\n      - default_retention_days\n      type: object\n    BranchProtectionRule:\n      example:\n        pattern: stable_*\n      properties:\n        pattern:\n          description: fnmatch pattern for the branch name, supporting * and ? wildcards\n          example: stable_*\n          minLength: 1\n          type: string\n      required:\n      - pattern\n      type: object\n    StageRangeCreation:\n      example:\n        fromSourceURI: s3://my-bucket/production/collections/\n        continuation_token: continuation_token\n        prepend: collections/\n        after: production/collections/some/file.parquet\n      properties:\n        fromSourceURI:\n          description: The source location of the ingested files. Must match the lakeFS\n            installation blockstore type.\n          example: s3://my-bucket/production/collections/\n          type: string\n        after:\n          description: Only objects after this key would be ingested.\n          example: production/collections/some/file.parquet\n          type: string\n        prepend:\n          description: A prefix to prepend to ingested objects.\n          example: collections/\n          type: string\n        continuation_token:\n          description: Opaque. Client should pass the continuation_token received\n            from server to continue creation ranges from the same key.\n          type: string\n      required:\n      - after\n      - fromSourceURI\n      - prepend\n      type: object\n    RangeMetadata:\n      example:\n        max_key: production/collections/some/file_8229.parquet\n        count: 0\n        estimated_size: 6\n        id: 480e19972a6fbe98ab8e81ae5efdfd1a29037587e91244e87abd4adefffdb01c\n        min_key: production/collections/some/file_1.parquet\n      properties:\n        id:\n          description: ID of the range.\n          example: 480e19972a6fbe98ab8e81ae5efdfd1a29037587e91244e87abd4adefffdb01c\n          type: string\n        min_key:\n          description: First key in the range.\n          example: production/collections/some/file_1.parquet\n          type: string\n        max_key:\n          description: Last key in the range.\n          example: production/collections/some/file_8229.parquet\n          type: string\n        count:\n          description: Number of records in the range.\n          type: integer\n        estimated_size:\n          description: Estimated size of the range in bytes\n          type: integer\n      required:\n      - count\n      - estimated_size\n      - id\n      - max_key\n      - min_key\n      type: object\n    IngestRangeCreationResponse:\n      example:\n        pagination:\n          continuation_token: continuation_token\n          has_more: true\n          last_key: last_key\n        range:\n          max_key: production/collections/some/file_8229.parquet\n          count: 0\n          estimated_size: 6\n          id: 480e19972a6fbe98ab8e81ae5efdfd1a29037587e91244e87abd4adefffdb01c\n          min_key: production/collections/some/file_1.parquet\n      properties:\n        range:\n          $ref: '#/components/schemas/RangeMetadata'\n        pagination:\n          $ref: '#/components/schemas/ImportPagination'\n      type: object\n    MetaRangeCreation:\n      example:\n        ranges:\n        - max_key: production/collections/some/file_8229.parquet\n          count: 0\n          estimated_size: 6\n          id: 480e19972a6fbe98ab8e81ae5efdfd1a29037587e91244e87abd4adefffdb01c\n          min_key: production/collections/some/file_1.parquet\n        - max_key: production/collections/some/file_8229.parquet\n          count: 0\n          estimated_size: 6\n          id: 480e19972a6fbe98ab8e81ae5efdfd1a29037587e91244e87abd4adefffdb01c\n          min_key: production/collections/some/file_1.parquet\n      properties:\n        ranges:\n          items:\n            $ref: '#/components/schemas/RangeMetadata'\n          minItems: 1\n          type: array\n      required:\n      - ranges\n      type: object\n    MetaRangeCreationResponse:\n      example:\n        id: id\n      properties:\n        id:\n          description: The id of the created metarange\n          type: string\n      type: object\n    inline_object:\n      properties:\n        content:\n          description: Only a single file per upload which must be named \"content\".\n          format: binary\n          type: string\n      type: object\n    inline_object_1:\n      properties:\n        pattern:\n          type: string\n      required:\n      - pattern\n      type: object\n    MergeResult_summary:\n      example:\n        removed: 6\n        added: 0\n        changed: 1\n        conflict: 5\n      properties:\n        added:\n          type: integer\n        removed:\n          type: integer\n        changed:\n          type: integer\n        conflict:\n          type: integer\n      required:\n      - added\n      - changed\n      - conflict\n      - removed\n      type: object\n  securitySchemes:\n    basic_auth:\n      scheme: basic\n      type: http\n    jwt_token:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n    cookie_auth:\n      in: cookie\n      name: internal_auth_session\n      type: apiKey\n    oidc_auth:\n      in: cookie\n      name: oidc_auth_session\n      type: apiKey\n\n",
			"canonicalURL": "/github.com/treeverse/lakeFS@fddcc835593baac5bbc10e4bec1722d7e7784513/-/blob/clients/java/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/treeverse/lakeFS/blob/fddcc835593baac5bbc10e4bec1722d7e7784513/clients/java/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/repositories\": get: security: security \"cookie_auth\" (index 2): cookie security not implemented",
	"NotImplemented": [
		"cookie security",
		"unsupported content types"
	]
}