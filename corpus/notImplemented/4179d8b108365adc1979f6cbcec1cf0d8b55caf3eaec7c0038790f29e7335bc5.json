{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/pdfbroker.io/v1/openapi.yaml",
			"byteSize": 33335,
			"content": "openapi: 3.0.1\ninfo:\n  contact:\n    email: support@pdfbroker.io\n    name: PdfBroker.io Support\n    url: https://www.pdfbroker.io/docs\n  description: PdfBroker.io is an api for creating pdf files from Xsl-Fo or Html and other useful pdf utilities.\n  termsOfService: https://www.pdfbroker.io/terms\n  title: PdfBroker.io API\n  version: v1\n  x-apisguru-categories:\n    - text\n  x-origin:\n    - format: openapi\n      url: https://api.pdfbroker.io/swagger/v1/swagger.json\n      version: \"3.0\"\n  x-providerName: pdfbroker.io\nsecurity:\n  - OAuth2:\n      - pdfbroker\npaths:\n  /api/pdf:\n    get:\n      responses:\n        \"400\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"description\\\": \\\"Always empty in the public response, used for internal error transport to logs\\\",\\r\n\n                \\  \\\"statusCode\\\": 400,\\r\n\n                \\  \\\"errorMessage\\\": \\\"The error message provided to client\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/ErrorResponseDto\"\n          description: If any error occurs parsing input\n        \"415\":\n          description: If content-type of request is not set to multipart/form-data or application/json\n        \"429\":\n          description: If you reach the monthly request limit for your subscription plan\n      summary: Basic method to verify api is up and running\n      tags:\n        - Pdf\n  /api/pdf/pdfconcat:\n    post:\n      requestBody:\n        content:\n          application/json:\n            example: \"{\\r\n\n              \\  \\\"pdfDocumentsAsBase64String\\\": [\\r\n\n              \\    \\\"\u003cEncode your pdf documents as Base64 encoded string\u003e\\\",\\r\n\n              \\    \\\"\u003cEncode your pdf documents as Base64 encoded string\u003e\\\"\\r\n\n              \\  ]\\r\n\n              }\"\n            schema:\n              $ref: \"#/components/schemas/PdfConcatenationRequestDto\"\n          multipart/form-data:\n            encoding:\n              pdfdocument1:\n                contentType: application/octet-stream\n              pdfdocument2:\n                contentType: application/octet-stream\n            schema:\n              properties:\n                pdfdocument1:\n                  description: Add pdf files to be concatenated into single file\n                  format: binary\n                  type: string\n                pdfdocument2:\n                  description: You can add more than two files in the same request\n                  format: binary\n                  type: string\n              type: object\n        description: PdfConcat Request. Add two or more pdf files and concatenate pages into single pdf document.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"pdfFileBase64String\\\": \\\"Base64 encoded pdf file content\\\",\\r\n\n                \\  \\\"errorMessage\\\": \\\"If any error occured, info will be provided here\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/PdfResponseDto\"\n            application/pdf:\n              schema:\n                format: binary\n                type: string\n          description: Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json\n        \"400\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"description\\\": \\\"Always empty in the public response, used for internal error transport to logs\\\",\\r\n\n                \\  \\\"statusCode\\\": 400,\\r\n\n                \\  \\\"errorMessage\\\": \\\"The error message provided to client\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/ErrorResponseDto\"\n          description: If any error occurs parsing input\n        \"415\":\n          description: If content-type of request is not set to multipart/form-data or application/json\n        \"429\":\n          description: If you reach the monthly request limit for your subscription plan\n      summary: Concatenate multiple pdf files into single pdf file..\n      tags:\n        - Pdf\n  /api/pdf/pdftoimage:\n    post:\n      requestBody:\n        content:\n          application/json:\n            example: \"{\\r\n\n              \\  \\\"pdfFileBase64String\\\": \\\"\u003cEncode your existing PDF document as Base64 encoded string\u003e\\\",\\r\n\n              \\  \\\"options\\\": {\\r\n\n              \\    \\\"pageNumber\\\": 1,\\r\n\n              \\    \\\"imageFormat\\\": \\\"image/jpeg\\\",\\r\n\n              \\    \\\"horizontalResolution\\\": 96.0,\\r\n\n              \\    \\\"verticalResolution\\\": 96.0,\\r\n\n              \\    \\\"width\\\": 0,\\r\n\n              \\    \\\"height\\\": 0,\\r\n\n              \\    \\\"transparent\\\": false,\\r\n\n              \\    \\\"jpegQuality\\\": 90,\\r\n\n              \\    \\\"pngCompressionLevel\\\": 6\\r\n\n              \\  }\\r\n\n              }\"\n            schema:\n              $ref: \"#/components/schemas/PdfToImageRequestDto\"\n          multipart/form-data:\n            encoding:\n              options:\n                contentType: application/json\n              pdfdocument:\n                contentType: application/octet-stream\n            schema:\n              properties:\n                options:\n                  description: After pdfdocument is added, add an entry named options with your PdfToImageOptions object serialized as JSON.\n                  format: string\n                  type: string\n                pdfdocument:\n                  description: An entry named pdfdocument is required in the multipart/form-data request\n                  format: binary\n                  type: string\n              type: object\n        description: PdfToImage Request. Create an image of a page in an existing pdf document.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"imageBase64String\\\": \\\"Image file base64 encoded. This is a complete data uri, including media type that can be used directly as src on a img-tag e.g.\\\",\\r\n\n                \\  \\\"errorMessage\\\": \\\"If any error occurred, information will be provided here\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/ImageResponseDto\"\n            image/gif:\n              schema:\n                format: binary\n                type: string\n            image/jpeg:\n              schema:\n                format: binary\n                type: string\n            image/png:\n              schema:\n                format: binary\n                type: string\n          description: Generate an image of the provided pdf file. Either the image file directly or serialized as Json if Accept-header is set to application/json\n        \"400\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"description\\\": \\\"Always empty in the public response, used for internal error transport to logs\\\",\\r\n\n                \\  \\\"statusCode\\\": 400,\\r\n\n                \\  \\\"errorMessage\\\": \\\"The error message provided to client\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/ErrorResponseDto\"\n          description: If any error occurs parsing input\n        \"415\":\n          description: If content-type of request is not set to multipart/form-data or application/json\n        \"429\":\n          description: If you reach the monthly request limit for your subscription plan\n      summary: Generate an image of to provided pdf file\n      tags:\n        - Pdf\n  /api/pdf/pdfwritestring:\n    post:\n      requestBody:\n        content:\n          application/json:\n            example: \"{\\r\n\n              \\  \\\"pdfFileBase64String\\\": \\\"\u003cEncode your existing PDF document as Base64 encoded string\u003e\\\",\\r\n\n              \\  \\\"options\\\": {\\r\n\n              \\    \\\"text\\\": \\\"This is test string\\\",\\r\n\n              \\    \\\"textColor\\\": {\\r\n\n              \\      \\\"r\\\": 33,\\r\n\n              \\      \\\"g\\\": 34,\\r\n\n              \\      \\\"b\\\": 35\\r\n\n              \\    },\\r\n\n              \\    \\\"font\\\": {\\r\n\n              \\      \\\"name\\\": \\\"Arial\\\",\\r\n\n              \\      \\\"size\\\": 24.0,\\r\n\n              \\      \\\"style\\\": 1\\r\n\n              \\    },\\r\n\n              \\    \\\"pageNumber\\\": 3,\\r\n\n              \\    \\\"xPosition\\\": 40.0,\\r\n\n              \\    \\\"yPosition\\\": -200.0,\\r\n\n              \\    \\\"xOrigin\\\": 1,\\r\n\n              \\    \\\"yOrigin\\\": 2\\r\n\n              \\  },\\r\n\n              \\  \\\"fontFileBase64String\\\": \\\"\u003cAttach your own TrueTypeFont file if necessary to style text, encoded as Base64 encoded string\u003e\\\"\\r\n\n              }\"\n            schema:\n              $ref: \"#/components/schemas/PdfWriteStringRequestDto\"\n          multipart/form-data:\n            encoding:\n              fontfile:\n                contentType: application/octet-stream\n              options:\n                contentType: application/json\n              pdfdocument:\n                contentType: application/octet-stream\n            schema:\n              properties:\n                fontfile:\n                  description: Optional entry to attach your own TrueType font file to style string\n                  format: binary\n                  type: string\n                options:\n                  description: After pdfdocument is added, add an entry named options with your PdfWriteStringOptions object serialized as JSON.\n                  format: string\n                  type: string\n                pdfdocument:\n                  description: An entry named pdfdocument is required in the multipart/form-data request\n                  format: binary\n                  type: string\n              type: object\n        description: PdfWriteString Request. Write string on page in pdf document\n      responses:\n        \"200\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"pdfFileBase64String\\\": \\\"Base64 encoded pdf file content\\\",\\r\n\n                \\  \\\"errorMessage\\\": \\\"If any error occured, info will be provided here\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/PdfResponseDto\"\n            application/pdf:\n              schema:\n                format: binary\n                type: string\n          description: Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json\n        \"400\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"description\\\": \\\"Always empty in the public response, used for internal error transport to logs\\\",\\r\n\n                \\  \\\"statusCode\\\": 400,\\r\n\n                \\  \\\"errorMessage\\\": \\\"The error message provided to client\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/ErrorResponseDto\"\n          description: If any error occurs parsing input\n        \"415\":\n          description: If content-type of request is not set to multipart/form-data or application/json\n        \"429\":\n          description: If you reach the monthly request limit for your subscription plan\n      summary: Write text on a page in a pdf document.\n      tags:\n        - Pdf\n  /api/pdf/wkhtmltopdf:\n    post:\n      requestBody:\n        content:\n          application/json:\n            example: \"{\\r\n\n              \\  \\\"url\\\": \\\"https://www.pdfbroker.io\\\",\\r\n\n              \\  \\\"htmlBase64String\\\": null,\\r\n\n              \\  \\\"wkHtmlToPdfArguments\\\": {\\r\n\n              \\    \\\"grayscale\\\": \\\"\\\",\\r\n\n              \\    \\\"viewport-size\\\": \\\"1280x1024\\\"\\r\n\n              \\  },\\r\n\n              \\  \\\"resources\\\": null\\r\n\n              }\"\n            schema:\n              $ref: \"#/components/schemas/WkHtmlToPdfRequestDto\"\n        description: WkHtmlToPdf Request. Generate pdf from html, either from url or base64 encoded html string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"pdfFileBase64String\\\": \\\"Base64 encoded pdf file content\\\",\\r\n\n                \\  \\\"errorMessage\\\": \\\"If any error occured, info will be provided here\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/PdfResponseDto\"\n            application/pdf:\n              schema:\n                format: binary\n                type: string\n          description: Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json\n        \"400\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"description\\\": \\\"Always empty in the public response, used for internal error transport to logs\\\",\\r\n\n                \\  \\\"statusCode\\\": 400,\\r\n\n                \\  \\\"errorMessage\\\": \\\"The error message provided to client\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/ErrorResponseDto\"\n          description: If any error occurs executing request\n        \"415\":\n          description: If content-type of request is not set to application/json\n        \"429\":\n          description: If you reach the monthly request limit for your subscription plan\n      summary: Generate pdf file from url using the excellent tool wkhtmltopdf.\n      tags:\n        - Pdf\n  /api/pdf/xslfo:\n    post:\n      requestBody:\n        content:\n          application/json:\n            example: \"{\\r\n\n              \\  \\\"foDocumentBase64String\\\": \\\"\u003cEncode your XSL-FO document as Base64 encoded string\u003e\\\",\\r\n\n              \\  \\\"resources\\\": {\\r\n\n              \\    \\\"\u003cUse file name as key, i.e 'logo.png', which is set as src on fo:external-graphic elements\u003e\\\": \\\"\u003cConvert your images to Base64 encoded string\u003e\\\"\\r\n\n              \\  },\\r\n\n              \\  \\\"metadata\\\": {\\r\n\n              \\    \\\"title\\\": \\\"Pdf title metadata can be set with metadata object\\\",\\r\n\n              \\    \\\"author\\\": null,\\r\n\n              \\    \\\"subject\\\": null,\\r\n\n              \\    \\\"keywords\\\": [\\r\n\n              \\      \\\"pdf\\\",\\r\n\n              \\      \\\"api\\\"\\r\n\n              \\    ],\\r\n\n              \\    \\\"enableAdd\\\": true,\\r\n\n              \\    \\\"enableCopy\\\": true,\\r\n\n              \\    \\\"enableModify\\\": true,\\r\n\n              \\    \\\"enablePrinting\\\": true,\\r\n\n              \\    \\\"ownerPassword\\\": null,\\r\n\n              \\    \\\"userPassword\\\": null\\r\n\n              \\  }\\r\n\n              }\"\n            schema:\n              $ref: \"#/components/schemas/FoRequestDto\"\n          multipart/form-data:\n            encoding:\n              fodocument:\n                contentType: application/octet-stream\n              metadata:\n                contentType: application/json\n              resources:\n                contentType: application/octet-stream\n            schema:\n              properties:\n                fodocument:\n                  description: An entry named fodocument is required in the multipart/form-data request\n                  format: binary\n                  type: string\n                metadata:\n                  description: Add pdf document metadata like title, author, subject and keywords\n                  format: string\n                  nullable: true\n                  type: string\n                resources:\n                  description: After fodocument is added, add all digital resources one by one to your multipart/form-data request, using the filename as name in the form.\n                  format: binary\n                  type: string\n              type: object\n        description: XSL-FO Request, the basic XSL-FO request. Post your XSL-FO document and digital resources, either as 'multipart/form-data' or 'application/json'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"pdfFileBase64String\\\": \\\"Base64 encoded pdf file content\\\",\\r\n\n                \\  \\\"errorMessage\\\": \\\"If any error occured, info will be provided here\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/PdfResponseDto\"\n            application/pdf:\n              schema:\n                format: binary\n                type: string\n          description: Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json\n        \"400\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"description\\\": \\\"Always empty in the public response, used for internal error transport to logs\\\",\\r\n\n                \\  \\\"statusCode\\\": 400,\\r\n\n                \\  \\\"errorMessage\\\": \\\"The error message provided to client\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/ErrorResponseDto\"\n          description: If any error occurs parsing input\n        \"415\":\n          description: If content-type of request is not set to multipart/form-data or application/json\n        \"429\":\n          description: If you reach the monthly request limit for your subscription plan\n      summary: Create pdf-file from complete XSL-FO document.\n      tags:\n        - Pdf\n  /api/pdf/xslfowithtransform:\n    post:\n      requestBody:\n        content:\n          application/json:\n            example: \"{\\r\n\n              \\  \\\"xmlDataDocumentBase64String\\\": \\\"\u003cThis is the document which contains your data that the XSL-FO transform will be applied on. Send as Base64 encoded string\u003e\\\",\\r\n\n              \\  \\\"foDocumentBase64String\\\": \\\"\u003cEncode your XSL-FO transform document as Base64 encoded string\u003e\\\",\\r\n\n              \\  \\\"resources\\\": {\\r\n\n              \\    \\\"\u003cUse file name as key, i.e 'logo.png', which is set as src on fo:external-graphic elements\u003e\\\": \\\"\u003cConvert your images to Base64 encoded string\u003e\\\"\\r\n\n              \\  },\\r\n\n              \\  \\\"metadata\\\": null\\r\n\n              }\"\n            schema:\n              $ref: \"#/components/schemas/FoTransformRequestDto\"\n          multipart/form-data:\n            encoding:\n              fodocument:\n                contentType: application/octet-stream\n              resources:\n                contentType: application/octet-stream\n              xmldatadocument:\n                contentType: application/octet-stream\n            schema:\n              properties:\n                fodocument:\n                  description: An entry named fodocument with your XSL-FO transform is required in the multipart/form-data request\n                  format: binary\n                  type: string\n                resources:\n                  description: After fodocument and xmldatadocument is added, add all digital resources one by one to your multipart/form-data request, using the filename as name in the form.\n                  format: binary\n                  type: string\n                xmldatadocument:\n                  description: An entry named xmldatadocument, on which the XSL-FO transform is applied, is required in the multipart/form-data request\n                  format: binary\n                  type: string\n              type: object\n        description: XSL-FO Transform Request. The XSL-FO is transformed on the supplied xml data document. Post your XSL-FO transform document and xml data document aloing with your digital resources, either as 'multipart/form-data' or 'application/json'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"pdfFileBase64String\\\": \\\"Base64 encoded pdf file content\\\",\\r\n\n                \\  \\\"errorMessage\\\": \\\"If any error occured, info will be provided here\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/PdfResponseDto\"\n            application/pdf:\n              schema:\n                format: binary\n                type: string\n          description: Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json\n        \"400\":\n          content:\n            application/json:\n              example: \"{\\r\n\n                \\  \\\"description\\\": \\\"Always empty in the public response, used for internal error transport to logs\\\",\\r\n\n                \\  \\\"statusCode\\\": 400,\\r\n\n                \\  \\\"errorMessage\\\": \\\"The error message provided to client\\\"\\r\n\n                }\"\n              schema:\n                $ref: \"#/components/schemas/ErrorResponseDto\"\n          description: If any error occurs parsing input\n        \"415\":\n          description: If content-type of request is not set to multipart/form-data or application/json\n        \"429\":\n          description: If you reach the monthly request limit for your subscription plan\n      summary: Create pdf-file from transforming xml document with Xsl-Fo transform document.\n      tags:\n        - Pdf\ncomponents:\n  schemas:\n    ColorDto:\n      additionalProperties: false\n      description: Set color\n      properties:\n        B:\n          description: Get or sets B value of RGB color\n          format: int32\n          maximum: 255\n          minimum: 0\n          readOnly: true\n          type: integer\n        G:\n          description: Get or sets G value of RGB color\n          format: int32\n          maximum: 255\n          minimum: 0\n          readOnly: true\n          type: integer\n        R:\n          description: Get or sets R value of RGB color\n          format: int32\n          maximum: 255\n          minimum: 0\n          readOnly: true\n          type: integer\n      type: object\n    ErrorResponseDto:\n      additionalProperties: false\n      properties:\n        Description:\n          nullable: true\n          type: string\n        ErrorMessage:\n          description: If any error occurs the message will be displayed in here\n          nullable: true\n          type: string\n        StatusCode:\n          format: int32\n          type: integer\n      type: object\n    FoRequestDto:\n      additionalProperties: false\n      description: The basic request with the XSL-FO document as a Base64 encoded string with a set of resources provided with a name and the data of the resource as a Base64 encoded string.\n      properties:\n        FoDocumentBase64String:\n          description: This is the complete XSL-FO document provided using Base64 encoding.\n          nullable: true\n          type: string\n        Metadata:\n          $ref: \"#/components/schemas/PdfMetadataDto\"\n        Resources:\n          additionalProperties:\n            type: string\n          description: This is a set of key-value pairs of digital resources like images that is referenced in the XSL-FO document. It uses the filename as key and the data is provided as a Base64 encoded string.\n          nullable: true\n          type: object\n      type: object\n    FoTransformRequestDto:\n      additionalProperties: false\n      description: The XSL-FO transform document and xml data document as a Base64 encoded string with a set of resources provided with a name and the data of the resource as a Base64 encoded string.\n      properties:\n        FoDocumentBase64String:\n          description: This is the complete XSL-FO document provided using Base64 encoding.\n          nullable: true\n          type: string\n        Metadata:\n          $ref: \"#/components/schemas/PdfMetadataDto\"\n        Resources:\n          additionalProperties:\n            type: string\n          description: This is a set of key-value pairs of digital resources like images that is referenced in the XSL-FO document. It uses the filename as key and the data is provided as a Base64 encoded string.\n          nullable: true\n          type: object\n        XmlDataDocumentBase64String:\n          description: This is xml data document on which the XSL-FO transform document is applied. Provided using Base64 encoding.\n          nullable: true\n          type: string\n      type: object\n    FontDto:\n      additionalProperties: false\n      description: The Font dto object\n      properties:\n        Name:\n          description: Gets the name of the font\n          nullable: true\n          readOnly: true\n          type: string\n        Size:\n          description: Gets the size of the font\n          format: float\n          readOnly: true\n          type: number\n        Style:\n          $ref: \"#/components/schemas/FontStyle\"\n      type: object\n    FontStyle:\n      description: Font style enum representing Regular, Bold, Italic, BoldItalic\n      enum:\n        - 0\n        - 1\n        - 2\n        - 3\n      format: int32\n      type: integer\n    ImageResponseDto:\n      additionalProperties: false\n      description: When setting the Accept-header in the request to \"application/json\" the image file will be return as Base64 encoded string. Note that converting data to Base64 encoded strings increases the response size with approximately 33%, if you can accept the a binary format it's better to use Accept-header \"image/jpeg\", \"image/png\" or \"image/gif\".\n      properties:\n        ErrorMessage:\n          description: If any error occurs the message will be displayed in here\n          nullable: true\n          type: string\n        ImageBase64String:\n          description: The Base64 encoded string that is the image file. This is a complete data uri, including media type that can be used directly as src on a img-tag e.g.\n          nullable: true\n          type: string\n      type: object\n    PdfConcatenationRequestDto:\n      additionalProperties: false\n      description: Request to concatenate a list of Pdf documents to a single Pdf document.\n      properties:\n        PdfDocumentsAsBase64String:\n          description: The list of Pdf documents encoded as Base64 strings.\n          items:\n            type: string\n          nullable: true\n          type: array\n      type: object\n    PdfMetadataDto:\n      additionalProperties: false\n      description: Enter meta data for pdf document\n      properties:\n        Author:\n          description: Pdf document author\n          nullable: true\n          type: string\n        EnableAdd:\n          description: \"Enables or disables adding or modifying text annotations and interactive\\r\n\n            form fields.\"\n          type: boolean\n        EnableCopy:\n          description: Enables or disables copying of text and graphics.\n          type: boolean\n        EnableModify:\n          description: \"Enables or disables modifying document contents (other than text annotations and \\r\n\n            interactive form fields).\"\n          type: boolean\n        EnablePrinting:\n          description: Enables or disables printing.\n          type: boolean\n        Keywords:\n          description: Pdf document keywords\n          items:\n            type: string\n          nullable: true\n          type: array\n        OwnerPassword:\n          description: Specifies the owner password that will protect full access to any generated PDF documents.\n          nullable: true\n          type: string\n        Subject:\n          description: Pdf document subject\n          nullable: true\n          type: string\n        Title:\n          description: Pdf document title\n          nullable: true\n          type: string\n        UserPassword:\n          description: Specifies the user password that will protect access to any generated PDF documents.\n          nullable: true\n          type: string\n      type: object\n    PdfResponseDto:\n      additionalProperties: false\n      description: When setting the Accept-header in the request to \"application/json\" the content of the pdf file will be return as Base64 encoded string. Note that converting data to Base64 encoded strings increases the response size with approximately 33%, if you can accept the a binary format it's better to use Accept-header \"application/pdf\".\n      properties:\n        ErrorMessage:\n          description: If any error occurs the message will be displayed in here\n          nullable: true\n          type: string\n        PdfFileBase64String:\n          description: The Base64 encoded string that is the pdf file.\n          nullable: true\n          type: string\n      type: object\n    PdfToImageOptions:\n      additionalProperties: false\n      properties:\n        Height:\n          description: Set the height of the output image, default value is width of source document. To scale height, and keeping proportions, do not set width;\n          format: int32\n          type: integer\n        HorizontalResolution:\n          description: Set the horizontal resolution, default is 96 dpi;\n          format: double\n          type: number\n        ImageFormat:\n          description: Valid options are \"image/jpeg\", \"image/png\" or \"image/gif\". Default is \"image/png\"\n          nullable: true\n          type: string\n        JpegQuality:\n          description: Sets the quality of jpeg images, range 0 to 100, default is 75\n          format: int32\n          type: integer\n        PageNumber:\n          description: Which page of the pdf file to generate image from, default is first page\n          format: int32\n          type: integer\n        PngCompressionLevel:\n          description: Sets the png compression level, range 1 - 9, default is 6\n          format: int32\n          type: integer\n        Transparent:\n          description: Keep the background of the image transparent. This setting is not available in JPEG-files, since transparency is not supported in the JPEG format.\n          type: boolean\n        VerticalResolution:\n          description: Set the vertical resolution, default is 96 dpi;\n          format: double\n          type: number\n        Width:\n          description: Set the width of the output image, default value is width of source document. To scale width, and keeping proportions, do not set height;\n          format: int32\n          type: integer\n      type: object\n    PdfToImageRequestDto:\n      additionalProperties: false\n      properties:\n        Options:\n          $ref: \"#/components/schemas/PdfToImageOptions\"\n        PdfFileBase64String:\n          description: The pdf file to generate image from, as Base64 encoded string.\n          nullable: true\n          type: string\n      type: object\n    PdfWriteStringOptions:\n      additionalProperties: false\n      description: Options for writing string in pdf page;\n      properties:\n        Font:\n          $ref: \"#/components/schemas/FontDto\"\n        PageNumber:\n          description: Get or set which page in the pdf to write on, default is first page.\n          format: int32\n          type: integer\n        Text:\n          description: The text to write in the pdf\n          nullable: true\n          type: string\n        TextColor:\n          $ref: \"#/components/schemas/ColorDto\"\n        XOrigin:\n          $ref: \"#/components/schemas/XOriginPoint\"\n        XPosition:\n          description: Get or set the X axis position on where to write string, in reference to XOrigin.\n          format: float\n          type: number\n        YOrigin:\n          $ref: \"#/components/schemas/YOriginPoint\"\n        YPosition:\n          description: Get or set the Y axis position on where to write string, in reference to YOrigin.\n          format: float\n          type: number\n      type: object\n    PdfWriteStringRequestDto:\n      additionalProperties: false\n      description: The request dto object to write a string on pdf page\n      properties:\n        FontFileBase64String:\n          description: System fonts are available, but you can provide your own font file to be embedded in the pdf document. Send font as Base64 encoded string.\n          nullable: true\n          type: string\n        Options:\n          $ref: \"#/components/schemas/PdfWriteStringOptions\"\n        PdfFileBase64String:\n          description: The pdf file to add text to, as Base64 encoded string.\n          nullable: true\n          type: string\n      type: object\n    WkHtmlToPdfRequestDto:\n      additionalProperties: false\n      description: WkHtmlToPdfRequestDto is the data transfer object for generating a pdf using wkhtmltopdf;\n      properties:\n        HtmlBase64String:\n          description: Base64 encoded string with html. If property Url is set, it will be used, not HtmlBase64String.\n          nullable: true\n          type: string\n        Resources:\n          additionalProperties:\n            type: string\n          description: This is a set of key-value pairs of digital resources like images that is referenced in the HtmlBase64String document. It uses the filename including relative path as key and the data is provided as a Base64 encoded string.\n          nullable: true\n          type: object\n        Url:\n          description: The url to generate pdf from. Url has precedence over HtmlBase64String value if both are set.\n          nullable: true\n          type: string\n        WkHtmlToPdfArguments:\n          additionalProperties:\n            type: string\n          description: Command line arguments passed to wkhtmltopdf.\n          nullable: true\n          type: object\n      type: object\n    XOriginPoint:\n      enum:\n        - 0\n        - 1\n        - 2\n      format: int32\n      type: integer\n    YOriginPoint:\n      enum:\n        - 0\n        - 1\n        - 2\n      format: int32\n      type: integer\n  securitySchemes:\n    OAuth2:\n      flows:\n        clientCredentials:\n          scopes:\n            pdfbroker: Scope to access the PdfBroker API.\n          tokenUrl: https://login.pdfbroker.io/connect/token\n      type: oauth2\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@47bf2b618e492e31bc62743e9f72c47cb8460229/-/blob/APIs/pdfbroker.io/v1/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/47bf2b618e492e31bc62743e9f72c47cb8460229/APIs/pdfbroker.io/v1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/api/pdf\": get: security: security \"OAuth2\" (index 0): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security",
		"parameter content-type"
	]
}