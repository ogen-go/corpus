{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/goadesign/examples"
		},
		"file": {
			"name": "openapi3.yaml",
			"size": 0,
			"path": "security/multiauth/gen/http/openapi3.yaml",
			"byteSize": 11001,
			"content": "openapi: 3.0.3\ninfo:\n    title: Security Example API\n    description: This API demonstrates the use of the goa security DSL\n    version: \"1.0\"\nservers:\n    - url: http://localhost:80\n      description: Default server for multi_auth\npaths:\n    /secure:\n        get:\n            tags:\n                - secured_service\n            summary: secure secured_service\n            description: This action is secured with the jwt scheme\n            operationId: secured_service#secure\n            parameters:\n                - name: fail\n                  in: query\n                  description: Whether to force auth failure even with a valid JWT\n                  allowEmptyValue: true\n                  schema:\n                    type: boolean\n                    description: Whether to force auth failure even with a valid JWT\n                    example: false\n                  example: true\n            responses:\n                \"200\":\n                    description: OK response.\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: Non consequuntur numquam voluptatum temporibus.\n                            example: Incidunt minima eos amet voluptas quia fuga.\n                \"401\":\n                    description: 'unauthorized: Unauthorized response.'\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: Aut expedita optio.\n                \"403\":\n                    description: 'invalid-scopes: Forbidden response.'\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: Facilis dolores sunt nihil ut dolore et.\n            security:\n                - jwt_header_Authorization:\n                    - api:read\n                    - api:write\n        post:\n            tags:\n                - secured_service\n            summary: also_doubly_secure secured_service\n            description: This action is secured with the jwt scheme and also requires an API key header.\n            operationId: secured_service#also_doubly_secure\n            parameters:\n                - name: k\n                  in: query\n                  description: API key\n                  allowEmptyValue: true\n                  schema:\n                    type: string\n                    description: API key\n                    example: abcdef12345\n                  example: abcdef12345\n                - name: oauth\n                  in: query\n                  allowEmptyValue: true\n                  schema:\n                    type: string\n                    example: Alias architecto quasi.\n                  example: Ipsum modi saepe.\n                - name: X-Authorization\n                  in: header\n                  description: JWT used for authentication\n                  allowEmptyValue: true\n                  schema:\n                    type: string\n                    description: JWT used for authentication\n                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n            responses:\n                \"200\":\n                    description: OK response.\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: Tenetur et eaque nesciunt.\n                            example: Eaque pariatur eos laborum.\n                \"401\":\n                    description: 'unauthorized: Unauthorized response.'\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: Non nisi error ut inventore sequi.\n                \"403\":\n                    description: 'invalid-scopes: Forbidden response.'\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: Repudiandae qui sed optio odit dignissimos.\n            security:\n                - api_key_query_k: []\n                  jwt_header_X-Authorization:\n                    - api:read\n                    - api:write\n                - basic_header_Authorization: []\n                  oauth2_query_oauth:\n                    - api:read\n                    - api:write\n        put:\n            tags:\n                - secured_service\n            summary: doubly_secure secured_service\n            description: This action is secured with the jwt scheme and also requires an API key query string.\n            operationId: secured_service#doubly_secure\n            parameters:\n                - name: k\n                  in: query\n                  description: API key\n                  allowEmptyValue: true\n                  required: true\n                  schema:\n                    type: string\n                    description: API key\n                    example: abcdef12345\n                  example: abcdef12345\n            responses:\n                \"200\":\n                    description: OK response.\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: Quos ut est ipsum consequatur fugiat at.\n                            example: Error dolorem deserunt similique ex.\n                \"401\":\n                    description: 'unauthorized: Unauthorized response.'\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: Atque eum unde vero dicta minus minima.\n                \"403\":\n                    description: 'invalid-scopes: Forbidden response.'\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: Maiores porro alias.\n            security:\n                - api_key_query_k: []\n                  jwt_header_Authorization:\n                    - api:read\n                    - api:write\n    /signin:\n        post:\n            tags:\n                - secured_service\n            summary: signin secured_service\n            description: Creates a valid JWT\n            operationId: secured_service#signin\n            responses:\n                \"200\":\n                    description: OK response.\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/Creds'\n                            example:\n                                api_key: abcdef12345\n                                jwt: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n                                oauth_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n                \"401\":\n                    description: 'unauthorized: Unauthorized response.'\n                    content:\n                        application/json:\n                            schema:\n                                type: string\n                                example: Magni perferendis unde itaque.\n            security:\n                - basic_header_Authorization: []\ncomponents:\n    schemas:\n        Creds:\n            type: object\n            properties:\n                api_key:\n                    type: string\n                    description: API Key\n                    example: abcdef12345\n                jwt:\n                    type: string\n                    description: JWT token\n                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n                oauth_token:\n                    type: string\n                    description: OAuth2 token\n                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n            example:\n                api_key: abcdef12345\n                jwt: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n                oauth_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n            required:\n                - jwt\n                - api_key\n                - oauth_token\n    securitySchemes:\n        api_key_query_k:\n            type: apiKey\n            description: Secures endpoint by requiring an API key.\n            name: k\n            in: query\n        basic_header_Authorization:\n            type: http\n            description: Basic authentication used to authenticate security principal during signin\n            scheme: basic\n        jwt_header_Authorization:\n            type: http\n            description: Secures endpoint by requiring a valid JWT token retrieved via the signin endpoint. Supports scopes \"api:read\" and \"api:write\".\n            scheme: bearer\n        jwt_header_X-Authorization:\n            type: http\n            description: Secures endpoint by requiring a valid JWT token retrieved via the signin endpoint. Supports scopes \"api:read\" and \"api:write\".\n            scheme: bearer\n        oauth2_query_oauth:\n            type: oauth2\n            description: Secures endpoint by requiring a valid OAuth2 token retrieved via the signin endpoint. Supports scopes \"api:read\" and \"api:write\".\n            flows:\n                authorizationCode:\n                    authorizationUrl: http://goa.design/authorization\n                    tokenUrl: http://goa.design/token\n                    refreshUrl: http://goa.design/refresh\n                    scopes:\n                        api:read: Read-only access\n                        api:write: Read and write access\ntags:\n    - name: secured_service\n      description: The secured service exposes endpoints that require valid authorization credentials.\n",
			"canonicalURL": "/github.com/goadesign/examples@ce03fa792214d1ce76a2557ea1336a0d558714df/-/blob/security/multiauth/gen/http/openapi3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/goadesign/examples/blob/ce03fa792214d1ce76a2557ea1336a0d558714df/security/multiauth/gen/http/openapi3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/secure\": post: security: security \"oauth2_query_oauth\" (index 3): oauth2 security not implemented",
	"NotImplemented": [
		"oauth2 security"
	]
}