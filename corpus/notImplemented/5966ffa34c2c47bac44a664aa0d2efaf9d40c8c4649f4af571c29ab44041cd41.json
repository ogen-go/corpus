{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/goadesign/clue"
		},
		"file": {
			"name": "openapi3.yaml",
			"size": 0,
			"path": "example/weather/services/front/gen/http/openapi3.yaml",
			"byteSize": 6684,
			"content": "openapi: 3.0.3\ninfo:\n  title: Weather Forecast Service API\n  description: The weather forecast service API produces weather forecasts from US-based\n    IPs. It uses IP location to find the appropriate weather station.\n  version: \"1.0\"\nservers:\n- url: http://localhost:80\n  description: Default server for Weather\npaths:\n  /forecast/{ip}:\n    get:\n      tags:\n      - front\n      summary: forecast front\n      description: Retrieve weather forecast for given IP\n      operationId: front#forecast\n      parameters:\n      - name: ip\n        in: path\n        required: true\n        schema:\n          type: string\n          example: 26.102.183.14\n          format: ip\n        example: 169.98.225.210\n      responses:\n        \"200\":\n          description: OK response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Forecast'\n              example:\n                location:\n                  city: San Francisco\n                  lat: 37.8267\n                  long: -122.4233\n                  state: CA\n                periods:\n                - endTime: \"2020-01-01T00:00:00Z\"\n                  name: Morning\n                  startTime: \"2020-01-01T00:00:00Z\"\n                  summary: Clear\n                  temperature: 70\n                  temperatureUnit: F\n                - endTime: \"2020-01-01T00:00:00Z\"\n                  name: Morning\n                  startTime: \"2020-01-01T00:00:00Z\"\n                  summary: Clear\n                  temperature: 70\n                  temperatureUnit: F\n                - endTime: \"2020-01-01T00:00:00Z\"\n                  name: Morning\n                  startTime: \"2020-01-01T00:00:00Z\"\n                  summary: Clear\n                  temperature: 70\n                  temperatureUnit: F\n        \"400\":\n          description: Bad Request response.\n          content:\n            application/vnd.goa.error:\n              schema:\n                $ref: '#/components/schemas/Error'\n              example:\n                id: 3F1FKVRR\n                message: Value of ID must be an integer\n                name: bad_request\ncomponents:\n  schemas:\n    Error:\n      type: object\n      properties:\n        fault:\n          type: boolean\n          description: Is the error a server-side fault?\n          example: false\n        id:\n          type: string\n          description: ID is a unique identifier for this particular occurrence of\n            the problem.\n          example: 123abc\n        message:\n          type: string\n          description: Message is a human-readable explanation specific to this occurrence\n            of the problem.\n          example: parameter 'p' must be an integer\n        name:\n          type: string\n          description: Name is the name of this class of errors.\n          example: bad_request\n        temporary:\n          type: boolean\n          description: Is the error temporary?\n          example: true\n        timeout:\n          type: boolean\n          description: Is the error a timeout?\n          example: false\n      description: IP address is not in the US\n      example:\n        id: 3F1FKVRR\n        message: Value of ID must be an integer\n        name: bad_request\n      required:\n      - name\n      - id\n      - message\n      - temporary\n      - timeout\n      - fault\n    Forecast:\n      type: object\n      properties:\n        location:\n          $ref: '#/components/schemas/Location'\n        periods:\n          type: array\n          items:\n            $ref: '#/components/schemas/Period'\n          description: Weather forecast periods\n          example:\n          - endTime: \"2020-01-01T00:00:00Z\"\n            name: Morning\n            startTime: \"2020-01-01T00:00:00Z\"\n            summary: Clear\n            temperature: 70\n            temperatureUnit: F\n          - endTime: \"2020-01-01T00:00:00Z\"\n            name: Morning\n            startTime: \"2020-01-01T00:00:00Z\"\n            summary: Clear\n            temperature: 70\n            temperatureUnit: F\n          - endTime: \"2020-01-01T00:00:00Z\"\n            name: Morning\n            startTime: \"2020-01-01T00:00:00Z\"\n            summary: Clear\n            temperature: 70\n            temperatureUnit: F\n      example:\n        location:\n          city: San Francisco\n          lat: 37.8267\n          long: -122.4233\n          state: CA\n        periods:\n        - endTime: \"2020-01-01T00:00:00Z\"\n          name: Morning\n          startTime: \"2020-01-01T00:00:00Z\"\n          summary: Clear\n          temperature: 70\n          temperatureUnit: F\n        - endTime: \"2020-01-01T00:00:00Z\"\n          name: Morning\n          startTime: \"2020-01-01T00:00:00Z\"\n          summary: Clear\n          temperature: 70\n          temperatureUnit: F\n      required:\n      - location\n      - periods\n    Location:\n      type: object\n      properties:\n        city:\n          type: string\n          description: City\n          example: San Francisco\n        lat:\n          type: number\n          description: Latitude\n          example: 37.8267\n          format: double\n        long:\n          type: number\n          description: Longitude\n          example: -122.4233\n          format: double\n        state:\n          type: string\n          description: State\n          example: CA\n      description: Geographical location\n      example:\n        city: San Francisco\n        lat: 37.8267\n        long: -122.4233\n        state: CA\n      required:\n      - lat\n      - long\n      - city\n      - state\n    Period:\n      type: object\n      properties:\n        endTime:\n          type: string\n          description: End time\n          example: \"2020-01-01T00:00:00Z\"\n          format: date-time\n        name:\n          type: string\n          description: Period name\n          example: Morning\n        startTime:\n          type: string\n          description: Start time\n          example: \"2020-01-01T00:00:00Z\"\n          format: date-time\n        summary:\n          type: string\n          description: Summary\n          example: Clear\n        temperature:\n          type: integer\n          description: Temperature\n          example: 70\n          format: int64\n        temperatureUnit:\n          type: string\n          description: Temperature unit\n          example: F\n      description: Weather forecast period\n      example:\n        endTime: \"2020-01-01T00:00:00Z\"\n        name: Morning\n        startTime: \"2020-01-01T00:00:00Z\"\n        summary: Clear\n        temperature: 70\n        temperatureUnit: F\n      required:\n      - name\n      - startTime\n      - endTime\n      - temperature\n      - temperatureUnit\n      - summary\ntags:\n- name: front\n  description: Public HTTP frontend\n",
			"canonicalURL": "/github.com/goadesign/clue@343b959ef1af58f8a73f84a749eb822f3862ccaa/-/blob/example/weather/services/front/gen/http/openapi3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/goadesign/clue/blob/343b959ef1af58f8a73f84a749eb822f3862ccaa/example/weather/services/front/gen/http/openapi3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/forecast/{ip}\": get: responses: 400: contents: unsupported content types: [application/vnd.goa.error]",
	"NotImplemented": [
		"unsupported content types"
	]
}