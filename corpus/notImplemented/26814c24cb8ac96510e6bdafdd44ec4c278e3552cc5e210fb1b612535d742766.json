{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/amirpsd/drf_blog_api"
		},
		"file": {
			"name": "endpoints.yaml",
			"size": 0,
			"path": "endpoints.yaml",
			"byteSize": 33982,
			"content": "openapi: 3.0.3\ninfo:\n  title: Blog Api\n  version: '1.0'\n  description: Simple Blog with Django Rest Framework\npaths:\n  /account/api/:\n    get:\n      operationId: account_api_list\n      description: |-\n        get:\n            Returns a list of all existing users.\n      parameters:\n      - in: query\n        name: author\n        schema:\n          type: boolean\n      - name: ordering\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      - name: search\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      tags:\n      - account\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UsersList'\n          description: ''\n  /account/api/change-two-step-password/:\n    post:\n      operationId: account_api_change_two_step_password_create\n      description: |-\n        post:\n            Send a password to change a two-step-password.\n\n            parameters: [old_password, new_password, confirm_new_password,]\n      tags:\n      - account\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          description: No response body\n  /account/api/create-two-step-password/:\n    post:\n      operationId: account_api_create_two_step_password_create\n      description: |-\n        post:\n            Send a password to create a two-step-password.\n\n            parameters: [new_password, confirm_new_password]\n      tags:\n      - account\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          description: No response body\n  /account/api/login/:\n    post:\n      operationId: account_api_login_create\n      description: |-\n        post:\n            Send mobile number for Login.\n\n            parameters: [phone,]\n      tags:\n      - account\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      - {}\n      responses:\n        '200':\n          description: No response body\n  /account/api/profile/:\n    get:\n      operationId: account_api_profile_retrieve\n      description: |-\n        get:\n            Returns the profile of user.\n\n        put:\n            Update the detail of a user instance\n\n            parameters: exclude[password,]\n\n        delete:\n            Delete user account.\n\n            parameters: [pk]\n      tags:\n      - account\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserProfile'\n          description: ''\n    put:\n      operationId: account_api_profile_update\n      description: |-\n        get:\n            Returns the profile of user.\n\n        put:\n            Update the detail of a user instance\n\n            parameters: exclude[password,]\n\n        delete:\n            Delete user account.\n\n            parameters: [pk]\n      tags:\n      - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserProfile'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/UserProfile'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/UserProfile'\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserProfile'\n          description: ''\n    patch:\n      operationId: account_api_profile_partial_update\n      description: |-\n        get:\n            Returns the profile of user.\n\n        put:\n            Update the detail of a user instance\n\n            parameters: exclude[password,]\n\n        delete:\n            Delete user account.\n\n            parameters: [pk]\n      tags:\n      - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedUserProfile'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PatchedUserProfile'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedUserProfile'\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserProfile'\n          description: ''\n    delete:\n      operationId: account_api_profile_destroy\n      description: |-\n        get:\n            Returns the profile of user.\n\n        put:\n            Update the detail of a user instance\n\n            parameters: exclude[password,]\n\n        delete:\n            Delete user account.\n\n            parameters: [pk]\n      tags:\n      - account\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '204':\n          description: No response body\n  /account/api/register/:\n    post:\n      operationId: account_api_register_create\n      description: |-\n        post:\n            Send mobile number for Register.\n\n            parameters: [phone,]\n      tags:\n      - account\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      - {}\n      responses:\n        '200':\n          description: No response body\n  /account/api/users/{id}/:\n    get:\n      operationId: account_api_users_retrieve\n      description: |-\n        get:\n            Returns the detail of a user instance.\n\n            parameters: [pk]\n\n        put:\n            Update the detail of a user instance\n\n            parameters: exclude[password,]\n\n        delete:\n            Delete a user instance.\n\n            parameters: [pk]\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - account\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDetailUpdateDelete'\n          description: ''\n    put:\n      operationId: account_api_users_update\n      description: |-\n        get:\n            Returns the detail of a user instance.\n\n            parameters: [pk]\n\n        put:\n            Update the detail of a user instance\n\n            parameters: exclude[password,]\n\n        delete:\n            Delete a user instance.\n\n            parameters: [pk]\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserDetailUpdateDelete'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/UserDetailUpdateDelete'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/UserDetailUpdateDelete'\n        required: true\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDetailUpdateDelete'\n          description: ''\n    patch:\n      operationId: account_api_users_partial_update\n      description: |-\n        get:\n            Returns the detail of a user instance.\n\n            parameters: [pk]\n\n        put:\n            Update the detail of a user instance\n\n            parameters: exclude[password,]\n\n        delete:\n            Delete a user instance.\n\n            parameters: [pk]\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedUserDetailUpdateDelete'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PatchedUserDetailUpdateDelete'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedUserDetailUpdateDelete'\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDetailUpdateDelete'\n          description: ''\n    delete:\n      operationId: account_api_users_destroy\n      description: |-\n        get:\n            Returns the detail of a user instance.\n\n            parameters: [pk]\n\n        put:\n            Update the detail of a user instance\n\n            parameters: exclude[password,]\n\n        delete:\n            Delete a user instance.\n\n            parameters: [pk]\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - account\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '204':\n          description: No response body\n  /account/api/verify/:\n    post:\n      operationId: account_api_verify_create\n      description: |-\n        post:\n            Send otp code to verify mobile number and complete authentication.\n            If the user has a 2-step password, he must also send a password.\n\n            parameters: [otp, password]\n      tags:\n      - account\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      - {}\n      responses:\n        '200':\n          description: No response body\n  /api/schema/:\n    get:\n      operationId: api_schema_retrieve\n      description: |-\n        OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n        - YAML: application/vnd.oai.openapi\n        - JSON: application/vnd.oai.openapi+json\n      parameters:\n      - in: query\n        name: format\n        schema:\n          type: string\n          enum:\n          - json\n          - yaml\n      - in: query\n        name: lang\n        schema:\n          type: string\n          enum:\n          - af\n          - ar\n          - ar-dz\n          - ast\n          - az\n          - be\n          - bg\n          - bn\n          - br\n          - bs\n          - ca\n          - cs\n          - cy\n          - da\n          - de\n          - dsb\n          - el\n          - en\n          - en-au\n          - en-gb\n          - eo\n          - es\n          - es-ar\n          - es-co\n          - es-mx\n          - es-ni\n          - es-ve\n          - et\n          - eu\n          - fa\n          - fi\n          - fr\n          - fy\n          - ga\n          - gd\n          - gl\n          - he\n          - hi\n          - hr\n          - hsb\n          - hu\n          - hy\n          - ia\n          - id\n          - ig\n          - io\n          - is\n          - it\n          - ja\n          - ka\n          - kab\n          - kk\n          - km\n          - kn\n          - ko\n          - ky\n          - lb\n          - lt\n          - lv\n          - mk\n          - ml\n          - mn\n          - mr\n          - my\n          - nb\n          - ne\n          - nl\n          - nn\n          - os\n          - pa\n          - pl\n          - pt\n          - pt-br\n          - ro\n          - ru\n          - sk\n          - sl\n          - sq\n          - sr\n          - sr-latn\n          - sv\n          - sw\n          - ta\n          - te\n          - tg\n          - th\n          - tk\n          - tr\n          - tt\n          - udm\n          - uk\n          - ur\n          - uz\n          - vi\n          - zh-hans\n          - zh-hant\n      tags:\n      - api\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      - {}\n      responses:\n        '200':\n          content:\n            application/vnd.oai.openapi:\n              schema:\n                type: object\n                additionalProperties: {}\n            application/yaml:\n              schema:\n                type: object\n                additionalProperties: {}\n            application/vnd.oai.openapi+json:\n              schema:\n                type: object\n                additionalProperties: {}\n            application/json:\n              schema:\n                type: object\n                additionalProperties: {}\n          description: ''\n  /api/token/refresh/:\n    post:\n      operationId: api_token_refresh_create\n      description: |-\n        Takes a refresh type JSON web token and returns an access type JSON web\n        token if the refresh token is valid.\n      tags:\n      - api\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenRefresh'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TokenRefresh'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/TokenRefresh'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenRefresh'\n          description: ''\n  /api/token/verify/:\n    post:\n      operationId: api_token_verify_create\n      description: |-\n        Takes a token and indicates if it is valid.  This view provides no\n        information about a token's fitness for a particular use.\n      tags:\n      - api\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TokenVerify'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/TokenVerify'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/TokenVerify'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenVerify'\n          description: ''\n  /blog/api/:\n    get:\n      operationId: blog_api_list\n      description: |-\n        get:\n            Returns a list of all existing blogs.\n      parameters:\n      - in: query\n        name: category\n        schema:\n          type: array\n          items:\n            type: integer\n        explode: true\n        style: form\n      - name: limit\n        required: false\n        in: query\n        description: Number of results to return per page.\n        schema:\n          type: integer\n      - name: offset\n        required: false\n        in: query\n        description: The initial index from which to return the results.\n        schema:\n          type: integer\n      - name: ordering\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      - name: search\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: query\n        name: special\n        schema:\n          type: boolean\n      tags:\n      - blog\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedBlogsListList'\n          description: ''\n  /blog/api/{slug}/:\n    get:\n      operationId: blog_api_retrieve\n      description: |-\n        get:\n            Returns the details of a post instance. Searches post using slug field.\n\n        put:\n            Updates an existing post. Returns updated post data.\n\n            parameters: exclude = [user, create, updated, likes]\n            ]\n\n        delete:\n            Delete an existing post.\n\n            parameters = [slug]\n      parameters:\n      - in: path\n        name: slug\n        schema:\n          type: string\n        required: true\n      tags:\n      - blog\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlogDetailUpdateDelete'\n          description: ''\n    put:\n      operationId: blog_api_update\n      description: |-\n        get:\n            Returns the details of a post instance. Searches post using slug field.\n\n        put:\n            Updates an existing post. Returns updated post data.\n\n            parameters: exclude = [user, create, updated, likes]\n            ]\n\n        delete:\n            Delete an existing post.\n\n            parameters = [slug]\n      parameters:\n      - in: path\n        name: slug\n        schema:\n          type: string\n        required: true\n      tags:\n      - blog\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BlogDetailUpdateDelete'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/BlogDetailUpdateDelete'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/BlogDetailUpdateDelete'\n        required: true\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlogDetailUpdateDelete'\n          description: ''\n    patch:\n      operationId: blog_api_partial_update\n      description: |-\n        get:\n            Returns the details of a post instance. Searches post using slug field.\n\n        put:\n            Updates an existing post. Returns updated post data.\n\n            parameters: exclude = [user, create, updated, likes]\n            ]\n\n        delete:\n            Delete an existing post.\n\n            parameters = [slug]\n      parameters:\n      - in: path\n        name: slug\n        schema:\n          type: string\n        required: true\n      tags:\n      - blog\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchedBlogDetailUpdateDelete'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PatchedBlogDetailUpdateDelete'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/PatchedBlogDetailUpdateDelete'\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlogDetailUpdateDelete'\n          description: ''\n    delete:\n      operationId: blog_api_destroy\n      description: |-\n        get:\n            Returns the details of a post instance. Searches post using slug field.\n\n        put:\n            Updates an existing post. Returns updated post data.\n\n            parameters: exclude = [user, create, updated, likes]\n            ]\n\n        delete:\n            Delete an existing post.\n\n            parameters = [slug]\n      parameters:\n      - in: path\n        name: slug\n        schema:\n          type: string\n        required: true\n      tags:\n      - blog\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '204':\n          description: No response body\n  /blog/api/category/{slug}/:\n    get:\n      operationId: blog_api_category_list\n      description: |-\n        get:\n            Returns the list of blogs on a particular category.\n\n            parameters = [slug]\n      parameters:\n      - name: ordering\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      - name: search\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      - in: path\n        name: slug\n        schema:\n          type: string\n        required: true\n      tags:\n      - blog\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BlogsList'\n          description: ''\n  /blog/api/category/list/:\n    get:\n      operationId: blog_api_category_list_list\n      description: |-\n        get:\n            Returns a list of all existing category.\n\n            parameters = [slug]\n      parameters:\n      - name: ordering\n        required: false\n        in: query\n        description: Which field to use when ordering the results.\n        schema:\n          type: string\n      - name: search\n        required: false\n        in: query\n        description: A search term.\n        schema:\n          type: string\n      tags:\n      - blog\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CategoryList'\n          description: ''\n  /blog/api/create/:\n    post:\n      operationId: blog_api_create_create\n      description: |-\n        post:\n            Creates a new post instance. Returns created post data.\n\n            parameters: [title,   body,    image,   summary,\n                        category, publish, special, status,]\n      tags:\n      - blog\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BlogCreate'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/BlogCreate'\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/BlogCreate'\n        required: true\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '201':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlogCreate'\n          description: ''\n  /blog/api/like/{id}/:\n    get:\n      operationId: blog_api_like_retrieve\n      description: |-\n        get:\n            Likes the desired blog.\n\n            parameters = [pk]\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - blog\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          description: No response body\n  /comment/api/{id}/:\n    get:\n      operationId: comment_api_retrieve\n      description: |-\n        get:\n            Returns the list of comments on a particular post.\n\n            parameters = [pk]\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - comment\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          description: No response body\n  /comment/api/create/:\n    post:\n      operationId: comment_api_create_create\n      description: |-\n        post:\n            Create a comment instnace. Returns created comment data.\n\n            parameters: [object_id, name, parent, body,]\n      tags:\n      - comment\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          description: No response body\n  /comment/api/update-delete/{id}/:\n    put:\n      operationId: comment_api_update_delete_update\n      description: |-\n        put:\n            Updates an existing comment. Returns updated comment data.\n\n            parameters: [object_id, name, parent, body,]\n\n        delete:\n            Delete an existing comment.\n\n            parameters: [pk]\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - comment\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '200':\n          description: No response body\n    delete:\n      operationId: comment_api_update_delete_destroy\n      description: |-\n        put:\n            Updates an existing comment. Returns updated comment data.\n\n            parameters: [object_id, name, parent, body,]\n\n        delete:\n            Delete an existing comment.\n\n            parameters: [pk]\n      parameters:\n      - in: path\n        name: id\n        schema:\n          type: integer\n        required: true\n      tags:\n      - comment\n      security:\n      - cookieAuth: []\n      - jwtAuth: []\n      responses:\n        '204':\n          description: No response body\ncomponents:\n  schemas:\n    BlogCreate:\n      type: object\n      properties:\n        title:\n          type: string\n          maxLength: 200\n        body:\n          type: string\n          title: Content\n        image:\n          type: string\n          format: uri\n        summary:\n          type: string\n          maxLength: 400\n        category:\n          type: array\n          items:\n            type: string\n        publish:\n          type: string\n          format: date-time\n          title: Publish time\n        special:\n          type: boolean\n          title: Is special Blog ?\n        status:\n          $ref: '#/components/schemas/StatusEnum'\n      required:\n      - body\n      - category\n      - image\n      - status\n      - summary\n      - title\n    BlogDetailUpdateDelete:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        author:\n          type: string\n          readOnly: true\n        slug:\n          type: string\n          description: Do not fill in here\n          readOnly: true\n        likes:\n          type: string\n          readOnly: true\n        title:\n          type: string\n          maxLength: 200\n        body:\n          type: string\n          title: Content\n        image:\n          type: string\n          format: uri\n        summary:\n          type: string\n          maxLength: 400\n        publish:\n          type: string\n          format: date-time\n          title: Publish time\n        special:\n          type: boolean\n          title: Is special Blog ?\n        status:\n          $ref: '#/components/schemas/StatusEnum'\n        visits:\n          type: integer\n        category:\n          type: array\n          items:\n            type: integer\n            title: Categories\n          title: Categories\n      required:\n      - author\n      - body\n      - id\n      - image\n      - likes\n      - slug\n      - status\n      - summary\n      - title\n    BlogsList:\n      type: object\n      properties:\n        author:\n          type: string\n          readOnly: true\n        category:\n          type: string\n          readOnly: true\n        title:\n          type: string\n          maxLength: 200\n        slug:\n          type: string\n          description: Do not fill in here\n          maxLength: 50\n          pattern: ^[-a-zA-Z0-9_]+$\n        image:\n          type: string\n          format: uri\n        summary:\n          type: string\n          maxLength: 400\n      required:\n      - author\n      - category\n      - image\n      - summary\n      - title\n    CategoryList:\n      type: object\n      properties:\n        parent:\n          type: string\n          readOnly: true\n        title:\n          type: string\n          maxLength: 150\n      required:\n      - parent\n      - title\n    PaginatedBlogsListList:\n      type: object\n      properties:\n        count:\n          type: integer\n          example: 123\n        next:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?offset=400\u0026limit=100\n        previous:\n          type: string\n          nullable: true\n          format: uri\n          example: http://api.example.org/accounts/?offset=200\u0026limit=100\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/BlogsList'\n    PatchedBlogDetailUpdateDelete:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        author:\n          type: string\n          readOnly: true\n        slug:\n          type: string\n          description: Do not fill in here\n          readOnly: true\n        likes:\n          type: string\n          readOnly: true\n        title:\n          type: string\n          maxLength: 200\n        body:\n          type: string\n          title: Content\n        image:\n          type: string\n          format: uri\n        summary:\n          type: string\n          maxLength: 400\n        publish:\n          type: string\n          format: date-time\n          title: Publish time\n        special:\n          type: boolean\n          title: Is special Blog ?\n        status:\n          $ref: '#/components/schemas/StatusEnum'\n        visits:\n          type: integer\n        category:\n          type: array\n          items:\n            type: integer\n            title: Categories\n          title: Categories\n    PatchedUserDetailUpdateDelete:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        last_login:\n          type: string\n          format: date-time\n          nullable: true\n        is_superuser:\n          type: boolean\n          title: Superuser status\n          description: Designates that this user has all permissions without explicitly\n            assigning them.\n        phone:\n          type: string\n          pattern: ^989\\d{2}\\s*?\\d{3}\\s*?\\d{4}$\n          maxLength: 12\n        first_name:\n          type: string\n          maxLength: 100\n        last_name:\n          type: string\n          maxLength: 100\n        author:\n          type: boolean\n        special_user:\n          type: string\n          format: date-time\n        is_staff:\n          type: boolean\n        is_admin:\n          type: boolean\n        date_joined:\n          type: string\n          format: date-time\n        two_step_password:\n          type: boolean\n          description: is active two step password?\n        groups:\n          type: array\n          items:\n            type: integer\n          description: The groups this user belongs to. A user will get all permissions\n            granted to each of their groups.\n        user_permissions:\n          type: array\n          items:\n            type: integer\n          description: Specific permissions for this user.\n    PatchedUserProfile:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        phone:\n          type: string\n          readOnly: true\n        first_name:\n          type: string\n          maxLength: 100\n        last_name:\n          type: string\n          maxLength: 100\n        two_step_password:\n          type: boolean\n          description: is active two step password?\n    StatusEnum:\n      enum:\n      - p\n      - d\n      type: string\n    TokenRefresh:\n      type: object\n      properties:\n        access:\n          type: string\n          readOnly: true\n        refresh:\n          type: string\n          writeOnly: true\n      required:\n      - access\n      - refresh\n    TokenVerify:\n      type: object\n      properties:\n        token:\n          type: string\n          writeOnly: true\n      required:\n      - token\n    UserDetailUpdateDelete:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        last_login:\n          type: string\n          format: date-time\n          nullable: true\n        is_superuser:\n          type: boolean\n          title: Superuser status\n          description: Designates that this user has all permissions without explicitly\n            assigning them.\n        phone:\n          type: string\n          pattern: ^989\\d{2}\\s*?\\d{3}\\s*?\\d{4}$\n          maxLength: 12\n        first_name:\n          type: string\n          maxLength: 100\n        last_name:\n          type: string\n          maxLength: 100\n        author:\n          type: boolean\n        special_user:\n          type: string\n          format: date-time\n        is_staff:\n          type: boolean\n        is_admin:\n          type: boolean\n        date_joined:\n          type: string\n          format: date-time\n        two_step_password:\n          type: boolean\n          description: is active two step password?\n        groups:\n          type: array\n          items:\n            type: integer\n          description: The groups this user belongs to. A user will get all permissions\n            granted to each of their groups.\n        user_permissions:\n          type: array\n          items:\n            type: integer\n          description: Specific permissions for this user.\n      required:\n      - id\n      - phone\n    UserProfile:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        phone:\n          type: string\n          readOnly: true\n        first_name:\n          type: string\n          maxLength: 100\n        last_name:\n          type: string\n          maxLength: 100\n        two_step_password:\n          type: boolean\n          description: is active two step password?\n      required:\n      - id\n      - phone\n    UsersList:\n      type: object\n      properties:\n        id:\n          type: integer\n          readOnly: true\n        phone:\n          type: string\n          pattern: ^989\\d{2}\\s*?\\d{3}\\s*?\\d{4}$\n          maxLength: 12\n        first_name:\n          type: string\n          maxLength: 100\n        last_name:\n          type: string\n          maxLength: 100\n        author:\n          type: boolean\n      required:\n      - id\n      - phone\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: sessionid\n    jwtAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/amirpsd/drf_blog_api@58be081a450840114af021e7412e469fad90456d/-/blob/endpoints.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/amirpsd/drf_blog_api/blob/58be081a450840114af021e7412e469fad90456d/endpoints.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/account/api/users/{id}/\": get: security: security \"cookieAuth\" (index 0): cookie security not implemented",
	"NotImplemented": [
		"cookie security"
	]
}