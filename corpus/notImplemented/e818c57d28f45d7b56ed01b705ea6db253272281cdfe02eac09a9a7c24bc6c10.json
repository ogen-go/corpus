{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fawkesrobotics/fawkes"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "src/plugins/clips-executive/rest-api/api.yaml",
			"byteSize": 25572,
			"content": "openapi: 3.0.0\ninfo:\n  title: ClipsExecutive\n  version: v1beta1\n  description: |\n    CLIPS Executive REST API.\n    Enables access to goals, plans, and all items in the domain model.\n  contact:\n    name:  Tim Niemueller\n    email: niemueller@kbsg.rwth-aachen.de\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n\ntags:\n  - name: clips-executive\n    description: CLIPS Executive API calls\n\npaths:\n  /clips-executive/goals:\n    get:\n      tags:\n      - clips-executive\n      summary: List goals\n      operationId: list_goals\n      description: |\n        List all goals currently known to the CE.\n      parameters:\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list goals\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Goal'\n        '400':\n          description: bad input parameter\n\n    # post:\n    #   tags:\n    #   - clips-executive\n    #   summary: Add a new goal.\n    #   operationId: add_goal\n    #   description: |\n    #     Add a new goal.\n    #   requestBody:\n    #     content:\n    #       application/json:\n    #         schema:\n    #           $ref: '#/components/schemas/Goal'\n    #     description: Inventory item to add\n    #   responses:\n    #     '201':\n    #       description: item created\n    #     '400':\n    #       description: 'invalid input, object invalid'\n    #     '409':\n    #       description: an existing item already exists\n\n  /clips-executive/goals/{id}:\n    get:\n      tags:\n      - clips-executive\n      summary: Get information about a specific goal.\n      operationId: get_goal\n      description: |\n        Get information about a specific goal.\n      parameters:\n        - name: id\n          in: path\n          description: ID of goal to retrieve\n          required: true\n          schema:\n            type: string\n            format: symbol\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: goal information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Goal'\n        '400':\n          description: bad input parameter\n\n\n  /clips-executive/plans:\n    get:\n      tags:\n      - clips-executive\n      summary: List plans\n      operationId: list_plans\n      description: |\n        List all plans currently known to the CE.\n      parameters:\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list plans\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Plan'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/plans/{goal-id}/{id}:\n    get:\n      tags:\n      - clips-executive\n      summary: Get a specific plan.\n      operationId: get_plan\n      description: |\n        Get the plan for a specific goal.\n      parameters:\n        - name: goal-id\n          in: path\n          description: ID of plan (with respect to goal) to retrieve action for\n          required: true\n          schema:\n            type: string\n            format: symbol\n        - name: id\n          in: path\n          description: ID of plan (with respect to goal) to retrieve\n          required: true\n          schema:\n            type: string\n            format: symbol\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: plan\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Plan'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/domain-objects:\n    get:\n      tags:\n      - clips-executive\n      summary: List domain objects.\n      operationId: list_domain_objects\n      description: |\n        List all domain objects currently known to the CE.\n      parameters:\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list domain objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DomainObject'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/domain-predicates:\n    get:\n      tags:\n      - clips-executive\n      summary: List domain predicates.\n      operationId: list_domain_predicates\n      description: |\n        List all domain predicates currently known to the CE.\n      parameters:\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list predicates\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DomainPredicate'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/domain-facts:\n    get:\n      tags:\n      - clips-executive\n      summary: List domain facts.\n      operationId: list_domain_facts\n      description: |\n        List all domain facts currently known to the CE.\n      parameters:\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list domain facts\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DomainFact'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/domain-operators:\n    get:\n      tags:\n      - clips-executive\n      summary: List domain operators.\n      operationId: list_domain_operators\n      description: |\n        List all domain operators currently known to the CE.\n      parameters:\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list domain operators\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DomainOperator'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/pddl-groundings:\n    get:\n      tags:\n      - clips-executive\n      summary: List pddl groundings.\n      operationId: list_pddl_groundings\n      description: |\n        List all pddl groundings currently known to the CE.\n      parameters:\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list pddl groundings\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PDDLGrounding'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/pddl-groundings/{id}:\n    get:\n      tags:\n      - clips-executive\n      summary: List pddl groundings with id.\n      operationId: get_pddl_groundings\n      description: |\n        List the pddl grounding with the given ID currently known to the CE.\n      parameters:\n        - name: id\n          in: path\n          description: ID of grounding to retrieve\n          required: true\n          schema:\n            type: string\n            format: symbol\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list pddl grounding with id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PDDLGrounding'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/pddl-formulas:\n    get:\n      tags:\n      - clips-executive\n      summary: List pddl formulas.\n      operationId: list_pddl_formulas\n      description: |\n        List all pddl formulas currently known to the CE.\n      parameters:\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list pddl formulas\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PDDLFormula'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/pddl-formulas/{id}:\n    get:\n      tags:\n      - clips-executive\n      summary: List pddl formula with id.\n      operationId: get_pddl_formulas\n      description: |\n        List the formula with the given ID currently known to the CE.\n      parameters:\n        - name: id\n          in: path\n          description: ID of formulas to retrieve\n          required: true\n          schema:\n            type: string\n            format: symbol\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list pddl formula with given ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PDDLFormula'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/pddl-predicates:\n    get:\n      tags:\n      - clips-executive\n      summary: List pddl predicates.\n      operationId: list_pddl_predicates\n      description: |\n        List all pddl predicates currently known to the CE.\n      parameters:\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list pddl predicates with given ID\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PDDLPredicate'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/pddl-predicates/{id}:\n    get:\n      tags:\n      - clips-executive\n      summary: List pddl predicate with id.\n      operationId: get_pddl_predicates\n      description: |\n        List the pddl predicate with the given ID currently known to the CE.\n      parameters:\n        - name: id\n          in: path\n          description: ID of predicate to retrieve\n          required: true\n          schema:\n            type: string\n            format: symbol\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list pddl predicate with id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PDDLPredicate'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/grounded-pddl-formulas:\n    get:\n      tags:\n      - clips-executive\n      summary: List grounded pddl formulas.\n      operationId: list_grounded_pddl_formulas\n      description: |\n        List all grounded pddl formulas currently known to the CE.\n      parameters:\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list grounded pddl formulas\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroundedPDDLFormula'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/grounded-pddl-formulas/{id}:\n    get:\n      tags:\n      - clips-executive\n      summary: List grounded pddl formula with id.\n      operationId: get_grounded_pddl_formulas\n      description: |\n        List the grounded formula with the given ID currently known to the CE.\n      parameters:\n        - name: id\n          in: path\n          description: ID of grounded formula to retrieve\n          required: true\n          schema:\n            type: string\n            format: symbol\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list grounded pddl formula with given ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroundedPDDLFormula'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/grounded-pddl-predicates:\n    get:\n      tags:\n      - clips-executive\n      summary: List grounded pddl predicates.\n      operationId: list_grounded_pddl_predicates\n      description: |\n        List all grounded pddl predicates currently known to the CE.\n      parameters:\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list grounded pddl predicates with given ID\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GroundedPDDLPredicate'\n        '400':\n          description: bad input parameter\n\n  /clips-executive/grounded-pddl-predicates/{id}:\n    get:\n      tags:\n      - clips-executive\n      summary: List grounded pddl predicate with id.\n      operationId: get_grounded_pddl_predicates\n      description: |\n        List the pddl grounded predicate with the given ID currently known to the CE.\n      parameters:\n        - name: id\n          in: path\n          description: ID of grounded predicate to retrieve\n          required: true\n          schema:\n            type: string\n            format: symbol\n        - name: pretty\n          in: query\n          description: Request pretty printed reply.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: list grounded pddl predicate with id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GroundedPDDLPredicate'\n        '400':\n          description: bad input parameter\n\ncomponents:\n  schemas:\n    Goal:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - id\n        - type\n        - class\n        - mode\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        id:\n          type: string\n          format: symbol\n          example: GOAL-A\n        type:\n          type: string\n          format: symbol\n          enum: [\"ACHIEVE\", \"MAINTAIN\"]\n        sub-type:\n          type: string\n          format: symbol\n        class:\n          type: string\n          format: symbol\n        mode:\n          type: string\n          format: symbol\n          enum: [\"FORMULATED\", \"SELECTED\", \"EXPANDED\", \"COMMITTED\",\n                 \"DISPATCHED\", \"FINISHED\", \"EVALUATED\", \"RETRACTED\"]\n        outcome:\n          type: string\n          format: symbol\n          enum: [\"UNKNOWN\", \"COMPLETED\", \"FAILED\", \"REJECTED\"]\n        error:\n          type: array\n          items:\n            type: string\n        message:\n          type: string\n        parent:\n          type: string\n          format: symbol\n          example: PARENT-GOAL\n        priority:\n          #type: string\n          type: integer\n          format: int64\n        parameters:\n          type: array\n          items:\n            type: string\n        meta:\n          type: array\n          items:\n            type: string\n        plans:\n          type: array\n          items:\n            type: string\n        required-resources:\n          type: array\n          items:\n            type: string\n        acquired-resources:\n          type: array\n          items:\n            type: string\n\n    Plan:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - id\n        - goal-id\n        - actions\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        id:\n          type: string\n          format: symbol\n        goal-id:\n          type: string\n          format: symbol\n        cost:\n          type: number\n          format: float\n        actions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/PlanAction\"\n\n    PlanAction:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - id\n        - operator-name\n        - param-values\n        - state\n        - executable\n        - preconditions\n        - effects\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        id:\n          type: integer\n          format: int64\n        operator-name:\n          type: string\n          format: symbol\n        param-values:\n          type: array\n          items:\n            type: string\n        duration:\n          type: number\n          format: float\n        dispatch-time:\n          type: number\n          format: float\n        state:\n          type: string\n          format: symbol\n          enum: [\"FORMULATED\", \"PENDING\", \"WAITING\", \"RUNNING\",\n                 \"EXECUTION-SUCCEEDED\", \"SENSED-EFFECTS-WAIT\",\n                 \"SENSED-EFFECTS-HOLD\", \"EFFECTS-APPLIED\", \"FINAL\",\n                 \"EXECUTION-FAILED\", \"FAILED\"]\n        executable:\n          type: boolean\n        operator:\n          $ref: \"#/components/schemas/DomainOperator\"\n        precondition:\n          $ref: \"#/components/schemas/PDDLGrounding\"\n        effects:\n          type: array\n          items:\n            $ref: \"#/components/schemas/DomainEffect\"\n        preconditions:\n          $ref: \"#/components/schemas/GroundedFormula\"\n\n    DomainObjectType:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - name\n        - super-type\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        name:\n          type: string\n          format: symbol\n        super-type:\n          type: string\n          format: symbol\n\n    DomainObject:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - name\n        - type\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        name:\n          type: string\n          format: symbol\n        type:\n          type: string\n          format: symbol\n\n    DomainPredicate:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - name\n        - sensed\n        - param-names\n        - param-types\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        name:\n          type: string\n          format: symbol\n        sensed:\n          type: boolean\n        param-names:\n          type: array\n          items:\n            type: string\n            format: symbol\n        param-types:\n          type: array\n          items:\n            type: string\n\n    DomainFact:\n      type: object\n      # may link to predicate\n      required:\n        - kind\n        - apiVersion\n        - name\n        - param-values\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        name:\n          type: string\n          format: symbol\n        param-values:\n          type: array\n          items:\n            type: string\n\n    DomainOperatorParameter:\n      type: object\n      required:\n        - name\n        - type\n      properties:\n        name:\n          type: string\n          format: symbol\n        type:\n          type: string\n          format: symbol\n\n    DomainOperator:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - name\n        - wait-sensed\n        - parameters\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        name:\n          type: string\n          format: symbol\n        wait-sensed:\n          type: boolean\n        parameters:\n          type: array\n          items:\n            $ref: '#/components/schemas/DomainOperatorParameter'\n\n    DomainEffect:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - name\n        - type\n        - predicate\n        - param-names\n        - param-values\n        - param-constants\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        name:\n          type: string\n          format: symbol\n        type:\n          type: string\n          format: symbol\n          enum: [\"POSITIVE\", \"NEGATIVE\"]\n        predicate:\n          type: string\n          format: symbol\n        param-names:\n          type: array\n          items:\n            type: string\n            format: symbol\n        param-values:\n          type: array\n          items:\n            type: string\n        param-constants:\n          type: array\n          items:\n            type: string\n\n    PDDLFormula:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - id\n        - type\n        - part-of\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        id:\n          type: string\n          format: symbol\n        type:\n          type: string\n          format: symbol\n          enum: [\"conjunction\", \"disjunction\", \"negation\", \"atom\"]\n        part-of:\n          type: string\n          format: symbol\n\n    PDDLPredicate:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - id\n        - part-of\n        - predicate\n        - param-names\n        - param-constants\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        id:\n          type: string\n          format: symbol\n        part-of:\n          type: string\n          format: symbol\n        predicate:\n          type: string\n          format: symbol\n        param-names:\n          type: array\n          items:\n            type: string\n            format: symbol\n        param-constants:\n          type: array\n          items:\n            type: string\n            format: symbol\n\n    GroundedPDDLFormula:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - id\n        - formula-id\n        - grounding\n        - is-satisfied\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        id:\n          type: string\n          format: symbol\n        formula-id:\n          type: string\n          format: symbol\n        grounding:\n          type: string\n          format: symbol\n        is-satisfied:\n          type: boolean\n\n    GroundedPDDLPredicate:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - id\n        - predicate-id\n        - grounding\n        - is-satisfied\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        id:\n          type: string\n          format: symbol\n        predicate-id:\n          type: string\n          format: symbol\n        grounding:\n          type: string\n          format: symbol\n        is-satisfied:\n          type: boolean\n\n    PDDLGrounding:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - id\n        - param-values\n        - param-names\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        id:\n          type: string\n          format: symbol\n        param-names:\n          type: array\n          items:\n            type: string\n            format: symbol\n        param-values:\n          type: array\n          items:\n            type: string\n            format: symbol\n\n    GroundedFormula:\n      type: object\n      required:\n        - kind\n        - apiVersion\n        - name\n        - type\n        - is-satisfied\n      properties:\n        kind:\n          type: string\n        apiVersion:\n          type: string\n        name:\n          type: string\n          format: symbol\n        type:\n          type: string\n          format: symbol\n          enum: [\"conjunction\", \"disjunction\", \"negation\", \"atom\"]\n        is-satisfied:\n          type: boolean\n        param-names:\n          type: array\n          items:\n            type: string\n            format: symbol\n        param-values:\n          type: array\n          items:\n            type: string\n        param-constants:\n          type: array\n          items:\n            type: string\n        child:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroundedFormula'\n",
			"canonicalURL": "/github.com/fawkesrobotics/fawkes@fd3768278fb3d2dc9d5126b9d11c2fe31545bede/-/blob/src/plugins/clips-executive/rest-api/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/fawkesrobotics/fawkes/blob/fd3768278fb3d2dc9d5126b9d11c2fe31545bede/src/plugins/clips-executive/rest-api/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/clips-executive/goals\": get: responses: 200: contents: application/json: generate schema: item: field mode: primitive: format \"symbol\": enum format not implemented",
	"NotImplemented": [
		"enum format"
	]
}