{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Sciebo-RDS/Sciebo-RDS"
		},
		"file": {
			"name": "central-service_token-storage.yml",
			"size": 0,
			"path": "RDS/layer3_central_services/token_storage/central-service_token-storage.yml",
			"byteSize": 15883,
			"content": "info:\n  title: Central Service - Token Storage\n  version: '1.0'\n  contact:\n    name: Peter Heiss\n    email: peter.heiss@uni-muenster.de\n    url: 'http://www.research-data-services.org'\n  description: This file describes the interface for the central service \"token storage\".\n  license:\n    name: MIT\nservers:\n  - url: 'http://central-service_token-storage:3000'\npaths:\n  /token:\n    get:\n      summary: Returns all tokens\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  length:\n                    type: integer\n                  list:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/JSONToken'\n      description: Returns an unfiltered list of all tokens.\n      tags:\n        - Token\n    post:\n      summary: Add a token\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONResponse'\n        '400':\n          description: Bad Request\n      description: Adds a token to repository.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user:\n                  $ref: '#/components/schemas/User'\n                token:\n                  $ref: '#/components/schemas/JSONToken'\n        description: ''\n      tags:\n        - token\n  /user:\n    get:\n      summary: Returns user informations\n      tags:\n        - User\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  length:\n                    type: integer\n                  list:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/JSONUser'\n      description: Returns informations from main oauth2-provider\n    parameters: []\n    post:\n      summary: Adds a new user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONResponse'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JSONUser'\n        description: Adds a new user to the storage.\n      tags:\n        - User\n      description: Adds a new user.\n  '/user/{user-id}':\n    parameters:\n      - schema:\n          type: string\n        name: user-id\n        in: path\n        required: true\n    get:\n      summary: Get user with id\n      tags:\n        - User\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONUser'\n        '404':\n          description: Not Found\n      description: Returns the user with specified id.\n    delete:\n      summary: Remove user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONResponse'\n      tags:\n        - User\n      description: Delete the user with user-id.\n  '/token/{token-id}':\n    get:\n      summary: Get specified token\n      tags:\n        - token\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONToken'\n        '404':\n          description: Not Found\n      description: Returns the specified token.\n    parameters:\n      - schema:\n          type: string\n        name: token-id\n        in: path\n        required: true\n    put:\n      summary: Update token\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONResponse'\n      description: Updates a token\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JSONToken'\n      tags:\n        - token\n  '/user/{user-id}/token':\n    parameters:\n      - schema:\n          type: string\n        name: user-id\n        in: path\n        required: true\n    get:\n      summary: Get tokens from specified user\n      tags:\n        - User\n        - token\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  length:\n                    type: integer\n                  list:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/JSONToken'\n      description: Returns all tokens for the specified user.\n    post:\n      summary: Add a token\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONResponse'\n      description: Adds token to the repository.\n      tags:\n        - User\n        - token\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JSONToken'\n  '/service/{servicename}':\n    get:\n      summary: Get specified service\n      tags:\n        - Service\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONService'\n      description: Returns the specified service.\n    parameters:\n      - schema:\n          type: string\n        name: servicename\n        in: path\n        required: true\n    delete:\n      summary: ''\n      responses:\n        '200':\n          description: OK\n      description: Removes the given service.\n  /service:\n    get:\n      summary: Returns all services\n      tags:\n        - Service\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  length:\n                    type: integer\n                  list:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/JSONService'\n      description: Returns all registered services.\n    post:\n      summary: Adds a new service\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONResponse'\n        '400':\n          description: Bad Request\n        '409':\n          description: Conflict\n      tags:\n        - Service\n      description: Adds a new service to storage.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              anyOf:\n                - $ref: '#/components/schemas/LoginService'\n                - $ref: '#/components/schemas/OAuthService'\n                - $ref: '#/components/schemas/JSONService'\n        description: ''\n  '/user/{user-id}/token/{token-id}':\n    parameters:\n      - schema:\n          type: string\n        name: user-id\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: token-id\n        in: path\n        required: true\n        description: can be a string or int.\n    get:\n      summary: Returns the specified token\n      tags:\n        - User\n        - token\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONToken'\n        '404':\n          description: Not Found\n      description: |-\n        Returns the specified token from the specified user.\n\n        If the token-id is a string, it will returns the corresponding token for the given servicename. Otherwise it needs to be an int and it returns the token in the given position.\n    delete:\n      summary: Remove token\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JSONResponse'\n        '404':\n          description: Not Found\n      tags:\n        - token\n      description: Deletes the specified token from the specified user.\n    put:\n      summary: ''\n      operationId: ''\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: Not Found\n        '500':\n          description: Internal Server Error\n      description: 'Refresh the corresponding token, if there is a refresh algorithm available (e.g. oauth2).'\ncomponents:\n  schemas:\n    Token:\n      title: Token\n      type: object\n      x-tags:\n        - token\n      properties:\n        service:\n          $ref: '#/components/schemas/LoginService'\n        access_token:\n          type: string\n          description: 'The token, which can be used as password for username in service.'\n        user:\n          $ref: '#/components/schemas/User'\n    User:\n      title: User\n      type: object\n      properties:\n        username:\n          type: string\n      x-tags:\n        - User\n    LoginService:\n      title: LoginService\n      type: object\n      x-tags:\n        - Service\n      description: 'This handles a username:password service, where the UI will show the user a form to make inputs corresponding to your entries here.'\n      x-examples:\n        example-1:\n          servicename: port-owncloud\n          implements:\n            - fileStorage\n          fileTransferMode: 0\n          fileTransferArchive: 0\n          credentials:\n            userId: true\n            password: true\n        example-2:\n          servicename: port-zenodo\n          implements:\n            - metadata\n          fileTransferMode: 0\n          fileTransferArchive: 1\n          credentials:\n            userId: true\n            password: true\n      properties:\n        servicename:\n          type: string\n          description: Needs to start with \"port-\" e.g. \"port-zenodo\"\n        implements:\n          type: array\n          description: |-\n            Specifies, if you implements a fileStorage or metadata port (e.g. Zenodo or OSF)\n            valid values here: \n            - \"fileStorage\"\n            - \"metadata\"\n          items:\n            type: string\n        fileTransferMode:\n          type: integer\n          description: 'Set value between 0=active and 1=passive. This is relevant for file transfer, because active will trigger the upload via RDS (push mode). Passive will trigger the upload via the service (pull mode).'\n        fileTransferArchive:\n          description: |-\n            A integer mapping, which specifies, what algorithm should be used to store files into an archive.\n            If set to one of the followed algorithms, it will be used to store all files to one archive and then transmitted within one call.\n\n            Supported Algorithms:\n            - 0: none\n            - 1: zip\n          type: integer\n        credentials:\n          type: object\n          description: 'It defines, if the user can enter userId and / or password, if this is needed. Most times, you will need userId and password.'\n          required:\n            - userId\n            - password\n          properties:\n            userId:\n              type: boolean\n            password:\n              type: boolean\n        description:\n          type: object\n          description: A small description of the given service.\n        icon:\n          type: string\n          nullable: true\n        infoUrl:\n          type: string\n        helpUrl:\n          type: string\n        displayName:\n          type: string\n          nullable: true\n      required:\n        - servicename\n        - implements\n        - fileTransferMode\n        - fileTransferArchive\n        - credentials\n    JSONService:\n      title: JSONService\n      type: object\n      properties:\n        type:\n          type: string\n        data:\n          anyOf:\n            - $ref: '#/components/schemas/OAuthService'\n            - $ref: '#/components/schemas/LoginService'\n            - $ref: '#/components/schemas/Error'\n    OAuthService:\n      title: OAuthService\n      type: object\n      properties:\n        servicename:\n          type: string\n          description: Needs to start with \"port-\" e.g. \"port-zenodo\"\n        authorize_url:\n          type: string\n        refresh_url:\n          type: string\n        client_id:\n          type: string\n        client_secret:\n          type: string\n        implements:\n          type: array\n          description: |-\n            Specifies, if you implements a fileStorage or metadata port (e.g. Zenodo or OSF)\n            valid values here: \n            - \"fileStorage\"\n            - \"metadata\"\n          items:\n            type: string\n        fileTransferMode:\n          description: 'Set value between 0=active and 1=passive. This is relevant for file transfer, because active will trigger the upload via RDS (push mode). Passive will trigger the upload via the service (pull mode).'\n          type: integer\n        fileTransferArchive:\n          description: |-\n            A integer mapping, which specifies, what algorithm should be used to store files into an archive.\n            If set to one of the followed algorithms, it will be used to store all files to one archive and then transmitted within one call.\n\n            Supported Algorithms:\n            - 0: none\n            - 1: zip\n          type: integer\n        description:\n          type: object\n          description: A small description of the given service.\n        icon:\n          type: string\n          nullable: true\n        displayName:\n          type: string\n          nullable: true\n        infoUrl:\n          type: string\n        helpUrl:\n          type: string\n      required:\n        - servicename\n        - authorize_url\n        - refresh_url\n        - client_id\n        - client_secret\n        - implements\n        - fileTransferMode\n        - fileTransferArchive\n    JSONToken:\n      title: JSONToken\n      type: object\n      properties:\n        type:\n          type: string\n        data:\n          anyOf:\n            - $ref: '#/components/schemas/Token'\n            - $ref: '#/components/schemas/OAuthToken'\n            - $ref: '#/components/schemas/Error'\n    JSONUser:\n      title: JSONUser\n      type: object\n      properties:\n        data:\n          anyOf:\n            - $ref: '#/components/schemas/User'\n            - $ref: '#/components/schemas/Error'\n        type:\n          type: string\n    OAuthToken:\n      title: OAuthToken\n      type: object\n      properties:\n        service:\n          $ref: '#/components/schemas/OAuthService'\n        access_token:\n          type: string\n        refresh_token:\n          type: string\n        expiration_date:\n          type: integer\n        user:\n          $ref: '#/components/schemas/User'\n    Error:\n      title: Error\n      type: object\n      properties:\n        error:\n          type: string\n        http_code:\n          type: string\n        description:\n          type: string\n      description: This model represents an unhandled error raise.\n    Success:\n      title: Success\n      type: object\n      properties:\n        success:\n          type: boolean\n    JSONResponse:\n      title: JSONResponse\n      anyOf:\n        - $ref: '#/components/schemas/Error'\n        - $ref: '#/components/schemas/Success'\ntags:\n  - name: User\n    description: All user related objects.\n  - name: token\n    description: All token related objects.\n  - name: Service\n    description: All service related objects.\nopenapi: 3.0.0\n",
			"canonicalURL": "/github.com/Sciebo-RDS/Sciebo-RDS@5b868aa82ae367fd7f33ebd419ffc7ba255cdd7e/-/blob/RDS/layer3_central_services/token_storage/central-service_token-storage.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Sciebo-RDS/Sciebo-RDS/blob/5b868aa82ae367fd7f33ebd419ffc7ba255cdd7e/RDS/layer3_central_services/token_storage/central-service_token-storage.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/service/{servicename}\": get: responses: 200: contents: application/json: generate schema: field data: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"complex anyOf"
	]
}