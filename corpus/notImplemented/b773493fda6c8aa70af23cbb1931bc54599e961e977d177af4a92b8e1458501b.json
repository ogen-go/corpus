{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/amzn/smoke-framework-examples"
		},
		"file": {
			"name": "OpenAPI30.yaml",
			"size": 0,
			"path": "PersistenceExampleService/OpenAPI30.yaml",
			"byteSize": 9602,
			"content": "openapi: 3.0.1\ninfo:\n  title: PersistenceExampleService\n  version: 2018-12-19\nservers:\n- url: /\npaths:\n  /customer:\n    get:\n      operationId: ListCustomers\n      parameters:\n      - name: maximumPageSize\n        in: query\n        schema:\n          type: integer\n      - name: nextPageToken\n        in: query\n        schema:\n          type: string\n      responses:\n        200:\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListCustomersResponse'\n        404:\n          description: 404 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnknownResourceFault'\n      security:\n      - sigv4: []\n      x-amazon-apigateway-integration:\n        responses:\n          200:\n            statusCode: \"200\"\n          400:\n            statusCode: \"400\"\n        uri: http://${stageVariables.LoadBalancerDNSName}:8080/customer\n        passthroughBehavior: when_no_templates\n        connectionType: VPC_LINK\n        connectionId: ${stageVariables.VpcLinkId}\n        httpMethod: GET\n        type: http\n    put:\n      operationId: CreateCustomer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateCustomerRequest'\n        required: true\n      responses:\n        200:\n          description: 200 response\n          headers:\n            X-Request-ID:\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n        404:\n          description: 404 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnknownResourceFault'\n      security:\n      - sigv4: []\n      x-amazon-apigateway-integration:\n        responses:\n          200:\n            statusCode: \"200\"\n          400:\n            statusCode: \"400\"\n        uri: http://${stageVariables.LoadBalancerDNSName}:8080/customer\n        passthroughBehavior: when_no_templates\n        connectionType: VPC_LINK\n        connectionId: ${stageVariables.VpcLinkId}\n        httpMethod: PUT\n        type: http\n      x-codegen-request-body-name: CreateCustomerRequest\n  /customer/{id}:\n    get:\n      operationId: GetCustomerDetails\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: includeOnlyPrimaryEmail\n        in: query\n        schema:\n          type: string\n      - name: X-Request-ID\n        in: header\n        schema:\n          type: string\n      responses:\n        200:\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerAttributes'\n        404:\n          description: 404 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnknownResourceFault'\n      security:\n      - sigv4: []\n      x-amazon-apigateway-integration:\n        responses:\n          200:\n            statusCode: \"200\"\n          400:\n            statusCode: \"400\"\n        uri: http://${stageVariables.LoadBalancerDNSName}:8080/customer/{id}\n        passthroughBehavior: when_no_templates\n        connectionType: VPC_LINK\n        connectionId: ${stageVariables.VpcLinkId}\n        httpMethod: GET\n        type: http\n  /customer/{id}/email:\n    put:\n      operationId: AddCustomerEmailAddress\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n              - emailAddress\n              - notifyOnAllActions\n              - notifyOnImportantAction\n              type: object\n              properties:\n                emailAddress:\n                  type: string\n                isPrimary:\n                  type: boolean\n                notifyOnImportantAction:\n                  type: boolean\n                notifyOnAllActions:\n                  type: boolean\n        required: false\n      responses:\n        200:\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomerEmailAddressIdentity'\n        400:\n          description: 400 response\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/CustomerEmailAddressLimitExceededFault\"\n                  - $ref: \"#/components/schemas/CustomerEmailAddressAlreadyExistsFault\"\n        404:\n          description: 404 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UnknownResourceFault'\n        409:\n          description: 409 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConcurrencyFault'\n      security:\n      - sigv4: []\n      x-amazon-apigateway-integration:\n        responses:\n          200:\n            statusCode: \"200\"\n          400:\n            statusCode: \"400\"\n        uri: http://${stageVariables.LoadBalancerDNSName}:8080/customer/{id}/email\n        passthroughBehavior: when_no_templates\n        connectionType: VPC_LINK\n        connectionId: ${stageVariables.VpcLinkId}\n        httpMethod: PUT\n        type: http\n      x-codegen-request-body-name: addDetails\ncomponents:\n  schemas:\n    BirthYear:\n      type: integer\n    ConcurrencyFault:\n      type: object\n      properties:\n        message:\n          $ref: '#/components/schemas/ErrorMessage'\n    CoreCustomerAttributes:\n      required:\n      - birthYear\n      - firstName\n      - lastName\n      type: object\n      properties:\n        firstName:\n          $ref: '#/components/schemas/FirstName'\n        lastName:\n          $ref: '#/components/schemas/LastName'\n        birthYear:\n          $ref: '#/components/schemas/BirthYear'\n        gender:\n          $ref: '#/components/schemas/Gender'\n    CreateCustomerRequest:\n      required:\n      - birthYear\n      - firstName\n      - lastName\n      type: object\n      properties:\n        firstName:\n          $ref: '#/components/schemas/FirstName'\n        lastName:\n          $ref: '#/components/schemas/LastName'\n        birthYear:\n          $ref: '#/components/schemas/BirthYear'\n        gender:\n          $ref: '#/components/schemas/Gender'\n    CustomerAttributes:\n      required:\n      - birthYear\n      - emailAddresses\n      - firstName\n      - lastName\n      type: object\n      properties:\n        firstName:\n          $ref: '#/components/schemas/FirstName'\n        lastName:\n          $ref: '#/components/schemas/LastName'\n        birthYear:\n          $ref: '#/components/schemas/BirthYear'\n        gender:\n          $ref: '#/components/schemas/Gender'\n        emailAddresses:\n          $ref: '#/components/schemas/CustomerEmailAddressAttributesList'\n    CustomerEmailAddressAttributes:\n      required:\n      - emailAddress\n      - notifyOnAllActions\n      - notifyOnImportantAction\n      type: object\n      properties:\n        emailAddress:\n          $ref: '#/components/schemas/CustomerEmailAddress'\n        notifyOnImportantAction:\n          $ref: '#/components/schemas/NotifyOnImportantAction'\n        notifyOnAllActions:\n          $ref: '#/components/schemas/NotifyOnAllActions'\n    CustomerEmailAddressAttributesList:\n      type: array\n      items:\n        $ref: '#/components/schemas/CustomerEmailAddressAttributes'\n    CustomerEmailAddressIdentity:\n      required:\n      - id\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/CustomerEmailAddress'\n    CustomerEmailAddressAlreadyExistsFault:\n      type: object\n      properties:\n        message:\n          $ref: '#/components/schemas/ErrorMessage'\n    CustomerEmailAddressLimitExceededFault:\n      type: object\n      properties:\n        message:\n          $ref: '#/components/schemas/ErrorMessage'\n    CustomerEmailAddress:\n      maxLength: 254\n      minLength: 1\n      type: string\n    CustomerID:\n      maxLength: 150\n      minLength: 1\n      type: string\n    CustomerIDList:\n      type: array\n      items:\n        $ref: '#/components/schemas/CustomerID'\n    CustomerIdentity:\n      required:\n      - id\n      type: object\n      properties:\n        id:\n          $ref: '#/components/schemas/CustomerID'\n    ErrorMessage:\n      type: string\n    FirstName:\n      maxLength: 300\n      minLength: 1\n      type: string\n    Gender:\n      type: string\n      enum:\n      - FEMALE\n      - MALE\n      - OTHER\n    LastName:\n      maxLength: 300\n      minLength: 1\n      type: string\n    ListCustomersResponse:\n      required:\n      - customerIDs\n      type: object\n      properties:\n        customerIDs:\n          $ref: '#/components/schemas/CustomerIDList'\n        nextPageToken:\n          $ref: '#/components/schemas/NextPageToken'\n    NextPageToken:\n      maxLength: 2048\n      minLength: 1\n      type: string\n    NotifyOnAllActions:\n      type: boolean\n    NotifyOnImportantAction:\n      type: boolean\n    UnknownResourceFault:\n      type: object\n      properties:\n        message:\n          $ref: '#/components/schemas/ErrorMessage'\n  securitySchemes:\n    sigv4:\n      type: apiKey\n      name: Authorization\n      in: header\n      x-amazon-apigateway-authtype: awsSigv4\n",
			"canonicalURL": "/github.com/amzn/smoke-framework-examples@911ef74345abc91c4d29c08a6d9503846a8b5a14/-/blob/PersistenceExampleService/OpenAPI30.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/amzn/smoke-framework-examples/blob/911ef74345abc91c4d29c08a6d9503846a8b5a14/PersistenceExampleService/OpenAPI30.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/customer/{id}/email\": put: responses: 400: contents: application/json: generate schema: oneOf: oneOf AddCustomerEmailAddressBadRequest: variant CustomerEmailAddressAlreadyExistsFault: no unique fields, unable to parse without discriminator: discriminator inference not implemented",
	"NotImplemented": [
		"discriminator inference"
	]
}