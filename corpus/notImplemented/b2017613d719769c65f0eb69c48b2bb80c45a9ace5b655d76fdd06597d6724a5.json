{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/sodafoundation/delfin"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "openapi-spec/swagger.yaml",
			"byteSize": 137159,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"v1\"\n  title: SODA Infrastructure Management API\n  description: SODA Infrastructure Management API for resource monitoring, alerting and management across multiple, heterogeneous storage backend. Currently supporting storage monitoring and alerting.\n  contact:\n    name: SODA Support\n    url: 'https://sodafoundation.io/slack'\n    email: support@sodafoundation.io\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: Storages\npaths:\n  /v1/storages:\n    get:\n      tags:\n        - Storages\n      description: List all registered storage back ends\n      operationId: GetStorageBackends\n      parameters:\n        - name: limit\n          in: query\n          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description:  Comma separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: vendor\n          in: query\n          description: vendor(manufacturer) of the storage.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: model\n          in: query\n          description: model of the storage\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: The storage name.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: serial_number\n          in: query\n          description: The storage serial number.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: The storage status\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - normal\n              - offline\n              - abnormal\n      responses:\n        '200':\n          description: Storage backend list available.\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                      - storages\n                additionalProperties: true\n                properties:\n                  storages:\n                    type: array\n                    title: The storages schema\n                    items:\n                      $ref: '#/components/schemas/StorageBackendResponse'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n    post:\n      tags:\n        - Storages\n      description: Register a storage device for management.\n      operationId: addStorageBackends\n      requestBody:\n        description: Inventory item to add\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StorageBackendRegistry'\n      responses:\n        '200':\n          description: 'Accepted, items added to the infrastructure management'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageBackendResponse'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '409':\n          description: An item already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}':\n    get:\n      tags:\n        - Storages\n      description: Get details of a storage device\n      operationId: GetStorageBackendbyID\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend .\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Storage backend list available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageBackendResponse'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n    delete:\n      tags:\n        - Storages\n      description: Unregister an already registered storage backend\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend .\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '202':\n          description: Accepted\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  /v1/storages/sync:\n    post:\n      tags:\n        - Storages\n      description: Collect all resources from all registered  backend and synchronize with DB.\n      operationId: syncStorageBackends\n      responses:\n        '202':\n          description: 'Accepted, '\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '409':\n          description: An item already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}/sync':\n    post:\n      tags:\n        - Storages\n      description: Collect all resources from specified storage backend and synchronize with DB\n      operationId: syncStorage\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend .\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '202':\n          description: 'Accepted, '\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '409':\n          description: An item already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}/access-info':\n    get:\n      tags:\n        - Storages\n      description: Get access info of a registered storage backend\n      operationId: GettorageAccessInfobyID\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Storage Access-info  available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageAccessInfoResponse'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n    put:\n      tags:\n        - Storages\n      description: Update a registered storage system access information in Infrastructure management DB.\n      operationId: updateStorageAccessInfobyID\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StorageBackendRegistryUpdate'\n      responses:\n        '200':\n          description: Storage backend  available with updated access information\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageAccessInfoResponse'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/access-infos':\n    get:\n      tags:\n        - Storages\n      description: Get access info of all registered storages\n      operationId: GetAllStorageAccessInfos\n      responses:\n        '200':\n          description: Storage Access-info  available\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageAccessInfosResponse'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  /v1/storage-pools:\n    get:\n      tags:\n        - Storage Pools\n      description: List all storage pools.\n      parameters:\n        - name: limit\n          in: query\n          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The pool name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a storage pool.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_storage_pool_id\n          in: query\n          description: Actual ID of the storage pool in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: storage_id\n          in: query\n          description: Database ID created for a storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: The pool status\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - normal\n              - offline\n              - abnormal\n      responses:\n        '200':\n          description: List storage pools query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - storage_pools\n                additionalProperties: true\n                properties:\n                  storage_pools:\n                    type: array\n                    title: the storage pools schema\n                    items:\n                      $ref: '#/components/schemas/StoragePoolSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storage-pools/{id}':\n    get:\n      tags:\n        - Storage Pools\n      description: Get storage pool detail by pool ID.\n      parameters:\n        - name: id\n          in: path\n          description: Database ID created for a storage pool.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StoragePoolSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  /v1/controllers:\n    get:\n      tags:\n        - Controllers\n      description: List all controllers.\n      parameters:\n        - name: limit\n          in: query\n          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The controller name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a controller.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_controller_id\n          in: query\n          description: Actual ID of the controller in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: storage_id\n          in: query\n          description: Database ID created for a storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: The controller status\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - normal\n              - offline\n              - unknown\n      responses:\n        '200':\n          description: List controllers query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - controllers\n                additionalProperties: true\n                properties:\n                  controllers:\n                    type: array\n                    title: the controllers schema\n                    items:\n                      $ref: '#/components/schemas/ControllerSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/controllers/{id}':\n    get:\n      tags:\n        - Controllers\n      description: Get controller detail by controller ID.\n      parameters:\n        - name: id\n          in: path\n          description: Database ID created for a controller.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ControllerSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  /v1/ports:\n    get:\n      tags:\n        - Ports\n      description: List all ports.\n      parameters:\n        - name: limit\n          in: query\n          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The port name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a port.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_port_id\n          in: query\n          description: Actual ID of the port in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: storage_id\n          in: query\n          description: Database ID created for a storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: connection_status\n          in: query\n          description: The port connection_status\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - connected\n              - disconnected\n              - unknown\n        - name: health_status\n          in: query\n          description: The port health_status\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - normal\n              - abnormal\n              - unknown\n      responses:\n        '200':\n          description: List port query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - ports\n                additionalProperties: true\n                properties:\n                  ports:\n                    type: array\n                    title: the port schema\n                    items:\n                      $ref: '#/components/schemas/PortSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/ports/{id}':\n    get:\n      tags:\n        - Ports\n      description: Get port detail by port ID.\n      parameters:\n        - name: id\n          in: path\n          description: Database ID created for a port.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PortSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/disks':\n    get:\n      tags:\n        - Disks\n      description: List all disks.\n      parameters:\n        - name: limit\n          in: query\n          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The disk name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a disk.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_disk_id\n          in: query\n          description: Actual ID of the port in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: storage_id\n          in: query\n          description: Database ID created for a storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_disk_group_id\n          in: query\n          description: Database ID created for a disk group.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: The disk status\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - normal\n              - offline\n              - abnormal\n      responses:\n        '200':\n          description: List disk query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - disks\n                additionalProperties: true\n                properties:\n                  disks:\n                    type: array\n                    title: the disk schema\n                    items:\n                      $ref: '#/components/schemas/DiskSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/disks/{id}':\n      get:\n        tags:\n          - Disks\n        description: Get disk detail by disk ID.\n        parameters:\n          - name: id\n            in: path\n            description: Database ID created for a disk.\n            required: true\n            style: simple\n            explode: false\n            schema:\n              type: string\n        responses:\n          '200':\n            description: OK\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/DiskSpec'\n          '401':\n            description: NotAuthorized\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ErrorSpec'\n          '403':\n            description: Forbidden\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ErrorSpec'\n          '404':\n            description: The resource does not exist\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ErrorSpec'\n          '500':\n            description: An unexpected error occurred.\n            content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ErrorSpec'\n  /v1/volumes:\n    get:\n      tags:\n        - Volumes\n      description: List all storage volumes.\n      parameters:\n        - name: limit\n          in: query\n          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The volume name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_storage_pool_id\n          in: query\n          description: Actual ID of the storage pool in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_volume_id\n          in: query\n          description: Actual ID created for the volume in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: storage_id\n          in: query\n          description: Database ID created for a storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: The volume status\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - noraml\n              - offline\n              - abnormal\n      responses:\n        '200':\n          description: List volumes operation was successful\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - volumes\n                additionalProperties: true\n                properties:\n                  volumes:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VolumeRespSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/volumes/{id}':\n    get:\n      tags:\n        - Volumes\n      description: Get storage volume detail by volume ID.\n      parameters:\n        - name: id\n          in: path\n          description: Database ID created for a volume.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VolumeRespSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  /v1/filesystems:\n    get:\n      tags:\n        - Filesystems\n      description: List all filesystems.\n      parameters:\n        - name: limit\n          in: query\n          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The filesystem name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a filesystem.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_filesystem_id\n          in: query\n          description: Actual ID of the filesystem in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_pool_id\n          in: query\n          description: Pool ID of the filesystem in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: storage_id\n          in: query\n          description: Database ID created for a storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: security_mode\n          in: query\n          description: The filesystem security modes\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - mixed\n              - native\n              - ntfs\n              - unix\n        - name: status\n          in: query\n          description: The filesystem status\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - normal\n              - faulty\n      responses:\n        '200':\n          description: List filesystem query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - filesystems\n                additionalProperties: true\n                properties:\n                  filesystems:\n                    type: array\n                    title: the filesystem schema\n                    items:\n                      $ref: '#/components/schemas/FilesystemSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/filesystems/{id}':\n    get:\n      tags:\n        - Filesystems\n      description: Get filesystem detail by filesystem ID.\n      parameters:\n        - name: id\n          in: path\n          description: Database ID created for a filesystem.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FilesystemSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  /v1/qtrees:\n    get:\n      tags:\n        - Qtrees\n      description: List all qtrees.\n      parameters:\n        - name: limit\n          in: query\n          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The qtree name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a qtree.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_qtree_id\n          in: query\n          description: Actual ID of the qtree in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_filesystem_id\n          in: query\n          description: Filesystem ID of the qtree in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: storage_id\n          in: query\n          description: Database ID created for a storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: security_mode\n          in: query\n          description: The qtree security modes\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - mixed\n              - native\n              - ntfs\n              - unix\n      responses:\n        '200':\n          description: List qtree query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - qtrees\n                additionalProperties: true\n                properties:\n                  qtrees:\n                    type: array\n                    title: the qtree schema\n                    items:\n                      $ref: '#/components/schemas/QtreeSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/qtrees/{id}':\n    get:\n      tags:\n        - Qtrees\n      description: Get qtree detail by qtree ID.\n      parameters:\n        - name: id\n          in: path\n          description: Database ID created for a qtree.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QtreeSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  /v1/quotas:\n    get:\n      tags:\n        - Quotas\n      description: List all quotas.\n      parameters:\n        - name: limit\n          in: query\n          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The quota name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a quota.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_quota_id\n          in: query\n          description: Actual ID of the quota in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_filesystem_id\n          in: query\n          description: Filesystem ID of the quota in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_qtree_id\n          in: query\n          description: Qtree ID of the quota in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: storage_id\n          in: query\n          description: Database ID created for a storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: The quota types\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - filesystem\n              - tree\n              - user\n              - group\n      responses:\n        '200':\n          description: List quota query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - quotas\n                additionalProperties: true\n                properties:\n                  quotas:\n                    type: array\n                    title: the quota schema\n                    items:\n                      $ref: '#/components/schemas/QuotaSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/quotas/{id}':\n    get:\n      tags:\n        - Quotas\n      description: Get quota detail by quota ID.\n      parameters:\n        - name: id\n          in: path\n          description: Database ID created for a quota.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QuotaSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  /v1/shares:\n    get:\n      tags:\n        - Shares\n      description: List all shares.\n      parameters:\n        - name: limit\n          in: query\n          description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The share name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a share.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_share_id\n          in: query\n          description: Actual ID of the share in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_filesystem_id\n          in: query\n          description: Filesystem ID of the share in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_qtree_id\n          in: query\n          description: Qtree ID of the share in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: storage_id\n          in: query\n          description: Database ID created for a storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: protocol\n          in: query\n          description: The share protocol\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - cifs\n              - nfs\n              - ftp\n              - hdfs\n      responses:\n        '200':\n          description: List share query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - shares\n                additionalProperties: true\n                properties:\n                  shares:\n                    type: array\n                    title: the share schema\n                    items:\n                      $ref: '#/components/schemas/ShareSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/shares/{id}':\n    get:\n      tags:\n        - Shares\n      description: Get share detail by share ID.\n      parameters:\n        - name: id\n          in: path\n          description: Database ID created for a share.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShareSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}/snmp-config':\n    get:\n      tags:\n        - SnmpConfig\n      description: \u003e-\n        Get details snmp alert source information configured on behalf of\n        backend devices\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SnmpConfigRespSpec'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n    put:\n      tags:\n        - SnmpConfig\n      description: \u003e-\n        Modify snmp alert source information configured on behalf of backend\n        devices\n      operationId: putSnmpConfigInfo\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/SnmpConfigUpdateSpec'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SnmpConfigRespSpec'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n    delete:\n      tags:\n        - SnmpConfig\n      description: \u003e-\n        Removes snmp alert source information configured on behalf of backend\n        devices\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content: {}\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}/alerts/{sequence_number}':\n    delete:\n      tags:\n        - Alerts\n      description: Clear the alert for the input alert sequence number\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: sequence_number\n          in: path\n          description: Sequence number which uniquely maps to the trap sent by a backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content: {}\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '404':\n          description: The resource does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}/alerts/sync':\n    post:\n      tags:\n        - Alerts\n      description: Sync alerts from storage device\n      operationId: syncStorageAlerts\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend .\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/StorageBackendAlertSync'\n      responses:\n        '200':\n          description: 'Accepted, '\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '409':\n          description: An item already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occurred.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{id}/capabilities':\n    get:\n      tags:\n        - Performance Monitoring\n      description: |\n        Provides supported capabilities of Infrastructure management by storage configured in delfin deployment.\n      parameters:\n        - name: id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Returns specifications of storage\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorageCapabilitiesResponse'\n        '404':\n          description: The storage does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: Invalid capabilities.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '505':\n          description: Capability feature not supported.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/snmp-configs':\n    get:\n      tags:\n        - Storages\n      description: \u003e-\n        Get all details snmp alert source information configured on behalf of\n        backend devices\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SnmpConfigsRespSpec'\n        '400':\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}/storage-host-initiators':\n    get:\n      tags:\n        - Masking views\n      description: List all storage host initiators.\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: \u003e-\n            Requests a page size of items. Returns a number of items up to a\n            limit value. Use the limit parameter to make an initial limited\n            request and use the ID of the last-seen item from the response as\n            the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: \u003e-\n            Used in conjunction with limit to return a slice of items.\n            offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The storage host initiator name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a storage host initiator.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: description\n          in: query\n          description: The storage host initiator description\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: alias\n          in: query\n          description: The storage host initiator alias name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: wwn\n          in: query\n          description: The storage host initiator worrld wide name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_storage_host_initiator_id\n          in: query\n          description: \u003e-\n            Actual ID of the storage host initiator in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_storage_host_id\n          in: query\n          description: \u003e-\n            Actual ID of the associated storage host in the storage backend\n            if any.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: The storage host initiator status\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - normal\n              - offline\n              - abnormal\n              - unknown\n      responses:\n        '200':\n          description: List storage host initiators query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - storage_host_initiators\n                additionalProperties: true\n                properties:\n                  storage_host_initiators:\n                    type: array\n                    title: the storage host initiators schema\n                    items:\n                      $ref: '#/components/schemas/StorageHostInitiatorRespSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}/storage-hosts':\n    get:\n      tags:\n        - Masking views\n      description: List all storage hosts.\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: \u003e-\n            Requests a page size of items. Returns a number of items up to a\n            limit value. Use the limit parameter to make an initial limited\n            request and use the ID of the last-seen item from the response as\n            the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: \u003e-\n            Used in conjunction with limit to return a slice of items.\n            offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The storage host name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a storage host.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: description\n          in: query\n          description: The storage host description\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_storage_host_id\n          in: query\n          description: Actual ID of the storage host in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: The storage host status\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - normal\n              - offline\n              - abnormal\n              - unknown\n        - name: ip_address\n          in: query\n          description: Ip address of the storage host.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: os_type\n          in: query\n          description: Operating system of the storage host\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            enum:\n              - windows\n              - linux\n      responses:\n        '200':\n          description: List storage hosts query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - storage_hosts\n                additionalProperties: true\n                properties:\n                  storage_hosts:\n                    type: array\n                    title: the storage hosts schema\n                    items:\n                      $ref: '#/components/schemas/StorageHostRespSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}/storage-host-groups':\n    get:\n      tags:\n        - Masking views\n      description: List all storage host groups.\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: \u003e-\n            Requests a page size of items. Returns a number of items up to a\n            limit value. Use the limit parameter to make an initial limited\n            request and use the ID of the last-seen item from the response as\n            the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: \u003e-\n            Used in conjunction with limit to return a slice of items.\n            offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The storage host group name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a storage host group.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: description\n          in: query\n          description: The storage host group description\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_storage_host_group_id\n          in: query\n          description: Actual ID of the storage host group in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List storage host groups query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - storage_host_groups\n                additionalProperties: true\n                properties:\n                  storage_host_groups:\n                    type: array\n                    title: the storage host group schema\n                    items:\n                      $ref: '#/components/schemas/StorageHostGroupRespSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}/port-groups':\n    get:\n      tags:\n        - Masking views\n      description: List all port groups.\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: \u003e-\n            Requests a page size of items. Returns a number of items up to a\n            limit value. Use the limit parameter to make an initial limited\n            request and use the ID of the last-seen item from the response as\n            the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: \u003e-\n            Used in conjunction with limit to return a slice of items.\n            offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The port group name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a port group.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: description\n          in: query\n          description: The port group description\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_port_group_id\n          in: query\n          description: Actual ID of the port group in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List port groups query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - port_groups\n                additionalProperties: true\n                properties:\n                  port_groups:\n                    type: array\n                    title: the port groups schema\n                    items:\n                      $ref: '#/components/schemas/PortGroupRespSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}/volume-groups':\n    get:\n      tags:\n        - Masking views\n      description: List all volume groups.\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: \u003e-\n            Requests a page size of items. Returns a number of items up to a\n            limit value. Use the limit parameter to make an initial limited\n            request and use the ID of the last-seen item from the response as\n            the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: \u003e-\n            Used in conjunction with limit to return a slice of items.\n            offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The volume group name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a volume group.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: description\n          in: query\n          description: The volume group description\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_volume_group_id\n          in: query\n          description: Actual ID of the volume group in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List volume groups query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - volume_groups\n                additionalProperties: true\n                properties:\n                  volume_groups:\n                    type: array\n                    title: the volume groups schema\n                    items:\n                      $ref: '#/components/schemas/VolumeGroupRespSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n  '/v1/storages/{storage_id}/masking-views':\n    get:\n      tags:\n        - Masking views\n      description: List all masking views.\n      parameters:\n        - name: storage_id\n          in: path\n          description: Database ID created for a storage backend.\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: \u003e-\n            Requests a page size of items. Returns a number of items up to a\n            limit value. Use the limit parameter to make an initial limited\n            request and use the ID of the last-seen item from the response as\n            the marker parameter value in a subsequent limited request.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 1\n            type: integer\n            format: int32\n        - name: offset\n          in: query\n          description: \u003e-\n            Used in conjunction with limit to return a slice of items.\n            offset is where to start in the list.\n          required: false\n          style: form\n          explode: true\n          schema:\n            minimum: 0\n            type: integer\n            format: int32\n        - name: sort\n          in: query\n          description: \u003e-\n            Comma-separated list of sort keys and optional sort directions in\n            the form of key:val\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n            example: 'sort=name:desc,id:asc'\n        - name: name\n          in: query\n          description: The masking view name\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Database ID created for a masking view.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: description\n          in: query\n          description: The masking view description\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_masking_view_id\n          in: query\n          description: Actual ID of the masking view in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_storage_host_group_id\n          in: query\n          description: \u003e-\n            Actual ID of the storage host group in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_volume_group_id\n          in: query\n          description: Actual ID of the volume group in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_port_group_id\n          in: query\n          description: Actual ID of the port group in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_storage_host_id\n          in: query\n          description: Actual ID of the storage host in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_volume_id\n          in: query\n          description: Actual ID of the volume in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n        - name: native_port_id\n          in: query\n          description: Actual ID of the port in the storage backend.\n          required: false\n          style: form\n          explode: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List masking views query was success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - masking_views\n                additionalProperties: true\n                properties:\n                  masking_views:\n                    type: array\n                    title: the masking views schema\n                    items:\n                      $ref: '#/components/schemas/MaskingViewRespSpec'\n        '401':\n          description: NotAuthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\n        '500':\n          description: An unexpected error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorSpec'\ncomponents:\n  schemas:\n    BaseModel:\n      type: object\n      properties:\n        id:\n          type: string\n          readOnly: true\n          example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n        created_at:\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2017-07-10T14:36:58.014Z'\n        updated_at:\n          type: string\n          format: date-time\n          readOnly: true\n          example: '2017-07-10T14:36:58.014Z'\n    RestAccessInfoRegistry:\n      required:\n        - host\n        - port\n        - username\n        - password\n      type: object\n      properties:\n        host:\n          type: string\n          example: 10.0.0.1\n        port:\n          type: string\n          example: \"8008\"\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n    SSHAccessInfoRegistry:\n      required:\n        - host\n        - port\n        - username\n        - password\n        - pub_key\n        - pub_key_type\n      type: object\n      properties:\n        host:\n          type: string\n          example: '10.0.0.1'\n        port:\n          type: string\n          example: '22'\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n        pub_key:\n          type: string\n          example: '73:d8:34:18:70:2a:ae:d8:1c:a5:44:40:ef:50:d0:63'\n        pub_key_type:\n          type: string\n          enum: ['ed25519', 'ecdsa', 'rsa']\n    CLIAccessInfoRegistry:\n      required:\n        - host\n        - username\n        - password\n      type: object\n      properties:\n        host:\n          type: string\n          example: 10.0.0.1\n        port:\n          type: string\n          example: \"8888\"\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n    SMISAccessInfoRegistry:\n      required:\n        - host\n        - username\n        - password\n      type: object\n      properties:\n        host:\n          type: string\n          example: 10.0.0.1\n        port:\n          type: string\n          example: \"5989\"\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n        namespace:\n          type: string\n    RestAccessInfoUpdate:\n      required:\n        - username\n        - password\n      type: object\n      properties:\n        host:\n          type: string\n          example: 10.0.0.1\n        port:\n          type: string\n          example: \"8008\"\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n    SSHAccessInfoUpdate:\n      required:\n        - username\n        - password\n      type: object\n      properties:\n        host:\n          type: string\n          example: '10.0.0.1'\n        port:\n          type: string\n          example: '22'\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n        pub_key:\n          type: string\n          example: '73:d8:34:18:70:2a:ae:d8:1c:a5:44:40:ef:50:d0:63'\n        pub_key_type:\n          type: string\n          enum: ['ed25519', 'ecdsa', 'rsa']\n    CLIAccessInfoUpdate:\n      required:\n        - username\n        - password\n      type: object\n      properties:\n        host:\n          type: string\n          example: 10.0.0.1\n        port:\n          type: string\n          example: \"8888\"\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n    SMISAccessInfoUpdate:\n      required:\n        - username\n        - password\n      type: object\n      properties:\n        host:\n          type: string\n          example: 10.0.0.1\n        port:\n          type: string\n          example: \"5989\"\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n        namespace:\n          type: string\n    RestAccessInfoResponse:\n      required:\n        - host\n        - port\n        - username\n      type: object\n      properties:\n        host:\n          type: string\n          example: 10.0.0.1\n        port:\n          type: string\n          example: \"8008\"\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n    SSHAccessInfoResponse:\n      required:\n        - host\n        - port\n        - username\n      type: object\n      properties:\n        host:\n          type: string\n          example: '10.0.0.1'\n        port:\n          type: string\n          example: '22'\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n        pub_key:\n          type: string\n          example: '73:d8:34:18:70:2a:ae:d8:1c:a5:44:40:ef:50:d0:63'\n        pub_key_type:\n          type: string\n          enum: ['ed25519', 'ecdsa', 'rsa']\n    CLIAccessInfoResponse:\n      required:\n        - host\n        - port\n        - username\n      type: object\n      properties:\n        host:\n          type: string\n          example: 10.0.0.1\n        port:\n          type: string\n          example: \"8008\"\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n    SMISAccessInfoResponse:\n      required:\n        - host\n        - port\n        - username\n        - namespace\n      type: object\n      properties:\n        host:\n          type: string\n          example: 10.0.0.1\n        port:\n          type: string\n          example: \"8008\"\n        username:\n          type: string\n          example: admin\n        password:\n          type: string\n        namespace:\n          type: string\n    StorageBackendRegistry:\n      required:\n        - model\n        - vendor\n      anyOf:\n        - $ref: '#/components/schemas/RestAccessInfoRegistry'\n        - $ref: '#/components/schemas/SSHAccessInfoRegistry'\n        - $ref: '#/components/schemas/CLIAccessInfoRegistry'\n        - $ref: '#/components/schemas/SMISAccessInfoRegistry'\n      type: object\n      properties:\n        name:\n          type: string\n          example: EMC-VMAX-123456\n        description:\n          type: string\n          example: VMAX storage lab1\n        vendor:\n          type: string\n          example: dellemc\n        model:\n          type: string\n          example: vmax\n        rest:\n          $ref: '#/components/schemas/RestAccessInfoRegistry'\n        ssh:\n          $ref: '#/components/schemas/SSHAccessInfoRegistry'\n        cli:\n          $ref: '#/components/schemas/CLIAccessInfoRegistry'\n        smis:\n          $ref: '#/components/schemas/SMISAccessInfoRegistry'\n        extra_attributes:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            array_id: 00002554321\n    StorageBackendRegistryUpdate:\n      anyOf:\n        - $ref: '#/components/schemas/RestAccessInfoUpdate'\n        - $ref: '#/components/schemas/SSHAccessInfoUpdate'\n        - $ref: '#/components/schemas/CLIAccessInfoUpdate'\n        - $ref: '#/components/schemas/SMISAccessInfoUpdate'\n      type: object\n      properties:\n        rest:\n          $ref: '#/components/schemas/RestAccessInfoUpdate'\n        ssh:\n          $ref: '#/components/schemas/SSHAccessInfoUpdate'\n        cli:\n          $ref: '#/components/schemas/CLIAccessInfoUpdate'\n        smis:\n          $ref: '#/components/schemas/SMISAccessInfoUpdate'\n        extra_attributes:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            controller1: string\n            ip1: string\n            shhKeyPath: string\n    StorageBackendResponse:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n          example: EMC-VMAX-123456\n        description:\n          type: string\n          example: VMAX storage lab1\n        vendor:\n          type: string\n          example: Dell EMC\n        model:\n          type: string\n          example: VMAX250F\n        status:\n          type: string\n          example: normal\n        firmware:\n          type: string\n          example: 5978.278\n        serial_number:\n          type: string\n          example: '0002004355'\n        location:\n          type: string\n        created_at:\n          type: string\n        updated_at:\n          type: string\n        sync_status:\n              type: string\n              enum:\n                - SYNCED\n                - SYNCING\n        total_capacity:\n          type: integer\n          format: int64\n        used_capacity:\n          type: integer\n          format: int64\n        free_capacity:\n          type: integer\n          format: int64\n    StorageAccessInfoResponse:\n      type: object\n      properties:\n        id:\n          type: string\n        rest:\n          $ref: '#/components/schemas/RestAccessInfoResponse'\n        ssh:\n          $ref: '#/components/schemas/SSHAccessInfoResponse'\n        cli:\n          $ref: '#/components/schemas/CLIAccessInfoResponse'\n        smis:\n          $ref: '#/components/schemas/SMISAccessInfoResponse'\n        vendor:\n          type: string\n          example: dellemc\n        model:\n          type: string\n          example: vmax\n        extra_attributes:\n          type: object\n          additionalProperties:\n            type: string\n          example:\n            array_id: string\n    StorageAccessInfosResponse:\n      description: Response for all access infos configuration.\n      type: object\n      properties:\n        access_infos:\n          type: array\n          description: the list of access info\n          items:\n            $ref: '#/components/schemas/StorageAccessInfoResponse'\n\n\n    StoragePoolSpec:\n      description: \u003e-\n        A storage pool is disocovered and updated by task manager Each pool can be\n        regarded as a physical storage pool or a virtual storage pool. It is a\n        logical and atomic pool and can be abstracted from any storage platform.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - required:\n            - id\n            - name\n          type: object\n          properties:\n            name:\n              type: string\n            id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_storage_pool_id:\n              type: string\n              readOnly: true\n              example: SRP_1\n            storage_type:\n              type: string\n              enum:\n                - block\n                - file\n                - unified\n            description:\n              type: string\n            status:\n              type: string\n              enum:\n                - normal\n                - offline\n                - abnormal\n            total_capacity:\n              type: integer\n              format: int64\n            used_capacity:\n              type: integer\n              format: int64\n            free_capacity:\n              type: integer\n              format: int64\n    ControllerSpec:\n      description: \u003e-\n        A controller is discovered and updated by task manager.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - required:\n            - id\n            - name\n          type: object\n          properties:\n            name:\n              type: string\n            id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_controller_id:\n              type: string\n              readOnly: true\n              example: Controller_A\n            soft_version:\n              type: string\n            location:\n              type: string\n            status:\n              type: string\n              enum:\n                - normal\n                - offline\n                - unknown\n            cpu_info:\n              type: string\n            memory_size:\n              type: integer\n              format: int64\n    PortSpec:\n      description: \u003e-\n        A port is discovered and updated by task manager.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - required:\n            - id\n            - name\n          type: object\n          properties:\n            name:\n              type: string\n            id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_port_id:\n              type: string\n              readOnly: true\n              example: Port_A\n            native_parent_id:\n              type: string\n              readOnly: true\n              example: Controller_A\n            speed:\n              type: integer\n            max_speed:\n              type: integer\n            location:\n              type: string\n            connection_status:\n              type: string\n              enum:\n                - connected\n                - disconnected\n                - unknown\n            health_status:\n              type: string\n              enum:\n                - normal\n                - abnormal\n                - unknown\n            type:\n              type: string\n              enum:\n                - fc\n                - iscsi\n                - ficon\n                - fcoe\n                - eth\n                - sas\n                - ib\n                - other\n            logical_type:\n              type: string\n              enum:\n                - frontend\n                - backend\n                - service\n                - management\n                - internal\n                - maintenance\n                - interconnect\n                - other\n            wwn:\n              type: string\n            mac_address:\n              type: string\n            ipv4:\n              type: string\n            ipv4_mask:\n              type: string\n            ipv6:\n              type: string\n            ipv6_mask:\n              type: string\n    DiskSpec:\n      description: \u003e-\n        A disk is discovered and updated by task manager.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - required:\n            - id\n            - name\n          type: object\n          properties:\n            name:\n              type: string\n            id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_disk_id:\n              type: string\n              readOnly: true\n              example: Disk_A\n            serial_number:\n              type: string\n              readOnly: true\n              example: SN00112233\n            manufacturer:\n              type: string\n            model:\n              type: string\n            firmware:\n              type: string\n            speed:\n              type: integer\n            capacity:\n              type: integer\n            location:\n              type: string\n            status:\n              type: string\n              enum:\n                - normal\n                - offline\n                - abnormal\n            physical_type:\n              type: string\n              enum:\n                - sata\n                - sas\n                - ssd\n                - nl-sas\n                - unknown\n            logical_type:\n              type: string\n              enum:\n                - free\n                - member\n                - hotspare\n                - cache\n            health_score:\n              type: integer\n            native_disk_group_id:\n              type: string\n    FilesystemSpec:\n      description: \u003e-\n        A filesystem is discovered and updated by task manager.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - required:\n            - id\n            - name\n          type: object\n          properties:\n            name:\n              type: string\n            id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_filesystem_id:\n              type: string\n              readOnly: true\n              example: Filesystem_A\n            native_pool_id:\n              type: string\n              readOnly: true\n              example: Pool_A\n            total_capacity:\n              type: integer\n            used_capacity:\n              type: integer\n            free_capacity:\n              type: integer\n            status:\n              type: string\n              enum:\n                - normal\n                - faulty\n            worm:\n              type: string\n              enum:\n                - non_worm\n                - audit_log\n                - compliance\n                - enterprise\n            type:\n              type: string\n              enum:\n                - thick\n                - thin\n            deduplicated:\n              type: boolean\n            compressed:\n              type: boolean\n            security_mode:\n              type: string\n              enum:\n                - mixed\n                - native\n                - ntfs\n                - unix\n    QtreeSpec:\n      description: \u003e-\n        A qtree is discovered and updated by task manager.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - required:\n            - id\n            - name\n          type: object\n          properties:\n            name:\n              type: string\n            id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_qtree_id:\n              type: string\n              readOnly: true\n              example: Qtree_A\n            native_filesystem_id:\n              type: string\n              readOnly: true\n              example: Filesystem_A\n            path:\n              type: string\n            security_mode:\n              type: string\n              enum:\n                - mixed\n                - native\n                - ntfs\n                - unix\n    QuotaSpec:\n      description: \u003e-\n        A quota is discovered and updated by task manager.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - required:\n            - id\n            - name\n            - type\n          type: object\n          properties:\n            id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_quota_id:\n              type: string\n              readOnly: true\n              example: Quota_A\n            name:\n              type: string\n            type:\n              type: string\n              enum:\n                - filesystem\n                - tree\n                - user\n                - group\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_filesystem_id:\n              type: string\n              readOnly: true\n              example: Filesystem_A\n            native_qtree_id:\n              type: string\n              readOnly: true\n              example: Qtree_A\n            capacity_hard_limit:\n              type: integer\n              format: int64\n              example: 100\n            capacity_soft_limit:\n              type: integer\n              format: int64\n              example: 80\n            file_hard_limit:\n              type: integer\n              format: int64\n              example: 10\n            file_soft_limit:\n              type: integer\n              format: int64\n              example: 8\n            used_capacity:\n              type: integer\n              format: int64\n              example: 100\n            file_count:\n              type: integer\n              format: int64\n              example: 10\n            user_group_name:\n              type: string\n    ShareSpec:\n      description: \u003e-\n        A share is discovered and updated by task manager.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - required:\n            - id\n            - name\n          type: object\n          properties:\n            name:\n              type: string\n            id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_share_id:\n              type: string\n              readOnly: true\n              example: Share_A\n            native_filesystem_id:\n              type: string\n              readOnly: true\n              example: Filesystem_A\n            native_qtree_id:\n              type: string\n            protocol:\n              type: string\n              enum:\n                - cifs\n                - nfs\n                - ftp\n                - hdfs\n            path:\n              type: string\n\n    VolumeRespSpec:\n      description:\n        Volume is an device created by storage service, it can be attached to\n        physical machine or virtual machine instance.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            name:\n              type: string\n            description:\n              type: string\n            status:\n              type: string\n              enum:\n                - available\n                - error\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            total_capacity:\n              type: integer\n              format: int64\n              example: 2\n            used_capacity:\n              type: integer\n              format: int64\n              example: 2\n            free_capacity:\n              type: integer\n              format: int64\n              example: 2\n            compressed:\n              type: boolean\n              example: false\n            deduplicated:\n              type: boolean\n              example: false\n            type :\n              type: string\n              enum:\n                - thick\n                - thin\n            native_volume_id:\n              type: string\n            wwn:\n              type: string\n            native_storage_pool_id:\n              type: string\n    SnmpConfigUpdateSpec:\n      required:\n        - host\n        - version\n      type: object\n      properties:\n        version:\n          type: string\n          description: SNMP version. Should be mandatorily set by user\n          example: SNMPV2C\n          enum:\n            - SNMPV2C\n            - SNMPV3\n        community_string:\n          type: string\n          description: Community string. This should be filled if version is V2C\n        username:\n          type: string\n          description: SNMP V3 usm username. This should be filled if version is V3\n        engine_id:\n          type: string\n          description: \u003e-\n            Engind ID of the device which will be sending the traps. This should\n            be filled if version is V3\n        security_level:\n          type: string\n          description: Security level for the user. This should be filled if version is V3\n          example: noAuthnoPriv\n          enum:\n            - noAuthnoPriv\n            - authNoPriv\n            - authPriv\n        auth_protocol:\n          type: string\n          description: \u003e-\n            Authentication protocol to be selected. This should be filled if\n            authNoPriv or authPriv is set as security_level\n          example: MD5\n          enum:\n            - MD5\n            - SHA\n        auth_key:\n          type: string\n          description: \u003e-\n            Authentication key. This should be filled if authNoPriv or authPriv\n            is set\n        privacy_protocol:\n          type: string\n          description: \u003e-\n            Privacy or encryption protocol to be selected. This should be filled\n            if authPriv is set as security_level\n          example: DES\n          enum:\n            - 3DES\n            - DES\n            - AES\n        privacy_key:\n          type: string\n          description: \u003e-\n            Privacy or encryption password. This should be filled if authPriv is\n            set as security_level\n        host:\n          type: string\n          example: 10.0.0.1\n        context_name:\n          type: string\n          description: Context name of the alert source\n          example: \"New Context\"\n        retry_num:\n          type: integer\n          description: \u003e-\n            Maximum number of retries while connecting to alert source\n            By default, set to 1\n          example: 2\n        expiration:\n          type: integer\n          description: \u003e-\n            Expiration time (in sec) for one alert source connect request\n            By default, set to 2\n          example: 60\n        port:\n          type: integer\n          description: \u003e-\n            Port for connecting to alert source\n            By default, set to 161\n          example: 20162\n      description: SNMP alert source configuration attributes.\n    SnmpConfigRespSpec:\n      description: Response for snmp alert source configuration.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            version:\n              type: string\n              description: SNMP version. Should be mandatorily set by user\n              example: SNMPV2C\n              enum:\n                - SNMPV2C\n                - SNMPV3\n            community_string:\n              type: string\n              description: Community string. This should be filled ig version is V2C\n            username:\n              type: string\n              description: SNMP V3 usm username. This should be filled ig version is V3\n            engine_id:\n              type: string\n              description: Engind ID of the device which will be sending the traps\n            security_level:\n              type: string\n              description: Security level for the user\n              example: noAuthnoPriv\n              enum:\n                - noAuthnoPriv\n                - authNoPriv\n                - authPriv\n            auth_protocol:\n              type: string\n              description: \u003e-\n                Authentication protocol to be selected. This should be filled if\n                authNoPriv or authPriv is set as security_level\n              example: MD5\n              enum:\n                - MD5\n                - SHA\n            auth_key:\n              type: string\n              description: \u003e-\n                Authentication key. This should be filled if authNoPriv or\n                authPriv is set\n            privacy_protocol:\n              type: string\n              description: \u003e-\n                Privacy or encryption protocol to be selected. This should be\n                filled if authPriv is set as security_level\n              example: DES\n              enum:\n                - 3DES\n                - DES\n                - AES\n            privacy_key:\n              type: string\n              description: \u003e-\n                Privacy or encryption password. This should be filled if\n                authPriv is set as security_level\n            host:\n              type: string\n              description: All alert source ips of the device\n              example: 10.0.0.1,127.0.0.1\n            context_name:\n              type: string\n              description: Context name of the alert source\n              example: \"New Context\"\n            retry_num:\n              type: integer\n              description: \u003e-\n                Maximum number of retries while connecting to alert source\n                By default, set to 1\n              example: 2\n            expiration:\n              type: integer\n              description: \u003e-\n                Expiration time (in sec) for one alert source connect request\n                By default, set to 2\n              example: 60\n            port:\n              type: integer\n              description: \u003e-\n                Port for connecting to alert source\n                By default, set to 161\n              example: 20162\n    SnmpConfigsRespSpec:\n      description: Response for all snmp alert source configuration.\n      type: object\n      properties:\n        snmp_configs:\n          type: array\n          description: the list of snmp configs\n          items:\n            $ref: '#/components/schemas/SnmpConfigRespSpec'\n    StorageHostInitiatorRespSpec:\n      description: \u003e-\n        Storage host initiator allows a host to gain access to the storage\n        array, It may or may not have been attached to storage host.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            name:\n              type: string\n            description:\n              type: string\n              readOnly: true\n              example: \"storage host initiator\"\n            alias:\n              type: string\n              readOnly: true\n              example: \"storage host initiator\"\n            wwn:\n              type: string\n              readOnly: true\n              example: \"storage host initiator1\"\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_storage_host_initiator_id:\n              type: string\n              readOnly: true\n              description: \u003e-\n                Actual ID of the storage host initiator in the storage backend.\n              example: storage_host_initiator_0\n            native_storage_host_id:\n              type: string\n              readOnly: true\n              description: Actual ID of the storage host in the storage backend.\n              example: storage_host_0\n            status:\n              type: string\n              readOnly: true\n              enum:\n                - normal\n                - offline\n                - abnormal\n                - unknown\n    StorageHostRespSpec:\n      description: \u003e-\n        Storage host is a consumer of volume from storage.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            name:\n              type: string\n            description:\n              type: string\n              readOnly: true\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_storage_host_id:\n              type: string\n              readOnly: true\n              description: Actual ID of the storage host in the storage backend.\n              example: storage_host_0\n            status:\n              type: string\n              readOnly: true\n              enum:\n                - normal\n                - offline\n                - abnormal\n                - unknown\n            ip_address:\n              type: string\n              readOnly: true\n              description: Ip address of the storage host.\n              example: \"192.168.1.4\"\n            os_type:\n              type: string\n              readOnly: true\n              description: Operating system of the storage host.\n              enum:\n                - windows\n                - linux\n            storage_host_initiators:\n              type: array\n              items:\n                type: string\n              readOnly: true\n              description: List of storage host initiator native ids.\n    StorageHostGroupRespSpec:\n      description: \u003e-\n        Storage host group is a consumer of volume from storage.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            name:\n              type: string\n            description:\n              type: string\n              readOnly: true\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_storage_host_group_id:\n              type: string\n              readOnly: true\n              description: Actual ID of the storage host group in the storage backend.\n              example: storage_host_group0\n            storage_hosts:\n              type: array\n              items:\n                type: string\n              readOnly: true\n              description: List of storage host native ids.\n    PortGroupRespSpec:\n      description: \u003e-\n        Port group is collection of ports from storage.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            name:\n              type: string\n            description:\n              type: string\n              readOnly: true\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_port_group_id:\n              type: string\n              readOnly: true\n              description: Actual ID of the port group in the storage backend.\n              example: port_group_0\n            ports:\n              type: array\n              items:\n                type: string\n              readOnly: true\n              description: List of ports native ids.\n    VolumeGroupRespSpec:\n      description: \u003e-\n        Volume group is collection of volumes from storage.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            name:\n              type: string\n            description:\n              type: string\n              readOnly: true\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_volume_group_id:\n              type: string\n              readOnly: true\n              description: Actual ID of the volume group in the storage backend.\n              example: volume_group_0\n            volumes:\n              type: array\n              items:\n                type: string\n              readOnly: true\n              description: List of volumes native ids.\n    MaskingViewRespSpec:\n      description: \u003e-\n        Masking view is and object which shows the path from host and lun.\n      allOf:\n        - $ref: '#/components/schemas/BaseModel'\n        - type: object\n          properties:\n            name:\n              type: string\n            description:\n              type: string\n              readOnly: true\n            storage_id:\n              type: string\n              readOnly: true\n              example: 084bf71e-a102-11e7-88a8-e31fe6d52248\n            native_masking_view_id:\n              type: string\n              readOnly: true\n              description: Actual ID of the masking view in the storage backend.\n              example: masking_view_0\n            native_storage_host_group_id:\n              type: string\n              readOnly: true\n              description: \u003e-\n                Actual ID of the storage host group in the storage backend.\n              example: storage_host_group_0\n            native_volume_group_id:\n              type: string\n              readOnly: true\n              description: Actual ID of the volume group in the storage backend.\n              example: volume_group_0\n            native_port_group_id:\n              type: string\n              readOnly: true\n              description: Actual ID of the port group in the storage backend.\n              example: port_group_0\n            native_storage_host_id:\n              type: string\n              readOnly: true\n              description: Actual ID of the storage host in the storage backend.\n              example: storage_host_0\n            native_volume_id:\n              type: string\n              readOnly: true\n              description: Actual ID of the volume in the storage backend.\n              example: volume_0\n            native_port_id:\n              type: string\n              readOnly: true\n              description: Actual ID of the port in the storage backend.\n              example: port_0\n    StorageBackendAlertSync:\n      type: object\n      properties:\n        begin_time:\n          type: integer\n          format: int64\n            Start time(in milliseconds) for alert sync. It is optional.\n            If not provided, alerts are fetched without filtering start time\n          example: 13577777777777766\n        end_time:\n          type: integer\n          format: int64\n          description: \u003e-\n            End time(in milliseconds) for alert sync. It is optional.\n            If not provided, alerts are fetched without filtering end time\n          example: 13577777777777777\n    ErrorSpec:\n      required:\n        - error_code\n        - error_msg\n        - error_args\n      type: object\n      properties:\n        error_code:\n          type: string\n        error_msg:\n          type: string\n        error_args:\n          type: array\n          items:\n            type: string\n      description: \u003e-\n        Detailed HTTP error response, which consists of a HTTP status code, and\n        a custom error message unique for each failure case.\n\n    StorageCapabilitiesResponse:\n      type: object\n      required:\n        - metadata\n        - spec\n      properties:\n        metadata:\n          type: object\n          properties:\n            model:\n              type: string\n              description: Name of the supported storage (driver)\n              example: VMAX250F\n            vendor:\n              type: string\n              description: Name of the vendor\n              example: Dell EMC\n        spec:\n          type: object\n          required:\n            - is_historic\n          properties:\n            is_historic:\n              type: boolean\n              example: true\n              description: Set true during storage driver registration if driver support fetching historic metrics. This enable internal performance framework to either call driver interface to pull real time metrics or historic time series metrics.\n            resource_metrics:\n              $ref: '#/components/schemas/ResourceMetrics'\n    ResourceMetrics:\n      type: object\n      description: Map of resources and supported metrics of respective resources for storage (driver)\n      additionalProperties:\n        type: array\n        items:\n          type: object\n          description: list of metrics with supported Units and its description\n          properties:\n            unit:\n              type: string\n              description: supported metric unit\n            description:\n              type: string\n              description: storage specific desctiption for respective metric\n      example:\n        storagePool:\n          - throughput:\n              unit: MB/s\n              description: Represents how much data is successfully transferred in MB/s\n          - readThroughput:\n              unit: MB/s\n              description: Represents how much data read is successfully transferred in MB/s\n          - readRequests:\n              unit: IOPS\n              description: Read requests per second\n  responses:\n    HTTPStatus400:\n      description: BadRequest\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorSpec'\n    HTTPStatus401:\n      description: NotAuthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorSpec'\n    HTTPStatus403:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorSpec'\n    HTTPStatus404:\n      description: The resource does not exist\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorSpec'\n    HTTPStatus409:\n      description: An item already exists\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorSpec'\n    HTTPStatus500:\n      description: An unexpected error occured.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorSpec'\n  parameters:\n    storage_id:\n      name: storage_id\n      in: path\n      description: Database ID created for a storage backend.\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n    native_storage_pool_id:\n      name: native_storage_pool_id\n      in: path\n      description: Actual ID of the storage pool in backend.\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n    native_volume_id:\n      name: native_volume_id\n      in: path\n      description: Actual ID of the volume in backend.\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.\n      required: false\n      style: form\n      explode: true\n      schema:\n        minimum: 1\n        type: integer\n        format: int32\n    offset:\n      name: offset\n      in: query\n      description: Used in conjunction with limit to return a slice of items. offset is where to start in the list.\n      required: false\n      style: form\n      explode: true\n      schema:\n        minimum: 0\n        type: integer\n        format: int32\n          - desc\n    sequence_number:\n      name: sequence_number\n      in: path\n      description: Sequence number which uniquely maps to the trap sent by a backend.\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n  requestBodies:\n    SnmpConfigUpdateSpec:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SnmpConfigUpdateSpec'\n    StorageBackendAlertSync:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/StorageBackendAlertSync'\n",
			"canonicalURL": "/github.com/sodafoundation/delfin@1422a007dc12987e93b6a006bcc41a704fa13f46/-/blob/openapi-spec/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/sodafoundation/delfin/blob/1422a007dc12987e93b6a006bcc41a704fa13f46/openapi-spec/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: path \"/v1/storages/{storage_id}/access-info\": put: requestBody: contents: application/json: generate schema: anyOf: complex anyOf not implemented",
	"NotImplemented": [
		"complex anyOf"
	]
}