{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/muxy/extensions-js"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "docs/api.yml",
			"byteSize": 22751,
			"content": "openapi: 3.0.2\ninfo:\n  title: Muxy's Extension Development Kit\n  version: \"1.0\"\n  termsOfService: https://muxy.io/terms\n\n  contact:\n    name: MEDKit Support\n    email: support@muxy.io\n\n  description: |\n    # Introduction\n    This document describes Muxy's Extension Development Kit (MEDKit) for\n    building powerful and reliable Twitch extensions.\n\n    Twitch extensions give developers an amazing opportunity to put interactive\n    elements in front of viewers in real-time, but building a backend that can\n    handle millions of requests an hour is not easy.\n\n    Muxy's extension backend has been built to withstand Twitch's viewer load\n    and provide convenient functionality that all extensions may need. It's\n    easy to get started and costs nothing to experiment.\n\n    See the complete dev site at [dev.muxy.io](https://dev.muxy.io) for more\n    information about Muxy and our extensions platform.\n\n    # Authentication\n    MEDKit takes an extension client ID and signed JWT combination as a bearer\n    token with each request. The access level and rights are determined by the\n    user information encoded into the JWTs.\n\n\n  x-logo:\n    url: \"https://muxy.io/wp-content/themes/muxy-wp-theme/img/logo.png\"\n    altText: MEDKit Logo\n\nservers:\n  - url: https://sandbox.api.muxy.io/v1/e\n    description: Sandbox Development Server\n  - url: https://api.muxy.io/v1/e\n    description: Production Server\n\ntags:\n  - name: Testing\n    description: Endpoints for use in testing extensions\n  - name: Extension State\n    description: Storing and retrieving arbitrary data for viewers\n  - name: Admin Extension State\n    description: Admin-only level state endpoints\n  - name: Accumulate\n    description: |\n      Accumulate allows viewers to send arbitrary data to the server, which may later\n      be accessed by the broadcaster and/or extension admin.\n\nx-tagGroups:\n  - name: General\n    tags:\n      - Testing\n  - name: State Store\n    tags:\n      - Extension State\n      - Admin Extension State\n  - name: Accumulate\n    tags:\n      - Accumulate\n\ncomponents:\n  securitySchemes:\n    viewerJWT:\n      description: Any viewer-level or greater signed JWT\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            console.log()\n\n    broadcasterJWT:\n      description: A broadcaster-level or greater signed JWT\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n    adminJWT:\n      description: An admin or backend-level signed JWT\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n  schemas:\n    JWT:\n      type: string\n\n    FakeJWTRequest:\n      type: object\n      properties:\n        extension_id:\n          description: The Extension Client ID provided by Twitch\n          type: string\n        channel_id:\n          description: The Twitch Channel ID the extension is installed and activated one\n          type: string\n        role:\n          description: The access level of the extension user. One of ('viewer', 'broadcaster', 'admin')\n          type: string\n        user_id:\n          description: The Twitch User ID of the user of the extension. May be the same as the Channel ID\n          type: string\n        user_ids:\n          description:\n            One or more Twitch User IDs. If provided, the response will contain an array of\n            tokens, one for each User ID provided.\n          type: string\n\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n\npaths:\n  ## Testing\n  /authtoken:\n    post:\n      tags:\n        - Testing\n      summary: Get Testing Auth Token\n      description:\n        Creates one or more authentication tokens, suitable for testing. This endpoint is\n        only available on the Sandbox Development server.\n\n      requestBody:\n        description: Testing values describing the simulated Twitch environment.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                extension_id:\n                  description: The Extension Client ID provided by Twitch\n                  type: string\n                channel_id:\n                  description: The Twitch Channel ID the extension is installed and activated one\n                  type: string\n                role:\n                  description: The access level of the extension user. One of ('viewer', 'broadcaster', 'admin')\n                  type: string\n                user_id:\n                  description: The Twitch User ID of the user of the extension. May be the same as the Channel ID\n                  type: string\n                user_ids:\n                  description:\n                    One or more Twitch User IDs. If provided, the response will contain an array of\n                    tokens, one for each User ID provided.\n                  type: string\n            example:\n              extension_id: iu4qc791nxpovyd3m49zskfymab8gp\n              channel_id: 126955211\n              user_id: 126955211\n              role: viewer\n\n      responses:\n        \"200\":\n          description: One or more valid testing JWTs.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - type: object\n                    properties:\n                      token:\n                        type: string\n                  - type: object\n                    properties:\n                      tokens:\n                        type: array\n                        items:\n                          type: string\n        \"404\":\n          description: \"Attempted to retrieve a testing JWT on production.\"\n\n  ## State\n  /all_state:\n    get:\n      tags:\n        - Extension State\n      security:\n        - viewerJWT: []\n\n      summary: Get All State\n      description:\n        Returns a single JSON object with fields for the current\n        viewer/channel combination.\n      responses:\n        \"200\":\n          description: All types of state for the current viewer.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  extension:\n                    type: object\n                    description: State for all viewers and channels for this extension.\n                  channel:\n                    type: object\n                    description: State for all viewers on this channel.\n                  viewer:\n                    type: object\n                    description: State for this viewer on this channel.\n                  extension_viewer:\n                    type: object\n                    description: State for this viewer on any channel using this extension.\n                example:\n                  extension: { \"extension_name\": \"Awesome Extension\" }\n                  channel: { \"channel_color\": \"royalpurple\" }\n                  viewer: { \"last_broadcaster_request\": \"sing a song\" }\n                  extension_viewer: { \"accumulated_points\": 123456 }\n\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            sdk.getAllState().then((state) =\u003e {\n              if (state.channel.broadcasters_mood) {\n                console.log(`Broadcaster set their mood as: ${state.channel.broadcasters_mood}`);\n              }\n              if (state.viewer.favorite_movie) {\n                console.log(`But your favorite movie is: ${state.viewer.favorite_movie}`);\n              }\n            });\n\n  /extension_state:\n    get:\n      tags:\n        - Extension State\n      security:\n        - viewerJWT: []\n\n      summary: Get Extension State\n      description:\n        Returns a JSON object of the extension's state. This is global for all\n        viewers on all channels.\n      responses:\n        \"200\":\n          description: The extension's state.\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Any JSON serializable data\n\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            sdk.getExtensionState().then((state) =\u003e {});\n\n    post:\n      tags:\n        - Extension State\n      security:\n        - adminJWT: []\n\n      summary: Set Extension State\n      description: Sets the extension's state. This is global for all viewers on all channels.\n      responses:\n        \"200\":\n          description: Extension state updated\n        \"400\":\n          description: JSON data was not able to be parsed\n\n    x-code-samples:\n        - lang: JavaScript\n          source: |\n            sdk.setExtensionState({\n              favorite_movie: 'Jaws: The Revenge'\n            }).then(() =\u003e {\n              console.log('Extension state saved!');\n            }).catch((err) =\u003e {\n              console.error(`Failed saving viewer state: ${err}`);\n            });\n\n  /channel_state:\n    get:\n      tags:\n        - Extension State\n      security:\n        - viewerJWT: []\n\n      summary: Get Channel State\n      description:\n        Returns a JSON object of the channels's state. This is the same for all\n        viewers on the current channel.\n      responses:\n        \"200\":\n          description: The channel's state.\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Any JSON serializable data\n\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            sdk.getChannelState().then((state) =\u003e {});\n\n\n    post:\n      tags:\n        - Extension State\n      security:\n        - broadcasterJWT: []\n\n      summary: Set Channel State\n      description:\n        Sets the channel's state. This is the same for all viewers on\n        the current channel.\n      responses:\n        \"200\":\n          description: Channel state updated\n        \"400\":\n          description: JSON data was not able to be parsed\n\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            sdk.setChannelState({\n              broadcasters_mood: 'sanguine, my brother',\n              chats_mood: 'kreygasm'\n            }).then(() =\u003e {\n              // Let viewers know that new channel state is available.\n            }).catch((err) =\u003e {\n              console.error(`Failed saving channel state: ${err}`);\n            });\n\n\n  /viewer_state:\n    get:\n      tags:\n        - Extension State\n      security:\n        - viewerJWT: []\n\n      summary: Get Viewer State\n      description: Returns a JSON object of the viewer state for the current\n        channel set by the extension.\n      responses:\n        \"200\":\n          description: The viewer's extension state.\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Any JSON serializable data\n\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            sdk.getViewerState().then((state) =\u003e {});\n\n    post:\n      tags:\n        - Extension State\n      security:\n        - viewerJWT: []\n\n      summary: Set Viewer State\n      description: Sets the viewer state for the extension/channel combination.\n      responses:\n        \"200\":\n          description: Viewer state updated\n        \"400\":\n          description: JSON data was not able to be parsed\n\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            sdk.setViewerState({\n              favorite_movie: 'Jaws: The Revenge'\n            }).then(() =\u003e {\n              console.log('Viewer state saved!');\n            }).catch((err) =\u003e {\n              console.error(`Failed saving viewer state: ${err}`);\n            });\n\n  /extension_viewer_state:\n    get:\n      tags:\n        - Admin Extension State\n      security:\n        - viewerJWT: []\n        - adminJWT: []\n\n      summary: Get Extension-wide Viewer State\n      description: |\n        If the request includes a query parameter list of Twitch user IDs and the\n        requesting JWT auth token is admin-level, returns a mapping of those user\n        IDs to their extension-side viewer state, removing any that are not found.\n\n        If no list of IDs is provided and the JWT auth token is viewer-level,\n        returns a JSON object of the viewer's extension-wide state. This is\n        associated with the current viewer, but across all channels.\n\n      parameters:\n        - in: query\n          name: user_ids\n          required: false\n          style: form\n          schema:\n            type: array\n            description:\n              Optional comma-separated list of Twitch user IDs.\n\n      responses:\n        \"200\":\n          description:\n            One or more viewer state objects depending on request.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - type: object\n                    required:\n                      - user_ids\n                    description: Any JSON serializable data\n                    example:\n                      { \"hello\": \"world\" }\n                  - type: object\n                    description: A mapping of user IDs to viewer extension state\n                discriminator:\n                  propertyName: user_ids\n\n      x-code-samples:\n        - lang: JavaScript\n          label: JavaScript (Viewer)\n          source: |\n            sdk.getExtensionViewerState().then((state) =\u003e {});\n        - lang: JavaScript\n          label: JavaScript (Admin)\n          source: |\n            sdk.multiGetExtensionViewerState([\"valid-viewer-id\", \"invalid-viewer-id\"]).then((viewers) =\u003e {\n              console.log(users[\"valid-viewer-id\"]) // Prints that viewer's extension state\n              console.log(users[\"valid-viewer-id\"]) // Prints \"undefined\"\n            });\n\n    post:\n      tags:\n        - Admin Extension State\n      security:\n        - adminJWT: []\n\n      summary: Set Extension-wide Viewer State\n      description:\n        Sets the viewer state for the entire extension. This is associated with\n        the current viewer, but across all channels.\n      responses:\n        \"200\":\n          description: Viewer state updated\n        \"400\":\n          description: JSON data was not able to be parsed\n\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            sdk.setExtensionViewerState({\n              favorite_movie: 'Jaws: The Revenge'\n            }).then(() =\u003e {\n              console.log('Viewer state saved!');\n            }).catch((err) =\u003e {\n              console.error(`Failed saving viewer state: ${err}`);\n            });\n\n    patch:\n      tags:\n        - Admin Extension State\n      security:\n        - adminJWT: []\n\n      summary: Set Extension-wide Viewer State for Multiple Viewers\n      description: |\n        Allows an admin-level user to set extension-wide viewer state for\n        multiple viewers in a single request.\n\n        Limited to updating 1000 viewers per-call.\n\n      requestBody:\n        description:\n          A JSON object containing a mapping of viewer IDs to patch objects. The viewer\n          ID may either be the opaque or Twitch ID of the viewer. The patch object may\n          be an array of JSONPatch (http://jsonpatch.com/) operations, or a simple JSON\n          object that will be merged with the existing state.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                \u003cviewer id\u003e:\n                  description: An array of JSONPatch operations or a new state object.\n                  oneOf:\n                  - type: array\n                  - type: object\n            example:\n              12345: [\n                { \"op\": \"replace\", \"path\": \"/baz\", \"value\": \"boo\" },\n                { \"op\": \"add\", \"path\": \"/hello\", \"value\": [\"world\"] },\n                { \"op\": \"remove\", \"path\": \"/foo\" }\n              ]\n              67890: {\n                \"baz\": \"boo\",\n                \"hello\": [\"world\"]\n              }\n\n      responses:\n        \"200\":\n          description: State for all viewers updated\n        \"400\":\n          description: State updates were unparsable for one or more viewers\n\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            sdk.patchExtensionViewerState({\n              \"12452\": { \"hello\": \"world\" },\n              \"12422\": { \"foo\": \"bar\" }\n            });\n\n  /extension_hidden_state:\n    get:\n      tags:\n        - Admin Extension State\n      security:\n        - adminJWT: []\n\n      summary: Get Secret Extension State\n      description:\n        Returns a JSON object of the secret extension state. This is only reachable by\n        an admin or backend signed JWT.\n      responses:\n        \"200\":\n          description: The secret extension state.\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Any JSON serializable data\n\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            sdk.getExtensionSecretState().then((state) =\u003e {});\n\n    post:\n      tags:\n        - Admin Extension State\n      security:\n        - adminJWT: []\n\n      summary: Set Secret Extension State\n      description: Sets the secret extension state.\n      responses:\n        \"200\":\n          description: Secret state updated\n        \"400\":\n          description: JSON data was not able to be parsed\n\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            sdk.setExtensionSecretState({\n              favorite_movie: 'Twilight: New Moon'\n            }).then(() =\u003e {\n              console.log('Extension secrets saved!');\n            }).catch((err) =\u003e {\n              console.error(`Failed saving secret state: ${err}`);\n            });\n\n  ## Accumulate\n  /accumulate:\n    get:\n      tags:\n        - Accumulate\n      security:\n        - broadcasterJWT: []\n\n      summary: Get Accumulation Data\n      description: |\n        Returns a JSON object of accumulated viewer data for a given ID. This is only\n        reachable by a broadcaster or admin signed JWTs.\n\n        If the JWT is signed by a broadcaster, only viewer data for the broadcaster's channel\n        will be returned. An admin-signed JWT will return data for all channels.\n\n        The **start** parameter is required.\n\n        Accumulation data expires after one hour.\n\n      parameters:\n        - in: query\n          name: id\n          schema:\n            type: string\n          description: The data set ID to return.\n        - in: query\n          name: start\n          schema:\n            type: string\n          description:\n            A UNIX timestamp in milliseconds representing the earliest viewer data entry\n            to include in the response.\n\n      responses:\n        \"200\":\n          description: The accumulated viewer data.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  latest:\n                    type: string\n                    description: |\n                      A UNIX timestamp (in milliseconds) of the most recently received viewer data.\n                  data:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        observed:\n                          type: integer\n                          description: A UNIX timestamp (in milliseconds) of when this data object was received.\n                        channel_id:\n                          type: string\n                          description: The Twitch ID of the channel on which this data object was received.\n                        opaque_user_id:\n                          type: string\n                          description: The Opaque User ID of the viewer that submitted this data object.\n                        user_id:\n                          type: string\n                          description: The unique user ID of the viewer that submitted this data object (if available).\n                        data:\n                          type: object\n                          additionalProperties: {}\n              example:\n                latest: 1572290039000\n                data:\n                  - observed: 1572290039000\n                    channel_id: 123456\n                    opaque_user_id: O444444\n                    user_id: U444444\n                    data:\n                      choice_selected: \"yes\"\n                      favorite_color: \"blue\"\n                  - observed: 1572290032000\n                    channel_id: 123456\n                    opaque_user_id: O555555\n                    user_id: U555555\n                    data:\n                      choice_selected: \"yes\"\n                      favorite_color: \"red\"\n\n      x-code-samples:\n        - lang: cURL\n          source: |\n            curl \\\n              -X GET \\\n              -H \"Authorization: \u003cext id\u003e \u003cjwt\u003e\" \\\n              https://api.muxy.io/v1/e/accumulate?id=viewer-data\u0026start=1572290039000\n\n        - lang: JavaScript\n          source: |\n            const oneMinuteAgo = (new Date().getTime()) - (1000 * 60);\n            const resp = await sdk.getAccumulation('viewer-data', oneMinuteAgo);\n            console.log(`${resp.data.length}: ${resp.latest}`);\n            console.log(resp.data); // A list of all accumulate values since `oneMinuteAgo`.\n\n    post:\n      tags:\n        - Accumulate\n      security:\n        - viewerJWT: []\n\n      summary: Add Viewer Data to Accumulation\n      description:\n        Sends an accumulation data set to the server for the current viewer/channel combination.\n\n      parameters:\n        - in: query\n          name: id\n          schema:\n            type: string\n          description: The set ID this data belongs to.\n\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: {}\n            example:\n              choice_selected: \"yes\"\n              favorite_color: \"blue\"\n\n      responses:\n        \"400\":\n          description: Invalid JSON data submitted by viewer.\n        \"200\":\n          description: Viewer data submitted successfully.\n\n      x-code-samples:\n        - lang: cURL\n          source: |\n            curl \\\n              -X POST \\\n              -H \"Authorization: \u003cext id\u003e \u003cjwt\u003e\" \\\n              -H \"Content-Type: application/json\" \\\n              -d '{ \"choice_selected\": \"yes\", \"favorite_color\": \"blue\" }'\n              https://api.muxy.io/v1/e/accumulate?id=viewer-data\n\n        - lang: JavaScript\n          source: |\n            sdk.accumulate('viewer-data', {\n              choice_selected: 'yes',\n              favorite_color: 'blue'\n            });\n",
			"canonicalURL": "/github.com/muxy/extensions-js@645ca9584855ec87ebfbf4ee046f1fc8c802d73e/-/blob/docs/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/muxy/extensions-js/blob/645ca9584855ec87ebfbf4ee046f1fc8c802d73e/docs/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "notImplemented: \"user_ids\": any type parameter not implemented",
	"NotImplemented": [
		"any type parameter"
	]
}