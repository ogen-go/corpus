{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rekabhq/fantom"
		},
		"file": {
			"name": "petstore.openapi-3.1.yaml",
			"size": 0,
			"path": "openapi_files/petstore.openapi-3.1.yaml",
			"byteSize": 22345,
			"content": "openapi: 3.1.0\r\ninfo:\r\n  title: Swagger Petstore\r\n  description: \u003e\r\n    This is a sample Petstore server.  You can find\r\n\r\n    out more about Swagger at\r\n\r\n    [http://swagger.io](http://swagger.io) or on\r\n\r\n    [irc.freenode.net, #swagger](http://swagger.io/irc/).\r\n  contact:\r\n    email: apiteam@swagger.io\r\n  version: '1.0.0'\r\njsonSchemaDialect: https://json-schema.org/draft/2020-12/schema\r\nservers:\r\n- url: https://virtserver.swaggerhub.com/hpoul/Example/1.0.0\r\n  description: SwaggerHub API Auto Mocking\r\n  variables: {}\r\n- url: https://petstore.swagger.io/v2\r\n  variables: {}\r\npaths:\r\n  /pet:\r\n    post:\r\n      tags:\r\n      - pet\r\n      summary: addPet\r\n      description: Add a new pet to the store\r\n      operationId: addPet\r\n      parameters: []\r\n      requestBody:\r\n        description: Pet object that needs to be added to the store\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Pet'\r\n        required: true\r\n      responses:\r\n        '405':\r\n          description: Invalid input\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    put:\r\n      tags:\r\n      - pet\r\n      summary: updatePet\r\n      description: Update an existing pet\r\n      operationId: updatePet\r\n      parameters: []\r\n      requestBody:\r\n        description: Pet object that needs to be added to the store\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Pet'\r\n        required: true\r\n      responses:\r\n        '400':\r\n          description: Invalid ID supplied\r\n          headers: {}\r\n          content: {}\r\n        '404':\r\n          description: Pet not found\r\n          headers: {}\r\n          content: {}\r\n        '405':\r\n          description: Validation exception\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    parameters: []\r\n  /pet/findByStatus:\r\n    get:\r\n      tags:\r\n      - pet\r\n      summary: findPetsByStatus\r\n      description: Multiple status values can be provided with comma separated strings\r\n      operationId: findPetsByStatus\r\n      parameters:\r\n      - name: status\r\n        in: query\r\n        description: Status values that need to be considered for filter\r\n        required: true\r\n        style: form\r\n        explode: true\r\n        schema:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/status2'\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Pet'\r\n                description: ''\r\n                contentMediaType: application/json\r\n            application/xml:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Pet'\r\n                description: ''\r\n                xml:\r\n                  attribute: false\r\n                  wrapped: false\r\n                contentMediaType: application/xml\r\n        '400':\r\n          description: Invalid status value\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    parameters: []\r\n  /pet/findByTags:\r\n    get:\r\n      tags:\r\n      - pet\r\n      summary: findPetsByTags\r\n      description: Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.\r\n      operationId: findPetsByTags\r\n      parameters:\r\n      - name: tags\r\n        in: query\r\n        description: Tags to filter by\r\n        required: true\r\n        style: form\r\n        explode: true\r\n        schema:\r\n          type: array\r\n          items:\r\n            type: string\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Pet'\r\n                description: ''\r\n                contentMediaType: application/json\r\n            application/xml:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  $ref: '#/components/schemas/Pet'\r\n                description: ''\r\n                xml:\r\n                  attribute: false\r\n                  wrapped: false\r\n                contentMediaType: application/xml\r\n        '400':\r\n          description: Invalid tag value\r\n          headers: {}\r\n          content: {}\r\n      deprecated: true\r\n    parameters: []\r\n  /pet/{petId}:\r\n    get:\r\n      tags:\r\n      - pet\r\n      summary: getPetById\r\n      description: Returns a single pet\r\n      operationId: getPetById\r\n      parameters:\r\n      - name: petId\r\n        in: path\r\n        description: ID of pet to return\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: integer\r\n          contentEncoding: int64\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Pet'\r\n            application/xml:\r\n              schema:\r\n                $ref: '#/components/schemas/Pet'\r\n        '400':\r\n          description: Invalid ID supplied\r\n          headers: {}\r\n          content: {}\r\n        '404':\r\n          description: Pet not found\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    post:\r\n      tags:\r\n      - pet\r\n      summary: updatePetWithForm\r\n      description: Updates a pet in the store with form data\r\n      operationId: updatePetWithForm\r\n      parameters:\r\n      - name: petId\r\n        in: path\r\n        description: ID of pet that needs to be updated\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: integer\r\n          contentEncoding: int64\r\n      requestBody:\r\n        content:\r\n          application/x-www-form-urlencoded:\r\n            encoding: {}\r\n            schema:\r\n              type: object\r\n              properties:\r\n                name:\r\n                  type: string\r\n                  description: Updated name of the pet\r\n                status:\r\n                  type: string\r\n                  description: Updated status of the pet\r\n              contentMediaType: application/x-www-form-urlencoded\r\n        required: false\r\n      responses:\r\n        '405':\r\n          description: Invalid input\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    delete:\r\n      tags:\r\n      - pet\r\n      summary: deletePet\r\n      description: Deletes a pet\r\n      operationId: deletePet\r\n      parameters:\r\n      - name: api_key\r\n        in: header\r\n        description: ''\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      - name: petId\r\n        in: path\r\n        description: Pet id to delete\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: integer\r\n          contentEncoding: int64\r\n      responses:\r\n        '400':\r\n          description: Invalid ID supplied\r\n          headers: {}\r\n          content: {}\r\n        '404':\r\n          description: Pet not found\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    parameters: []\r\n  /pet/{petId}/uploadImage:\r\n    post:\r\n      tags:\r\n      - pet\r\n      summary: uploadFile\r\n      description: uploads an image\r\n      operationId: uploadFile\r\n      parameters:\r\n      - name: petId\r\n        in: path\r\n        description: ID of pet to update\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: integer\r\n          contentEncoding: int64\r\n      requestBody:\r\n        content:\r\n          multipart/form-data:\r\n            encoding: {}\r\n            schema:\r\n              type: object\r\n              properties:\r\n                body:\r\n                  type: string\r\n                  contentEncoding: base64\r\n              contentMediaType: multipart/form-data\r\n        required: false\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ApiResponse'\r\n      deprecated: false\r\n    parameters: []\r\n  /store/inventory:\r\n    get:\r\n      tags:\r\n      - store\r\n      summary: getInventory\r\n      description: Returns a map of status codes to quantities\r\n      operationId: getInventory\r\n      parameters: []\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                additionalProperties:\r\n                  type: integer\r\n                  format: int32\r\n                contentMediaType: application/json\r\n      deprecated: false\r\n    parameters: []\r\n  /store/order:\r\n    post:\r\n      tags:\r\n      - store\r\n      summary: placeOrder\r\n      description: Place an order for a pet\r\n      operationId: placeOrder\r\n      parameters: []\r\n      requestBody:\r\n        description: order placed for purchasing the pet\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Order'\r\n        required: true\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Order'\r\n            application/xml:\r\n              schema:\r\n                $ref: '#/components/schemas/Order'\r\n        '400':\r\n          description: Invalid Order\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    parameters: []\r\n  /store/order/{orderId}:\r\n    get:\r\n      tags:\r\n      - store\r\n      summary: getOrderById\r\n      description: For valid response try integer IDs with value \u003e= 1 and \u003c= 10.\\ \\ Other values will generated exceptions\r\n      operationId: getOrderById\r\n      parameters:\r\n      - name: orderId\r\n        in: path\r\n        description: ID of pet that needs to be fetched\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          maximum: 10\r\n          minimum: 1\r\n          type: integer\r\n          contentEncoding: int64\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/Order'\r\n            application/xml:\r\n              schema:\r\n                $ref: '#/components/schemas/Order'\r\n        '400':\r\n          description: Invalid ID supplied\r\n          headers: {}\r\n          content: {}\r\n        '404':\r\n          description: Order not found\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    delete:\r\n      tags:\r\n      - store\r\n      summary: deleteOrder\r\n      description: For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors\r\n      operationId: deleteOrder\r\n      parameters:\r\n      - name: orderId\r\n        in: path\r\n        description: ID of the order that needs to be deleted\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          minimum: 1\r\n          type: integer\r\n          contentEncoding: int64\r\n      responses:\r\n        '400':\r\n          description: Invalid ID supplied\r\n          headers: {}\r\n          content: {}\r\n        '404':\r\n          description: Order not found\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    parameters: []\r\n  /user:\r\n    post:\r\n      tags:\r\n      - user\r\n      summary: createUser\r\n      description: This can only be done by the logged in user.\r\n      operationId: createUser\r\n      parameters: []\r\n      requestBody:\r\n        description: Created user object\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/User'\r\n        required: true\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    parameters: []\r\n  /user/createWithArray:\r\n    post:\r\n      tags:\r\n      - user\r\n      summary: createUsersWithArrayInput\r\n      description: Creates list of users with given input array\r\n      operationId: createUsersWithArrayInput\r\n      parameters: []\r\n      requestBody:\r\n        description: List of user object\r\n        content:\r\n          application/json:\r\n            schema:\r\n              type: array\r\n              items:\r\n                $ref: '#/components/schemas/User'\r\n              description: List of user object\r\n              contentMediaType: application/json\r\n        required: true\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    parameters: []\r\n  /user/createWithList:\r\n    post:\r\n      tags:\r\n      - user\r\n      summary: createUsersWithListInput\r\n      description: Creates list of users with given input array\r\n      operationId: createUsersWithListInput\r\n      parameters: []\r\n      requestBody:\r\n        description: List of user object\r\n        content:\r\n          application/json:\r\n            schema:\r\n              type: array\r\n              items:\r\n                $ref: '#/components/schemas/User'\r\n              description: List of user object\r\n              contentMediaType: application/json\r\n        required: true\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    parameters: []\r\n  /user/login:\r\n    get:\r\n      tags:\r\n      - user\r\n      summary: loginUser\r\n      description: Logs user into the system\r\n      operationId: loginUser\r\n      parameters:\r\n      - name: username\r\n        in: query\r\n        description: The user name for login\r\n        required: true\r\n        style: form\r\n        explode: true\r\n        schema:\r\n          type: string\r\n      - name: password\r\n        in: query\r\n        description: The password for login in clear text\r\n        required: true\r\n        style: form\r\n        explode: true\r\n        schema:\r\n          type: string\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers:\r\n            X-Rate-Limit:\r\n              description: calls per hour allowed by the user\r\n              content:\r\n                text/plain:\r\n                  schema:\r\n                    type: string\r\n                    description: calls per hour allowed by the user\r\n                    contentMediaType: text/plain\r\n            X-Expires-After:\r\n              description: date in UTC when token expires\r\n              content:\r\n                text/plain:\r\n                  schema:\r\n                    type: string\r\n                    description: date in UTC when token expires\r\n                    contentMediaType: text/plain\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: string\r\n                contentMediaType: application/json\r\n            application/xml:\r\n              schema:\r\n                type: string\r\n                xml:\r\n                  name: response200\r\n                  attribute: false\r\n                  wrapped: false\r\n                contentMediaType: application/xml\r\n        '400':\r\n          description: Invalid username/password supplied\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    parameters: []\r\n  /user/logout:\r\n    get:\r\n      tags:\r\n      - user\r\n      summary: logoutUser\r\n      description: Logs out current logged in user session\r\n      operationId: logoutUser\r\n      parameters: []\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    parameters: []\r\n  /user/{username}:\r\n    get:\r\n      tags:\r\n      - user\r\n      summary: getUserByName\r\n      description: Get user by user name\r\n      operationId: getUserByName\r\n      parameters:\r\n      - name: username\r\n        in: path\r\n        description: The name that needs to be fetched. Use user1 for testing.\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          headers: {}\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n            application/xml:\r\n              schema:\r\n                $ref: '#/components/schemas/User'\r\n        '400':\r\n          description: Invalid username supplied\r\n          headers: {}\r\n          content: {}\r\n        '404':\r\n          description: User not found\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    put:\r\n      tags:\r\n      - user\r\n      summary: updateUser\r\n      description: This can only be done by the logged in user.\r\n      operationId: updateUser\r\n      parameters:\r\n      - name: username\r\n        in: path\r\n        description: name that need to be updated\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      requestBody:\r\n        description: Updated user object\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/User'\r\n        required: true\r\n      responses:\r\n        '400':\r\n          description: Invalid user supplied\r\n          headers: {}\r\n          content: {}\r\n        '404':\r\n          description: User not found\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    delete:\r\n      tags:\r\n      - user\r\n      summary: deleteUser\r\n      description: This can only be done by the logged in user.\r\n      operationId: deleteUser\r\n      parameters:\r\n      - name: username\r\n        in: path\r\n        description: The name that needs to be deleted\r\n        required: true\r\n        style: simple\r\n        schema:\r\n          type: string\r\n      responses:\r\n        '400':\r\n          description: Invalid username supplied\r\n          headers: {}\r\n          content: {}\r\n        '404':\r\n          description: User not found\r\n          headers: {}\r\n          content: {}\r\n      deprecated: false\r\n    parameters: []\r\ncomponents:\r\n  schemas:\r\n    Order:\r\n      title: Order\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n          contentEncoding: int64\r\n        petId:\r\n          type: integer\r\n          contentEncoding: int64\r\n        quantity:\r\n          type: integer\r\n          contentEncoding: int32\r\n        shipDate:\r\n          type: string\r\n          contentEncoding: date-time\r\n        status:\r\n          $ref: '#/components/schemas/Status'\r\n        complete:\r\n          type: boolean\r\n          default: false\r\n      xml:\r\n        name: Order\r\n        attribute: false\r\n        wrapped: false\r\n    Category:\r\n      title: Category\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n          contentEncoding: int64\r\n        name:\r\n          type: string\r\n      xml:\r\n        name: Category\r\n        attribute: false\r\n        wrapped: false\r\n    User:\r\n      title: User\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n          contentEncoding: int64\r\n        username:\r\n          type: string\r\n        firstName:\r\n          type: string\r\n        lastName:\r\n          type: string\r\n        email:\r\n          type: string\r\n        password:\r\n          type: string\r\n        phone:\r\n          type: string\r\n        userStatus:\r\n          type: integer\r\n          description: User Status\r\n          contentEncoding: int32\r\n      xml:\r\n        name: User\r\n        attribute: false\r\n        wrapped: false\r\n    Tag:\r\n      title: Tag\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n          contentEncoding: int64\r\n        name:\r\n          type: string\r\n      xml:\r\n        name: Tag\r\n        attribute: false\r\n        wrapped: false\r\n    Pet:\r\n      title: Pet\r\n      required:\r\n      - name\r\n      - photoUrls\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n          contentEncoding: int64\r\n        category:\r\n          $ref: '#/components/schemas/Category'\r\n        name:\r\n          type: string\r\n        photoUrls:\r\n          type: array\r\n          items:\r\n            type: string\r\n          description: ''\r\n          xml:\r\n            name: photoUrl\r\n            attribute: false\r\n            wrapped: true\r\n        tags:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/Tag'\r\n          description: ''\r\n          xml:\r\n            name: tag\r\n            attribute: false\r\n            wrapped: true\r\n        status:\r\n          $ref: '#/components/schemas/Status1'\r\n      xml:\r\n        name: Pet\r\n        attribute: false\r\n        wrapped: false\r\n    ApiResponse:\r\n      title: ApiResponse\r\n      type: object\r\n      properties:\r\n        code:\r\n          type: integer\r\n          contentEncoding: int32\r\n        type:\r\n          type: string\r\n        message:\r\n          type: string\r\n    Status:\r\n      title: Status\r\n      enum:\r\n      - placed\r\n      - approved\r\n      - delivered\r\n      type: string\r\n      description: Order Status\r\n      examples:\r\n      - placed\r\n    Status1:\r\n      title: Status1\r\n      enum:\r\n      - available\r\n      - pending\r\n      - sold\r\n      type: string\r\n      description: pet status in the store\r\n      examples:\r\n      - available\r\n    status2:\r\n      title: status2\r\n      enum:\r\n      - available\r\n      - pending\r\n      - sold\r\n      type: string\r\n      examples:\r\n      - available\r\ntags:\r\n- name: pet\r\n  description: Everything about your Pets\r\n  externalDocs:\r\n    description: Find out more\r\n    url: http://swagger.io\r\n- name: store\r\n  description: Access to Petstore orders\r\n- name: user\r\n  description: Operations about user\r\n  externalDocs:\r\n    description: Find out more about our store\r\n    url: http://swagger.io\r\nexternalDocs:\r\n  description: Find out more about Swagger\r\n  url: http://swagger.io\r\n"
		}
	},
	"Error": "panic: runtime error: invalid memory address or nil pointer dereference"
}