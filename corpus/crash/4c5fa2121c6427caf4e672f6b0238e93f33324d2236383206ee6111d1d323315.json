{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/ably.net/control/1.0.14/openapi.yaml",
			"byteSize": 163172,
			"content": "openapi: 3.0.1\nservers:\n  - url: https://control.ably.net/v1\ninfo:\n  contact:\n    x-twitter: ablyrealtime\n  description: |\n    Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.\n\n    Detailed information on using this API can be found in the Ably \u003ca href=\"https://ably.com/documentation/control-api\"\u003edeveloper documentation\u003c/a\u003e.\n\n    Control API is currently in Beta.\n  title: Control API v1\n  version: 1.0.14\n  x-apisguru-categories:\n    - cloud\n  x-logo:\n    url: https://twitter.com/ablyrealtime/profile_image?size=original\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/ably/open-specs/main/definitions/control-v1.yaml\n      version: \"3.0\"\n  x-providerName: ably.net\n  x-serviceName: control\npaths:\n  \"/accounts/{account_id}/apps\":\n    get:\n      description: List all applications for the specified account ID.\n      parameters:\n        - description: The account ID for which to retrieve the associated applications.\n          in: path\n          name: account_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/app_response\"\n                type: array\n          description: List of apps for the specified account are returned\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Account not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n      security:\n        - bearer_auth: []\n      summary: Lists apps\n      tags:\n        - apps\n    post:\n      description: Creates an application with the specified properties.\n      parameters:\n        - description: The account ID of the account in which to create the application.\n          in: path\n          name: account_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/app_post\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/app_response\"\n          description: App created\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Account not found\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Invalid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n      security:\n        - bearer_auth: []\n      summary: Creates an app\n      tags:\n        - apps\n  \"/apps/{app_id}/keys\":\n    get:\n      description: Lists the API keys associated with the application ID.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/key_response\"\n                type: array\n          description: Key list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Lists app keys\n      tags:\n        - keys\n    post:\n      description: Creates an API key for the application specified.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/key_post\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/key_response\"\n          description: Key created\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Invalid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n      security:\n        - bearer_auth: []\n      summary: Creates a key\n      tags:\n        - keys\n  \"/apps/{app_id}/keys/{key_id}\":\n    patch:\n      description: Update the API key with the specified key ID, for the application with the specified application ID.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n        - description: The API key ID.\n          in: path\n          name: key_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/key_patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/key_response\"\n          description: Key updated\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Invalid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Updates a key\n      tags:\n        - keys\n  \"/apps/{app_id}/keys/{key_id}/revoke\":\n    post:\n      description: Revokes the API key with the specified ID, with the Application ID. This deletes the key.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n        - description: The key ID.\n          in: path\n          name: key_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content: {}\n          description: Key revoked\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Revokes a key\n      tags:\n        - keys\n  \"/apps/{app_id}/namespaces\":\n    get:\n      description: List the namespaces for the specified application ID.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/namespace_response\"\n                type: array\n          description: Namespace list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Lists namespaces\n      tags:\n        - namespaces\n    post:\n      description: Creates a namespace for the specified application ID.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/namespace_post\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/namespace_response\"\n          description: Namespace created\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Invalid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n      security:\n        - bearer_auth: []\n      summary: Creates a namespace\n      tags:\n        - namespaces\n  \"/apps/{app_id}/namespaces/{namespace_id}\":\n    delete:\n      description: Deletes the namespace with the specified ID, for the specified application ID.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n        - description: The namespace ID.\n          in: path\n          name: namespace_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          content: {}\n          description: Namespace deleted\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Deletes a namespace\n      tags:\n        - namespaces\n    patch:\n      description: Updates the namespace with the specified ID, for the application with the specified application ID.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n        - description: The namespace ID.\n          in: path\n          name: namespace_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/namespace_patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/namespace_response\"\n          description: Namespace updated\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Updates a namespace\n      tags:\n        - namespaces\n  \"/apps/{app_id}/queues\":\n    get:\n      description: Lists the queues associated with the specified application ID.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/queue_response\"\n                type: array\n          description: Queue list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: 503 Service unavailable\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Lists queues\n      tags:\n        - queues\n    post:\n      description: Creates a queue for the application specified by application ID. The properties for the queue to be created are specified in the request body.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/queue\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/queue_response\"\n          description: Queue created\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Invalid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n      security:\n        - bearer_auth: []\n      summary: Creates a queue\n      tags:\n        - queues\n  \"/apps/{app_id}/queues/{queue_id}\":\n    delete:\n      description: Delete the queue with the specified queue name, from the application with the specified application ID.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n        - description: The queue ID.\n          in: path\n          name: queue_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          content: {}\n          description: Queue deleted\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"503\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: 503 Service unavailable\n      security:\n        - bearer_auth: []\n      summary: Deletes a queue\n      tags:\n        - queues\n  \"/apps/{app_id}/rules\":\n    get:\n      description: Lists the rules for the application specified by the application ID.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/rule_response\"\n                type: array\n          description: Reactor rule list\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Lists Reactor rules\n      tags:\n        - rules\n    post:\n      description: Creates a rule for the application with the specified application ID.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/rule_post\"\n        description: The rule properties.\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/rule_response\"\n          description: Reactor rule created\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Invalid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Creates a Reactor rule\n      tags:\n        - rules\n  \"/apps/{app_id}/rules/{rule_id}\":\n    delete:\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n        - description: The rule ID.\n          in: path\n          name: rule_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          content: {}\n          description: Reactor rule deleted\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Deletes a Reactor rule\n      tags:\n        - rules\n    get:\n      description: Returns the rule specified by the rule ID, for the application specified by application ID.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n        - description: The rule ID.\n          in: path\n          name: rule_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/rule_response\"\n          description: Reactor rule\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Gets a reactor rule by rule ID\n      tags:\n        - rules\n    patch:\n      parameters:\n        - description: The application ID.\n          in: path\n          name: app_id\n          required: true\n          schema:\n            type: string\n        - description: The rule ID.\n          in: path\n          name: rule_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/rule_patch\"\n        description: Properties for the rule.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/rule_response\"\n          description: Reactor rule updated\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Invalid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n        \"504\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Gateway timeout\n      security:\n        - bearer_auth: []\n      summary: Updates a Reactor rule\n      tags:\n        - rules\n  \"/apps/{id}\":\n    delete:\n      description: Deletes the application with the specified application ID.\n      parameters:\n        - description: The ID of the application to be deleted.\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          content: {}\n          description: App deleted\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Invalid request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n      security:\n        - bearer_auth: []\n      summary: Deletes an app\n      tags:\n        - apps\n    patch:\n      description: Updates the application with the specified application ID.\n      parameters:\n        - description: The ID of application to be updated.\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/app_patch\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/app_response\"\n          description: App updated\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n      security:\n        - bearer_auth: []\n      summary: Updates an app\n      tags:\n        - apps\n  \"/apps/{id}/pkcs12\":\n    post:\n      description: Updates the application's Apple Push Notification service (APNs) information.\n      parameters:\n        - description: The application ID.\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/app_pkcs12\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/app_response\"\n          description: App updated\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Bad request\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: App not found\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n      security:\n        - bearer_auth: []\n      summary: Updates app's APNs info from a `.p12` file\n      tags:\n        - apps\n  /me:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/me\"\n          description: Token details\n        \"401\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Authentication failed\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/error\"\n          description: Internal server error\n      security:\n        - bearer_auth: []\n      summary: Get token details\n      tags:\n        - tokens\ncomponents:\n  schemas:\n    amqp_external_rule_patch:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AMQP external (using Firehose). See the \u003ca href=\"https://ably.com/documentation/general/firehose\"\u003eAbly documentation\u003c/a\u003e for further information.\n          enum:\n            - amqp/external\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            mandatoryRoute:\n              description: Reject delivery of the message if the route does not exist, otherwise fail silently.\n              type: boolean\n            messageTtl:\n              description: You can optionally override the default TTL on a queue and specify a TTL in minutes for messages to be persisted. It is unusual to change the default TTL, so if this field is left empty, the default TTL for the queue will be used.\n              type: integer\n            persistentMessages:\n              description: Marks the message as persistent, instructing the broker to write it to disk if it is in a durable queue.\n              type: boolean\n            routingKey:\n              description: The AMQP routing key. See this \u003ca href=\"https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule\"\u003eAbly knowledge base article\u003c/a\u003e for details.\n              type: string\n            url:\n              type: string\n          type: object\n      type: object\n    amqp_external_rule_post:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AMQP external (using Firehose). See the \u003ca href=\"https://ably.com/documentation/general/firehose\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - amqp/external\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            mandatoryRoute:\n              description: Reject delivery of the message if the route does not exist, otherwise fail silently.\n              type: boolean\n            messageTtl:\n              description: You can optionally override the default TTL on a queue and specify a TTL in minutes for messages to be persisted. It is unusual to change the default TTL, so if this field is left empty, the default TTL for the queue will be used.\n              type: integer\n            persistentMessages:\n              description: Marks the message as persistent, instructing the broker to write it to disk if it is in a durable queue.\n              type: boolean\n            routingKey:\n              description: The AMQP routing key. See this \u003ca href=\"https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule\"\u003eAbly knowledge base article\u003c/a\u003e for details.\n              type: string\n            url:\n              type: string\n          required:\n            - url\n            - routingKey\n            - mandatoryRoute\n            - persistentMessages\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    amqp_external_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AMQP external (using Firehose). See the \u003ca href=\"https://ably.com/documentation/general/firehose\"\u003eAbly documentation\u003c/a\u003e for further information.\n          enum:\n            - amqp/external\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            mandatoryRoute:\n              description: Reject delivery of the message if the route does not exist, otherwise fail silently.\n              type: boolean\n            messageTtl:\n              description: You can optionally override the default TTL on a queue and specify a TTL in minutes for messages to be persisted. It is unusual to change the default TTL, so if this field is left empty, the default TTL for the queue will be used.\n              type: integer\n            persistentMessages:\n              description: Marks the message as persistent, instructing the broker to write it to disk if it is in a durable queue.\n              type: boolean\n            routingKey:\n              description: The AMQP routing key. See this \u003ca href=\"https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule\"\u003eAbly knowledge base article\u003c/a\u003e for details.\n              type: string\n            url:\n              type: string\n          required:\n            - url\n            - routingKey\n            - mandatoryRoute\n            - persistentMessages\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    amqp_rule_patch:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AMQP. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - amqp\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            queueId:\n              type: string\n          type: object\n      type: object\n    amqp_rule_post:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AMQP. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - amqp\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            queueId:\n              type: string\n          required:\n            - queueId\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    amqp_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AMQP. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - amqp\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            queueId:\n              type: string\n          required:\n            - queueId\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    app_patch:\n      additionalProperties: false\n      properties:\n        apnsCertificate:\n          description: The Apple Push Notification service certificate.\n          nullable: true\n          type: string\n        apnsPrivateKey:\n          description: The Apple Push Notification service private key.\n          nullable: true\n          type: string\n        apnsUseSandboxEndpoint:\n          description: The Apple Push Notification service sandbox endpoint.\n          nullable: true\n          type: boolean\n        fcmKey:\n          description: The Firebase Cloud Messaging key.\n          example: false\n          nullable: true\n          type: string\n        name:\n          description: The name of the application for your reference only.\n          example: My App\n          type: string\n        status:\n          description: The status of the application. Can be `enabled` or `disabled`. Enabled means available to accept inbound connections and all services are available.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        tlsOnly:\n          description: Enforce TLS for all connections.\n          example: true\n          nullable: true\n          type: boolean\n      type: object\n    app_pkcs12:\n      additionalProperties: false\n      properties:\n        p12File:\n          description: The `.p12` file containing the app's APNs information.\n          format: binary\n          type: string\n        p12Pass:\n          description: The password for the corresponding `.p12` file.\n          type: string\n      required:\n        - p12File\n        - p12Pass\n      type: object\n    app_post:\n      additionalProperties: false\n      properties:\n        apnsCertificate:\n          description: The Apple Push Notification service certificate.\n          nullable: true\n          type: string\n        apnsPrivateKey:\n          description: The Apple Push Notification service private key.\n          nullable: true\n          type: string\n        apnsUseSandboxEndpoint:\n          description: The Apple Push Notification service sandbox endpoint.\n          nullable: true\n          type: boolean\n        fcmKey:\n          description: The Firebase Cloud Messaging key.\n          example: false\n          nullable: true\n          type: string\n        name:\n          description: The name of the application for your reference only.\n          example: My App\n          type: string\n        status:\n          description: The status of the application. Can be `enabled` or `disabled`. Enabled means available to accept inbound connections and all services are available.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        tlsOnly:\n          description: Enforce TLS for all connections.\n          example: true\n          nullable: true\n          type: boolean\n      required:\n        - name\n      type: object\n    app_response:\n      additionalProperties: false\n      properties:\n        _links:\n          description: A link self-referencing the app that has been created.\n          nullable: true\n          type: object\n        accountId:\n          description: The ID of your Ably account.\n          example: WgRpOB\n          type: string\n        apnsUseSandboxEndpoint:\n          description: Apple Push Notification service endpoint.\n          example: false\n          nullable: true\n          type: boolean\n        id:\n          description: The application ID.\n          example: 28AB6x\n          type: string\n        name:\n          description: The application name.\n          example: Default\n          type: string\n        status:\n          description: The application status. Disabled applications will not accept new connections and will return an error to all clients.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        tlsOnly:\n          description: Enforce TLS for all connections. This setting overrides any channel setting.\n          example: true\n          nullable: true\n          type: boolean\n      type: object\n    aws_access_keys:\n      additionalProperties: false\n      properties:\n        accessKeyId:\n          description: The AWS key ID for the AWS IAM user. See this \u003ca href=\"https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis\"\u003eAbly knowledge base article\u003c/a\u003e for details.\n          type: string\n        authenticationMode:\n          description: Authentication method is using AWS credentials (AWS key ID and secret key).\n          enum:\n            - credentials\n          type: string\n        secretAccessKey:\n          description: The AWS secret key for the AWS IAM user. See this \u003ca href=\"https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis\"\u003eAbly knowledge base article\u003c/a\u003e for details.\n          type: string\n      required:\n        - accessKeyId\n        - secretAccessKey\n      type: object\n    aws_access_keys_response:\n      additionalProperties: false\n      properties:\n        accessKeyId:\n          description: The AWS key ID for the AWS IAM user. See this \u003ca href=\"https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis\"\u003eAbly knowledge base article\u003c/a\u003e for details.\n          type: string\n        authenticationMode:\n          description: Authentication method is using AWS credentials (AWS key ID and secret key).\n          enum:\n            - credentials\n          type: string\n      type: object\n    aws_assume_role:\n      additionalProperties: false\n      properties:\n        assumeRoleArn:\n          description: If you are using the \"ARN of an assumable role\" authentication method, this is your Assume Role ARN. See this \u003ca href=\"https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis\"\u003eAbly knowledge base article\u003c/a\u003e for details.\n          type: string\n        authenticationMode:\n          description: Authentication method is using the ARN of an assumable role. See this \u003ca href=\"https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis\"\u003eAbly knowledge base article\u003c/a\u003e for details.\n          enum:\n            - assumeRole\n          type: string\n      required:\n        - assumeRoleArn\n      type: object\n    aws_kinesis_rule_patch:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AWS Kinesis. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - aws/kinesis\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            authentication:\n              discriminator:\n                mapping:\n                  assumeRole: \"#/components/schemas/aws_assume_role\"\n                  credentials: \"#/components/schemas/aws_access_keys\"\n                propertyName: authenticationMode\n              oneOf:\n                - $ref: \"#/components/schemas/aws_access_keys\"\n                - $ref: \"#/components/schemas/aws_assume_role\"\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a text-based encoding.\n              enum:\n                - json\n              type: string\n            partitionKey:\n              description: The AWS Kinesis partition key. See this \u003ca href=\"https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule\"\u003eAbly knowledge base article\u003c/a\u003e for details.\n              type: string\n            region:\n              description: The region is which AWS Kinesis is hosted. See the \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\"\u003eAWS documentation\u003c/a\u003e for more detail.\n              example: us-west-1\n              type: string\n            streamName:\n              description: The name of your AWS Kinesis Stream.\n              type: string\n          type: object\n      type: object\n    aws_kinesis_rule_post:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AWS Kinesis. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - aws/kinesis\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            authentication:\n              discriminator:\n                mapping:\n                  assumeRole: \"#/components/schemas/aws_assume_role\"\n                  credentials: \"#/components/schemas/aws_access_keys\"\n                propertyName: authenticationMode\n              oneOf:\n                - $ref: \"#/components/schemas/aws_access_keys\"\n                - $ref: \"#/components/schemas/aws_assume_role\"\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a text-based encoding.\n              enum:\n                - json\n              type: string\n            partitionKey:\n              description: The AWS Kinesis partition key. See this \u003ca href=\"https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule\"\u003eAbly knowledge base article\u003c/a\u003e for details.\n              type: string\n            region:\n              description: The region is which AWS Kinesis is hosted. See the \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\"\u003eAWS documentation\u003c/a\u003e for more detail.\n              example: us-west-1\n              type: string\n            streamName:\n              description: The name of your AWS Kinesis Stream.\n              type: string\n          required:\n            - region\n            - streamName\n            - partitionKey\n            - authentication\n            - format\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    aws_kinesis_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AWS Kinesis. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - aws/kinesis\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            authentication:\n              discriminator:\n                mapping:\n                  assumeRole: \"#/components/schemas/aws_assume_role\"\n                  credentials: \"#/components/schemas/aws_access_keys_response\"\n                propertyName: authenticationMode\n              oneOf:\n                - $ref: \"#/components/schemas/aws_access_keys_response\"\n                - $ref: \"#/components/schemas/aws_assume_role\"\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a text-based encoding.\n              enum:\n                - json\n              type: string\n            partitionKey:\n              description: The AWS Kinesis partition key. See this \u003ca href=\"https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule\"\u003eAbly knowledge base article\u003c/a\u003e for details.\n              type: string\n            region:\n              description: The region is which AWS Kinesis is hosted. See the \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\"\u003eAWS documentation\u003c/a\u003e for more detail.\n              example: us-west-1\n              type: string\n            streamName:\n              description: The name of your AWS Kinesis Stream.\n              type: string\n          required:\n            - region\n            - streamName\n            - partitionKey\n            - authentication\n            - format\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    aws_lambda_rule_patch:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AWS Lambda. See the \u003ca href=\"https://ably.com/integrations\"\u003eAbly documentation\u003c/a\u003e for further information.\n          enum:\n            - aws/lambda\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            authentication:\n              discriminator:\n                mapping:\n                  assumeRole: \"#/components/schemas/aws_assume_role\"\n                  credentials: \"#/components/schemas/aws_access_keys\"\n                propertyName: authenticationMode\n              oneOf:\n                - $ref: \"#/components/schemas/aws_access_keys\"\n                - $ref: \"#/components/schemas/aws_assume_role\"\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            functionName:\n              description: The name of your AWS Lambda Function.\n              type: string\n            region:\n              description: The region is which your AWS Lambda Function is hosted. See the \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\"\u003eAWS documentation\u003c/a\u003e for more detail.\n              example: us-west-1\n              type: string\n          required:\n            - region\n            - functionName\n            - authentication\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    aws_lambda_rule_post:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AWS Lambda. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - aws/lambda\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            authentication:\n              discriminator:\n                mapping:\n                  assumeRole: \"#/components/schemas/aws_assume_role\"\n                  credentials: \"#/components/schemas/aws_access_keys\"\n                propertyName: authenticationMode\n              oneOf:\n                - $ref: \"#/components/schemas/aws_access_keys\"\n                - $ref: \"#/components/schemas/aws_assume_role\"\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            functionName:\n              description: The name of your AWS Lambda Function.\n              type: string\n            region:\n              description: The region is which your AWS Lambda Function is hosted. See the \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\"\u003eAWS documentation\u003c/a\u003e for more detail.\n              example: us-west-1\n              type: string\n          required:\n            - region\n            - functionName\n            - authentication\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    aws_lambda_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AWS Lambda. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - aws/lambda\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            authentication:\n              discriminator:\n                mapping:\n                  assumeRole: \"#/components/schemas/aws_assume_role\"\n                  credentials: \"#/components/schemas/aws_access_keys_response\"\n                propertyName: authenticationMode\n              oneOf:\n                - $ref: \"#/components/schemas/aws_access_keys_response\"\n                - $ref: \"#/components/schemas/aws_assume_role\"\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              type: string\n            functionName:\n              description: The name of your AWS Lambda Function.\n              type: string\n            region:\n              description: The region is which your AWS Lambda Function is hosted. See the \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\"\u003eAWS documentation\u003c/a\u003e for more detail.\n              example: us-west-1\n              type: string\n          required:\n            - region\n            - functionName\n            - authentication\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    aws_sqs_rule_patch:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AWS SQS. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - aws/sqs\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            authentication:\n              discriminator:\n                mapping:\n                  assumeRole: \"#/components/schemas/aws_assume_role\"\n                  credentials: \"#/components/schemas/aws_access_keys\"\n                propertyName: authenticationMode\n              oneOf:\n                - $ref: \"#/components/schemas/aws_access_keys\"\n                - $ref: \"#/components/schemas/aws_assume_role\"\n            awsAccountId:\n              description: Your AWS account ID.\n              type: string\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              type: string\n            queueName:\n              description: The AWS SQS queue name.\n              type: string\n            region:\n              description: The region is which AWS SQS is hosted. See the \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\"\u003eAWS documentation\u003c/a\u003e for more detail.\n              example: us-west-1\n              type: string\n          type: object\n      type: object\n    aws_sqs_rule_post:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AWS SQS. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - aws/sqs\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            authentication:\n              discriminator:\n                mapping:\n                  assumeRole: \"#/components/schemas/aws_assume_role\"\n                  credentials: \"#/components/schemas/aws_access_keys\"\n                propertyName: authenticationMode\n              oneOf:\n                - $ref: \"#/components/schemas/aws_access_keys\"\n                - $ref: \"#/components/schemas/aws_assume_role\"\n            awsAccountId:\n              description: Your AWS account ID.\n              type: string\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              type: string\n            queueName:\n              description: The AWS SQS queue name.\n              type: string\n            region:\n              description: The region is which AWS SQS is hosted. See the \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\"\u003eAWS documentation\u003c/a\u003e for more detail.\n              example: us-west-1\n              type: string\n          required:\n            - region\n            - awsAccountId\n            - queueName\n            - authentication\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    aws_sqs_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case AWS SQS. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - aws/sqs\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            authentication:\n              discriminator:\n                mapping:\n                  assumeRole: \"#/components/schemas/aws_assume_role\"\n                  credentials: \"#/components/schemas/aws_access_keys_response\"\n                propertyName: authenticationMode\n              oneOf:\n                - $ref: \"#/components/schemas/aws_access_keys_response\"\n                - $ref: \"#/components/schemas/aws_assume_role\"\n            awsAccountId:\n              description: Your AWS account ID.\n              type: string\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              type: string\n            queueName:\n              description: The AWS SQS queue name.\n              type: string\n            region:\n              description: The region is which AWS SQS is hosted. See the \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\"\u003eAWS documentation\u003c/a\u003e for more detail.\n              example: us-west-1\n              type: string\n          required:\n            - region\n            - awsAccountId\n            - queueName\n            - authentication\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    azure_function_rule_patch:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Microsoft Azure Function. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/azure-function\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            azureAppId:\n              description: The Microsoft Azure Application ID. You can find your Microsoft Azure Application ID as shown in this \u003ca href=\"https://dev.applicationinsights.io/documentation/Authorization/API-key-and-App-ID\"\u003earticle\u003c/a\u003e.\n              example: d1e9f419-c438-6032b32df979\n              type: string\n            azureFunctionName:\n              description: The name of your Microsoft Azure Function.\n              type: string\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a text-based encoding.\n              enum:\n                - json\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n          type: object\n      type: object\n    azure_function_rule_post:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Microsoft Azure Function. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/azure-function\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            azureAppId:\n              description: The Microsoft Azure Application ID. You can find your Microsoft Azure Application ID as shown in this \u003ca href=\"https://dev.applicationinsights.io/documentation/Authorization/API-key-and-App-ID\"\u003earticle\u003c/a\u003e.\n              example: d1e9f419-c438-6032b32df979\n              type: string\n            azureFunctionName:\n              description: The name of your Microsoft Azure Function.\n              type: string\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a text-based encoding.\n              enum:\n                - json\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n          required:\n            - azureAppId\n            - azureFunctionName\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    azure_function_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Microsoft Azure Function. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/azure-function\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            azureAppId:\n              description: The Microsoft Azure Application ID. You can find your Microsoft Azure Application ID as shown in this \u003ca href=\"https://dev.applicationinsights.io/documentation/Authorization/API-key-and-App-ID\"\u003earticle\u003c/a\u003e.\n              example: d1e9f419-c438-6032b32df979\n              type: string\n            azureFunctionName:\n              description: The name of your Microsoft Azure Function.\n              type: string\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a text-based encoding.\n              enum:\n                - json\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n          required:\n            - azureAppId\n            - azureFunctionName\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    cloudflare_worker_rule_patch:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Cloudflare Worker. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/cloudflare-worker\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n            url:\n              type: string\n          type: object\n      type: object\n    cloudflare_worker_rule_post:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Cloudflare Worker. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/cloudflare-worker\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n            url:\n              type: string\n          required:\n            - url\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    cloudflare_worker_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Cloudflare Worker. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/cloudflare-worker\n          example: http/cloudflare-worker\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n            url:\n              type: string\n          required:\n            - url\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    error:\n      additionalProperties: false\n      properties:\n        code:\n          description: The HTTP status code returned.\n          type: integer\n        details:\n          description: Any additional details about the error message.\n          nullable: true\n          type: object\n        href:\n          description: The URL to documentation about the error code.\n          type: string\n        message:\n          description: The error message.\n          type: string\n        statusCode:\n          description: The Ably error code.\n          type: integer\n      required:\n        - message\n        - code\n        - statusCode\n        - href\n      type: object\n    google_cloud_function_rule_patch:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Google Cloud Function. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/google-cloud-function\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a text-based encoding.\n              enum:\n                - json\n              type: string\n            functionName:\n              description: The name of your Google Cloud Function.\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            projectId:\n              description: The project ID for your Google Cloud Project that was generated when you created your project.\n              type: string\n            region:\n              description: The region in which your Google Cloud Function is hosted. See the \u003ca href=\"https://cloud.google.com/compute/docs/regions-zones/\"\u003eGoogle documentation\u003c/a\u003e for more details.\n              example: us-west1\n              type: string\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n          type: object\n      type: object\n    google_cloud_function_rule_post:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Google Cloud Function. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/google-cloud-function\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a text-based encoding.\n              enum:\n                - json\n              type: string\n            functionName:\n              description: The name of your Google Cloud Function.\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            projectId:\n              description: The project ID for your Google Cloud Project that was generated when you created your project.\n              type: string\n            region:\n              description: The region in which your Google Cloud Function is hosted. See the \u003ca href=\"https://cloud.google.com/compute/docs/regions-zones/\"\u003eGoogle documentation\u003c/a\u003e for more details.\n              example: us-west1\n              type: string\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n          required:\n            - region\n            - projectId\n            - functionName\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    google_cloud_function_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Google Cloud Function. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/google-cloud-function\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a text-based encoding.\n              enum:\n                - json\n              type: string\n            functionName:\n              description: The name of your Google Cloud Function.\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            projectId:\n              description: The project ID for your Google Cloud Project that was generated when you created your project.\n              type: string\n            region:\n              description: The region in which your Google Cloud Function is hosted. See the \u003ca href=\"https://cloud.google.com/compute/docs/regions-zones/\"\u003eGoogle documentation\u003c/a\u003e for more details.\n              example: us-west1\n              type: string\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n          required:\n            - region\n            - projectId\n            - functionName\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    http_rule_patch:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a simpler text-based encoding, whereas MsgPack provides a more efficient binary encoding.\n              enum:\n                - json\n                - msgpack\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n            url:\n              type: string\n          type: object\n      type: object\n    http_rule_post:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a simpler text-based encoding, whereas MsgPack provides a more efficient binary encoding.\n              enum:\n                - json\n                - msgpack\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n            url:\n              description: The URL of the endpoint that is invoked when events occur on Ably.\n              type: string\n          required:\n            - url\n            - format\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    http_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            enveloped:\n              description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.\n              nullable: true\n              type: boolean\n            format:\n              description: JSON provides a simpler text-based encoding, whereas MsgPack provides a more efficient binary encoding.\n              enum:\n                - json\n                - msgpack\n              type: string\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n            url:\n              type: string\n          required:\n            - url\n            - format\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    ifttt_rule_patch:\n      x-requestMode:\n        description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n        enum:\n          - single\n        example: single\n        type: string\n      x-ruleType:\n        description: The type of rule. In this case IFTTT. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n        enum:\n          - http/ifttt\n        type: string\n      x-source:\n        $ref: \"#/components/schemas/rule_source\"\n      x-target:\n        additionalProperties: false\n        properties:\n          eventName:\n            type: string\n          webhookKey:\n            type: string\n        type: object\n    ifttt_rule_post:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case IFTTT. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/ifttt\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            eventName:\n              type: string\n            webhookKey:\n              type: string\n          required:\n            - webhookKey\n            - eventName\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    ifttt_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: Single request mode sends each event separately to the endpoint specified by the rule. You can read more about single request mode events in the \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003eAbly documentation\u003c/a\u003e.\n          enum:\n            - single\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case IFTTT. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/ifttt\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            eventName:\n              type: string\n            webhookKey:\n              type: string\n          required:\n            - webhookKey\n            - eventName\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    key_patch:\n      additionalProperties: false\n      properties:\n        capabilities:\n          description: The capabilities that this key has. More information on capabilities can be found in the \u003ca href=\"https://ably.com/documentation/core-features/authentication#capabilities-explained\"\u003eAbly documentation\u003c/a\u003e.\n          items:\n            enum:\n              - publish\n              - subscribe\n              - history\n              - presence\n              - channel-metadata\n              - push-admin\n              - push-subscribe\n              - statistics\n            type: string\n          type: array\n        channels:\n          description: Specify the channels and queues that this key can be used with.\n          type: string\n        name:\n          description: The name for your API key. This is a friendly name for your reference.\n          type: string\n      type: object\n    key_post:\n      additionalProperties: false\n      properties:\n        capabilities:\n          description: The capabilities that this key has. More information on capabilities can be found in the \u003ca href=\"https://ably.com/documentation/core-features/authentication#capabilities-explained\"\u003eAbly documentation\u003c/a\u003e.\n          items:\n            enum:\n              - publish\n              - subscribe\n              - history\n              - presence\n              - channel-metadata\n              - push-admin\n              - push-subscribe\n              - statistics\n            type: string\n          type: array\n        channels:\n          description: Specify the channels and queues that this key can be used with.\n          type: string\n        name:\n          description: The name for your API key. This is a friendly name for your reference.\n          type: string\n      required:\n        - name\n        - channels\n        - capabilities\n      type: object\n    key_response:\n      additionalProperties: false\n      properties:\n        appId:\n          description: The Ably application ID which this key is associated with.\n          example: 28GY6a\n          type: string\n        capability:\n          additionalProperties:\n            items:\n              enum:\n                - publish\n                - subscribe\n                - history\n                - presence\n                - channel-metadata\n                - push-admin\n                - push-subscribe\n                - statistics\n              type: string\n            type: array\n          description: The capabilities that this key has. More information on capabilities can be found in the \u003ca href=\"https://ably.com/documentation/core-features/authentication#capabilities-explained\"\u003eAbly documentation\u003c/a\u003e.\n          type: object\n        created:\n          description: Unix timestamp representing the date and time of creation of the key.\n          example: 1602844091815\n          type: integer\n        id:\n          description: The key ID.\n          type: string\n        key:\n          description: The complete API key including API secret.\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of the last modification of the key.\n          example: 1614679682091\n          type: integer\n        name:\n          description: The name of the application this key is associated with.\n          type: string\n      type: object\n    me:\n      additionalProperties: false\n      properties:\n        account:\n          additionalProperties: false\n          properties:\n            id:\n              description: The account ID.\n              example: VpWaOA\n              type: string\n            name:\n              description: The name of the account.\n              example: Free account\n              type: string\n          required:\n            - id\n            - name\n          type: object\n        token:\n          additionalProperties: false\n          properties:\n            capabilities:\n              description: An array containing the access capabilities associated with the access token.\n              example:\n                - write:namespace\n                - read:namespace\n                - write:queue\n                - read:queue\n                - write:rule\n                - read:rule\n                - write:key\n                - read:key\n                - write:app\n                - read:app\n              items:\n                type: string\n              type: array\n            id:\n              description: The token ID. This is a UUID.\n              example: C95837C9-184B-4CC2-8779-B769F960FADB\n              type: integer\n            name:\n              description: The friendly name for the token.\n              example: My Token\n              type: string\n          required:\n            - id\n            - name\n            - capabilities\n          type: object\n        user:\n          additionalProperties: false\n          properties:\n            email:\n              description: Email address of the user associated with the account.\n              type: string\n            id:\n              description: The user ID associated with the account. This is a UUID.\n              example: C95837C9-184B-4CC2-8779-B769F960FADB\n              type: integer\n          required:\n            - id\n            - email\n          type: object\n      type: object\n    namespace_patch:\n      additionalProperties: false\n      properties:\n        authenticated:\n          default: false\n          description: If `true`, clients will not be permitted to use (including to attach, publish, or subscribe) any channels within this namespace unless they are identified, that is, authenticated using a client ID. See the \u003ca href=\"https://knowledge.ably.com/authenticated-and-identified-clients\"\u003eAbly knowledge base/a\u003e for more details.\n          example: false\n          type: boolean\n        persistLast:\n          default: false\n          description: If `true`, the last message published on a channel will be stored for 365 days. You can access the stored message only by using the channel rewind mechanism and attaching with rewind=1. Please note that for each message stored, an additional message is deducted from your monthly allocation.\n          example: false\n          type: boolean\n        persisted:\n          default: false\n          description: If `true`, all messages on a channel will be stored for 24 hours. You can access stored messages via the History API. Please note that for each message stored, an additional message is deducted from your monthly allocation.\n          example: false\n          type: boolean\n        pushEnabled:\n          default: false\n          description: If `true`, publishing messages with a push payload in the extras field is permitted and can trigger the delivery of a native push notification to registered devices for the channel.\n          example: false\n          type: boolean\n        tlsOnly:\n          default: false\n          description: If `true`, only clients that are connected using TLS will be permitted to subscribe to any channels within this namespace.\n          example: false\n          type: boolean\n      type: object\n    namespace_post:\n      additionalProperties: false\n      properties:\n        authenticated:\n          default: false\n          description: If `true`, clients will not be permitted to use (including to attach, publish, or subscribe) any channels within this namespace unless they are identified, that is, authenticated using a client ID. See the \u003ca href=\"https://knowledge.ably.com/authenticated-and-identified-clients\"\u003eAbly Knowledge base\u003c/a\u003e for more details.\n          example: false\n          type: boolean\n        id:\n          description: The namespace or channel name that the channel rule will apply to. For example, if you specify `namespace` the namespace will be set to `namespace` and will match with channels `namespace:*` and `namespace`.\n          example: namespace\n          type: string\n        persistLast:\n          default: false\n          description: If `true`, the last message published on a channel will be stored for 365 days. You can access the stored message only by using the channel rewind mechanism and attaching with rewind=1. Please note that for each message stored, an additional message is deducted from your monthly allocation.\n          example: false\n          type: boolean\n        persisted:\n          default: false\n          description: If `true`, all messages on a channel will be stored for 24 hours. You can access stored messages via the History API. Please note that for each message stored, an additional message is deducted from your monthly allocation.\n          example: false\n          type: boolean\n        pushEnabled:\n          default: false\n          description: If `true`, publishing messages with a push payload in the extras field is permitted and can trigger the delivery of a native push notification to registered devices for the channel.\n          example: false\n          type: boolean\n        tlsOnly:\n          default: false\n          description: If `true`, only clients that are connected using TLS will be permitted to subscribe to any channels within this namespace.\n          example: false\n          type: boolean\n      required:\n        - id\n      type: object\n    namespace_response:\n      additionalProperties: false\n      properties:\n        authenticated:\n          default: false\n          description: If `true`, clients will not be permitted to use (including to attach, publish, or subscribe) any channels within this namespace unless they are identified, that is, authenticated using a client ID. See the \u003ca href=\"https://knowledge.ably.com/authenticated-and-identified-clients\"\u003eAbly knowledge base\u003c/a\u003e for more details.\n          example: false\n          type: boolean\n        created:\n          description: Unix timestamp representing the date and time of creation of the namespace.\n          example: 1602844091815\n          type: integer\n        id:\n          description: The namespace or channel name that the channel rule will apply to. For example, if you specify `namespace` the namespace will be set to `namespace` and will match with channels `namespace:*` and `namespace`.\n          example: namespace\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the namespace.\n          example: 1614679682091\n          type: integer\n        persistLast:\n          default: false\n          description: If `true`, the last message published on a channel will be stored for 365 days. You can access the stored message only by using the channel rewind mechanism and attaching with rewind=1. Please note that for each message stored, an additional message is deducted from your monthly allocation.\n          example: false\n          type: boolean\n        persisted:\n          default: false\n          description: If `true`, all messages on a channel will be stored for 24 hours. You can access stored messages via the History API. Please note that for each message stored, an additional message is deducted from your monthly allocation.\n          example: false\n          type: boolean\n        pushEnabled:\n          default: false\n          description: If `true`, publishing messages with a push payload in the extras field is permitted and can trigger the delivery of a native push notification to registered devices for the channel.\n          example: false\n          type: boolean\n        tlsOnly:\n          default: false\n          description: If `true`, only clients that are connected using TLS will be permitted to subscribe to any channels within this namespace.\n          example: false\n          type: boolean\n      type: object\n    queue:\n      additionalProperties: false\n      properties:\n        maxLength:\n          description: Message limit in number of messages.\n          example: 10000\n          type: integer\n        name:\n          description: A friendly name for your queue.\n          example: My queue\n          type: string\n        region:\n          description: The data center region. US East (Virginia) or EU West (Ireland). Values are `us-east-1-a` or `eu-west-1-a`.\n          example: us-east-1-a\n          type: string\n        ttl:\n          description: TTL in minutes.\n          example: 60\n          type: integer\n      required:\n        - name\n        - ttl\n        - maxLength\n        - region\n      type: object\n    queue_response:\n      additionalProperties: false\n      properties:\n        amqp:\n          additionalProperties: false\n          properties:\n            queueName:\n              description: Name of the Ably queue.\n              example: 28AB6w:My queue\n              type: string\n            uri:\n              description: URI for the AMQP queue interface.\n              example: amqps://us-east-1-a-queue.ably.io:5671/shared\n              type: string\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28AB6w\n          type: string\n        deadletter:\n          description: A boolean that indicates whether this is a dead letter queue or not.\n          example: false\n          type: boolean\n        deadletterId:\n          example: 28AB6w:us-east-1-a:deadletter\n          nullable: true\n          type: string\n        id:\n          description: The ID of the Ably queue\n          example: 28AB6w:us-east-1-a:My queue\n          type: string\n        maxLength:\n          description: Message limit in number of messages.\n          example: 10000\n          type: integer\n        messages:\n          additionalProperties: false\n          description: Details of messages in the queue.\n          properties:\n            ready:\n              description: The number of ready messages in the queue.\n              example: 0\n              nullable: true\n              type: integer\n            total:\n              description: The total number of messages in the queue.\n              example: 0\n              nullable: true\n              type: integer\n            unacknowledged:\n              description: The number of unacknowledged messages in the queue.\n              example: 0\n              nullable: true\n              type: integer\n          type: object\n        name:\n          description: The friendly name of the queue.\n          example: My queue\n          type: string\n        region:\n          description: The data center region for the queue.\n          example: eu-west-1-a\n          type: string\n        state:\n          description: The current state of the queue.\n          example: Running\n          type: string\n        stats:\n          additionalProperties: false\n          properties:\n            acknowledgementRate:\n              description: The rate at which messages are acknowledged. Rate is messages per minute.\n              nullable: true\n              type: number\n            deliveryRate:\n              description: The rate at which messages are delivered from the queue. Rate is messages per minute.\n              nullable: true\n              type: number\n            publishRate:\n              description: The rate at which messages are published to the queue. Rate is messages per minute.\n              nullable: true\n              type: number\n          type: object\n        stomp:\n          additionalProperties: false\n          properties:\n            destination:\n              description: Destination queue.\n              example: /amqp/queue/28AB6w:My queue\n              type: string\n            host:\n              description: The host type for the queue.\n              example: shared\n              type: string\n            uri:\n              description: URI for the STOMP queue interface.\n              example: stomp://us-east-1-a-queue.ably.io:61614\n              type: string\n          type: object\n        ttl:\n          description: TTL in minutes.\n          example: 60\n          type: integer\n      type: object\n    rule_attributes:\n      additionalProperties: false\n      properties:\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      type: object\n    rule_patch:\n      discriminator:\n        mapping:\n          amqp: \"#/components/schemas/amqp_rule_patch\"\n          amqp/external: \"#/components/schemas/amqp_external_rule_patch\"\n          aws/kinesis: \"#/components/schemas/aws_kinesis_rule_patch\"\n          aws/lambda: \"#/components/schemas/aws_lambda_rule_patch\"\n          aws/sqs: \"#/components/schemas/aws_sqs_rule_patch\"\n          http: \"#/components/schemas/http_rule_patch\"\n          http/azure-function: \"#/components/schemas/azure_function_rule_patch\"\n          http/cloudflare-worker: \"#/components/schemas/cloudflare_worker_rule_patch\"\n          http/google-cloud-function: \"#/components/schemas/google_cloud_function_rule_patch\"\n          http/ifttt: \"#/components/schemas/ifttt_rule_patch\"\n          http/zapier: \"#/components/schemas/zapier_rule_patch\"\n        propertyName: ruleType\n      oneOf:\n        - $ref: \"#/components/schemas/http_rule_patch\"\n        - $ref: \"#/components/schemas/ifttt_rule_patch\"\n        - $ref: \"#/components/schemas/zapier_rule_patch\"\n        - $ref: \"#/components/schemas/cloudflare_worker_rule_patch\"\n        - $ref: \"#/components/schemas/azure_function_rule_patch\"\n        - $ref: \"#/components/schemas/google_cloud_function_rule_patch\"\n        - $ref: \"#/components/schemas/aws_lambda_rule_patch\"\n        - $ref: \"#/components/schemas/aws_kinesis_rule_patch\"\n        - $ref: \"#/components/schemas/aws_sqs_rule_patch\"\n        - $ref: \"#/components/schemas/amqp_rule_patch\"\n        - $ref: \"#/components/schemas/amqp_external_rule_patch\"\n    rule_post:\n      discriminator:\n        mapping:\n          amqp: \"#/components/schemas/amqp_rule_post\"\n          amqp/external: \"#/components/schemas/amqp_external_rule_post\"\n          aws/kinesis: \"#/components/schemas/aws_kinesis_rule_post\"\n          aws/lambda: \"#/components/schemas/aws_lambda_rule_post\"\n          aws/sqs: \"#/components/schemas/aws_sqs_rule_post\"\n          http: \"#/components/schemas/http_rule_post\"\n          http/azure-function: \"#/components/schemas/azure_function_rule_post\"\n          http/cloudflare-worker: \"#/components/schemas/cloudflare_worker_rule_post\"\n          http/google-cloud-function: \"#/components/schemas/google_cloud_function_rule_post\"\n          http/ifttt: \"#/components/schemas/ifttt_rule_post\"\n          http/zapier: \"#/components/schemas/zapier_rule_post\"\n          unsupported: \"#/components/schemas/unsupported_rule_response\"\n        propertyName: ruleType\n      oneOf:\n        - $ref: \"#/components/schemas/http_rule_post\"\n        - $ref: \"#/components/schemas/ifttt_rule_post\"\n        - $ref: \"#/components/schemas/zapier_rule_post\"\n        - $ref: \"#/components/schemas/cloudflare_worker_rule_post\"\n        - $ref: \"#/components/schemas/azure_function_rule_post\"\n        - $ref: \"#/components/schemas/google_cloud_function_rule_post\"\n        - $ref: \"#/components/schemas/aws_lambda_rule_post\"\n        - $ref: \"#/components/schemas/aws_kinesis_rule_post\"\n        - $ref: \"#/components/schemas/aws_sqs_rule_post\"\n        - $ref: \"#/components/schemas/amqp_rule_post\"\n        - $ref: \"#/components/schemas/amqp_external_rule_post\"\n        - $ref: \"#/components/schemas/unsupported_rule_response\"\n    rule_response:\n      discriminator:\n        mapping:\n          amqp: \"#/components/schemas/amqp_rule_response\"\n          amqp/external: \"#/components/schemas/amqp_external_rule_response\"\n          aws/kinesis: \"#/components/schemas/aws_kinesis_rule_response\"\n          aws/lambda: \"#/components/schemas/aws_lambda_rule_response\"\n          aws/sqs: \"#/components/schemas/aws_sqs_rule_response\"\n          http: \"#/components/schemas/http_rule_response\"\n          http/azure-function: \"#/components/schemas/azure_function_rule_response\"\n          http/cloudflare-worker: \"#/components/schemas/cloudflare_worker_rule_response\"\n          http/google-cloud-function: \"#/components/schemas/google_cloud_function_rule_response\"\n          http/ifttt: \"#/components/schemas/ifttt_rule_response\"\n          http/zapier: \"#/components/schemas/zapier_rule_response\"\n        propertyName: ruleType\n      oneOf:\n        - $ref: \"#/components/schemas/http_rule_response\"\n        - $ref: \"#/components/schemas/ifttt_rule_response\"\n        - $ref: \"#/components/schemas/zapier_rule_response\"\n        - $ref: \"#/components/schemas/cloudflare_worker_rule_response\"\n        - $ref: \"#/components/schemas/azure_function_rule_response\"\n        - $ref: \"#/components/schemas/google_cloud_function_rule_response\"\n        - $ref: \"#/components/schemas/aws_lambda_rule_response\"\n        - $ref: \"#/components/schemas/aws_kinesis_rule_response\"\n        - $ref: \"#/components/schemas/aws_sqs_rule_response\"\n        - $ref: \"#/components/schemas/amqp_rule_response\"\n        - $ref: \"#/components/schemas/amqp_external_rule_response\"\n    rule_source:\n      additionalProperties: false\n      properties:\n        channelFilter:\n          description: This field allows you to filter your rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the rule to apply to all channels.\n          type: string\n        type:\n          description: The type `channel.message` delivers all messages published on a channel. The type `channel.presence` delivers all enter, update and leave events for members present on a channel. The type `channel.lifecycle` events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature. The type `channel.occupancy` delivers all occupancy events for the channel.\n          enum:\n            - channel.message\n            - channel.presence\n            - channel.lifecycle\n            - channel.occupancy\n          example: channel.message\n          type: string\n      required:\n        - channelFilter\n        - type\n      type: object\n    rule_source_patch:\n      additionalProperties: false\n      properties:\n        channelFilter:\n          description: This field allows you to filter your rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the rule to apply to all channels.\n          type: string\n        type:\n          description: The type `channel.message` delivers all messages published on a channel. The type `channel.presence` delivers all enter, update and leave events for members present on a channel. The type `channel.lifecycle` events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature. The type `channel.occupancy` delivers all occupancy events for the channel.\n          enum:\n            - channel.message\n            - channel.presence\n            - channel.lifecycle\n            - channel.occupancy\n          type: string\n      type: object\n    unsupported_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: This rule type is currently unsupported.\n          enum:\n            - unsupported\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            url:\n              type: string\n          required:\n            - url\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    zapier_rule_patch:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Zapier. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/zapier\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n            url:\n              type: string\n          type: object\n      type: object\n    zapier_rule_post:\n      additionalProperties: false\n      properties:\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Zapier. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/zapier\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n            url:\n              type: string\n          required:\n            - url\n          type: object\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n    zapier_rule_response:\n      additionalProperties: false\n      properties:\n        _links:\n          nullable: true\n          type: object\n        appId:\n          description: The Ably application ID.\n          example: 28GY6a\n          type: string\n        created:\n          description: Unix timestamp representing the date and time of creation of the rule.\n          example: 1602844091815\n          type: number\n        id:\n          description: The rule ID.\n          example: 83IzAB\n          type: string\n        modified:\n          description: Unix timestamp representing the date and time of last modification of the rule.\n          example: 1614679682091\n          type: number\n        requestMode:\n          description: This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably \u003ca href=\"https://ably.com/documentation/general/events#batching\"\u003edocumentation\u003c/a\u003e.\n          enum:\n            - single\n            - batch\n          example: single\n          type: string\n        ruleType:\n          description: The type of rule. In this case Zapier. See the \u003ca href=\"https://ably.com/integrations\"\u003edocumentation\u003c/a\u003e for further information.\n          enum:\n            - http/zapier\n          type: string\n        source:\n          $ref: \"#/components/schemas/rule_source\"\n        status:\n          description: The status of the rule. Rules can be enabled or disabled.\n          enum:\n            - enabled\n            - disabled\n          example: enabled\n          type: string\n        target:\n          additionalProperties: false\n          properties:\n            headers:\n              description: If you have additional information to send, you'll need to include the relevant headers.\n              items:\n                properties:\n                  name:\n                    description: The name of the header.\n                    type: string\n                  value:\n                    description: The value of the header.\n                    type: string\n                type: object\n              type: array\n            signingKeyId:\n              description: The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the \u003ca href=\"https://ably.com/documentation/general/events#security\"\u003ewebhook security docs\u003c/a\u003e for more information.\n              nullable: true\n              type: string\n            url:\n              type: string\n          required:\n            - url\n          type: object\n        version:\n          description: API version. Events and the format of their payloads are versioned. Please see the \u003ca href=\"https://ably.com/documentation/general/events\"\u003eEvents documentation\u003c/a\u003e.\n          type: string\n      required:\n        - ruleType\n        - requestMode\n        - source\n        - target\n      type: object\n  securitySchemes:\n    bearer_auth:\n      description: Control API uses bearer authentication. You need to generate an access token for use with this API. More details can be found in the \u003ca href=\"https://ably.com/documentation/control-api/#authentication\"\u003eAbly documentation\u003c/a\u003e.\n      scheme: bearer\n      type: http\n"
		}
	},
	"Error": "panic: runtime error: invalid memory address or nil pointer dereference"
}