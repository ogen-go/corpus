{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/disit/snap4city"
		},
		"file": {
			"name": "datadictionaryeditor-openapiv3.json",
			"path": "swagger/internal/datadictionaryeditor-openapiv3.json",
			"content": "{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"Data Dictionary Editor API\",\n    \"description\": \"This API allows the creation and maintainment of a dictionary of terms for user input validation.\",\n    \"version\": \"1.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://processloader.snap4city.org/processloader/api\"\n    }\n  ],\n  \"paths\": {\n    \"/dictionary\": {\n      \"get\": {\n        \"tags\": [\n          \"Dictionary\"\n        ],\n        \"summary\": \"It retrieves the list of the terms that are in the dictionary.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"description\": \"Data dictionary element id.\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"type\",\n            \"description\": \"Typology of dictionary elements.\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"nature\",\n                \"subnature\",\n                \"sub_nature\",\n                \"sub nature\",\n                \"valueunit\",\n                \"value_unit\",\n                \"value unit\",\n                \"valuetype\",\n                \"value_type\",\n                \"value type\"\n              ]\n            }\n          },\n          {\n            \"name\": \"parent\",\n            \"description\": \"It filters dictionary elements by parent id. It must be combined with the _type_ parameter. It is applicable only when _type_ is set to _subnature_, or _valueunit_, or one of their variants.\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"child\",\n            \"description\": \"It filters dictionary elements by child id. It must be combined with the _type_ parameter. It is applicable only when _type_ is set to _nature_, or _valuetype_, or one of its variants.\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"get_all\",\n            \"description\": \"When sent, the full dictionary is returned, whichever the value of the parameter is.\",\n            \"in\": \"query\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The requested dictionary entry(s).\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"result\": {\n                      \"type\": \"string\",\n                      \"enum\": [\n                        \"OK\"\n                      ]\n                    },\n                    \"code\": {\n                      \"type\": \"integer\",\n                      \"enum\": [\n                        200\n                      ]\n                    },\n                    \"content\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"id\": {\n                            \"type\": \"string\",\n                            \"example\": \"1\"\n                          },\n                          \"value\": {\n                            \"type\": \"string\",\n                            \"example\": \"Accommodation\"\n                          },\n                          \"label\": {\n                            \"type\": \"string\",\n                            \"example\": \"Accommodation\"\n                          },\n                          \"type\": {\n                            \"type\": \"string\",\n                            \"example\": \"nature\"\n                          },\n                          \"parent_id\": {\n                            \"type\": \"string\",\n                            \"example\": \"1000\"\n                          },\n                          \"parent_value\": {\n                            \"type\": \"string\",\n                            \"example\": \"oneword\"\n                          },\n                          \"children_id\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                              \"type\": \"string\"\n                            },\n                            \"example\": [\n                              \"21\",\n                              \"22\",\n                              \"23\",\n                              \"24\"\n                            ]\n                          },\n                          \"children_value\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                              \"type\": \"string\"\n                            },\n                            \"example\": [\n                              \"Agritourism\",\n                              \"Beach_resort\",\n                              \"Bed_and_breakfast\",\n                              \"Boarding_house\"\n                            ]\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"404\": {\n            \"description\": \"No dictionary entry could be found that matches the filtering criterias.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"result\": {\n                      \"type\": \"string\",\n                      \"enum\": [\n                        \"ERROR\"\n                      ]\n                    },\n                    \"code\": {\n                      \"type\": \"integer\",\n                      \"enum\": [\n                        404\n                      ]\n                    },\n                    \"content\": {\n                      \"type\": \"string\",\n                      \"enum\": [\n                        \"Not found data\"\n                      ]\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"DB connection error.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"result\": {\n                      \"type\": \"string\",\n                      \"enum\": [\n                        \"ERROR\"\n                      ]\n                    },\n                    \"code\": {\n                      \"type\": \"integer\",\n                      \"enum\": [\n                        500\n                      ]\n                    },\n                    \"content\": {\n                      \"type\": \"string\",\n                      \"enum\": [\n                        \"DB connection error\"\n                      ]\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"
		}
	},
	"Error": "panic: runtime error: index out of range [0] with length 0"
}