{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/d8ahazard/glimmr"
		},
		"file": {
			"name": "swagger.json",
			"path": "src/Glimmr/swagger.json",
			"content": "{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"Glimmr Web API\",\n    \"description\": \"A simple example ASP.NET Core Web API\",\n    \"contact\": {\n      \"name\": \"d8ahazard\",\n      \"url\": \"https://facebook.com/GlimmrTV\",\n      \"email\": \"donate.to.digitalhigh@gmail.com\"\n    },\n    \"license\": {\n      \"name\": \"GPL3.0\",\n      \"url\": \"https://github.com/d8ahazard/glimmr/blob/master/COPYING\"\n    },\n    \"version\": \"v1.4\"\n  },\n  \"paths\": {\n    \"/api/Glimmr\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Default endpoint - returns a SystemData object.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/SystemData\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/SystemData\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/SystemData\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/ambientColor\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Retrieve the currently set ambient color.\\r\\nWill still return a value if ambient mode is not\\r\\nactive.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Set the current ambient mode, and set device mode to ambient.\",\n        \"requestBody\": {\n          \"description\": \"A HTML-formatted RGB Color (#666666/FFFFFF)\",\n          \"content\": {\n            \"application/json-patch+json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/ambientScene\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Retrieve the ambient scene specified in the query, or current if none is specified.\\r\\nWill still return a value if ambient mode is not\\r\\nactive.\",\n        \"parameters\": [\n          {\n            \"name\": \"sceneId\",\n            \"in\": \"query\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AmbientScene\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AmbientScene\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AmbientScene\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Set the current ambient mode, and set device mode to ambient.\",\n        \"requestBody\": {\n          \"description\": \"The ID of the target ambient mode.\",\n          \"content\": {\n            \"application/json-patch+json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AmbientScene\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AmbientScene\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AmbientScene\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/ambientScenes\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Retrieve the list of available ambient scenes.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/AmbientScene\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/AmbientScene\"\n                  }\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/AmbientScene\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/audioScene\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Get the currently selected audio scene.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AudioScene\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AudioScene\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AudioScene\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Set the desired audio scene and set device mode to Audio.\",\n        \"requestBody\": {\n          \"description\": \"ID of the target audio scene.\",\n          \"content\": {\n            \"application/json-patch+json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AudioScene\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AudioScene\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AudioScene\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/audioScenes\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Retrieve an array of available audio scenes.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/AudioScene\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/AudioScene\"\n                  }\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/AudioScene\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/authorizeDevice\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Trigger device authorization for the specified device.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"query\",\n            \"description\": \"The device Id to try authorizing.\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"boolean\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"boolean\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"boolean\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/database\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Download a backup of the current database.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Upload and replace the database with a copy from a db download.\",\n        \"requestBody\": {\n          \"content\": {\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"files\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"string\",\n                      \"format\": \"binary\"\n                    }\n                  }\n                }\n              },\n              \"encoding\": {\n                \"files\": {\n                  \"style\": \"form\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/databaseJson\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Retrieve the entire datastore in JSON format.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/StoreData\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/StoreData\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/StoreData\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/device\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Retrieve target device data.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"query\",\n            \"description\": \"The id of the device to retrieve.\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/AdalightData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/DreamScreenData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/GlimmrData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/HueV2Data\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LedData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LifxData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/NanoleafData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/OpenRgbData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/WledData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/YeelightData\"\n                    }\n                  ],\n                  \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/AdalightData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/DreamScreenData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/GlimmrData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/HueV2Data\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LedData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LifxData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/NanoleafData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/OpenRgbData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/WledData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/YeelightData\"\n                    }\n                  ],\n                  \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/AdalightData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/DreamScreenData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/GlimmrData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/HueV2Data\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LedData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LifxData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/NanoleafData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/OpenRgbData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/WledData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/YeelightData\"\n                    }\n                  ],\n                  \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Insert or update a device.\",\n        \"requestBody\": {\n          \"description\": \"A JSON string representing the ColorTarget to update.\",\n          \"content\": {\n            \"application/json-patch+json\": {\n              \"schema\": {\n                \"oneOf\": [\n                  {\n                    \"$ref\": \"#/components/schemas/AdalightData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/DreamScreenData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/GlimmrData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/HueV2Data\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/LedData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/LifxData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/NanoleafData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/OpenRgbData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/WledData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/YeelightData\"\n                  }\n                ],\n                \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n              }\n            },\n            \"application/json\": {\n              \"schema\": {\n                \"oneOf\": [\n                  {\n                    \"$ref\": \"#/components/schemas/AdalightData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/DreamScreenData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/GlimmrData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/HueV2Data\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/LedData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/LifxData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/NanoleafData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/OpenRgbData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/WledData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/YeelightData\"\n                  }\n                ],\n                \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"oneOf\": [\n                  {\n                    \"$ref\": \"#/components/schemas/AdalightData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/DreamScreenData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/GlimmrData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/HueV2Data\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/LedData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/LifxData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/NanoleafData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/OpenRgbData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/WledData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/YeelightData\"\n                  }\n                ],\n                \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"oneOf\": [\n                  {\n                    \"$ref\": \"#/components/schemas/AdalightData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/DreamScreenData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/GlimmrData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/HueV2Data\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/LedData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/LifxData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/NanoleafData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/OpenRgbData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/WledData\"\n                  },\n                  {\n                    \"$ref\": \"#/components/schemas/YeelightData\"\n                  }\n                ],\n                \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/AdalightData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/DreamScreenData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/GlimmrData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/HueV2Data\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LedData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LifxData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/NanoleafData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/OpenRgbData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/WledData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/YeelightData\"\n                    }\n                  ],\n                  \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/AdalightData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/DreamScreenData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/GlimmrData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/HueV2Data\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LedData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LifxData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/NanoleafData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/OpenRgbData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/WledData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/YeelightData\"\n                    }\n                  ],\n                  \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/AdalightData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/DreamScreenData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/GlimmrData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/HueV2Data\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LedData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/LifxData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/NanoleafData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/OpenRgbData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/WledData\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/YeelightData\"\n                    }\n                  ],\n                  \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Delete a device.\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"query\",\n            \"description\": \"The ID of the device to delete.\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"boolean\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"boolean\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"boolean\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/devices\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Retrieve the current list of devices.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"oneOf\": [\n                      {\n                        \"$ref\": \"#/components/schemas/AdalightData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/DreamScreenData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/GlimmrData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/HueV2Data\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LedData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LifxData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/NanoleafData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/OpenRgbData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/WledData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/YeelightData\"\n                      }\n                    ],\n                    \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"oneOf\": [\n                      {\n                        \"$ref\": \"#/components/schemas/AdalightData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/DreamScreenData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/GlimmrData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/HueV2Data\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LedData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LifxData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/NanoleafData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/OpenRgbData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/WledData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/YeelightData\"\n                      }\n                    ],\n                    \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                  }\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"oneOf\": [\n                      {\n                        \"$ref\": \"#/components/schemas/AdalightData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/DreamScreenData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/GlimmrData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/HueV2Data\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LedData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LifxData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/NanoleafData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/OpenRgbData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/WledData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/YeelightData\"\n                      }\n                    ],\n                    \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/flashDevice\": {\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Flash an entire device.\",\n        \"requestBody\": {\n          \"description\": \"The ID of the device to flash on/off.\",\n          \"content\": {\n            \"application/json-patch+json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/flashLed\": {\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Flash a specific LED from the grid.\",\n        \"requestBody\": {\n          \"description\": \"The LED ID to flash.\",\n          \"content\": {\n            \"application/json-patch+json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/flashSector\": {\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Flash a specific Sector.\",\n        \"requestBody\": {\n          \"description\": \"The sector ID to flash.\",\n          \"content\": {\n            \"application/json-patch+json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/glimmrData\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Retrieves a simplified version of our SystemData object used for Glimmr-to-Glimmr control.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GlimmrData\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GlimmrData\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GlimmrData\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/importAmbientScene\": {\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Upload and replace the database with a copy from a db download.\",\n        \"requestBody\": {\n          \"content\": {\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"files\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"string\",\n                      \"format\": \"binary\"\n                    }\n                  }\n                }\n              },\n              \"encoding\": {\n                \"files\": {\n                  \"style\": \"form\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/importAudioScene\": {\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Upload and replace the database with a copy from a db download.\",\n        \"requestBody\": {\n          \"content\": {\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"files\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"string\",\n                      \"format\": \"binary\"\n                    }\n                  }\n                }\n              },\n              \"encoding\": {\n                \"files\": {\n                  \"style\": \"form\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/logs\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Download the current log file.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/mode\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Retrieve or set the current device mode.\",\n        \"parameters\": [\n          {\n            \"name\": \"mode\",\n            \"in\": \"query\",\n            \"description\": \"If specified, set the mode to the value.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\",\n              \"default\": -1\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeviceMode\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeviceMode\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeviceMode\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Set a new device mode.\",\n        \"description\": \"Device Modes:\\r\\nOff = 0,\\r\\nVideo = 1,\\r\\nAudio = 2,\\r\\nAudioVideo = 4,\\r\\nAmbient = 3,\\r\\nUdp = 5,\\r\\nDreamScreen = 6\",\n        \"requestBody\": {\n          \"description\": \"The new device mode to set.\",\n          \"content\": {\n            \"application/json-patch+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/DeviceMode\"\n              }\n            },\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/DeviceMode\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/DeviceMode\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/DeviceMode\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeviceMode\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeviceMode\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/DeviceMode\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/scanDevices\": {\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Triggers a device refresh.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"oneOf\": [\n                      {\n                        \"$ref\": \"#/components/schemas/AdalightData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/DreamScreenData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/GlimmrData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/HueV2Data\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LedData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LifxData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/NanoleafData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/OpenRgbData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/WledData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/YeelightData\"\n                      }\n                    ],\n                    \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"oneOf\": [\n                      {\n                        \"$ref\": \"#/components/schemas/AdalightData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/DreamScreenData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/GlimmrData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/HueV2Data\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LedData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LifxData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/NanoleafData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/OpenRgbData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/WledData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/YeelightData\"\n                      }\n                    ],\n                    \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                  }\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"oneOf\": [\n                      {\n                        \"$ref\": \"#/components/schemas/AdalightData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/DreamScreenData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/GlimmrData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/HueV2Data\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LedData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/LifxData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/NanoleafData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/OpenRgbData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/WledData\"\n                      },\n                      {\n                        \"$ref\": \"#/components/schemas/YeelightData\"\n                      }\n                    ],\n                    \"description\": \"Base class for various color target data classes.\\r\\nAll color target data MUST have these properties,\\r\\nbut will almost certainly implement more.\\r\\nRefer to actual device JSON from /devices\\r\\nfor full device structures.\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/stats\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Fetch current CPU statistics.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/StatData\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/StatData\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/StatData\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/startStream\": {\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Start Glimmr-to-Glimmr UDP stream\",\n        \"requestBody\": {\n          \"description\": \"A GlimmrData object containing the input dimensions of\\r\\nthe received colors.\",\n          \"content\": {\n            \"application/json-patch+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/GlimmrData\"\n              }\n            },\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/GlimmrData\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/GlimmrData\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/GlimmrData\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"boolean\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"boolean\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"boolean\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/store\": {\n      \"get\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Fetch store data object.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/StoreData\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/StoreData\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/StoreData\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/systemControl\": {\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Triggers a system action.\",\n        \"requestBody\": {\n          \"description\": \"Available commands are \\\"restart\\\", \\\"shutdown\\\", \\\"reboot\\\", and \\\"update\\\".\\r\\nRestart restarts ONLY the glimmr service.\\r\\nShutdown shuts down the entire machine.\\r\\nReboot triggers a system reboot.\\r\\nUpdate will stop Glimmr, update the software, and re-start the service.\",\n          \"content\": {\n            \"application/json-patch+json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          }\n        }\n      }\n    },\n    \"/api/Glimmr/systemData\": {\n      \"post\": {\n        \"tags\": [\n          \"Glimmr\"\n        ],\n        \"summary\": \"Update System configuration.\",\n        \"requestBody\": {\n          \"description\": \"A SystemData object.\",\n          \"content\": {\n            \"application/json-patch+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/SystemData\"\n              }\n            },\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/SystemData\"\n              }\n            },\n            \"text/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/SystemData\"\n              }\n            },\n            \"application/*+json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/SystemData\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/SystemData\"\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/SystemData\"\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/SystemData\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"AdalightData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"ReverseStrip\": {\n            \"type\": \"boolean\",\n            \"description\": \"Reverse strip direction.\",\n            \"default\": false\n          },\n          \"GammaFactor\": {\n            \"type\": \"number\",\n            \"description\": \"Gamma adjustment factor. You probably don't want to go higher than 3 or so.\",\n            \"format\": \"float\",\n            \"default\": 2.2\n          },\n          \"LedMultiplier\": {\n            \"type\": \"number\",\n            \"description\": \"Scale factor for LED counts related to master grid.\",\n            \"format\": \"float\"\n          },\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Device brightness.\",\n            \"format\": \"int32\",\n            \"default\": 100\n          },\n          \"LedCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs on device. Must match Adalight settings, or device won't respond.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"Offset\": {\n            \"type\": \"integer\",\n            \"description\": \"Offset of leds from lower-right corner of master grid.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"Speed\": {\n            \"type\": \"integer\",\n            \"description\": \"Baud rate for device.\",\n            \"format\": \"int32\",\n            \"default\": 115200\n          },\n          \"Port\": {\n            \"type\": \"string\",\n            \"description\": \"Port for device communication.\",\n            \"default\": \"COM1\",\n            \"nullable\": true\n          },\n          \"Tag\": {\n            \"type\": \"string\",\n            \"description\": \"Device tag.\",\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Device ID.\",\n            \"nullable\": true\n          },\n          \"IpAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Unused for adalight.\",\n            \"nullable\": true\n          },\n          \"LastSeen\": {\n            \"type\": \"string\",\n            \"description\": \"Last time the device was seen during discovery.\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Device name.\",\n            \"nullable\": true\n          },\n          \"Enable\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable streaming.\",\n            \"default\": false\n          },\n          \"KeyProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/SettingsProperty\"\n            },\n            \"description\": \"UI Properties.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"AmbientScene\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"AnimationTime\": {\n            \"type\": \"number\",\n            \"description\": \"Amount of time (in milliseconds) between color updates.\",\n            \"format\": \"float\"\n          },\n          \"EasingTime\": {\n            \"type\": \"number\",\n            \"description\": \"How long to ease between colors.\",\n            \"format\": \"float\"\n          },\n          \"Id\": {\n            \"type\": \"integer\",\n            \"description\": \"Theme ID. Will be auto-assigned for user defined themes.\",\n            \"format\": \"int32\"\n          },\n          \"Easing\": {\n            \"type\": \"string\",\n            \"description\": \"Easing mode.\\r\\nBlend = 0 (Colors fade directly between one another)\\r\\nFadeIn = 1 (Color fades in after being replaced)\\r\\nFadeOut = 2 (Color fades out, is replaced, turns on full)\\r\\nFadeInOut = 3 (Colors fade in/out before being replaced)\",\n            \"nullable\": true\n          },\n          \"Mode\": {\n            \"type\": \"string\",\n            \"description\": \"Animation mode.\\r\\nLinear = 0 (Colors progress normally)\\r\\nReverse = 1 (Colors progress in reverse direction)\\r\\nRandom = 2 (Colors are selected randomly)\\r\\nRandomAll = 3 (One random color for everything)\\r\\nLinearAll = 4 (Colors progress normally, one color for everything)\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"The theme name.\",\n            \"nullable\": true\n          },\n          \"Colors\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"An array of colors used by the scene.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"AudioData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"IsDefault\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is this the default device?\"\n          },\n          \"IsEnabled\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is this device enabled?\"\n          },\n          \"IsLoopback\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is this a loopback device?\"\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Same as Device Name.\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Device Name (Also Device ID).\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"AudioScene\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"RotationLower\": {\n            \"type\": \"number\",\n            \"description\": \"Overall lower limit to color range (0 - 1)\\r\\nIf lower is GEQ higher, will be ignored\",\n            \"format\": \"float\"\n          },\n          \"RotationUpper\": {\n            \"type\": \"number\",\n            \"description\": \"Overall upper limit to color range (0 - 1)\\r\\nIf lower is GEQ higher, will be ignored\",\n            \"format\": \"float\"\n          },\n          \"RotationSpeed\": {\n            \"type\": \"number\",\n            \"description\": \"How many degrees to rotate on each trigger (0 - 1)\",\n            \"format\": \"float\"\n          },\n          \"RotationThreshold\": {\n            \"type\": \"number\",\n            \"description\": \"Minimum amplitude to trigger color rotation\",\n            \"format\": \"float\"\n          },\n          \"OctaveMap\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"BeamLayout\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Segments\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Segment\"\n            },\n            \"description\": \"List of individual segments.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"CameraType\": {\n        \"enum\": [\n          0,\n          1\n        ],\n        \"type\": \"integer\",\n        \"description\": \"\u003cp\u003ePossible values:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003e\u003cb\u003eRasPiCam = 0\u003c/b\u003e (Raspberry Pi Camera Module)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eWebCam = 1\u003c/b\u003e (Web camera)\u003c/li\u003e\\n\u003c/ul\u003e\\n\",\n        \"format\": \"int32\"\n      },\n      \"CaptureMode\": {\n        \"enum\": [\n          1,\n          2,\n          3\n        ],\n        \"type\": \"integer\",\n        \"description\": \"\u003cp\u003ePossible values:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003e\u003cb\u003eCamera = 1\u003c/b\u003e (Camera)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eHdmi = 2\u003c/b\u003e (HDMI)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eScreen = 3\u003c/b\u003e (Screen)\u003c/li\u003e\\n\u003c/ul\u003e\\n\",\n        \"format\": \"int32\"\n      },\n      \"Ccnf\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Max\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"Min\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"Time\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"\"\n      },\n      \"ColorOrder\": {\n        \"enum\": [\n          0,\n          1,\n          2,\n          3,\n          4,\n          5\n        ],\n        \"type\": \"integer\",\n        \"description\": \"\u003cp\u003ePossible values:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003e\u003cb\u003eRgb = 0\u003c/b\u003e (RGB)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eRbg = 1\u003c/b\u003e (RBG)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eGbr = 2\u003c/b\u003e (GBR)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eGrb = 3\u003c/b\u003e (GRB)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eBgr = 4\u003c/b\u003e (BGR)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eBrg = 5\u003c/b\u003e (BRG)\u003c/li\u003e\\n\u003c/ul\u003e\\n\",\n        \"format\": \"int32\"\n      },\n      \"DeviceMode\": {\n        \"enum\": [\n          0,\n          1,\n          2,\n          3,\n          4,\n          5,\n          6\n        ],\n        \"type\": \"integer\",\n        \"description\": \"The current device mode.\\r\\nOff = 0\\r\\nVideo = 1\\r\\nAudio = 2\\r\\nAmbient = 3\\r\\nAudioVideo = 4\\r\\nUdp = 5\\r\\nDreamScreen = 6\u003cp\u003ePossible values:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003e\u003cb\u003eOff = 0\u003c/b\u003e (Off)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eVideo = 1\u003c/b\u003e (Video)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eAudio = 2\u003c/b\u003e (Audio)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eAmbient = 3\u003c/b\u003e (Ambient)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eAudioVideo = 4\u003c/b\u003e (Audio+Video)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eUdp = 5\u003c/b\u003e (UDP (Glimmr/WLED))\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eDreamScreen = 6\u003c/b\u003e (DreamScreen)\u003c/li\u003e\\n\u003c/ul\u003e\\n\",\n        \"format\": \"int32\"\n      },\n      \"DeviceType\": {\n        \"enum\": [\n          0,\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14\n        ],\n        \"type\": \"integer\",\n        \"description\": \"\u003cp\u003ePossible values:\u003c/p\u003e\\n\u003cul\u003e\\n\u003c/ul\u003e\\n\",\n        \"format\": \"int32\"\n      },\n      \"DeviceUnits\": {\n        \"enum\": [\n          0,\n          1\n        ],\n        \"type\": \"integer\",\n        \"description\": \"\u003cp\u003ePossible values:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003e\u003cb\u003eImperial = 0\u003c/b\u003e (Imperial)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eMetric = 1\u003c/b\u003e (Metric)\u003c/li\u003e\\n\u003c/ul\u003e\\n\",\n        \"format\": \"int32\"\n      },\n      \"DreamScreenData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Device brightness.\",\n            \"format\": \"int32\"\n          },\n          \"GroupNumber\": {\n            \"type\": \"integer\",\n            \"description\": \"Device group number.\",\n            \"format\": \"int32\",\n            \"readOnly\": true\n          },\n          \"DeviceTag\": {\n            \"type\": \"string\",\n            \"description\": \"Dreamscreen-specific device tag.\",\n            \"nullable\": true,\n            \"readOnly\": true\n          },\n          \"Tag\": {\n            \"type\": \"string\",\n            \"description\": \"Device tag.\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Device name.\",\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique device ID.\",\n            \"nullable\": true\n          },\n          \"IpAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Device IP Address.\",\n            \"nullable\": true\n          },\n          \"Enable\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable device for streaming.\"\n          },\n          \"LastSeen\": {\n            \"type\": \"string\",\n            \"description\": \"Last time the device was seen during discovery.\",\n            \"nullable\": true\n          },\n          \"KeyProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/SettingsProperty\"\n            },\n            \"description\": \"UI properties.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"GlimmrData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"MirrorHorizontal\": {\n            \"type\": \"boolean\",\n            \"description\": \"Mirror light data before sending to target Glimmr.\"\n          },\n          \"BottomCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs along the bottom side of the screen.\",\n            \"format\": \"int32\"\n          },\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Device brightness.\",\n            \"format\": \"int32\"\n          },\n          \"LeftCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs along the left side of the screen.\",\n            \"format\": \"int32\"\n          },\n          \"RightCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs along the right side of the screen.\",\n            \"format\": \"int32\"\n          },\n          \"TopCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs along the top side of the screen.\",\n            \"format\": \"int32\"\n          },\n          \"Tag\": {\n            \"type\": \"string\",\n            \"description\": \"Device tag.\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Device name.\",\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique device ID.\",\n            \"nullable\": true\n          },\n          \"IpAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Device IP Address.\",\n            \"nullable\": true\n          },\n          \"Enable\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable device for streaming.\"\n          },\n          \"LastSeen\": {\n            \"type\": \"string\",\n            \"description\": \"Last time the device was seen during discovery.\",\n            \"nullable\": true\n          },\n          \"KeyProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/SettingsProperty\"\n            },\n            \"description\": \"UI Properties.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"HueGroup\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Group Name\",\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Group ID\",\n            \"nullable\": true\n          },\n          \"Services\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/LightMapV2\"\n            },\n            \"description\": \"List of all services associated with this group.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"HueV2Data\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Brightness to use for all enabled hue bulbs, unless override is specified.\",\n            \"format\": \"int32\"\n          },\n          \"Groups\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/HueGroup\"\n            },\n            \"description\": \"List of available entertainment groups.\",\n            \"nullable\": true\n          },\n          \"SelectedGroup\": {\n            \"type\": \"string\",\n            \"description\": \"Target entertainment group to use for streaming.\",\n            \"nullable\": true\n          },\n          \"Token\": {\n            \"type\": \"string\",\n            \"description\": \"Token for entertainment streaming assigned after device is linked.\",\n            \"nullable\": true\n          },\n          \"AppKey\": {\n            \"type\": \"string\",\n            \"description\": \"Hue user ID assigned after device is linked.\",\n            \"nullable\": true\n          },\n          \"Tag\": {\n            \"type\": \"string\",\n            \"description\": \"Device tag\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Device name.\",\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique device ID.\",\n            \"nullable\": true\n          },\n          \"IpAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Device IP Address.\",\n            \"nullable\": true\n          },\n          \"Enable\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable device for streaming.\"\n          },\n          \"LastSeen\": {\n            \"type\": \"string\",\n            \"description\": \"Last time the device was seen during discovery.\",\n            \"nullable\": true\n          },\n          \"KeyProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/SettingsProperty\"\n            },\n            \"description\": \"UI Properties.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"Info\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Live\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is live streaming enabled?\"\n          },\n          \"Str\": {\n            \"type\": \"boolean\",\n            \"description\": \"UI Sync button options.\"\n          },\n          \"Freeheap\": {\n            \"type\": \"integer\",\n            \"description\": \"Free memory heap.\",\n            \"format\": \"int32\"\n          },\n          \"Fxcount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of included effects.\",\n            \"format\": \"int32\"\n          },\n          \"Lwip\": {\n            \"type\": \"integer\",\n            \"description\": \"IP address?\",\n            \"format\": \"int32\"\n          },\n          \"Opt\": {\n            \"type\": \"integer\",\n            \"description\": \"Debugging only.\",\n            \"format\": \"int32\"\n          },\n          \"Palcount\": {\n            \"type\": \"integer\",\n            \"description\": \"Palette count.\",\n            \"format\": \"int32\"\n          },\n          \"Udpport\": {\n            \"type\": \"integer\",\n            \"description\": \"Udp port.\",\n            \"format\": \"int32\"\n          },\n          \"Uptime\": {\n            \"type\": \"integer\",\n            \"description\": \"System Uptime.\",\n            \"format\": \"int32\"\n          },\n          \"Vid\": {\n            \"type\": \"integer\",\n            \"description\": \"Build ID.\",\n            \"format\": \"int32\"\n          },\n          \"Ws\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of current websocket clients.\",\n            \"format\": \"int32\"\n          },\n          \"Leds\": {\n            \"$ref\": \"#/components/schemas/Leds\"\n          },\n          \"Arch\": {\n            \"type\": \"string\",\n            \"description\": \"Architecture.\",\n            \"nullable\": true\n          },\n          \"Brand\": {\n            \"type\": \"string\",\n            \"description\": \"Device brand.\",\n            \"nullable\": true\n          },\n          \"Core\": {\n            \"type\": \"string\",\n            \"description\": \"Arduino core version.\",\n            \"nullable\": true\n          },\n          \"Lip\": {\n            \"type\": \"string\",\n            \"description\": \"LED IP.\",\n            \"nullable\": true\n          },\n          \"Lm\": {\n            \"type\": \"string\",\n            \"description\": \"Realtime datasource info.\",\n            \"nullable\": true\n          },\n          \"Mac\": {\n            \"type\": \"string\",\n            \"description\": \"Device MAC address.\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Device name.\",\n            \"nullable\": true\n          },\n          \"Product\": {\n            \"type\": \"string\",\n            \"description\": \"Product type.\",\n            \"nullable\": true\n          },\n          \"Ver\": {\n            \"type\": \"string\",\n            \"description\": \"Product version.\",\n            \"nullable\": true\n          },\n          \"Wifi\": {\n            \"$ref\": \"#/components/schemas/Wifi\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"LedData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"FixGamma\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable gamma correction.\",\n            \"default\": true\n          },\n          \"ReverseStrip\": {\n            \"type\": \"boolean\",\n            \"description\": \"Reverse the order of data sent to leds.\",\n            \"default\": false\n          },\n          \"LedMultiplier\": {\n            \"type\": \"number\",\n            \"description\": \"Scale factor for LED counts related to master grid.\",\n            \"format\": \"float\"\n          },\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Device brightness.\",\n            \"format\": \"int32\"\n          },\n          \"GpioNumber\": {\n            \"type\": \"integer\",\n            \"description\": \"GPIO Number to use for device. Don't change this.\",\n            \"format\": \"int32\",\n            \"default\": 18\n          },\n          \"LedCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs in strip.\",\n            \"format\": \"int32\",\n            \"default\": 300\n          },\n          \"MilliampsPerLed\": {\n            \"type\": \"integer\",\n            \"description\": \"Per-led milliamp usage. Default is 30.\",\n            \"format\": \"int32\",\n            \"default\": 30\n          },\n          \"Offset\": {\n            \"type\": \"integer\",\n            \"description\": \"Offset of leds from lower-right corner of master grid.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"StripType\": {\n            \"type\": \"integer\",\n            \"description\": \"LED Strip Type.\\r\\n0 = WS2812,\\r\\n1 = SK6812W (RGBW),\\r\\n2 = WS2811,\\r\\nDefault = WS2812\",\n            \"format\": \"int32\"\n          },\n          \"Tag\": {\n            \"type\": \"string\",\n            \"description\": \"Device tag.\",\n            \"default\": \"Led\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique device identifier.\",\n            \"nullable\": true\n          },\n          \"IpAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Device IP Address.\",\n            \"nullable\": true\n          },\n          \"Enable\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable streaming.\"\n          },\n          \"LastSeen\": {\n            \"type\": \"string\",\n            \"description\": \"Last time the device was seen during discovery.\",\n            \"nullable\": true\n          },\n          \"KeyProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/SettingsProperty\"\n            },\n            \"description\": \"UI Elements.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"Leds\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Rgbw\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is the strip RGB+W?\"\n          },\n          \"Seglock\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is the segment locked.\"\n          },\n          \"Wv\": {\n            \"type\": \"boolean\",\n            \"description\": \"Show white channel slider.\"\n          },\n          \"Count\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs.\",\n            \"format\": \"int32\"\n          },\n          \"Maxpwr\": {\n            \"type\": \"integer\",\n            \"description\": \"Maximum power.\",\n            \"format\": \"int32\"\n          },\n          \"Maxseg\": {\n            \"type\": \"integer\",\n            \"description\": \"Maximum number of segments.\",\n            \"format\": \"int32\"\n          },\n          \"Pwr\": {\n            \"type\": \"integer\",\n            \"description\": \"Current LED power usage.\",\n            \"format\": \"int32\"\n          },\n          \"Pin\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"description\": \"LED data pin.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"LifxData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"BeamLayout\": {\n            \"$ref\": \"#/components/schemas/BeamLayout\"\n          },\n          \"HasMultiZone\": {\n            \"type\": \"boolean\",\n            \"description\": \"If this device supports multi-zone operations.\",\n            \"default\": false\n          },\n          \"MultiZoneV2\": {\n            \"type\": \"boolean\",\n            \"description\": \"Supports V2 Multi-zone operations.\",\n            \"default\": false\n          },\n          \"Power\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is the device on?\"\n          },\n          \"Service\": {\n            \"type\": \"integer\",\n            \"description\": \"\",\n            \"format\": \"int32\",\n            \"readOnly\": true\n          },\n          \"MacAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Device's MAC Address.\",\n            \"format\": \"byte\",\n            \"nullable\": true,\n            \"readOnly\": true\n          },\n          \"GammaCorrection\": {\n            \"type\": \"number\",\n            \"description\": \"Gamma Correction level.\",\n            \"format\": \"double\"\n          },\n          \"LedMultiplier\": {\n            \"type\": \"number\",\n            \"description\": \"Scale factor for LED counts related to master grid.\",\n            \"format\": \"float\"\n          },\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Device Brightness.\",\n            \"format\": \"int32\"\n          },\n          \"LedCount\": {\n            \"type\": \"integer\",\n            \"description\": \"UI Properties.\",\n            \"format\": \"int32\",\n            \"default\": 82\n          },\n          \"MultiZoneCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of zones, if device has multi-zone support.\",\n            \"format\": \"int32\",\n            \"default\": 8\n          },\n          \"Port\": {\n            \"type\": \"integer\",\n            \"description\": \"Port used for communication.\",\n            \"format\": \"int32\",\n            \"readOnly\": true\n          },\n          \"ProductId\": {\n            \"type\": \"integer\",\n            \"description\": \"Product ID.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"TargetSector\": {\n            \"type\": \"integer\",\n            \"description\": \"Selected sector, if device is single-color.\",\n            \"format\": \"int32\",\n            \"default\": -1\n          },\n          \"DeviceTag\": {\n            \"type\": \"string\",\n            \"description\": \"Lifx-Specific Device Tag.\",\n            \"nullable\": true,\n            \"readOnly\": true\n          },\n          \"HostName\": {\n            \"type\": \"string\",\n            \"description\": \"Device Hostname.\",\n            \"nullable\": true,\n            \"readOnly\": true\n          },\n          \"MacAddressString\": {\n            \"type\": \"string\",\n            \"description\": \"Device MAC Address.\",\n            \"nullable\": true,\n            \"readOnly\": true\n          },\n          \"Layout\": {\n            \"$ref\": \"#/components/schemas/TileLayout\"\n          },\n          \"Hue\": {\n            \"type\": \"integer\",\n            \"description\": \"Device Hue - Bulb only.\",\n            \"format\": \"int32\"\n          },\n          \"Kelvin\": {\n            \"type\": \"integer\",\n            \"description\": \"Device Color Temperature - Bulb only.\",\n            \"format\": \"int32\"\n          },\n          \"Saturation\": {\n            \"type\": \"integer\",\n            \"description\": \"Device Saturation - Bulb only.\",\n            \"format\": \"int32\"\n          },\n          \"Tag\": {\n            \"type\": \"string\",\n            \"description\": \"Device Tag\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Device Name.\",\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Device ID.\",\n            \"nullable\": true\n          },\n          \"IpAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Device IP Address.\",\n            \"nullable\": true\n          },\n          \"Enable\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable device for streaming.\"\n          },\n          \"LastSeen\": {\n            \"type\": \"string\",\n            \"description\": \"Last time the device was seen during discovery.\",\n            \"nullable\": true\n          },\n          \"KeyProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/SettingsProperty\"\n            },\n            \"description\": \"UI Properties.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"LightMapV2\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"SvcId\": {\n            \"type\": \"string\",\n            \"description\": \"Channel ID of light/device\",\n            \"format\": \"uuid\"\n          },\n          \"Override\": {\n            \"type\": \"boolean\",\n            \"description\": \"Override hue brightness and use light-specific value.\",\n            \"default\": false\n          },\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Light-specific brightness - needs override enable to be used.\",\n            \"format\": \"int32\",\n            \"default\": 255\n          },\n          \"TargetSector\": {\n            \"type\": \"integer\",\n            \"description\": \"Target sector used for streaming.\",\n            \"format\": \"int32\",\n            \"default\": -1\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Light ID\",\n            \"nullable\": true\n          },\n          \"Owner\": {\n            \"type\": \"string\",\n            \"description\": \"Owner RID of the light.\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Light name\",\n            \"nullable\": true\n          },\n          \"Type\": {\n            \"type\": \"string\",\n            \"description\": \"ArchType of the device\",\n            \"nullable\": true\n          },\n          \"Channel\": {\n            \"type\": \"integer\",\n            \"description\": \"Device channel\",\n            \"format\": \"int32\",\n            \"default\": -1\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"Used to associate light data with mapping/brightness info.\"\n      },\n      \"NanoleafData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"MirrorX\": {\n            \"type\": \"boolean\",\n            \"description\": \"Mirror layout horizontally.\",\n            \"default\": false\n          },\n          \"MirrorY\": {\n            \"type\": \"boolean\",\n            \"description\": \"Mirror layout vertically.\",\n            \"default\": false\n          },\n          \"Rotation\": {\n            \"type\": \"number\",\n            \"description\": \"Layout rotation.\",\n            \"format\": \"float\",\n            \"default\": 0\n          },\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Device Brightness.\",\n            \"format\": \"int32\",\n            \"default\": 100\n          },\n          \"Port\": {\n            \"type\": \"integer\",\n            \"description\": \"Port used for communication.\",\n            \"format\": \"int32\"\n          },\n          \"Hostname\": {\n            \"type\": \"string\",\n            \"description\": \"Device host name.\",\n            \"nullable\": true\n          },\n          \"Token\": {\n            \"type\": \"string\",\n            \"description\": \"Token used for control, retrieved after authorization.\",\n            \"nullable\": true\n          },\n          \"Type\": {\n            \"type\": \"string\",\n            \"description\": \"Nanoleaf type.\",\n            \"nullable\": true\n          },\n          \"Version\": {\n            \"type\": \"string\",\n            \"description\": \"Device protocol version.\",\n            \"nullable\": true\n          },\n          \"Layout\": {\n            \"$ref\": \"#/components/schemas/TileLayout\"\n          },\n          \"Tag\": {\n            \"type\": \"string\",\n            \"description\": \"Device tag.\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Device name.\",\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Device ID.\",\n            \"nullable\": true\n          },\n          \"IpAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Device IP address.\",\n            \"nullable\": true\n          },\n          \"Enable\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable device for streaming.\"\n          },\n          \"LastSeen\": {\n            \"type\": \"string\",\n            \"description\": \"Last time the device was seen during discovery.\",\n            \"nullable\": true\n          },\n          \"KeyProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/SettingsProperty\"\n            },\n            \"description\": \"UI Properties.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"Nl\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Fade\": {\n            \"type\": \"boolean\",\n            \"description\": \"Dim over course of nightlight duration.\"\n          },\n          \"On\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable nightlight mode.\"\n          },\n          \"Duration\": {\n            \"type\": \"integer\",\n            \"description\": \"NightLight duration.\",\n            \"format\": \"int32\"\n          },\n          \"Mode\": {\n            \"type\": \"integer\",\n            \"description\": \"Nightlight mode (0: instant, 1: fade, 2: color fade, 3: sunrise).\",\n            \"format\": \"int32\"\n          },\n          \"Tbri\": {\n            \"type\": \"integer\",\n            \"description\": \"Target brightness of nightlight feature.\",\n            \"format\": \"int32\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"Nightlight configuration\"\n      },\n      \"OpenRgbData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"ColorOrder\": {\n            \"$ref\": \"#/components/schemas/ColorOrder\"\n          },\n          \"Type\": {\n            \"$ref\": \"#/components/schemas/DeviceType\"\n          },\n          \"LedMultiplier\": {\n            \"type\": \"number\",\n            \"description\": \"Scale factor for LED counts related to master grid.\",\n            \"format\": \"float\"\n          },\n          \"ActiveModeIndex\": {\n            \"type\": \"integer\",\n            \"description\": \"The index of the active device mode.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Device brightness.\",\n            \"format\": \"int32\",\n            \"default\": 255\n          },\n          \"DeviceId\": {\n            \"type\": \"integer\",\n            \"description\": \"OpenRGB Device ID.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"LedCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs in strip.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"Offset\": {\n            \"type\": \"integer\",\n            \"description\": \"Offset of leds from lower-right corner of master grid.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"Rotation\": {\n            \"type\": \"integer\",\n            \"description\": \"Device rotation.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"Description\": {\n            \"type\": \"string\",\n            \"description\": \"Device description.\",\n            \"default\": \"\",\n            \"nullable\": true\n          },\n          \"Location\": {\n            \"type\": \"string\",\n            \"description\": \"Device location.\",\n            \"default\": \"\",\n            \"nullable\": true\n          },\n          \"Serial\": {\n            \"type\": \"string\",\n            \"description\": \"Device serial.\",\n            \"default\": \"\",\n            \"nullable\": true\n          },\n          \"Vendor\": {\n            \"type\": \"string\",\n            \"description\": \"Device vendor.\",\n            \"default\": \"Unknown\",\n            \"nullable\": true\n          },\n          \"Version\": {\n            \"type\": \"string\",\n            \"description\": \"Device version.\",\n            \"default\": \"\",\n            \"nullable\": true\n          },\n          \"Tag\": {\n            \"type\": \"string\",\n            \"description\": \"Device tag.\",\n            \"default\": \"OpenRgb\",\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Device ID.\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Device name.\",\n            \"default\": \"\",\n            \"nullable\": true\n          },\n          \"IpAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Device IP Address.\",\n            \"default\": \"127.0.0.1\",\n            \"nullable\": true\n          },\n          \"Enable\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable device for streaming.\",\n            \"default\": false\n          },\n          \"LastSeen\": {\n            \"type\": \"string\",\n            \"description\": \"Last time the device was seen during discovery.\",\n            \"nullable\": true\n          },\n          \"KeyProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/SettingsProperty\"\n            },\n            \"description\": \"UI Properties.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"Segment\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Repeat\": {\n            \"type\": \"boolean\",\n            \"description\": \"Use one color for the whole beam.\"\n          },\n          \"Reverse\": {\n            \"type\": \"boolean\",\n            \"description\": \"Reverse color data order.\"\n          },\n          \"Id\": {\n            \"type\": \"integer\",\n            \"description\": \"Beam ID. This is an arbitrary value.\",\n            \"format\": \"int32\"\n          },\n          \"LedCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of leds per beam. Don't change this.\",\n            \"format\": \"int32\"\n          },\n          \"Offset\": {\n            \"type\": \"integer\",\n            \"description\": \"Offset of leds from lower-right corner of master grid.\",\n            \"format\": \"int32\"\n          },\n          \"Position\": {\n            \"type\": \"integer\",\n            \"description\": \"This beam's position in the layout.\",\n            \"format\": \"int32\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"Led Beam Data\"\n      },\n      \"SettingsProperty\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Options\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"A string, string dictionary containing title/value pairs to populate a select input.\",\n            \"nullable\": true\n          },\n          \"ValueHint\": {\n            \"type\": \"string\",\n            \"description\": \"If set, this will be shown beneath the property.\",\n            \"nullable\": true\n          },\n          \"ValueLabel\": {\n            \"type\": \"string\",\n            \"description\": \"Main label for the setting.\",\n            \"nullable\": true\n          },\n          \"ValueMax\": {\n            \"type\": \"string\",\n            \"description\": \"Maximum value that can be set for this property.\",\n            \"nullable\": true\n          },\n          \"ValueMin\": {\n            \"type\": \"string\",\n            \"description\": \"Minimum Value that can be set for this property.\",\n            \"nullable\": true\n          },\n          \"ValueName\": {\n            \"type\": \"string\",\n            \"description\": \"The property name to set in the device object.\",\n            \"nullable\": true\n          },\n          \"ValueStep\": {\n            \"type\": \"string\",\n            \"description\": \"Step size for this property. (Only applies to numeric value types)\",\n            \"nullable\": true\n          },\n          \"ValueType\": {\n            \"type\": \"string\",\n            \"description\": \"The control type to create in the web UI.\\r\\nPossible options:\\r\\ntext - Standard text input\\r\\ncheck - A checkbox (toggle)\\r\\nnumber - A number input (can be limited by valuemax/min/step\\r\\nledmap - Create a LED map (custom)\\r\\nbeamMap - Create a Lifx Beam map\\r\\nsectorLedMap - Create a LED map for WLED that has multiple sections\\r\\nselect - standard select, populate the \\\"Options\\\" dictionary to auto-fill\\r\\nsectormap - Create a standard Sector map\\r\\nnanoleaf - Draw nano leaves\\r\\nhue - Draw Hue selection stuff\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"A class used by the web UI to automagically generate device settings.\"\n      },\n      \"StatData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Fps\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"description\": \"Current number of frames per second.\",\n            \"nullable\": true\n          },\n          \"CpuTemp\": {\n            \"type\": \"number\",\n            \"description\": \"Current CPU temperature (May not work with some AMD processors).\",\n            \"format\": \"float\"\n          },\n          \"MemoryUsage\": {\n            \"type\": \"number\",\n            \"description\": \"Total percentage of memory used.\",\n            \"format\": \"float\"\n          },\n          \"TempMax\": {\n            \"type\": \"number\",\n            \"description\": \"Maximum detected temperature.\",\n            \"format\": \"float\"\n          },\n          \"TempMin\": {\n            \"type\": \"number\",\n            \"description\": \"Minimum detected temperature.\",\n            \"format\": \"float\"\n          },\n          \"CpuUsage\": {\n            \"type\": \"integer\",\n            \"description\": \"Percentage of CPU Used\",\n            \"format\": \"int32\"\n          },\n          \"Uptime\": {\n            \"type\": \"string\",\n            \"description\": \"System Uptime.\",\n            \"nullable\": true,\n            \"readOnly\": true\n          },\n          \"ThrottledState\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Current throttle state.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"StoreData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"AmbientScenes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/AmbientScene\"\n            },\n            \"description\": \"List of detected ambient scenes.\",\n            \"nullable\": true\n          },\n          \"DevAudio\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/AudioData\"\n            },\n            \"description\": \"List of available audio devices.\",\n            \"nullable\": true\n          },\n          \"AudioScenes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/AudioScene\"\n            },\n            \"description\": \"List of detected audio scenes.\",\n            \"nullable\": true\n          },\n          \"DevUsb\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"List of available USB devices.\",\n            \"nullable\": true\n          },\n          \"Devices\": {\n            \"type\": \"array\",\n            \"items\": { },\n            \"description\": \"List of devices and their settings.\",\n            \"nullable\": true\n          },\n          \"Stats\": {\n            \"$ref\": \"#/components/schemas/StatData\"\n          },\n          \"SystemData\": {\n            \"$ref\": \"#/components/schemas/SystemData\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"description\": \"A JSON representation of the database.\"\n      },\n      \"StreamMode\": {\n        \"enum\": [\n          0,\n          1\n        ],\n        \"type\": \"integer\",\n        \"description\": \"\u003cp\u003ePossible values:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003e\u003cb\u003eDreamScreen = 0\u003c/b\u003e (DreamScreen.)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eUdp = 1\u003c/b\u003e (UDP (WLED/Glimmr))\u003c/li\u003e\\n\u003c/ul\u003e\\n\",\n        \"format\": \"int32\"\n      },\n      \"StripMode\": {\n        \"enum\": [\n          0,\n          1,\n          2,\n          3\n        ],\n        \"type\": \"integer\",\n        \"description\": \"\u003cp\u003ePossible values:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003e\u003cb\u003eNormal = 0\u003c/b\u003e (Normal.)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eSectored = 1\u003c/b\u003e (Sectored (use WLED segments).)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eLoop = 2\u003c/b\u003e (Loop colors (strip is divided in half, second half of colors are mirrored).)\u003c/li\u003e\\n\u003cli\u003e\u003cb\u003eSingle = 3\u003c/b\u003e (All leds use a single sector.)\u003c/li\u003e\\n\u003c/ul\u003e\\n\",\n        \"format\": \"int32\"\n      },\n      \"SystemData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"AutoDisabled\": {\n            \"type\": \"boolean\",\n            \"description\": \"If the system is currently auto-disabled due to no input.\",\n            \"default\": false\n          },\n          \"AutoRemoveDevices\": {\n            \"type\": \"boolean\",\n            \"description\": \"If enabled, devices will be automatically removed after the specified time.\",\n            \"default\": false\n          },\n          \"AutoUpdate\": {\n            \"type\": \"boolean\",\n            \"description\": \"If enabled, Glimmr will automatically update itself daily.\",\n            \"default\": false\n          },\n          \"DefaultSet\": {\n            \"type\": \"boolean\",\n            \"description\": \"Set on first-time initialization. Don't change this.\",\n            \"default\": false\n          },\n          \"EnableAutoBrightness\": {\n            \"type\": \"boolean\",\n            \"description\": \"If set, wired LED strips will have their brightness automatically adjusted,\\r\\na la WLED.\",\n            \"default\": true\n          },\n          \"EnableAutoDisable\": {\n            \"type\": \"boolean\",\n            \"description\": \"If set, streaming will be automatically stopped when no input is detected.\",\n            \"default\": true\n          },\n          \"EnableLetterBox\": {\n            \"type\": \"boolean\",\n            \"description\": \"If set, horizontal black bars will be cropped when detected.\",\n            \"default\": true\n          },\n          \"EnablePillarBox\": {\n            \"type\": \"boolean\",\n            \"description\": \"If set, vertical black bars will be cropped when detected.\",\n            \"default\": true\n          },\n          \"SkipDemo\": {\n            \"type\": \"boolean\",\n            \"description\": \"If set, rainbow wipe will not be played on application startup.\",\n            \"default\": false\n          },\n          \"SkipTour\": {\n            \"type\": \"boolean\",\n            \"description\": \"If set, introduction/tour will not run on UI load.\",\n            \"default\": false\n          },\n          \"UseCenter\": {\n            \"type\": \"boolean\",\n            \"description\": \"If set, sectors will also be collected from teh center of the screen, not just the perimeter.\",\n            \"default\": false\n          },\n          \"CamType\": {\n            \"$ref\": \"#/components/schemas/CameraType\"\n          },\n          \"CaptureMode\": {\n            \"$ref\": \"#/components/schemas/CaptureMode\"\n          },\n          \"DeviceMode\": {\n            \"$ref\": \"#/components/schemas/DeviceMode\"\n          },\n          \"PreviousMode\": {\n            \"$ref\": \"#/components/schemas/DeviceMode\"\n          },\n          \"Units\": {\n            \"$ref\": \"#/components/schemas/DeviceUnits\"\n          },\n          \"AblAmps\": {\n            \"type\": \"number\",\n            \"description\": \"Input amps of power supply.\",\n            \"format\": \"float\",\n            \"default\": 3\n          },\n          \"AblVolts\": {\n            \"type\": \"number\",\n            \"description\": \"Input voltage of power supply.\",\n            \"format\": \"float\",\n            \"default\": 5\n          },\n          \"AudioGain\": {\n            \"type\": \"number\",\n            \"description\": \"How much to increase input audio volume.\",\n            \"format\": \"float\",\n            \"default\": 0.5\n          },\n          \"AudioMin\": {\n            \"type\": \"number\",\n            \"description\": \"Low cutoff for audio detection, values below this will not be displayed.\",\n            \"format\": \"float\",\n            \"default\": 0.025\n          },\n          \"AmbientScene\": {\n            \"type\": \"integer\",\n            \"description\": \"Current ambient scene.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"AudioScene\": {\n            \"type\": \"integer\",\n            \"description\": \"Current audio scene.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"AutoDisableDelay\": {\n            \"type\": \"integer\",\n            \"description\": \"How long to wait (in seconds) before disabling streaming when no\\r\\ninput is detected, when auto-disable is active.\",\n            \"format\": \"int32\",\n            \"default\": 30\n          },\n          \"AutoDiscoveryFrequency\": {\n            \"type\": \"integer\",\n            \"description\": \"Delay (in minutes) between execution of auto-discovery.\",\n            \"format\": \"int32\",\n            \"default\": 60\n          },\n          \"AutoRemoveDevicesAfter\": {\n            \"type\": \"integer\",\n            \"description\": \"If enabled,\",\n            \"format\": \"int32\",\n            \"default\": 7\n          },\n          \"AutoUpdateTime\": {\n            \"type\": \"integer\",\n            \"description\": \"How frequently to automatically send updated system data to the UI.\",\n            \"format\": \"int32\",\n            \"default\": 2\n          },\n          \"BaudRate\": {\n            \"type\": \"integer\",\n            \"description\": \"Speed at which to attempt discovering Adalight devices.\",\n            \"format\": \"int32\",\n            \"default\": 115200\n          },\n          \"BlackLevel\": {\n            \"type\": \"integer\",\n            \"description\": \"Colors below this brightness will be considered \\\"black\\\".\\r\\n(Max 255)\",\n            \"format\": \"int32\",\n            \"default\": 7\n          },\n          \"BottomCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs along the bottom of the screen.\",\n            \"format\": \"int32\",\n            \"default\": 96\n          },\n          \"CropBlackLevel\": {\n            \"type\": \"integer\",\n            \"description\": \"Value cropping checks use to determine what is \\\"black\\\" and should\\r\\nbe cropped.\",\n            \"format\": \"int32\",\n            \"default\": 7\n          },\n          \"CropDelay\": {\n            \"type\": \"integer\",\n            \"description\": \"The number of frames required for detection before cropping is\\r\\nactivated, if enabled.\",\n            \"format\": \"int32\",\n            \"default\": 15\n          },\n          \"DiscoveryTimeout\": {\n            \"type\": \"integer\",\n            \"description\": \"How long to wait before canceling discovery tasks, in seconds.\",\n            \"format\": \"int32\",\n            \"default\": 10\n          },\n          \"HSectors\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of horizontal sectors around the screen\",\n            \"format\": \"int32\",\n            \"default\": 10\n          },\n          \"LedCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs for the \\\"master grid\\\". This is auto-computed via left/right/top/bottom counts.\",\n            \"format\": \"int32\",\n            \"default\": 0,\n            \"readOnly\": true\n          },\n          \"LeftCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs along the left side of the screen.\",\n            \"format\": \"int32\",\n            \"default\": 54\n          },\n          \"LogLevel\": {\n            \"type\": \"integer\",\n            \"description\": \"Level to log the logging at. 0 = debug, 1 = inf\",\n            \"format\": \"int32\",\n            \"default\": 1\n          },\n          \"OpenRgbPort\": {\n            \"type\": \"integer\",\n            \"description\": \"Port to use for OpenRGB communication. (Default is 6742)\",\n            \"format\": \"int32\",\n            \"default\": 6742\n          },\n          \"PreviewMode\": {\n            \"type\": \"integer\",\n            \"description\": \"Image preview mode for the web UI.\\r\\n0 = None\\r\\n1 = LED\\r\\n2 = Sectors\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"RightCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs along the right side of the screen.\",\n            \"format\": \"int32\",\n            \"default\": 54\n          },\n          \"SectorCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Total number of sectors available. Is auto-computed based on sector counts and\\r\\nwhether center sectors are enabled.\",\n            \"format\": \"int32\",\n            \"default\": 0,\n            \"readOnly\": true\n          },\n          \"TopCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs along the top of the screen.\",\n            \"format\": \"int32\",\n            \"default\": 96\n          },\n          \"UsbSelection\": {\n            \"type\": \"integer\",\n            \"description\": \"Currently selected USB device for HDMI/camera capture.\",\n            \"format\": \"int32\",\n            \"default\": 0\n          },\n          \"VSectors\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of vertical sectors along the left/right of screen.\",\n            \"format\": \"int32\",\n            \"default\": 6\n          },\n          \"StreamMode\": {\n            \"$ref\": \"#/components/schemas/StreamMode\"\n          },\n          \"AmbientColor\": {\n            \"type\": \"string\",\n            \"description\": \"Current ambient color used when AmbientShow is set to \\\"solid\\\".\",\n            \"nullable\": true\n          },\n          \"DeviceName\": {\n            \"type\": \"string\",\n            \"description\": \"Device name (should be device hostname)\",\n            \"default\": \"\",\n            \"nullable\": true\n          },\n          \"DsIp\": {\n            \"type\": \"string\",\n            \"description\": \"Target DreamScreen device to receive color data from.\\r\\n(Streaming mode must be set to 0/DreamScreen)\",\n            \"default\": \"\",\n            \"nullable\": true\n          },\n          \"IpAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Local IP Address.\",\n            \"nullable\": true,\n            \"readOnly\": true\n          },\n          \"OpenRgbIp\": {\n            \"type\": \"string\",\n            \"description\": \"IP address to use for OpenRGB communication.\",\n            \"default\": \"127.0.0.1\",\n            \"nullable\": true\n          },\n          \"RecDev\": {\n            \"type\": \"string\",\n            \"description\": \"Name of the selected audio device for audio and audio/video capture.\",\n            \"default\": \"\",\n            \"nullable\": true\n          },\n          \"Theme\": {\n            \"type\": \"string\",\n            \"description\": \"Web UI theme\\r\\n(dark/light)\",\n            \"default\": \"dark\",\n            \"nullable\": true\n          },\n          \"TimeZone\": {\n            \"type\": \"string\",\n            \"description\": \"Time zone to use for automatic updates.\",\n            \"default\": \"US/Central\",\n            \"nullable\": true\n          },\n          \"Version\": {\n            \"type\": \"string\",\n            \"description\": \"Version string based on current build + github revision.\",\n            \"nullable\": true,\n            \"readOnly\": true\n          },\n          \"DeviceId\": {\n            \"type\": \"string\",\n            \"description\": \"A unique device ID based on MAC address, or random if no NIC accessible.\",\n            \"default\": \"\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"TileData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"O\": {\n            \"type\": \"integer\",\n            \"description\": \"Orientation.\",\n            \"format\": \"int32\"\n          },\n          \"PanelId\": {\n            \"type\": \"integer\",\n            \"description\": \"Panel ID.\",\n            \"format\": \"int32\"\n          },\n          \"ShapeType\": {\n            \"type\": \"integer\",\n            \"description\": \"What type of shape is this?\",\n            \"format\": \"int32\"\n          },\n          \"SideLength\": {\n            \"type\": \"integer\",\n            \"description\": \"Length of panel sides.\",\n            \"format\": \"int32\"\n          },\n          \"TargetSector\": {\n            \"type\": \"integer\",\n            \"description\": \"The sector to use for streaming for this panel.\",\n            \"format\": \"int32\",\n            \"default\": -1\n          },\n          \"X\": {\n            \"type\": \"integer\",\n            \"description\": \"Tile X position.\",\n            \"format\": \"int32\"\n          },\n          \"Y\": {\n            \"type\": \"integer\",\n            \"description\": \"Tile Y position.\",\n            \"format\": \"int32\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"TileLayout\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"NumPanels\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of panels in the layout.\",\n            \"format\": \"int32\"\n          },\n          \"SideLength\": {\n            \"type\": \"integer\",\n            \"description\": \"Length of sides of each panel. This is not used for shapes.\",\n            \"format\": \"int32\"\n          },\n          \"PositionData\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/TileData\"\n            },\n            \"description\": \"Array of position data for our tiles.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"Udpn\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Recv\": {\n            \"type\": \"boolean\",\n            \"description\": \"Receive broadcast packets\"\n          },\n          \"Send\": {\n            \"type\": \"boolean\",\n            \"description\": \"Send WLED broadcast (UDP sync) packet on state change\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"Wifi\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Channel\": {\n            \"type\": \"integer\",\n            \"description\": \"Wifi channel.\",\n            \"format\": \"int32\"\n          },\n          \"Rssi\": {\n            \"type\": \"integer\",\n            \"description\": \"Wifi RSSI.\",\n            \"format\": \"int32\"\n          },\n          \"Signal\": {\n            \"type\": \"integer\",\n            \"description\": \"Wifi signal strength.\",\n            \"format\": \"int32\"\n          },\n          \"Bssid\": {\n            \"type\": \"string\",\n            \"description\": \"Wifi bssid.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"WledData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"ReverseStrip\": {\n            \"type\": \"boolean\",\n            \"description\": \"Reverse the order of data sent to leds.\",\n            \"default\": false\n          },\n          \"LedMultiplier\": {\n            \"type\": \"number\",\n            \"description\": \"Scale factor for LED counts related to master grid.\",\n            \"format\": \"float\"\n          },\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Device brightness.\",\n            \"format\": \"int32\"\n          },\n          \"LedCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of LEDs in strip.\",\n            \"format\": \"int32\"\n          },\n          \"Offset\": {\n            \"type\": \"integer\",\n            \"description\": \"Offset of leds from lower-right corner of master grid.\",\n            \"format\": \"int32\"\n          },\n          \"Protocol\": {\n            \"type\": \"integer\",\n            \"description\": \"Device protocol.\",\n            \"format\": \"int32\",\n            \"default\": 2\n          },\n          \"TargetSector\": {\n            \"type\": \"integer\",\n            \"description\": \"Target sector, if using sectored StripMode.\",\n            \"format\": \"int32\",\n            \"default\": -1\n          },\n          \"StripMode\": {\n            \"$ref\": \"#/components/schemas/StripMode\"\n          },\n          \"Segments\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/WledSegment\"\n            },\n            \"description\": \"List of individual LED segments defined in WLED.\",\n            \"nullable\": true\n          },\n          \"State\": {\n            \"$ref\": \"#/components/schemas/WledStateData\"\n          },\n          \"Tag\": {\n            \"type\": \"string\",\n            \"description\": \"Device tag.\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Device name.\",\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Device ID.\",\n            \"nullable\": true\n          },\n          \"IpAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Device IP Address.\",\n            \"nullable\": true\n          },\n          \"Enable\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable streaming.\"\n          },\n          \"LastSeen\": {\n            \"type\": \"string\",\n            \"description\": \"Last time the device was seen during discovery.\",\n            \"nullable\": true\n          },\n          \"KeyProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/SettingsProperty\"\n            },\n            \"description\": \"UI Properties.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"WledSegment\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Mi\": {\n            \"type\": \"boolean\",\n            \"description\": \"Mirror the segment.\"\n          },\n          \"On\": {\n            \"type\": \"boolean\",\n            \"description\": \"Segment is enabled.\"\n          },\n          \"ReverseStrip\": {\n            \"type\": \"boolean\",\n            \"description\": \"Flip the segment (reverse animation)\"\n          },\n          \"Sel\": {\n            \"type\": \"boolean\",\n            \"description\": \"True if segment is selected.\"\n          },\n          \"Multiplier\": {\n            \"type\": \"number\",\n            \"description\": \"Scale factor for LED counts related to master grid.\",\n            \"format\": \"float\"\n          },\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Segment brightness.\",\n            \"format\": \"int32\"\n          },\n          \"Fx\": {\n            \"type\": \"integer\",\n            \"description\": \"ID of segment effect.\",\n            \"format\": \"int32\"\n          },\n          \"Grp\": {\n            \"type\": \"integer\",\n            \"description\": \"Segment group\",\n            \"format\": \"int32\"\n          },\n          \"Id\": {\n            \"type\": \"integer\",\n            \"description\": \"Segment ID.\",\n            \"format\": \"int32\"\n          },\n          \"Ix\": {\n            \"type\": \"integer\",\n            \"description\": \"Effect intensity.\",\n            \"format\": \"int32\"\n          },\n          \"LedCount\": {\n            \"type\": \"integer\",\n            \"description\": \"Segment length.\",\n            \"format\": \"int32\"\n          },\n          \"Offset\": {\n            \"type\": \"integer\",\n            \"description\": \"Segment offset in reference to Glimmr master Grid.\",\n            \"format\": \"int32\"\n          },\n          \"Pal\": {\n            \"type\": \"integer\",\n            \"description\": \"ID of the color palette.\",\n            \"format\": \"int32\"\n          },\n          \"Spc\": {\n            \"type\": \"integer\",\n            \"description\": \"Spacing?\",\n            \"format\": \"int32\"\n          },\n          \"Start\": {\n            \"type\": \"integer\",\n            \"description\": \"Segment start position.\",\n            \"format\": \"int32\"\n          },\n          \"Stop\": {\n            \"type\": \"integer\",\n            \"description\": \"Segment end position.\",\n            \"format\": \"int32\"\n          },\n          \"Sx\": {\n            \"type\": \"integer\",\n            \"description\": \"Relative effect speed.\",\n            \"format\": \"int32\"\n          },\n          \"Col\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"integer\",\n                \"format\": \"int32\"\n              }\n            },\n            \"description\": \"Segment colors\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"WledState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"On\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is the device on?\"\n          },\n          \"Ccnf\": {\n            \"$ref\": \"#/components/schemas/Ccnf\"\n          },\n          \"Bri\": {\n            \"type\": \"integer\",\n            \"description\": \"WLED Brightness.\",\n            \"format\": \"int32\"\n          },\n          \"Lor\": {\n            \"type\": \"integer\",\n            \"description\": \"Live Data Override.\",\n            \"format\": \"int32\"\n          },\n          \"Mainseg\": {\n            \"type\": \"integer\",\n            \"description\": \"Main Segment.\",\n            \"format\": \"int32\"\n          },\n          \"Pl\": {\n            \"type\": \"integer\",\n            \"description\": \"ID of currently set playlist.\",\n            \"format\": \"int32\"\n          },\n          \"Ps\": {\n            \"type\": \"integer\",\n            \"description\": \"Id of currently set preset.\",\n            \"format\": \"int32\"\n          },\n          \"Pss\": {\n            \"type\": \"integer\",\n            \"description\": \"Bitwise indication of preset slots.\",\n            \"format\": \"int32\"\n          },\n          \"Transition\": {\n            \"type\": \"integer\",\n            \"description\": \"Duration of cross fade between different colors.\",\n            \"format\": \"int32\"\n          },\n          \"Segments\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/WledSegment\"\n            },\n            \"description\": \"Individual segments.\",\n            \"nullable\": true\n          },\n          \"Nl\": {\n            \"$ref\": \"#/components/schemas/Nl\"\n          },\n          \"Udpn\": {\n            \"$ref\": \"#/components/schemas/Udpn\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"WledStateData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Info\": {\n            \"$ref\": \"#/components/schemas/Info\"\n          },\n          \"WledState\": {\n            \"$ref\": \"#/components/schemas/WledState\"\n          }\n        },\n        \"additionalProperties\": false\n      },\n      \"YeelightData\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"Brightness\": {\n            \"type\": \"integer\",\n            \"description\": \"Device brightness.\",\n            \"format\": \"int32\",\n            \"default\": 255\n          },\n          \"TargetSector\": {\n            \"type\": \"integer\",\n            \"description\": \"Target sector for streaming.\",\n            \"format\": \"int32\",\n            \"default\": -1\n          },\n          \"Tag\": {\n            \"type\": \"string\",\n            \"description\": \"Device tag.\",\n            \"default\": \"Yeelight\",\n            \"nullable\": true\n          },\n          \"Name\": {\n            \"type\": \"string\",\n            \"description\": \"Device name.\",\n            \"default\": \"\",\n            \"nullable\": true\n          },\n          \"Id\": {\n            \"type\": \"string\",\n            \"description\": \"Device ID.\",\n            \"default\": \"\",\n            \"nullable\": true\n          },\n          \"IpAddress\": {\n            \"type\": \"string\",\n            \"description\": \"Device IP Address.\",\n            \"default\": \"\",\n            \"nullable\": true\n          },\n          \"Enable\": {\n            \"type\": \"boolean\",\n            \"description\": \"Enable streaming.\"\n          },\n          \"LastSeen\": {\n            \"type\": \"string\",\n            \"description\": \"Last time the device was seen during discovery.\",\n            \"nullable\": true\n          },\n          \"KeyProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/SettingsProperty\"\n            },\n            \"description\": \"UI Properties.\",\n            \"nullable\": true\n          }\n        },\n        \"additionalProperties\": false\n      }\n    }\n  }\n}"
		}
	},
	"Error": "panic: unexpected kind: any"
}