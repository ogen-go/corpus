{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/roscisz/TensorHive"
		},
		"file": {
			"name": "api_specification.yml",
			"size": 0,
			"path": "tensorhive/api/api_specification.yml",
			"byteSize": 116916,
			"content": "openapi: \"3.0.3\"\n\ninfo:\n  title: \"{{title}}\"\n  version: \"0.5\"\n\nservers:\n  - url: \"/{{url_prefix}}\"\n\npaths:\n  /users:\n    get:\n      tags:\n        - users\n      summary: Get all users\n      operationId: tensorhive.controllers.user.get\n      responses:\n        200:\n          description: {{RESPONSES['general']['success']}}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserToDisplay'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n      security:\n        - Bearer: []\n  /users/{id}:\n    get:\n      tags:\n        - users\n      summary: Get user with given ID\n      operationId: tensorhive.controllers.user.get_by_id\n      parameters:\n        - description: User ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['general']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['user']['get']['success']}}\n                  user:\n                    $ref: '#/components/schemas/UserToDisplay'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['user']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['user']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /user/create:\n    post:\n      tags:\n        - users\n      summary: Create new user\n      operationId: tensorhive.controllers.user.create\n      requestBody:\n        description: User object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserForm'\n              x-body-name: newUser\n      responses:\n        201:\n          description: {{RESPONSES['user']['create']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['user']['create']['success']}}\n                  user:\n                    $ref: '#/components/schemas/UserToDisplay'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        409:\n          description: {{RESPONSES['user']['create']['failure']['duplicate']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['user']['create']['failure']['invalid']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /user:\n    put:\n      tags:\n        - users\n      summary: Update existing user\n      operationId: tensorhive.controllers.user.update\n      requestBody:\n        description: User object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserUpdateForm'\n              x-body-name: newValues\n      responses:\n        201:\n          description: {{RESPONSES['user']['update']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['user']['update']['success']}}\n                  user:\n                    $ref: '#/components/schemas/UserToDisplay'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        409:\n          description: {{RESPONSES['user']['create']['failure']['duplicate']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['user']['create']['failure']['invalid']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /user/ssh_signup:\n    post:\n      tags:\n        - users\n      summary: Create new user account based on SSH authentication\n      operationId: tensorhive.controllers.user.ssh_signup\n      requestBody:\n        description: User object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserForm'\n              x-body-name: user\n      responses:\n        201:\n          description: {{RESPONSES['user']['create']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['user']['create']['success']}}\n                  user:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/UserToDisplay'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n        409:\n          description: {{RESPONSES['user']['create']['failure']['duplicate']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['user']['create']['failure']['invalid']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n  /user/delete/{id}:\n    delete:\n      tags:\n        - users\n      summary: Delete user\n      operationId: tensorhive.controllers.user.delete\n      parameters:\n        - description: User ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['user']['delete']['success']}}\n          content:\n            application/json:\n              schema:\n                example:\n                  msg: {{RESPONSES['user']['delete']['success']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['user']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /user/logout:\n    delete:\n      tags:\n        - authentication\n      summary: Logout user using access token\n      operationId: tensorhive.controllers.user.logout_with_access_token\n      responses:\n        200:\n          description: {{RESPONSES['user']['logout']['success']}}\n          content:\n            application/json:\n              schema:\n                example:\n                  msg: {{RESPONSES['user']['logout']['success']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /user/logout/refresh_token:\n    delete:\n      tags:\n        - authentication\n      summary: Logout user using refresh token\n      operationId: tensorhive.controllers.user.logout_with_refresh_token\n      responses:\n        200:\n          description: {{RESPONSES['user']['logout']['success']}}\n          content:\n            application/json:\n              schema:\n                example:\n                  msg: {{RESPONSES['user']['logout']['success']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /user/refresh:\n    get:\n      tags:\n        - authentication\n      summary: Generate new access token using refresh token\n      operationId: tensorhive.controllers.user.generate\n      responses:\n        200:\n          description: {{RESPONSES['token']['refresh']['success']}}\n          content:\n            application/json:\n              schema:\n                example:\n                  msg: {{RESPONSES['token']['refresh']['success']}}\n                  access_token: \u003cACCESS_TOKEN\u003e\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n      security:\n        - Bearer: []\n  /user/login:\n    post:\n      tags:\n        - authentication\n      summary: Login user\n      operationId: tensorhive.controllers.user.login\n      requestBody:\n        description: User object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserLoginForm'\n              x-body-name: user\n      responses:\n        200:\n          description: {{RESPONSES['user']['login']['success']}}\n          content:\n            application/json:\n              schema:\n                example:\n                  msg: {{RESPONSES['user']['login']['success']}}\n                  access_token: \u003cACCESS_TOKEN\u003e\n                  refresh_token: \u003cREFRESH_TOKEN\u003e\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['user']['login']['failure']['credentials']}}\n        404:\n          description: {{RESPONSES['user']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n  /user/authorized_keys_entry:\n    get:\n      tags:\n        - authentication\n      summary: Get TensorHive public SSH key record for authorized_keys\n      operationId: tensorhive.controllers.user.authorized_keys_entry\n      responses:\n        200:\n          description: {{RESPONSES['user']['authorized_keys_entry']['success']}}\n          content:\n            application/json:\n              schema:\n                example: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWuvmEw9RWI0WMv9aseFadgDXZbHW7KjQt6H7keoQ13y/XQX0+vosmEq70DQ9HCxmwvrSruR63DLe8eW5k80OBeAcHZ+e6f6g/017tCKfYTibCEboB7v7TgGO74kWcihZK5jPHg/jxwKktxDdbCfqvl6hrR5hwE2sJ5gVAx6UPJNVoZYRD2rAPhjKJ1NlENhCWrxrt72c/a6Qe9aRSvJ/Yxn+PWr5BbxyFFKEcmos9bUwh7NgdmsZphVrKeGnx9Nl1q46/PLBW2V4FbBpsv6OD6FksIdZF0irFNmfq1LGHDLlRwVrEXrTdQST2FqyNZJSXRxblEchzYijLA1J03xir tensorhive@ai'\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n  /groups:\n    get:\n      tags:\n        - groups\n      summary: Get all or default groups\n      operationId: tensorhive.controllers.group.get\n      parameters:\n        - description: If set to false get all groups if true then only default groups\n          in: query\n          name: only_default\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: {{RESPONSES['general']['success']}}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n      security:\n        - Bearer: []\n    post:\n      tags:\n        - groups\n      summary: Create new group\n      operationId: tensorhive.controllers.group.create\n      requestBody:\n        description: Group object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupForm'\n              x-body-name: group\n      responses:\n        201:\n          description: {{RESPONSES['group']['create']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['group']['create']['success']}}\n                  group:\n                    $ref: '#/components/schemas/Group'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['group']['create']['failure']['invalid']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /groups/{id}:\n    get:\n      tags:\n        - groups\n      summary: Get group with given ID\n      operationId: tensorhive.controllers.group.get_by_id\n      parameters:\n        - description: Group ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['general']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['group']['get']['success']}}\n                  group:\n                    $ref: '#/components/schemas/Group'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        404:\n          description: {{RESPONSES['group']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['group']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    put:\n      tags:\n        - groups\n      summary: Update existing group\n      operationId: tensorhive.controllers.group.update\n      requestBody:\n        description: Group object with fields to overwrite.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GroupUpdateForm'\n              x-body-name: newValues\n      parameters:\n        - description: Group ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['group']['update']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['group']['update']['success']}}\n                  group:\n                    $ref: '#/components/schemas/Group'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['group']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['group']['update']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - groups\n      summary: Delete group\n      operationId: tensorhive.controllers.group.delete\n      parameters:\n        - description: Group ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['group']['delete']['success']}}\n          content:\n            application/json:\n              schema:\n                example:\n                  msg: {{RESPONSES['group']['delete']['success']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['group']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /groups/{group_id}/users/{user_id}:\n    put:\n      tags:\n        - groups\n      summary: Add user to group\n      operationId: tensorhive.controllers.group.add_user\n      parameters:\n        - description: Group ID\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: integer\n        - description: User ID\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['group']['users']['add']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['group']['users']['add']['success']}}\n                  group:\n                    $ref: '#/components/schemas/Group'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['group']['not_found']}} or {{RESPONSES['user']['not_found']}}\n        409:\n          description: {{RESPONSES['group']['users']['add']['failure']['duplicate']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['group']['users']['add']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - groups\n      summary: Remove user from group\n      operationId: tensorhive.controllers.group.remove_user\n      parameters:\n        - description: Group ID\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: integer\n        - description: User ID\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['group']['users']['remove']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['group']['users']['remove']['success']}}\n                  group:\n                    $ref: '#/components/schemas/Group'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['group']['not_found']}} or {{RESPONSES['user']['not_found']}} or {{RESPONSES['group']['users']['remove']['failure']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['group']['users']['remove']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /restrictions:\n    get:\n      tags:\n        - restrictions\n      summary: Get all or specific restrictions\n      operationId: tensorhive.controllers.restriction.get\n      parameters:\n        - description: User id\n          in: query\n          name: user_id\n          required: false\n          schema:\n            type: integer\n            nullable: true\n            default: null\n        - description: If user id is given include restrictions applied to groups of which user is member\n          in: query\n          name: include_user_groups\n          required: false\n          schema:\n            type: boolean\n            nullable: true\n            default: null\n        - description: Group id\n          in: query\n          name: group_id\n          required: false\n          schema:\n            type: integer\n            nullable: true\n            default: null\n        - description: Resource id\n          in: query\n          name: resource_id\n          required: false\n          schema:\n            type: string\n            nullable: true\n            default: null\n        - description: Schedule id\n          in: query\n          name: schedule_id\n          required: false\n          schema:\n            type: integer\n            nullable: true\n            default: null\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Restriction'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}.\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    post:\n      tags:\n        - restrictions\n      summary: Create new restriction\n      operationId: tensorhive.controllers.restriction.create\n      requestBody:\n        description: Restriction object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RestrictionForm'\n              x-body-name: restriction\n      responses:\n        201:\n          description: {{RESPONSES['restriction']['create']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['create']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['create']['failure']['invalid']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /restrictions/{id}:\n    put:\n      tags:\n        - restrictions\n      summary: Update existing restriction\n      operationId: tensorhive.controllers.restriction.update\n      requestBody:\n        description: Restriction object with fields to overwrite (end field is nullable string).\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RestrictionUpdateForm'\n              x-body-name: newValues\n      parameters:\n          - description: Restriction ID\n            in: path\n            name: id\n            required: true\n            schema:\n              type: integer\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['update']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['update']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['update']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - restrictions\n      summary: Delete restriction\n      operationId: tensorhive.controllers.restriction.delete\n      parameters:\n        - description: Restriction ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['delete']['success']}}\n          content:\n            application/json:\n              schema:\n                example:\n                  msg: {{RESPONSES['restriction']['delete']['success']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /restrictions/{restriction_id}/users/{user_id}:\n    put:\n      tags:\n        - restrictions\n      summary: Apply restriction to user\n      operationId: tensorhive.controllers.restriction.apply_to_user\n      parameters:\n        - description: Restriction ID\n          in: path\n          name: restriction_id\n          required: true\n          schema:\n            type: integer\n        - description: User ID\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['users']['apply']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['users']['apply']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['user']['not_found']}}\n        409:\n          description: {{RESPONSES['restriction']['users']['apply']['failure']['duplicate']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['users']['apply']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - restrictions\n      summary: Remove restriction from user\n      operationId: tensorhive.controllers.restriction.remove_from_user\n      parameters:\n        - description: Restriction ID\n          in: path\n          name: restriction_id\n          required: true\n          schema:\n            type: integer\n        - description: User ID\n          in: path\n          name: user_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['users']['remove']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['users']['remove']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['user']['not_found']}} or {{RESPONSES['restriction']['users']['remove']['failure']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['users']['remove']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /restrictions/{restriction_id}/groups/{group_id}:\n    put:\n      tags:\n        - restrictions\n      summary: Apply restriction to group\n      operationId: tensorhive.controllers.restriction.apply_to_group\n      parameters:\n        - description: Restriction ID\n          in: path\n          name: restriction_id\n          required: true\n          schema:\n            type: integer\n        - description: Group ID\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['groups']['apply']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['groups']['apply']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['group']['not_found']}}\n        409:\n          description: {{RESPONSES['restriction']['groups']['apply']['failure']['duplicate']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['groups']['apply']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - restrictions\n      summary: Remove restriction from group\n      operationId: tensorhive.controllers.restriction.remove_from_group\n      parameters:\n        - description: Restriction ID\n          in: path\n          name: restriction_id\n          required: true\n          schema:\n            type: integer\n        - description: Group ID\n          in: path\n          name: group_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['groups']['remove']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['groups']['remove']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['group']['not_found']}} or {{RESPONSES['restriction']['groups']['remove']['failure']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['groups']['remove']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /restrictions/{restriction_id}/resources/{resource_uuid}:\n    put:\n      tags:\n        - restrictions\n      summary: Apply restriction to resource\n      operationId: tensorhive.controllers.restriction.apply_to_resource\n      parameters:\n        - description: Restriction ID\n          in: path\n          name: restriction_id\n          required: true\n          schema:\n            type: integer\n        - description: Resource UUID\n          in: path\n          name: resource_uuid\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['resources']['apply']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['resources']['apply']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['resource']['not_found']}}\n        409:\n          description: {{RESPONSES['restriction']['resources']['apply']['failure']['duplicate']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['resources']['apply']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - restrictions\n      summary: Remove restriction from resource\n      operationId: tensorhive.controllers.restriction.remove_from_resource\n      parameters:\n        - description: Restriction ID\n          in: path\n          name: restriction_id\n          required: true\n          schema:\n            type: integer\n        - description: Resource UUID\n          in: path\n          name: resource_uuid\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['resources']['remove']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['resources']['remove']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['resource']['not_found']}} or {{RESPONSES['restriction']['resources']['remove']['failure']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['resources']['remove']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /restrictions/{restriction_id}/hosts/{hostname}:\n    put:\n      tags:\n        - restrictions\n      summary: Apply restriction to all resources with given hostname\n      operationId: tensorhive.controllers.restriction.apply_to_resources_by_hostname\n      parameters:\n        - description: Restriction ID\n          in: path\n          name: restriction_id\n          required: true\n          schema:\n            type: integer\n        - description: Resources hostname\n          in: path\n          name: hostname\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['hosts']['apply']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['hosts']['apply']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['nodes']['hostname']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['hosts']['apply']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - restrictions\n      summary: Remove restriction from all resources with given hostname\n      operationId: tensorhive.controllers.restriction.remove_from_resources_by_hostname\n      parameters:\n        - description: Restriction ID\n          in: path\n          name: restriction_id\n          required: true\n          schema:\n            type: integer\n        - description: Resources hostname\n          in: path\n          name: hostname\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['hosts']['remove']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['hosts']['remove']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['nodes']['hostname']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['hosts']['apply']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /restrictions/{restriction_id}/schedules/{schedule_id}:\n    put:\n      tags:\n        - restrictions\n      summary: Add schedule to restriction\n      operationId: tensorhive.controllers.restriction.add_schedule\n      parameters:\n        - description: Restriction ID\n          in: path\n          name: restriction_id\n          required: true\n          schema:\n            type: integer\n        - description: Schedule ID\n          in: path\n          name: schedule_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['schedules']['add']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['schedules']['add']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['schedule']['not_found']}}\n        409:\n          description: {{RESPONSES['restriction']['schedules']['add']['failure']['duplicate']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['schedules']['add']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - restrictions\n      summary: Remove schedule from restriction\n      operationId: tensorhive.controllers.restriction.remove_schedule\n      parameters:\n        - description: Restriction ID\n          in: path\n          name: restriction_id\n          required: true\n          schema:\n            type: integer\n        - description: Schedule ID\n          in: path\n          name: schedule_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['restriction']['schedules']['remove']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['restriction']['schedules']['remove']['success']}}\n                  restriction:\n                    $ref: '#/components/schemas/Restriction'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['restriction']['not_found']}} or {{RESPONSES['schedule']['not_found']}} or {{RESPONSES['restriction']['schedules']['remove']['failure']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['restriction']['schedules']['remove']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /schedules:\n    get:\n      tags:\n        - schedules\n      summary: Get all schedules\n      operationId: tensorhive.controllers.schedule.get\n      responses:\n        200:\n          description: {{RESPONSES['general']['success']}}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schedule'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []    \n    post:\n      tags:\n        - schedules\n      summary: Create new restriction schedule\n      operationId: tensorhive.controllers.schedule.create\n      requestBody:\n        description: Schedule object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScheduleForm'\n              x-body-name: schedule\n      responses:\n        201:\n          description: {{RESPONSES['schedule']['create']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['schedule']['create']['success']}}\n                  schedule:\n                    $ref: '#/components/schemas/Schedule'\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['schedule']['create']['failure']['invalid']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /schedules/{id}:\n    get:\n      tags:\n        - schedules\n      summary: Get schedule with given ID\n      operationId: tensorhive.controllers.schedule.get_by_id\n      parameters:\n        - description: Schedule ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['general']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['schedule']['get']['success']}}\n                  schedule:\n                    $ref: '#/components/schemas/Schedule'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        404:\n          description: {{RESPONSES['schedule']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['schedule']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    put:\n      tags:\n        - schedules\n      summary: Update existing schedule\n      operationId: tensorhive.controllers.schedule.update\n      requestBody:\n        description: Schedule object with fields to overwrite.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScheduleUpdateForm'\n              x-body-name: newValues\n      parameters:\n          - description: Schedule ID\n            in: path\n            name: id\n            required: true\n            schema:\n              type: integer\n      responses:\n        200:\n          description: {{RESPONSES['schedule']['update']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['schedule']['update']['success']}}\n                  schedule:\n                    $ref: '#/components/schemas/Schedule'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['schedule']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['schedule']['update']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - schedules\n      summary: Delete schedule\n      operationId: tensorhive.controllers.schedule.delete\n      parameters:\n        - description: Schedule ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['schedule']['delete']['success']}}\n          content:\n            application/json:\n              schema:\n                example:\n                  msg: {{RESPONSES['schedule']['delete']['success']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['schedule']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /jobs:\n    get:\n      tags: \n        - jobs\n      operationId: tensorhive.controllers.job.get_all\n      summary: Query jobs\n      parameters:\n        - description: User ID (optional)\n          in: query\n          name: userId\n          required: false\n          schema:\n            type: integer\n            default: null\n            nullable: true\n      responses:\n        200:\n          description: {{RESPONSES['job']['all']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['all']['success']}}\n                  jobs:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/JobToDisplay'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}        \n      security:\n        - Bearer: []\n    post:\n      tags: \n        - jobs\n      summary: Create new job\n      operationId: tensorhive.controllers.job.create\n      requestBody:\n        description: |\n          Job object\n          * start time field is nullable string\n          * stop time field is nullable string\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JobForm'\n              x-body-name: job\n      responses:\n        201:\n          description: {{RESPONSES['job']['create']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['create']['success']}}\n                  job:\n                    $ref: '#/components/schemas/JobToDisplay'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        409:\n          description: {{RESPONSES['job']['create']['failure']['duplicate']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['job']['create']['failure']['invalid']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /jobs/{id}:\n    get:\n      tags: \n        - jobs\n      operationId: tensorhive.controllers.job.get_by_id\n      summary: Get job by ID\n      parameters:\n        - description: Job ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['job']['get']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['get']['success']}}\n                  job:\n                    $ref: '#/components/schemas/JobToDisplay'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['job']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    put:\n      tags: \n        - jobs\n      operationId: tensorhive.controllers.job.update\n      summary: Update job\n      requestBody:\n        description: |\n            Job object with fields to overwrite.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JobUpdateForm'\n              x-body-name: newValues\n      parameters:\n        - description: Job ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['update']['success']}}\n                  job:\n                    $ref: '#/components/schemas/JobToDisplay'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['job']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - jobs\n      summary: Delete job\n      operationId: tensorhive.controllers.job.delete\n      parameters:\n        - description: Job ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['delete']['success']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['job']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /jobs/{id}/execute:\n    get:\n      tags: \n        - jobs\n      summary: Execute a job by id\n      parameters:\n        - description: Job ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      operationId: tensorhive.controllers.job.execute\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['execute']['success']}}\n                  job:\n                    $ref: '#/components/schemas/JobToDisplay'\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['job']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['not_found']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        409:\n          description: {{RESPONSES['job']['execute']['failure']['state']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['execute']['failure']['state']}}\n        422:\n          description: {{RESPONSES['job']['execute']['failure']['tasks']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['execute']['failure']['tasks']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /jobs/{id}/enqueue:\n    put:\n      tags:\n        - jobs\n      summary: Enqueue a job by id\n      parameters:\n        - description: Job ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      operationId: tensorhive.controllers.job.enqueue\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['enqueue']['success']}}\n                  job:\n                    $ref: '#/components/schemas/JobToDisplay'\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['job']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['not_found']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        409:\n          description: {{RESPONSES['job']['enqueue']['failure']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['enqueue']['failure']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /jobs/{id}/dequeue:\n    put:\n      tags:\n        - jobs\n      summary: Dequeue a job by id\n      parameters:\n        - description: Job ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      operationId: tensorhive.controllers.job.dequeue\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['enqueue']['success']}}\n                  job:\n                    $ref: '#/components/schemas/JobToDisplay'\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['job']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['not_found']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        409:\n          description: {{RESPONSES['job']['dequeue']['failure']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['dequeue']['failure']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /jobs/{id}/stop:\n    get:\n      tags: \n        - jobs\n      summary: Stop a specific job\n      parameters:\n        - description: Job ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - description: false to kill, null to terminate, true to interrupt all belonging tasks\n          in: query\n          name: gracefully\n          required: false\n          schema:\n            type: boolean\n            nullable: true\n            default: null\n      operationId: tensorhive.controllers.job.stop\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['stop']['success']}}\n                  job:\n                    $ref: '#/components/schemas/JobToDisplay'\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['job']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['not_found']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        409:\n          description: {{RESPONSES['job']['stop']['failure']['state']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['stop']['failure']['state']}}\n        422:\n          description: {{RESPONSES['job']['stop']['failure']['tasks']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['stop']['failure']['tasks']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /jobs/{job_id}/tasks:\n    post:\n      tags: \n        - jobs\n      summary: Create new task\n      operationId: tensorhive.controllers.task.create\n      requestBody:\n        description: |\n          Task object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskForm'\n              x-body-name: task\n      parameters:\n        - description: Job ID\n          in: path\n          name: job_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        201:\n          description: {{RESPONSES['task']['create']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['task']['create']['success']}}\n                  task:\n                    $ref: '#/components/schemas/TaskToDisplay'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        409:\n          description: {{RESPONSES['task']['create']['failure']['duplicate']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['task']['create']['failure']['invalid']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /jobs/{job_id}/tasks/{task_id}:\n    put:\n      tags:\n        - jobs\n      summary: Add task to job\n      operationId: tensorhive.controllers.job.add_task\n      parameters:\n        - description: Job ID\n          in: path\n          name: job_id\n          required: true\n          schema:\n            type: integer\n        - description: Task ID\n          in: path\n          name: task_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['job']['tasks']['add']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['tasks']['add']['success']}}\n                  job:\n                    $ref: '#/components/schemas/JobToDisplay'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['job']['tasks']['add']['failure']['assertions']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['tasks']['add']['failure']['assertions']}}\n        404:\n          description: {{RESPONSES['job']['not_found']}} or {{RESPONSES['task']['not_found']}}\n        409:\n          description: {{RESPONSES['job']['tasks']['add']['failure']['duplicate']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['job']['tasks']['add']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - jobs\n      summary: Remove task from job\n      operationId: tensorhive.controllers.job.remove_task\n      parameters:\n        - description: Job ID\n          in: path\n          name: job_id\n          required: true\n          schema:\n            type: integer\n        - description: Task ID\n          in: path\n          name: task_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['job']['tasks']['remove']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['tasks']['remove']['success']}}\n                  job:\n                    $ref: '#/components/schemas/JobToDisplay'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['job']['tasks']['remove']['failure']['assertions']}}   \n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['job']['tasks']['remove']['failure']['assertions']}}\n        404:\n          description: {{RESPONSES['job']['not_found']}} or {{RESPONSES['task']['not_found']}} or {{RESPONSES['job']['tasks']['remove']['failure']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['job']['tasks']['add']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /reservations:\n    get:\n      tags:\n        - reservations\n      summary: Get all or specific reservation events\n      operationId: tensorhive.controllers.reservation.get\n      parameters:\n        - description: Array of uuids\n          in: query\n          name: resources_ids\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - description: UTC ISO (e.g. 2018-10-22T10:00:00.0Z)\n          in: query\n          name: start\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - description: UTC ISO (e.g. 2018-10-22T19:00:00.0Z)\n          in: query\n          name: end\n          required: false\n          schema:\n            type: string\n            format: date-time\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Reservation'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}. Specify all parameters or none.\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    post:\n      tags:\n        - reservations\n      summary: Make new reservation\n      operationId: tensorhive.controllers.reservation.create\n      requestBody:\n        description: Reservation object\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReservationForm'\n              x-body-name: reservation\n      responses:\n        201:\n          description: {{RESPONSES['reservation']['create']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['reservation']['create']['success']}}\n                  reservation:\n                    $ref: '#/components/schemas/Reservation'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['reservation']['create']['failure']['forbidden']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['reservation']['create']['failure']['invalid']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /reservations/{id}:\n    put:\n      tags:\n        - reservations\n      summary: Update existing reservation\n      operationId: tensorhive.controllers.reservation.update\n      requestBody:\n        description: Reservation object with fields to overwrite.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReservationUpdateForm'\n              x-body-name: newValues\n      parameters:\n        - description: Reservation ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        201:\n          description: {{RESPONSES['reservation']['update']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['reservation']['update']['success']}}\n                  reservation:\n                    $ref: '#/components/schemas/Reservation'\n        400:\n          description: {{RESPONSES['general']['bad_request']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['reservation']['update']['failure']['forbidden']}}\n        404:\n          description: {{RESPONSES['reservation']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}} or {{RESPONSES['reservation']['update']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - reservations\n      summary: Delete reservation\n      operationId: tensorhive.controllers.reservation.delete\n      parameters:\n        - description: Reservation ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['reservation']['delete']['success']}}\n          content:\n            application/json:\n              schema:\n                example:\n                  msg: {{RESPONSES['reservation']['delete']['success']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        404:\n          description: {{RESPONSES['reservation']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /resources:\n    get:\n      tags:\n        - resources\n      summary: Get all resources\n      operationId: tensorhive.controllers.resource.get\n      responses:\n        200:\n          description: {{RESPONSES['general']['success']}}\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Resource'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n      security:\n        - Bearer: []\n  /resource/{uuid}:\n    get:\n      tags:\n        - resources\n      summary: Get resource with given UUID\n      operationId: tensorhive.controllers.resource.get_by_id\n      parameters:\n        - description: Resource UUID\n          in: path\n          name: uuid\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: {{RESPONSES['general']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['resource']['get']['success']}}\n                  resource:\n                    $ref: '#/components/schemas/Resource'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        404:\n          description: {{RESPONSES['resource']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['resource']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /nodes/hostnames:\n    get:\n      tags:\n        - nodes\n      summary: Get all hostnames\n      operationId: tensorhive.controllers.nodes.get_hostnames\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                example:\n                  - hostname1\n                  - hostname2\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n      security:\n        - Bearer: []\n  /nodes/metrics:\n    get:\n      tags:\n        - nodes\n      summary: Get each node's all metric data\n      description: Puts null if some data is unavailable\n      operationId: tensorhive.controllers.nodes.get_all_data\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GPUAllData'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n      security:\n        - Bearer: []\n  /nodes/{hostname}/gpu/info:\n    get:\n      tags:\n        - nodes\n      summary: Get node's basic GPU information\n      operationId: tensorhive.controllers.nodes.get_gpu_info\n      parameters:\n        - $ref: '#/components/parameters/hostnameParam'\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GPUInfo'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        404:\n          description: {{RESPONSES['nodes']['hostname']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n      security:\n        - Bearer: []\n  /nodes/{hostname}/gpu/metrics:\n    get:\n      tags:\n        - nodes\n      summary: Get node's GPU metric data\n      description: Puts null if some data is unavailable\n      operationId: tensorhive.controllers.nodes.get_gpu_metrics\n      parameters:\n        - $ref: '#/components/parameters/hostnameParam'\n        - $ref: '#/components/parameters/gpuMetricTypeQuery'\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GPUMetricsInTwoCases'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        404:\n          description: {{RESPONSES['nodes']['hostname']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n      security:\n        - Bearer: []\n  /nodes/{hostname}/cpu/metrics:\n    get:\n      tags:\n        - nodes\n      summary: Get node's CPU metric data\n      description: Puts null if some data is unavailable\n      operationId: tensorhive.controllers.nodes.get_cpu_metrics\n      parameters:\n        - $ref: '#/components/parameters/hostnameParam'\n        - $ref: '#/components/parameters/cpuMetricTypeQuery'\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CPUMetrics'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        404:\n          description: {{RESPONSES['nodes']['hostname']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n      security:\n        - Bearer: []\n  /nodes/{hostname}/gpu/processes:\n    get:\n      tags:\n        - nodes\n      summary: Get node's GPU processes data\n      description: Puts null if some data is unavailable\n      operationId: tensorhive.controllers.nodes.get_gpu_processes\n      parameters:\n        - $ref: '#/components/parameters/hostnameParam'\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GPUProcesses'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        404:\n          description: {{RESPONSES['nodes']['hostname']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n      security:\n        - Bearer: []\n  /tasks:\n    get:\n      tags:\n        - tasks\n      summary: Query tasks\n      operationId: tensorhive.controllers.task.get_all\n      parameters:\n        - description: Job ID (Optional)\n          in: query\n          name: jobId\n          required: false\n          schema:\n            type: integer\n            default: null\n            nullable: true\n        - description: Synchronize all tasks (optional)\n          in: query\n          name: syncAll\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        200:\n          description: {{RESPONSES['task']['all']['success']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['task']['all']['success']}}\n                  tasks:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/TaskToDisplay'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n      security:\n        - Bearer: []\n  /tasks/{id}:\n    get:\n      tags:\n        - tasks\n      summary: Get task by ID\n      operationId: tensorhive.controllers.task.get\n      parameters:\n        - description: Task ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['task']['get']['success']}}\n                  task:\n                    $ref: '#/components/schemas/TaskToDisplay'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['task']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['task']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    put:\n      tags:\n        - tasks\n      summary: Update task\n      operationId: tensorhive.controllers.task.update\n      requestBody:\n        description: |\n          New task object to overwrite the old one.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TaskUpdateForm'\n              x-body-name: newValues\n      parameters:\n        - description: Task ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        201:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['task']['update']['success']}}\n                  task:\n                    $ref: '#/components/schemas/TaskToDisplay'\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['task']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['task']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n    delete:\n      tags:\n        - tasks\n      summary: Delete task\n      operationId: tensorhive.controllers.task.destroy\n      parameters:\n        - description: Task ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['task']['delete']['success']}}\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['task']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['task']['not_found']}}\n        422:\n          description: {{RESPONSES['general']['auth_error']}}\n        500:\n          description: {{RESPONSES['general']['internal_error']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['internal_error']}}\n      security:\n        - Bearer: []\n  /tasks/{id}/log:\n    get:\n      tags:\n        - tasks\n      summary: Fetch log file content produced by task\n      description: Return lines of log file located on machine where task was running\n      operationId: tensorhive.controllers.task.get_log\n      parameters:\n        - description: Task ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - description: Only tail (10 lines)\n          in: query\n          name: tail\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: {{RESPONSES['general']['ok']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['task']['get']['success']}}\n                  path:\n                    type: string\n                    example: ~/TensorHiveLogs/task_99.log\n                  output_lines:\n                    type: array\n                    items:\n                      type: string\n                    example:\n                      - first line\n                      - second line\n                      - etc.\n        401:\n          description: {{RESPONSES['general']['unauthorized']}}\n        403:\n          description: {{RESPONSES['general']['unprivileged']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['general']['unprivileged']}}\n        404:\n          description: {{RESPONSES['task']['get_log']['failure']['not_found']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['task']['get_log']['failure']['not_found']}}\n        422:\n          description: {{RESPONSES['task']['get_log']['failure']['assertions']}} or {{RESPONSES['general']['auth_error']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['task']['get_log']['failure']['assertions']}}\n        500:\n          description: {{RESPONSES['ssh']['failure']['connection']}} or {{RESPONSES['general']['internal_error']}}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{RESPONSES['ssh']['failure']['connection']}}\n      security:\n        - Bearer: []\ncomponents:\n  schemas:\n    UserToDisplay:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        roles:\n          type: array\n          items:\n            type: string\n        username:\n          type: string\n          example: foobar\n        email:\n          type: string\n          example: foo@bar.com\n        createdAt:\n          type: string\n          format: date-time\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupWithoutUsers'\n    UserWithoutGroup:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        roles:\n          type: array\n          items:\n            type: string\n        username:\n          type: string\n          example: foobar\n        createdAt:\n          type: string\n          format: date-time\n    UserForm:\n      type: object\n      required:\n        - username\n        - email\n        - password\n      properties:\n        username:\n          type: string\n          example: foobar\n        email:\n          type: string\n          example: foo@bar.com\n        password:\n          type: string\n          example: difficult_password\n    UserUpdateForm:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        roles:\n          type: array\n          items:\n            type: string\n        username:\n          type: string\n          example: foobar\n        password:\n          type: string\n          example: difficult_password\n    UserLoginForm:\n      type: object\n      required:\n        - username\n        - password\n      properties:\n        username:\n          type: string\n          example: foobar\n        password:\n          type: string\n          example: difficult_password\n    TaskToDisplay:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        jobId:\n          type: integer\n          example: 1\n        command:\n          type: string\n          example: user/home/python user/train.py\n        cmdsegments:\n          type: object\n          properties:\n            envs:\n              type: array\n              items:\n                $ref: '#/components/schemas/CommandSegmentToDisplay'\n            params:\n              type: array\n              items:\n                $ref: '#/components/schemas/CommandSegmentToDisplay'\n        pid:\n          type: integer\n          format: int64\n          example: 4321\n        hostname:\n          type: string\n          example: localhost\n        status:\n          type: string\n          example: unsynchronized\n    TaskForm:\n      type: object\n      required:\n        - command\n        - hostname\n      properties:\n        jobId:\n          type: integer\n          example: 1\n        command:\n          type: string\n          example: user/home/python user/train.py\n        hostname:\n          type: string\n          example: localhost\n        cmdsegments:\n          type: object\n          properties:\n            envs:\n              type: array\n              items:\n                $ref: '#/components/schemas/CommandSegment'\n            params:\n              type: array\n              items:\n                $ref: '#/components/schemas/CommandSegment'\n    TaskUpdateForm:\n      type: object\n      properties:\n        command:\n          type: string\n          example: user/home/python user/train.py\n        hostname:\n          type: string\n          example: localhost\n        cmdsegments:\n          type: object\n          properties:\n            envs:\n              type: array\n              items:\n                $ref: '#/components/schemas/CommandSegment'\n            params:\n              type: array\n              items:\n                $ref: '#/components/schemas/CommandSegment'\n    CommandSegment:\n      type: object\n      properties:\n        name:\n          type: string\n          example: LIB_PATH\n        value:\n          type: string\n          example: user/home/lib\n    CommandSegmentToDisplay:\n      type: object\n      properties:\n        name:\n          type: string\n          example: LIB_PATH\n        value:\n          type: string\n          example: user/home/lib\n        index:\n          type: integer\n          example: -2\n    JobForm:\n      type: object\n      required:\n        - name\n        - userId\n      properties:\n        name:\n          type: string\n          example: Classifier training\n        description:\n          type: string\n          example: Job which goal is to run classifier training.\n        userId:\n          type: integer\n          example: 1\n        startAt:\n          type: string\n          format: date-time\n          nullable: true\n        stopAt:\n          type: string\n          format: date-time\n          nullable: true\n    JobToDisplay:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        userId:\n          type: integer\n          example: 1\n        name:\n          type: string\n          example: Classifier training\n        description:\n          type: string\n          example: Job which goal is to run classifier training.\n        status:\n          type: string\n          example: unsynchronized\n        startAt:\n          type: string\n          format: date-time\n          nullable: true\n          example: 2019-05-08T12:00:00.066Z (or null!)\n        stopAt:\n          type: string\n          format: date-time\n          nullable: true\n          example: 2019-05-08T13:00:00.066Z (or null!)\n    JobUpdateForm:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Job example name\n        description:\n          type: string\n          example: Description of a job\n        startAt:\n          type: string\n          format: date-time\n          nullable: true\n        stopAt:\n          type: string\n          format: date-time\n          nullable: true\n    Group:\n      type: object\n      required:\n        - name\n        - isDefault\n        - users\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n          readOnly: true\n        name:\n          type: string\n          example: Example group\n        isDefault:\n          type: boolean\n          default: false\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserWithoutGroup'\n    GroupWithoutUsers:\n      type: object\n      required:\n        - name\n        - isDefault\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n          readOnly: true\n        name:\n          type: string\n          example: Example group\n        isDefault:\n          type: boolean\n          default: false\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n    GroupForm:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          example: Example group\n        isDefault:\n          type: boolean\n          default: false\n    GroupUpdateForm:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Example group\n        isDefault:\n          type: boolean\n          default: false\n    Restriction:\n      type: object\n      required:\n        - name\n        - createdAt\n        - startsAt\n        - endsAt\n        - isGlobal\n        - schedules\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n          readOnly: true\n        name:\n          type: string\n          example: Example restriction\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        startsAt:\n          type: string\n          format: date-time\n        endsAt:\n          type: string\n          format: date-time\n        isGlobal:\n          type: boolean\n          example: false\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserWithoutGroup'\n        groups:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupWithoutUsers'\n        resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/Resource'\n        schedules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Schedule'\n    RestrictionForm:\n      type: object\n      required:\n        - startsAt\n        - isGlobal\n      properties:\n        name:\n          type: string\n          example: Example restriction\n        startsAt:\n          type: string\n          format: date-time\n        endsAt:\n          type: string\n          format: date-time\n        isGlobal:\n          type: boolean\n          example: false\n    RestrictionUpdateForm:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Example restriction\n        startsAt:\n          type: string\n          format: date-time\n        endsAt:\n          type: string\n          format: date-time\n          nullable: true\n        isGlobal:\n          type: boolean\n          example: false\n    Schedule:\n      type: object\n      required:\n        - scheduleDays\n        - hourStart\n        - hourEnd\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n          readOnly: true\n        scheduleDays:\n          type: array\n          items:\n            type: string\n            example: Monday\n        hourStart:\n          type: string\n          example: '8:00'\n        hourEnd:\n          type: string\n          example: '16:00'\n    ScheduleForm:\n      type: object\n      required:\n        - scheduleDays\n        - hourStart\n        - hourEnd\n      properties:\n        scheduleDays:\n          type: array\n          items:\n            type: string\n            example: Monday\n        hourStart:\n          type: string\n          example: '8:00'\n        hourEnd:\n          type: string\n          example: '16:00'\n    ScheduleUpdateForm:\n      type: object\n      properties:\n        scheduleDays:\n          type: array\n          items:\n            type: string\n            example: Monday\n        hourStart:\n          type: string\n          example: '8:00'\n        hourEnd:\n          type: string\n          example: '16:00'\n    Reservation:\n      type: object\n      required:\n        - title\n        - description\n        - resourceId\n        - userId\n        - userName\n        - gpuUtilAvg\n        - memUtilAvg\n        - start\n        - end\n        - isCancelled\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n          readOnly: true\n        createdAt:\n          type: string\n          format: date-time\n          readOnly: true\n        title:\n          type: string\n          example: Example title\n        description:\n          type: string\n          example: Example description\n        resourceId:\n          type: string\n          example: GPU-d38d4de3-85ee-e837-3d87-e8e2faeb6a63\n        userId:\n          type: integer\n          example: 1\n        userName:\n          type: string\n          example: Example owner's username\n        gpuUtilAvg:\n          type: integer\n          example: 99\n        memUtilAvg:\n          type: integer\n          example: 67\n        start:\n          type: string\n          format: date-time\n        end:\n          type: string\n          format: date-time\n        isCancelled:\n          type: boolean\n          example: false\n    ReservationForm:\n      type: object\n      required:\n        - title\n        - description\n        - resourceId\n        - userId\n        - start\n        - end\n      properties:\n        title:\n          type: string\n          example: Example title\n        description:\n          type: string\n          example: Example description\n        resourceId:\n          type: string\n          example: GPU-d38d4de3-85ee-e837-3d87-e8e2faeb6a63\n        userId:\n          type: integer\n          example: 1\n        start:\n          type: string\n          format: date-time\n        end:\n          type: string\n          format: date-time\n    ReservationUpdateForm:\n      type: object\n      #required:\n      # - start\n      # - end\n      properties:\n        title:\n          type: string\n          example: Example title\n        description:\n          type: string\n          example: Example description\n        resourceId:\n          type: string\n          example: GPU-d38d4de3-85ee-e837-3d87-e8e2faeb6a63\n        start:\n          type: string\n          format: date-time\n        end:\n          type: string\n          format: date-time\n    Resource:\n      type: object\n      properties:\n        id:\n          type: string\n          example: GPU-d38d4de3-85ee-e837-3d87-e8e2faeb6a63\n        name:\n          type: string\n          example: GeForce GTX 1060\n        hostname:\n          type: string\n          example: localhost\n    GPUAllData:\n      type: object\n      example:\n        \u003cHOSTNAME\u003e:\n          GPU:\n            \u003cGPU_UUID\u003e:\n              index: 0\n              name: GeForce GTX 1060\n              metrics:\n                fan_speed:\n                  unit: '%'\n                  value: 30\n                power:\n                  unit: W\n                  value: 90\n              processes: 'null'\n    GPUInfo:\n      type: object\n      example:\n        \u003cGPU_UUID\u003e:\n          index:\n            type: integer\n            example: 0\n          name:\n            type: string\n            example: GeForce GTX 1060\n    GPUMetricsInTwoCases:\n      type: object\n      example:\n        \u003cGPU_UUID (All metrics case)\u003e:\n          utilization:\n            unit: '%'\n            value: 95\n          power:\n            unit: W\n            value: 90\n        \u003cGPU_UUID (Specific metric case)\u003e:\n          unit: '%'\n          value: 95\n    GPUProcesses:\n      type: object\n      example:\n        \u003cGPU_UUID\u003e:\n          - command: python\n            owner: foo\n            pid: 1111\n          - command: java\n            owner: bar\n            pid: 2222\n    CPUMetrics:\n      type: object\n  parameters:\n    hostnameParam:\n      description: Node's hostname in the network\n      in: path\n      name: hostname\n      required: true\n      schema:\n        type: string\n    gpuMetricTypeQuery:\n      description: Metric type. If not present, queries for all metrics\n      in: query\n      name: metric_type\n      required: false\n      schema:\n        type: string\n        enum:\n          - fan_speed\n          - mem_free\n          - mem_used\n          - mem_total\n          - utilization\n          - mem_util\n          - temp\n          - power\n    cpuMetricTypeQuery:\n      description: Metric type. If not present, queries for all metrics\n      in: query\n      name: metric_type\n      required: false\n      schema:\n        type: string\n        enum:\n          - mem_free\n          - mem_used\n          - mem_total\n          - utilization\n  securitySchemes:\n    Bearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-bearerInfoFunc: tensorhive.authorization.decode_token\n"
		}
	},
	"Error": "invalidYAML: yaml: line 18: did not find expected ',' or '}'"
}