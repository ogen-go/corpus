{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ngageoint/scale"
		},
		"file": {
			"name": "scale_file.yml",
			"size": 0,
			"path": "scale/docs/rest/v6/scale_file.yml",
			"byteSize": 19639,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Scale File Services\n  version: v6\npaths:\n  /ingests:\n    get:\n      operationId: _rest_v6_scale_file_list\n      summary: Scale File List\n      description: Returns a list of all scale files\n      parameters:\n        - in: query\n          name: page\n          schema:\n            type: integer\n          description: The page of the results to return. Defaults to 1.\n        - in: query\n          name: page_size\n          schema:\n            type: integer\n          description: The size of the page to use for pagination of results.\n            Defaults to 100, and can be anywhere from 1-1000.\n        - in: query\n          name: data_started\n          schema:\n            type: string\n            format: date-time\n          description: The start of the data time range to query\n        - in: query\n          name: data_ended\n          schema:\n            type: string\n            format: date-time\n          description: End of the data time range to query, defaults to the current time\n        - in: query\n          name: source_started\n          schema:\n            type: string\n            format: date-time\n          description: The start of the source time range to query\n        - in: query\n          name: source_ended\n          schema:\n            type: string\n            format: date-time\n          description: End of the source time range to query, defaults to the current time\n        - in: query\n          name: source_sensor_class\n          schema:\n            type: string\n          description: Return only files for the given source sensor class.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: source_sensor\n          schema:\n            type: string\n          description: Return only files for the given source sensor.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: source_collection\n          schema:\n            type: string\n          description: Return only files for the given source collection.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: source_task\n          schema:\n            type: string\n          description: Return only files for the given source task.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: job_output\n          schema:\n            type: string\n          description: Return only files for the given source task.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: modified_started\n          schema:\n            type: string\n            format: date-time\n          description: The start of the last modified time range to query\n        - in: query\n          name: modified_ended\n          schema:\n            type: string\n            format: date-time\n          description: End of the last modified time range to query, defaults to the current time\n        - in: query\n          name: order\n          schema:\n            type: string\n          description: \"One or more fields to use when ordering the results.\n                        Duplicate it to multi-sort, (ex: order=host_name\u0026order=created)\n                        Nested objects require a delimiter (ex: order=source_file__created)\n                        Prefix fields with a dash to reverse the sort, (ex: order=-created)\"\n        - in: query\n          name: job_output\n          schema:\n            type: string\n          description: Return only files for the given job output.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: job_type_id\n          schema:\n            type: integer\n          description: Return only files associated with a given job type identifier.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: job_type_name\n          schema:\n            type: string\n          description: Return only files with a given job type name. Duplicate it\n            to filter by multiple values.\n        - in: query\n          name: job_id\n          schema:\n            type: integer\n          description: Return only files produced by the given job identifier.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: recipe_id\n          schema:\n            type: integer\n          description: Return only files associated with a given recipe identifier.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: recipe_node\n          schema:\n            type: string\n          description: Return only files produced by the given recipe node.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: recipe_type_id\n          schema:\n            type: integer\n          description: Return only files associated with a given recipe type identifier.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: batch_id\n          schema:\n            type: integer\n          description: Return only files associated with a given batch identifier.\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: file_name\n          schema:\n            type: string\n          description: Return only files with a given file name.\n            Duplicate it to filter by multiple values.\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/file_list'\n  /files/{id}/:\n    get:\n      operationId: _rest_v6_file_details\n      summary: File Details\n      description: Returns a specific file and all its related model information\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of an existing scale file\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/file_details'\n  /files/purge-source/:\n    post:\n      operationId: _rest_v6_purge_source\n      summary: Purge Source File\n      description: Removes all records related to the given source file. This includes records for the\n       following models - FileAncestryLink, Ingest, Job, JobExecution, JobExecutionEnd, \n       JobExecutionOutput, JobInputFile, Queue, Recipe, RecipeInputFile, RecipeNode, ScaleFile, and \n       TaskUpdate. **This will also delete any product files from their respective workspace.**\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              title: Purge File Request\n              type: object\n              properties:\n                file_id:\n                  type: integer\n                  description: The file id of the ScaleFile SOURCE file to purge.\n                  example: 123\n      responses:\n        '204':\n          description: 204 no content - The message was recieved and the purge process has started.\n        '400':\n          description: 400 bad request - There was an issue with the request, see error details for relevant details.\n\ncomponents:\n  schemas:\n    file_list:\n      title: File List\n      type: object\n      properties:\n        count:\n          type: integer\n          description: The total number of results that match the query parameters\n          example: 10\n        next:\n          type: string\n          format: uri\n          description: A URL to the next page of results.\n          example: null\n        previous:\n          type: string\n          format: uri\n          description: A URL to the previous page of results.\n          example: null\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/file'\n          description: List of ingest objects\n\n    file:\n      title: File\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The unique identifier of the model. Can be passed to the details API call\n          example: 4\n        workspace:\n          $ref: './workspace.yml#/components/schemas/workspace_base'\n        file_name:\n          type: string\n          description: The name of the source file.\n          example: my_file.kml\n        file_path:\n          type: string\n          description: The relative path of the file in the workspace.\n          example: path/to/the/file.png\n        media_type:\n          type: string\n          description: The IANA media type of the source file.\n          example: application/vnd.google-earth.kml+xml\n        file_size:\n          type: integer\n          description: The size of the file in bytes.\n          example: 1234\n        data_type_tags:\n          type: array\n          style: simple\n          items:\n            type: string\n          description: A list of string data type \"tags\" for the file.\n        is_deleted:\n          type: boolean\n          description: Whether the source file has been deleted.\n          example: True\n        url:\n          type: string\n          format: uri\n          description: The absolute URL to use for downloading the file.\n          example: http://host.com/file/path/my_file.kml\n        created:\n          type: string\n          format: date-time\n          description: When the associated database model was initially created.\n          example: 2015-09-10T15:24:53.503Z\n        deleted:\n          type: string\n          format: date-time\n          description: When the source file was deleted.\n          example: 2015-09-10T15:24:53.987Z\n        data_started:\n          type: string\n          format: date-time\n          description: The start time of the source data being ingested.\n          example: 2015-09-10T15:24:53.503Z\n        data_ended:\n          type: string\n          format: date-time\n          description: The ended time of the source data being ingested.\n          example: 2015-09-10T15:24:53.987Z\n        geometry:\n          type: string\n          description: The full geospatial geometry footprint of the source file. (WKT format)\n          example: POLYGON((11 -11,22 -22,33 -33,44 -44))\n        center_point:\n          type: string\n          description: The central geospatial location of the source file.\n          example: POINT(11 -11)\n        countries:\n          type: array\n          style: simple\n          items:\n            type: string\n          description: A list of zero or more strings with the ISO3 country codes for countries\n            contained in the geographic boundary of this file.\n        last_modified:\n          type: string\n          format: date-time\n          description: When the associated database model was last saved.\n          example: 2015-09-10T15:24:53.987Z\n        source_started:\n          type: string\n          format: date-time\n          description: When collection of the underlying source file started.\n          example: 2015-09-10T15:24:53.987Z\n        source_ended:\n          type: string\n          format: date-time\n          description: When collection of the underlying source file ended.\n          example: 2015-09-10T15:24:53.987Z\n        source_sensor_class:\n          type: string\n          description: The class of sensor used to produce the source file\n          example: ABC\n        source_sensor:\n          type: string\n          description: The specific identifier of the sensor used to produce the source file\n          example: 1\n        source_collection:\n          type: string\n          description: The collection of the source file\n          example: 113394955\n        source_task:\n          type: string\n          description: The task that produced the source file.\n          example: my-task\n        job:\n          $ref: './job.yml#/components/schemas/job'\n        job_exe:\n          $ref: './job.yml#/components/schemas/job_exe'\n          example: 2015-09-10T15:24:53.987Z\n        job_output:\n          type: string\n          description: The name of the output from the job related to this file.\n          example: output_name_1\n        job_type:\n          $ref: './job_type.yml#/components/schemas/job_type'\n        recipe:\n          $ref: './recipe.yml#/components/schemas/recipe'\n        recipe_node:\n          type: string\n          description: The recipe node that produced this file.\n          example: kml-footprint\n        recipe_type:\n          $ref: './recipe_type.yml#/components/schemas/recipe_type'\n        batch:\n          $ref: './batch.yml#/components/schemas/batch'\n        is_superseded:\n          type: boolean\n          description: Whether this file has been replaced and is now obsolete.\n          example: True\n        superseded:\n          type: string\n          format: date-time\n          description: When the file became superseded by another file.\n          example: 2015-09-10T15:24:53.987Z\n      required:\n      - id\n\n    file_details:\n      allOf:\n        - ref: '#/components/schemas/file'\n        - title: File Details\n        - type: object\n          properties:\n            meta_data:\n              $ref: '#/components/schemas/metadata'\n\n    metadata:\n      title: Metadata\n      type: object\n      additionalProperties:\n        oneOf:\n        - $ref: '#/definitions/Geometry'\n        - $ref: '#/definitions/Point2D'\n        - $ref: '#/definitions/Point'\n        - $ref: '#/definitions/LineString'\n        - $ref: '#/definitions/Polygon'\n        - $ref: '#/definitions/MultiPoint'\n        - $ref: '#/definitions/LineString'\n        - $ref: '#/definitions/MultiLineString'\n        - $ref: '#/definitions/MultiPolygon'\n        - $ref: '#/definitions/GeometryCollection'\n        - $ref: '#/definitions/Feature'\n        - $ref: '#/definitions/FeatureCollection'\n        discriminator:\n          propertyName: type\n          mapping:\n            Geometry: '#/definitions/Geometry'\n            Point2D: '#/definitions/Point2D'\n            Point: '#/definitions/Point'\n            LineString: '#/definitions/LineString'\n            Polygon: '#/definitions/Polygon'\n            MultiPoint: '#/definitions/MultiPoint'\n            LineString: '#/definitions/LineString'\n            MultiLineString: '#/definitions/MultiLineString'\n            MultiPolygon: '#/definitions/MultiPolygon'\n            GeometryCollection: '#/definitions/GeometryCollection'\n            Feature: '#/definitions/Feature'\n            FeatureCollection: '#/definitions/FeatureCollection'\n\ndefinitions:\n  Error:\n    required:\n      - code\n      - message\n    properties:\n      code:\n        type: string\n      message:\n        type: string\n\n  Geometry:\n    type: object\n    description: GeoJSon geometry\n    discriminator: type\n    required:\n      - type\n    externalDocs:\n      url: http://geojson.org/geojson-spec.html#geometry-objects\n    properties:\n      type:\n        type: string\n        enum:\n        - Point\n        - LineString\n        - Polygon\n        - MultiPoint\n        - MultiLineString\n        - MultiPolygon\n        description: the geometry type\n      bbox:\n        type: array\n        minItems: 4\n        maxItems: 4\n        items:\n          type: number\n\n  Point2D:\n    type: array\n    maxItems: 2\n    minItems: 2\n    items:\n      type: number\n\n  Point:\n    type: object\n    description: GeoJSon geometry\n    externalDocs:\n      url: http://geojson.org/geojson-spec.html#id2\n    allOf:\n      - $ref: \"#/definitions/Geometry\"\n      - properties:\n          coordinates:\n            $ref: '#/definitions/Point2D'\n\n  LineString:\n    type: object\n    description: GeoJSon geometry\n    externalDocs:\n      url: http://geojson.org/geojson-spec.html#id3\n    allOf:\n      - $ref: \"#/definitions/Geometry\"\n      - properties:\n          coordinates:\n            type: array\n            items:\n              $ref: '#/definitions/Point2D'\n\n  Polygon:\n    type: object\n    description: GeoJSon geometry\n    externalDocs:\n      url: http://geojson.org/geojson-spec.html#id4\n    allOf:\n      - $ref: \"#/definitions/Geometry\"\n      - properties:\n          coordinates:\n            type: array\n            minItems: 4\n            items:\n              type: array\n              items:\n                $ref: '#/definitions/Point2D'\n\n  MultiPoint:\n    type: object\n    description: GeoJSon geometry\n    externalDocs:\n      url: http://geojson.org/geojson-spec.html#id5\n    allOf:\n      - $ref: \"#/definitions/Geometry\"\n      - properties:\n          coordinates:\n            type: array\n            items:\n              $ref: '#/definitions/Point2D'\n\n  MultiLineString:\n    type: object\n    description:GeoJSon geometry\n    externalDocs:\n      url: http://geojson.org/geojson-spec.html#id6\n    allOf:\n      - $ref: \"#/definitions/Geometry\"\n      - properties:\n          coordinates:\n            type: array\n            items:\n              type: array\n              items:\n                $ref: '#/definitions/Point2D'\n\n  MultiPolygon:\n    type: object\n    description:GeoJSon geometry\n    externalDocs:\n      url: http://geojson.org/geojson-spec.html#id6\n    allOf:\n      - $ref: \"#/definitions/Geometry\"\n      - properties:\n          coordinates:\n            type: array\n            items:\n              type: array\n              items:\n                type: array\n                items:\n                  $ref: '#/definitions/Point2D'\n\n  GeometryCollection:\n    type: object\n    description:GeoJSon geometry collection\n    required:\n     - type\n     - geometries\n    externalDocs:\n      url: http://geojson.org/geojson-spec.html#geometrycollection\n    properties:\n      type:\n        type: string\n        enum:\n        - GeometryCollection\n        description:\n      geometries:\n        type: array\n        items:\n          $ref: '#/definitions/Geometry'\n\n  Feature:\n    type: object\n    description:GeoJSon Feature\n    required:\n     - type\n     - properties\n     - geometry\n    externalDocs:\n      url: http://geojson.org/geojson-spec.html#geometrycollection\n    properties:\n      type:\n        type: string\n        enum:\n        - Feature\n        description:\n      properties:\n        type: object\n        additionalProperties: true\n        nullable: true\n      geometry:\n        oneOf:\n        - $ref: '#/definitions/Geometry'\n        - $ref: '#/definitions/Point2D'\n        - $ref: '#/definitions/Point'\n        - $ref: '#/definitions/LineString'\n        - $ref: '#/definitions/Polygon'\n        - $ref: '#/definitions/MultiPoint'\n        - $ref: '#/definitions/LineString'\n        - $ref: '#/definitions/MultiLineString'\n        - $ref: '#/definitions/MultiPolygon'\n        - $ref: '#/definitions/GeometryCollection'\n        discriminator:\n          propertyName: type\n          mapping:\n            Geometry: '#/definitions/Geometry'\n  \t\t      Point2D: '#/definitions/Point2D'\n            Point: '#/definitions/Point'\n            LineString: '#/definitions/LineString'\n  \t\t      Polygon: '#/definitions/Polygon'\n            MultiPoint: '#/definitions/MultiPoint'\n            LineString: '#/definitions/LineString'\n  \t\t      MultiLineString: '#/definitions/MultiLineString'\n            MultiPolygon: '#/definitions/MultiPolygon'\n            GeometryCollection: '#/definitions/GeometryCollection'\n\n  FeatureCollection:\n    type: object\n    description:GeoJSon FeatureCollection\n    required:\n     - type\n     - features\n    externalDocs:\n      url: http://geojson.org/geojson-spec.html#geometrycollection\n    properties:\n      type:\n        type: string\n        enum:\n        - FeatureCollection\n        description:\n      features:\n        type: array\n        items:\n          $ref: '#/definitions/Feature'"
		}
	},
	"Error": "invalidYAML: yaml: line 510: could not find expected ':'"
}