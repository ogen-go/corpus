{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ngageoint/scale"
		},
		"file": {
			"name": "data.yml",
			"path": "scale/docs/rest/v6/data.yml",
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Data Services\n  version: v6\n\npaths:\n  /datasets/:\n    get:\n      operationId: _rest_v6_dataset_list\n      summary: Dataset List\n      description: Returns a list of all datasets\n      parameters:\n        - in: query\n          name: page\n          schema:\n            type: integer\n          description: The page of the results to return. Defaults to 1.\n        - in: query\n          name: page_size\n          schema:\n            type: integer\n          description: The size of the page to use for pagination of results. |\n            Defaults to 100, and can be anywhere from 1-1000.\n        - in: query\n          name: started\n          schema:\n            type: string\n            format: date-time\n          description: The start of the time range to query\n        - in: query\n          name: ended\n          schema:\n            type: string\n            format: date-time\n          description: End of the time range to query, defaults to the current time\n        - in: query\n          name: dataset_id\n          schema:\n            type: integer\n          description: Return only datasets with a given identifier. |\n            Duplicate it to filter by multiple values.\n        - in: query\n          name: keyword\n          schema:\n            type: string\n          description: Keyword to perform a 'like' search on title and description |\n            may be duplicated to search for multiple keywords\n        - in: query\n          name: order\n          schema:\n            type: string\n          description: One or more fields to use when ordering the results. |\n                       Duplicate it to multi-sort, (ex: order=host_name\u0026order=created) |\n                       Prefix fields with a dash to reverse the sort, (ex: order=-created)\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/dataset_list'\n    post:\n      operationId: _rest_v6_dataset_create\n      summary: Dataset Create\n      description: Creates a dataset\n      requestBody:\n        required: true\n        content:\n          application/json: \n            schema:\n              $ref: '#/components/schemas/dataset_post'\n      responses:\n        '201':\n          description: The 201 CREATED response indicates a successful event\n          headers:\n            location:\n              schema:\n                type: string\n              description: The url of the created dataset\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/dataset_detail'\n                \n  /datasets/{id}/:\n    get:\n      operationId: _rest_v6_dataset_details\n      summary: Dataset Details\n      description: Returns detailed information about the dataset with the specified id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of an existing dataset\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/dataset_detail'\n    post:\n      operationId: _rest_v6_dataset_create_member\n      summary: Create Dataset Member\n      description: Creates and adds a member to an existing dataset\n      requestBody:\n        required: true\n        content:\n          application/json: \n            schema:\n              $ref: '#/components/schemas/dataset_member_post'\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of an existing dataset\n      responses:\n        '201':\n          description: The 201 CREATED response indicates a successful event\n          headers:\n            location:\n              schema:\n                type: string\n              description: The url of the created dataset\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/dataset_member_detail'\n\n  /datasets/{id}/members/:\n    get:\n      operationId: _rest_v6_dataset_member_list\n      summary: Dataset Member List\n      description: Returns a list of all members of a dataset\n      parameters:\n        - in: query\n          name: page\n          schema:\n            type: integer\n          description: The page of the results to return. Defaults to 1.\n        - in: query\n          name: page_size\n          schema:\n            type: integer\n          description: The size of the page to use for pagination of results. |\n            Defaults to 100, and can be anywhere from 1-1000.\n        responses:\n        '200':\n          description: 200 response\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/dataset_member_list'\n  \n    /datasets/members/{id}/:\n    get:\n      operationId: _rest_v6_dataset_member_details\n      summary: Dataset Member Details\n      description: Returns detailed information about the dataset member with the specified id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of an existing dataset member\n      responses:\n        '200':\n          description: 200 response\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/dataset_member_detail'\n            \n  /datasets/validation/:\n    post:\n      operationId: _rest_v6_dataset_validation\n      summary: Dataset Validation\n      description: Validates a dataset without creating it\n      requestBody:\n        required: true\n        content:\n          application/json: \n            schema:\n              $ref: '#/components/schemas/dataset_validation_post'\n      responses:\n        '200':\n          description: The 200 OK response indicates a successful event\n          content:\n            application/json: \n              schema:\n                $ref: '#/components/schemas/dataset_validation'\n                \ncomponents:\n  schemas:\n    data:\n      title: Data Object\n      type: object\n      properties:\n        files:\n          description: Represents file-based values in the data. Each key is the unique name of a data value (parameter) |\n            and each value is an array of one or more file IDs\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: integer\n          example: {'foo': [1234, 1235]}\n        json:\n          description: Represents JSON values in the data. Each key is the unique name of a data value (parameter) |\n            and each value is the appropriate JSON type/object that matches the parameter\n          type: object\n          additionalProperties: true\n          example: {'bar': 'hello, this is a string value'}\n\n    interface:\n      title: Interface\n      type: object\n      properties:\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/file_param'\n          description: Lists the parameters that take file(s) as input. Defaults to [].\n        json:\n          type: array\n          items:\n            $ref: '#/components/schemas/json_param'\n          description: Lists the parameters that take JSON as input. Defaults to [].\n\n    file_param:\n      title: File parameter\n      type: object\n      required: [name]\n      properties:\n        name:\n          type: string\n          description: The unique name of the parameter. Can only contain the following characters \\[a-zA-Z_-\\]\n          example: foo\n        required:\n          type: boolean\n          description: Indicates whether the parameter is required. Defaults to True.\n          example: true\n        media_types:\n          type: array\n          items:\n            type: string\n          description: List of strings describing the accepted media types for the parameter's file(s)\n          example: ['image/tiff']\n        multiple:\n          type: boolean\n          description: Indicates whether the parameter takes multiple files. Defaults to False.\n          example: false\n          \n    json_param:\n      title: JSON parameter\n      type: object\n      required: [name, type]\n      properties:\n        name:\n          type: string\n          description: The unique name of the parameter. Can only contain the following characters \\[a-zA-Z_-\\]\n          example: foo\n        required:\n          type: boolean\n          description: Indicates whether the parameter is required. Defaults to True.\n          example: true\n        type:\n          type: string\n          description: The accepted JSON data type. Must be one of 'array', 'boolean', 'integer', 'number', 'object', or 'string'.\n          example: string\n\n    data_filter:\n      title: Data Filter Object\n      type: object\n      properties:\n        filters:\n          description: List of filter definitions. Defaults to []. An empty list will not accept any data.\n          type: array\n            items:\n              $ref: '#/components/schemas/filter_def'\n        all:\n          description: Specifies whether all filters need to pass for data to be accepted. Defaults to true\n          type: boolean\n          example: true\n\n    filter_def:\n      title: Filter definition\n      type: object\n      required: [name, type, condition, values]\n      properties:\n        name:\n          type: string\n          description: The name of the parameter this filter runs against. Multiple filters can run on the same parameter.\n          example: foo\n        type:\n          type: string\n          enum: [array, boolean, integer, number, object, string, filename, media-type, data-type, meta-data]\n          description: Type of parameter this filter runs against. Must be one of 'array', |\n            'boolean', 'integer', 'number', 'object', 'string', 'filename', 'media-type', |\n            'data-type', or 'meta-data'\n          example: string\n        condition:\n          type: string\n          enum: ['\u003c', '\u003c=','\u003e','\u003e=', '==', '!=', 'between', 'in', 'not in', 'contains','subset of', 'superset of']\n          description: Condition to test data value against. Must be one of '\u003c', '\u003c=', |\n            '\u003e','\u003e=', '==', '!=', 'between', 'in', 'not in', 'contains', 'subset of', or 'superset of'\n          example: \u003c\n        values:\n          type: array\n          minItems: 1\n          description: List of values to compare data against. May be any type.\n          example: ['image/tiff']\n        fields:\n          type: array\n          minItems: 1\n          items:\n            type: array\n            minItems: 1\n            items:\n              type: string\n          description: List of lists with each item being a list of keys for a path to a |\n            field in an object or file meta-data to be tested.  e.g. For this data, |\n            {'foo': {'bar': 100}}, [['foo','bar']] will check the value 100. If provided, |\n            this property must be of equal length to values                                                   |\n          example: [['foo','bar']]\n        all_fields:\n          description: Specifies whether all fields need to pass for data to be accepted. Defaults to true\n          type: boolean\n          example: true\n        all_files:\n          description: Specifies whether all files need to pass for data to be accepted. Defaults to true\n          type: boolean\n          example: true\n\n    dataset_definition:\n      title: Dataset Definition\n      type: object\n      required: [parameters]\n      properties:\n        global_data:\n          $ref: '#/components/schemas/data'\n        global_parameters:\n          $ref: '#/components/schemas/interface'\n        parameters:\n          $ref: '#/components/schemas/interface'\n          \n    dataset_list:\n      title: Dataset List\n      type: object\n      properties:\n        count:\n          type: integer\n          description: The total number of results that match the query parameters \n          example: 10\n        next:\n          type: string\n          format: uri\n          description: A URL to the next page of results.\n          example: null\n        previous:\n          type: string\n          format: uri\n          description: A URL to the previous page of results.\n          example: null\n        results:\n          type: array\n          items:\n            $ref: '#/components/schemas/dataset_list'\n          description: List of Dataset objects\n          \n    dataset_base:\n      title: Dataset Object\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n        title:\n          type: string\n          example: My Dataset\n        description:\n          type: string\n          example: My Dataset Description \n        created:\n          type: string\n          format: date-time\n          description: When the associated database model was initially created.\n          example: 2015-09-10T15:24:53.503Z\n          \n    dataset_list:\n      title: Dataset List\n      allOf:\n        - ref: '#/components/schemas/dataset_base'\n        - type: object\n          properties: \n            definition:\n              $ref: '#/components/schemas/dataset_definition'\n            files:\n              type: integer\n              example: 1\n              description: Number of files in the dataset\n              \n    dataset_detail:\n      title: Dataset Details\n      allOf:\n        - ref: '#/components/schemas/dataset_base'\n        - type: object\n          properties: \n            definition:\n              $ref: '#/components/schemas/dataset_definition'\n            members:\n              $ref: '#/components/schemas/dataset_member'\n            files:\n              $ref: '#/components/schemas/dataset_file_base'\n              \n    dataset_post:\n      title: Dataset Post\n      type: object\n      required: [definition]\n      properties:\n        title:\n          type: string\n          example: My Dataset\n        description:\n          type: string\n          example: My Dataset Description \n        definition:\n          $ref: '#/components/schemas/dataset_definition'\n          description: definition for the dataset\n          \n    dataset_member_post:\n      title: Dataset Member Post\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/data'\n          description: List of data to add as members of a dataset. Either this \n            field or a template and a set of filters is required to add members to a dataset.\n        data_template:\n          type: object\n          properties:\n            files:\n              description: Represents file-based values in the data. Each key is the unique name of a data value (parameter) |\n                and each value is an array of one or more file IDs. In this template, the key that needs to be replaced |\n                with a file from the filter should have the string value: 'FILE_VALUE'\n              type: object\n              additionalProperties:\n                type: array\n                items:\n                  type: integer\n                  example: {'foo': [1234, 1235]}\n            json:\n              description: Represents JSON values in the data. Each key is the unique name of a data value (parameter) |\n                and each value is the appropriate JSON type/object that matches the parameter\n              type: object\n              additionalProperties: true\n              example: {'bar': 'hello, this is a string value'}\n        dry_run:\n          description: If true, the list of data is generated and validated but no members are added to the dataset. |\n            Useful to validate a template and set of filters and determine how many members would be added to the |\n            dataset. Defaults to false\n          type: boolean\n          example: true\n        data_started:\n          type: string\n          format: date-time\n          description: The start of the data time range to query\n        data_ended:\n          type: string\n          format: date-time\n          description: End of the data time range to query, defaults to the current time\n        source_started:\n          type: string\n          format: date-time\n          description: The start of the source time range to query\n        source_ended:\n          type: string\n          format: date-time\n          description: End of the source time range to query, defaults to the current time\n        source_sensor_class:\n          type: string\n          description: Return only files for the given source sensor class. |\n            Duplicate it to filter by multiple values.\n        source_sensor:\n          type: string\n          description: Return only files for the given source sensor. |\n            Duplicate it to filter by multiple values.\n        source_collection:\n          type: string\n          description: Return only files for the given source collection. |\n            Duplicate it to filter by multiple values.\n        source_task:\n          type: string\n          description: Return only files for the given source task. |\n            Duplicate it to filter by multiple values.\n        job_output:\n          type: string\n          description: Return only files for the given job output. |\n            Duplicate it to filter by multiple values.\n        modified_started:\n          type: string\n          format: date-time\n          description: The start of the last modified time range to query\n        modified_ended:\n          type: string\n          format: date-time\n          description: End of the last modified time range to query, defaults to the current time\n        order:\n          type: string\n          description: \"One or more fields to use when ordering the results.\n                        Duplicate it to multi-sort, (ex: order=host_name\u0026order=created)\n                        Nested objects require a delimiter (ex: order=source_file__created)\n                        Prefix fields with a dash to reverse the sort, (ex: order=-created)\"\n        job_type_id:\n          type: integer\n          description: Return only files associated with a given job type identifier. |\n            Duplicate it to filter by multiple values.\n        job_type_name:\n          type: string\n          description: Return only files with a given job type name. Duplicate it |\n            to filter by multiple values.\n        job_id:\n          type: integer\n          description: Return only files produced by the given job identifier. |\n            Duplicate it to filter by multiple values.\n        recipe_id:\n          type: integer\n          description: Return only files associated with a given recipe identifier. |\n            Duplicate it to filter by multiple values.\n        recipe_node:\n          type: string\n          description: Return only files produced by the given recipe node. |\n            Duplicate it to filter by multiple values.\n        recipe_type_id:\n          type: integer\n          description: Return only files associated with a given recipe type identifier. |\n            Duplicate it to filter by multiple values.\n        batch_id:\n          type: integer\n          description: Return only files associated with a given batch identifier. |\n            Duplicate it to filter by multiple values.\n        file_name:\n          type: string\n          description: Return only files with a given file name. |\n            Duplicate it to filter by multiple values.\n          \n    dataset_member:\n      title: Dataset Member\n      type: object\n      properties:\n        created:\n          type: string\n          format: date-time\n          description: When the associated database model was initially created.\n          example: 2015-09-10T15:24:53.503Z\n        data:\n          $ref: '#/components/schemas/data'\n          \n    dataset_member_detail:\n      title: Dataset Member Details\n      allOf:\n        - ref: '#/components/schemas/dataset_member'\n        - type: object\n          properties: \n            dataset:\n              type: integer\n              example: 1\n              description: ID for the parent dataset\n            files:\n              $ref: '#/components/schemas/dataset_file'\n              \n    dataset_file_base:\n      title: Dataset File Base\n      type: object\n      properties:\n        parameter_name:\n          type: string\n          description: Name of the parameter this file is associated with\n          example: input_a\n        scale_file:\n          $ref: '#/components/schemas/file_base'\n          \n    dataset_file:\n      title: Dataset File\n      type: object\n      properties:\n        parameter_name:\n          type: string\n          description: Name of the parameter this file is associated with\n          example: input_a\n        scale_file:\n          $ref: '#/components/schemas/file'"
		}
	},
	"Error": "yaml: line 53: mapping values are not allowed in this context"
}