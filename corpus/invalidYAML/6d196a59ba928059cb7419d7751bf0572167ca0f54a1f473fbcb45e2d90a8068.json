{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/epam/badgerdoc"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "search/documentation/openapi.yaml",
			"byteSize": 7184,
			"content": "openapi: 3.0.2\ninfo:\n  title: Badgerdoc Search\n  version: 0.1.2\npaths:\n  /pieces/:\n    get:\n      tags:\n        - Search\n      summary: Search text pieces.\n      description: Searches for text pieces saved in Elastic Search according to query\\nparameters. If no parameters specified - returns all text pieces from\\nElastic Search index. Supports pagination.\n      operationId: get_text_piece_pieces__get\n      parameters:\n        - required: false\n          schema:\n            title: Category\n            type: string\n          example: Header\n          name: category\n          in: query\n        - required: false\n          schema:\n            title: Content\n            type: string\n          example: Elasticsearch\n          name: content\n          in: query\n        - required: false\n          schema:\n            title: Document Id\n            minimum: 1\n            type: integer\n          example: 1\n          name: document_id\n          in: query\n        - required: false\n          schema:\n            title: Page Number\n            minimum: 1\n            type: integer\n          example: 1\n          name: page_number\n          in: query\n        - required: false\n          schema:\n            title: Page Size\n            maximum: 100\n            minimum: 1\n            type: integer\n            default: 50\n          example: 50\n          name: page_size\n          in: query\n        - required: false\n          schema:\n            title: Page Num\n            minimum: 1\n            type: integer\n            default: 1\n          example: 1\n          name: page_num\n          in: query\n        - required: true\n          schema:\n            title: X-Current-Tenant\n            type: string\n          example: badger-doc\n          name: x-current-tenant\n          in: header\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResultSchema'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n      security:\n        - TenantDependencyDocs: []\n  /indexation/{job_id}:\n    post:\n      tags:\n        - Search\n      summary: Start text pieces indexation process for provided job_id.\n      description: Drops all already existing text pieces from Elastic Search index for this\n      job if exists and starts indexation process for new text pieces in minio\n      for annotated pages mentioned in manifest.json files for this job.\n      operationId: start_indexing_indexation__job_id__post\n      parameters:\n        - required: true\n          schema:\n            title: Job Id\n            type: integer\n          example: 1\n          name: job_id\n          in: path\n        - required: true\n          schema:\n            title: X-Current-Tenant\n            type: string\n          example: badger-doc\n          name: x-current-tenant\n          in: header\n      responses:\n        '204':\n          description: Successful Response\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotFoundErrorSchema'\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n        '500':\n          description: Internal Server Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectionErrorSchema'\n      security:\n        - TenantDependencyDocs: []\ncomponents:\n  schemas:\n    ConnectionErrorSchema:\n      title: ConnectionErrorSchema\n      required:\n        - detail\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: string\n      example:\n        detail: 'Error: Connection error.'\n    GeomObject:\n      title: GeomObject\n      required:\n        - category\n        - content\n        - document_id\n        - page_number\n        - job_id\n      type: object\n      properties:\n        category:\n          title: Category\n          type: string\n          example: Header\n        content:\n          title: Content\n          type: string\n          example: ElasticSearch\n        document_id:\n          title: Document Id\n          minimum: 1\n          type: integer\n          example: 1\n        page_number:\n          title: Page Number\n          minimum: 1\n          type: integer\n          example: 1\n        bbox:\n          title: Bbox\n          maxItems: 4\n          minItems: 4\n          type: array\n          items:\n            type: number\n          example:\n            - 1.5\n            - 1.5\n            - 1.5\n            - 1.5\n        tokens:\n          title: Tokens\n          type: array\n          items:\n            type: string\n          example:\n            - token1\n            - token2\n            - token3\n        job_id:\n          title: Job Id\n          minimum: 1\n          type: integer\n          example: 1\n    HTTPValidationError:\n      title: HTTPValidationError\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: array\n          items:\n            $ref: '#/components/schemas/ValidationError'\n    NotFoundErrorSchema:\n      title: NotFoundErrorSchema\n      required:\n        - detail\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: string\n      example:\n        detail: Resource was not found.\n    SearchResultSchema:\n      title: SearchResultSchema\n      required:\n        - current_page\n        - page_size\n        - total_objects\n        - text_pieces\n      type: object\n      properties:\n        current_page:\n          title: Current Page\n          minimum: 1\n          type: integer\n        page_size:\n          title: Page Size\n          minimum: 1\n          type: integer\n        total_objects:\n          title: Total Objects\n          minimum: 0\n          type: integer\n        text_pieces:\n          title: Text Pieces\n          type: array\n          items:\n            $ref: '#/components/schemas/GeomObject'\n    ValidationError:\n      title: ValidationError\n      required:\n        - loc\n        - msg\n        - type\n      type: object\n      properties:\n        loc:\n          title: Location\n          type: array\n          items:\n            type: string\n        msg:\n          title: Message\n          type: string\n        type:\n          title: Error Type\n          type: string\n  securitySchemes:\n    TenantDependencyDocs:\n      type: http\n      scheme: bearer\ntags:\n  - name: Search\n    description: Actions associated with search management.\n",
			"canonicalURL": "/github.com/epam/badgerdoc@39600e5ebb9e54145bbbb7973b16d79612111db1/-/blob/search/documentation/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/epam/badgerdoc/blob/39600e5ebb9e54145bbbb7973b16d79612111db1/search/documentation/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: yaml: line 103:6: could not find expected ':'"
}