{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/genomehubs/genomehubs"
		},
		"file": {
			"name": "api-v2.yaml",
			"size": 0,
			"path": "src/genomehubs-api/src/api-v2.yaml",
			"byteSize": 43668,
			"content": "---\ncomponents:\n  parameters:\n    catParam:\n      description: |\n        Query to provide category values.\n\n        Can be any attribute listed at **/resultFields** or a valid taxonomic rank.\n\n        The number of categories can be specified by placing a number in square brackets, and a `+` sign may be used to include an `other` category for additional results (see examples).\n\n      # TODO: #160 Add an API endpoint to list valid taxonomic ranks\n      examples:\n        assembly_level:\n          value: assembly_level\n          summary: Group results by assembly level\n        family:\n          value: family[4]\n          summary: Show results for the top 4 families - family[4]\n        bioproject:\n          value: bioproject[3]+\n          summary: Show results for the top 3 bioprojects plus other - bioproject[3]+\n        assembly_level_order:\n          value: assembly_level=complete genome,chromosome,scaffold,contig\n          summary: Group results by assembly level and specify the order of categories\n      in: query\n      name: cat\n      required: false\n      schema:\n        type: string\n    collapseMonotypicParam:\n      description: |\n        Collapse monotypic tree nodes.\n\n        This parameter only affects searches with `report=tree`.\n      examples:\n        false:\n          value:\n          summary: false - Do not collapse monotypic tree nodes\n        true:\n          value: true\n          summary: true - Collapse monotypic tree nodes\n      in: query\n      name: collapseMonotypic\n      schema:\n        type: boolean\n    confidenceParam:\n      deprecated: true\n      description: |\n        Threshold for candidate suggestions relative to input phrase\n      explode: false\n      in: query\n      name: confidence\n      required: false\n      schema:\n        default: 1\n        maximum: 2\n        minimum: 0\n        type: number\n      style: form\n    excludeAncestralParam:\n      description: |\n        List of attributes for which to exclude records with ancestrally derived estimated values from results.\n\n        A list of available attributes is available from **/resultFields**. This parameter only affects searches with `result=taxon`.\n      examples:\n        none:\n          value:\n          summary: Do not exclude ancestral estimates for any attribute\n        genome_size:\n          value:\n            - genome_size\n          summary: Exclude ancestral estimates for genome size\n        assembly_span_and_c_value:\n          value:\n            - assembly_span\n            - c_value\n          summary: Exclude ancestral estimates for assembly span and c value\n      explode: true\n      in: query\n      name: excludeAncestral\n      required: false\n      schema:\n        items:\n          type: string\n        type: array\n      style: form\n    excludeDescendantParam:\n      description: |\n        List of attributes for which to exclude records with values estimated from descendant taxa from results.\n\n        A list of available attributes is available from **/resultFields**. This parameter only affects searches with `result=taxon`.\n      examples:\n        none:\n          value:\n          summary: Do not exclude descendant estimates for any attribute\n        genome_size:\n          value:\n            - genome_size\n          summary: Exclude descendant estimates for genome size\n        assembly_span_and_c_value:\n          value:\n            - assembly_span\n            - c_value\n          summary: Exclude descendant estimates for assembly span and c value\n      explode: true\n      in: query\n      name: excludeDescendant\n      required: false\n      schema:\n        items:\n          type: string\n        type: array\n      style: form\n    excludeDirectParam:\n      description: |\n        List of attributes for which to exclude records with directly estimated values from results.\n\n        A list of available attributes is available from **/resultFields**. This parameter only affects searches with `result=taxon`.\n      examples:\n        none:\n          value:\n          summary: Do not exclude direct estimates for any attribute\n        genome_size:\n          value:\n            - genome_size\n          summary: Exclude direct estimates for genome size\n        assembly_span_and_c_value:\n          value:\n            - assembly_span\n            - c_value\n          summary: Exclude direct estimates for assembly span and c value\n      explode: true\n      in: query\n      name: excludeDirect\n      required: false\n      schema:\n        items:\n          type: string\n        type: array\n      style: form\n    excludeMissingParam:\n      description: |\n        List of attributes for which to exclude records with missing values from results.\n\n        A list of available attributes is available from **/resultFields**.\n      examples:\n        none:\n          value:\n          summary: Do not exclude missing values for any attribute\n        assembly_level:\n          value:\n            - assembly_level\n          summary: Exclude missing values for assembly level\n        assembly_span_and_c_value:\n          value:\n            - assembly_level\n            - busco_completeness\n          summary: Exclude missing values for assembly level and busco completeness\n      explode: true\n      in: query\n      name: excludeMissing\n      required: false\n      schema:\n        items:\n          type: string\n        type: array\n      style: form\n    fieldsParam:\n      description: |\n        Comma separated list of attribute fields to return.\n\n        The list of fields selected can affect the result count if `includeEstimates=false`\n      examples:\n        null:\n          value:\n          summary: return values for default set of fields\n        all:\n          value: all\n          summary: all top level attribute fields\n        none:\n          value: none\n          summary: no attribute fields\n        assembly_attributes:\n          value: assembly_level,assembly_span,bioproject\n          summary: assembly_level, assembly_span and bioproject\n      in: query\n      name: fields\n      required: false\n      schema:\n        type: string\n    fieldsParamSummary:\n      description: |\n        Attribute field to summarise.\n      examples:\n        c_value:\n          value: c_value\n          summary: 1C value\n        long_list:\n          value: long_list\n          summary: Sequencing project long list\n      in: query\n      name: fields\n      required: true\n      schema:\n        type: string\n    filenameParam:\n      description: |\n        Specify a filename when downloading a file\n      in: query\n      name: filename\n      schema:\n        type: string\n    gramSizeParam:\n      deprecated: true\n      description: |\n        Size of N-grams used by tokeniser\n      explode: false\n      in: query\n      name: gramSize\n      required: false\n      schema:\n        default: 3\n        maximum: 4\n        minimum: 2\n        type: integer\n      style: form\n    includeEstimatesParam:\n      description: |\n        Flag to indicate whether search results should include records for which all attribute fields are based on estimated values.\n\n        Default `false` requires at least one of the returned fields to have a directly assigned value. This parameter only affects searches with `result=taxon`.\n      examples:\n        false:\n          value:\n          summary: false - exclude records with no direct values\n        true:\n          value: true\n          summary: true - include records with no direct values\n      in: query\n      name: includeEstimates\n      schema:\n        type: boolean\n    includeRawValuesParam:\n      description: |\n        Include raw values in search results.\n\n        This parameter only applies to searches with `result=taxon`.\n      examples:\n        false:\n          value:\n          summary: false - do not include raw values\n        true:\n          value: true\n          summary: true - include raw values\n      in: query\n      name: includeRawValues\n      schema:\n        type: boolean\n    indentParam:\n      description: |\n        Format output with indented lines.\n\n        Only applies to JSON responses.\n      examples:\n        zero:\n          value:\n          summary: Do not indent JSON output\n        four:\n          value: 4\n          summary: Indent JSON output with 4 spaces\n      explode: false\n      in: query\n      name: indent\n      required: false\n      schema:\n        maximum: 8\n        minimum: 0\n        type: integer\n      style: form\n    lineageParam:\n      description: |\n        Taxonomic lineage to restrict search to.\n\n        A taxon ID, scientific or other name may be used. If a name has multiple matches, results from all matching lineages will be returned.\n      examples:\n        null:\n          value:\n          summary: Do not restrict results to a lineage\n        canidae:\n          value: Canidae\n          summary: Restrict lookup to family Canidae\n        metazoa:\n          value: \"33208\"\n          summary: Restrict lookup to taxon ID 33208 (Metazoa)\n      in: query\n      name: lineage\n      required: false\n      schema:\n        type: string\n    maxErrorsParam:\n      deprecated: true\n      description: |\n        Maximumum error percentage when matching terms\n      explode: false\n      in: query\n      name: maxErrors\n      required: false\n      schema:\n        default: 3\n        maximum: 10\n        minimum: 0\n        type: integer\n      style: form\n    namesParam:\n      description: |\n        Comma separated list of taxon name classes to return\n      examples:\n        null:\n          value:\n          summary: Do not return names\n        tolid_synonym:\n          value: tol_id,synonym\n          summary: ToL ID and synonym\n      in: query\n      name: names\n      required: false\n      schema:\n        type: string\n    offsetParam:\n      description: |\n        Offset when returning a page of results\n      examples:\n        zero:\n          value:\n          summary: No offset\n        ten:\n          value: 10\n          summary: Skip the first 10 results\n        hundred:\n          value: 100\n          summary: Skip the first 100 results\n      explode: false\n      in: query\n      name: offset\n      required: false\n      schema:\n        maximum: 9990\n        minimum: 0\n        type: integer\n      style: form\n    postTagParam:\n      deprecated: true\n      description: |\n        Tag to place after matching portion of query term\n      explode: false\n      in: query\n      name: postTag\n      required: false\n      schema:\n        type: string\n      style: form\n    preTagParam:\n      deprecated: true\n      description: |\n        Tag to place before matching portion of query term\n      explode: false\n      in: query\n      name: preTag\n      required: false\n      schema:\n        type: string\n      style: form\n    # prefixQueryParam:\n    #   deprecated: true  # unused so can be removed immediately\n    #   description: \"Treat search term as a prefix [default: false]\"\n    #   in: query\n    #   name: prefixQuery\n    #   schema:\n    #     type: boolean\n    previewParam:\n      description: |\n        Return a preview in place of the full file, e.g. an image thumbnail.\n      examples:\n        false:\n          value:\n          summary: false - Return the full file\n        true:\n          value: true\n          summary: true - Return a preview\n      in: query\n      name: preview\n      schema:\n        type: boolean\n    queryIdParam:\n      description: |\n        User specified query ID.\n\n        If provided for a query or report that returns over 1000 results, the **/progress** endpoint may be used to track query progress.\n      examples:\n        null:\n          value:\n          summary: without query ID\n        not_null:\n          value: query-ac54f1\n          summary: with query ID\n      in: query\n      name: queryId\n      schema:\n        type: string\n    queryParam:\n      description: |\n        A search query string using taxonomic and attribute filters.\n\n        A list of available attributes is available from **/resultFields**.\n\n      # TODO: #157 create an API endpoint to describe available values and valid operators\n      examples:\n        taxon:\n          value: tax_tree(Chiroptera) AND assembly_level \u003e= scaffold\n          summary: Chiroptera with scaffold-level or better assemblies\n        assembly:\n          value: tax_name(9615) AND scaffold_n50 \u003e 100000\n          summary: Domestic dog assemblies with scaffold N50 better than 100 kb\n      in: query\n      name: query\n      required: true\n      schema:\n        type: string\n    rankParam:\n      description: |\n        Taxonomic to report values formats.\n\n        Used by histogram, scatter and xInY reports when `result=` `taxon` or `assembly`.\n      examples:\n        null:\n          value:\n          summary: Do not specify a rank\n        species:\n          value: species\n          summary: Report results for species\n        family:\n          value: family\n          summary: Report results for families\n      in: query\n      name: rank\n      required: false\n      schema:\n        type: string\n    ranksParam:\n      description: |\n        Comma separated list of ancestral ranks to return\n      examples:\n        null:\n          value:\n          summary: no ranks\n        order_family_genus:\n          value: order,family,genus\n          summary: order, family and genus\n      in: query\n      name: ranks\n      required: false\n      schema:\n        type: string\n    recordIdParam:\n      description: |\n        Unique record identifier.\n      # May be optionally be prefixed with the index name.\n      examples:\n        canis_lupus:\n          value: \"9612\"\n          summary: Taxon record ID for Canis lupus\n        GCA_905319855-2:\n          value: GCA_905319855.2\n          summary: Assembly record ID for Canis lupus assembly GCA_905319855.2\n      explode: false\n      in: query\n      name: recordId\n      required: true\n      schema:\n        items:\n          type: string\n      style: form\n    recordIdParamDownload:\n      description: |\n        Unique record identifier.\n      # May be optionally be prefixed with the index name.\n      examples:\n        snail_plot:\n          value: 13c8b378f620c197b90443feee45c8f2\n          summary: A snail plot file ID\n        blob_plot:\n          value: f7a6cc9cd00e76f8d3af8c7a9a0ba09f\n          summary: A blob plot file ID\n      explode: false\n      in: query\n      name: recordId\n      required: true\n      schema:\n        items:\n          type: string\n      style: form\n    releaseParam:\n      description: |\n        **Not in use:** GenomeHub release number\n      in: query\n      name: release\n      required: false\n      schema:\n        enum:\n          - latest\n        type: string\n    reportParam:\n      description: |\n        Type of report to generate\n      in: query\n      name: report\n      required: true\n      schema:\n        enum:\n          - histogram\n          - scatter\n          - sources\n          - tree\n          - types\n          - xInY\n          - xPerRank\n        type: string\n    resultParam:\n      description: |\n        The result type (index) to search against\n      examples:\n        analysis:\n          value: analysis\n          summary: Search against the analysis index\n        assembly:\n          value: assembly\n          summary: Search against the assembly index\n        feature:\n          value: feature\n          summary: Search against the feature index\n        file:\n          value: file\n          summary: Search against the file index\n        taxon:\n          value: taxon\n          summary: Search against the taxon index\n        multi:\n          value: multi\n          summary: Search across all indices (/lookup endpoint only)\n      in: query\n      name: result\n      required: true\n      schema:\n        default: taxon\n        enum:\n          - analysis\n          - assembly\n          - feature\n          - file\n          - taxon\n          - multi\n        type: string\n    scatterThresholdParam:\n      description: |\n        Maximum number of results to return as points when `report=scatter`.\n\n        If a query returns more results the values will be binned as a 2-dimensional histogram/heatmap.\n      examples:\n        null:\n          value:\n          summary: Use default value (100)\n        zero:\n          value: 0\n          summary: Force heatmap response\n        thousand:\n          value: 1000\n          summary: Set threshold to 1000\n        minus:\n          value: -1\n          summary: Specify no limit (maximum bound applies)\n      in: query\n      name: scatterThreshold\n      required: false\n      schema:\n        maximum: 10000\n        minimum: -1\n        type: integer\n      style: form\n    searchRawValuesParam:\n      description: |\n        Flag to indicate whether search filters should be applied to raw values.\n\n        Default `false` applies filters to aggregated values. This parameter only affects searches with `result=taxon`.\n      examples:\n        false:\n          value:\n          summary: false - apply filters to aggregated values\n        true:\n          value: true\n          summary: true - apply filters to raw values\n      in: query\n      name: searchRawValues\n      schema:\n        type: boolean\n    searchTermParam:\n      description: |\n        Term to identify matching record IDs for.\n\n        May be a complete or partial, exact or fuzzy match to any record ID, name, synonym or identifier\n      examples:\n        canis_lupus:\n          value: Canis lupus\n          summary: Look up an exact match\n        canus_lupis:\n          value: Canus lupis\n          summary: Look up with spelling mistakes\n        canis_lup:\n          value: Canis lup\n          summary: Look up using a prefix\n      in: query\n      name: searchTerm\n      required: true\n      schema:\n        type: string\n    sizeParam:\n      description: |\n        Maximum number of results to return\n      examples:\n        zero:\n          value: 0\n          summary: return no results (hit count only)\n        ten:\n          value: 10\n          summary: return 10 results\n        hundred:\n          value: 100\n          summary: return 100 results\n      explode: false\n      in: query\n      name: size\n      required: false\n      schema:\n        default: 10\n        maximum: 10000000\n        minimum: 0\n        type: integer\n      style: form\n    sortByParam:\n      description: |\n        Field name to sort results by\n      examples:\n        null:\n          value:\n          summary: Do not sort results\n        c_value:\n          value: c_value\n          summary: Sort results by C value\n        assembly_level:\n          value: assembly_level\n          summary: Sort results by assembly level\n      in: query\n      name: sortBy\n      required: false\n      schema:\n        type: string\n    sortModeParam:\n      description: |\n        Method to summarise multiple values for sorting fields with lists of values\n      examples:\n        null:\n          value:\n          summary: Use default method\n        min:\n          value: min\n          summary: Use minimum value\n        max:\n          value: max\n          summary: Use maximum value\n        avg:\n          value: avg\n          summary: Use mean value (numeric fields only)\n        median:\n          value: median\n          summary: Use median value (numeric fields only)\n        sum:\n          value: sum\n          summary: Use sum of values (numeric fields only)\n      in: query\n      name: sortMode\n      required: false\n      schema:\n        enum:\n          - avg\n          - max\n          - median\n          - min\n          - sum\n        type: string\n    sortOrderParam:\n      description: |\n        Sort order to use when returning results.\n\n        Only applicable when `sortBy` is defined.\n      examples:\n        null:\n          value:\n          summary: Do not sort values\n        asc:\n          value: asc\n          summary: Sort values in ascending order\n        desc:\n          value: desc\n          summary: Sort values in descending order\n      in: query\n      name: sortOrder\n      required: false\n      schema:\n        enum:\n          - asc\n          - desc\n        type: string\n    streamFileParam:\n      description: |\n        Stream a file instead of downloading\n      examples:\n        false:\n          value:\n          summary: false - Download file\n        true:\n          value: true\n          summary: true - Stream file\n      in: query\n      name: streamFile\n      schema:\n        type: boolean\n    suggestParam:\n      description: \"Number of valid terms to suggest [default: 0]\"\n      explode: false\n      in: query\n      name: suggest\n      required: false\n      schema:\n        minimum: 0\n        type: integer\n      style: form\n    suggestSizeParam:\n      description: |\n        Number of similar terms to suggest for a fuzzy match\n      examples:\n        one:\n          value: 1\n          summary: Return 1 similar term\n        three:\n          value: 3\n          summary: Return up to 3 similar terms\n        ten:\n          value: 10\n          summary: Return up to 10 similar terms\n      explode: false\n      in: query\n      name: suggestSize\n      required: false\n      schema:\n        default: 3\n        maximum: 10\n        minimum: 0\n        type: integer\n      style: form\n    summaryParam:\n      description: The summary type to return\n      explode: false\n      in: query\n      name: summary\n      required: true\n      schema:\n        items:\n          enum:\n            - histogram\n            - terms\n          type: string\n        type: array\n      style: form\n    summaryValuesParam:\n      description: |\n        Summary values to return.\n\n        Available values vary according to attribute type. This parameter only applies to searches with `result=taxon`.\n      examples:\n        null:\n          value:\n          summary: Do not return summary values\n        count:\n          value:\n            - count\n          summary: count - number of immediate descendant values aggregated\n        length:\n          value:\n            - length\n          summary: length - number of unique values in a list\n      explode: true\n      in: query\n      name: summaryValues\n      required: false\n      schema:\n        items:\n          enum:\n            - count\n            - length\n            - mean\n            - median\n            - mode\n            - max\n            - min\n            - range\n          type: string\n        type: array\n      style: form\n    taxonomyParam:\n      description: |\n        The backbone taxonomy to search against.\n\n        A list of available taxonomies is available from **/taxonomies**.\n      examples:\n        ncbi:\n          value: ncbi\n          summary: Use the NCBI taxonomy\n      in: query\n      name: taxonomy\n      required: false\n      schema:\n        type: string\n    tidyDataParam:\n      description: |\n        Format delimited text output as Tidy Data.\n\n        This parameter only applies to CSV and TSV response formats. To try it out, in the **Responses** section below, change _Media type_ to _text/csv_ or _text/tab-separated-values_.\n      examples:\n        false:\n          value:\n          summary: false - format as one row per record\n        true:\n          value: true\n          summary: true - format as Tidy Data\n      in: query\n      name: tidyData\n      schema:\n        type: boolean\n    treeThresholdParam:\n      description: |\n        Maximum number of results to return when `report=tree`.\n\n        If a query returns more results a warning is given to increase this threshold.\n      examples:\n        null:\n          value:\n          summary: Use default value (10000)\n        thousand:\n          value: 20000\n          summary: Set threshold to 20000\n        minus:\n          value: -1\n          summary: Specify no limit (maximum bound applies)\n      in: query\n      name: treeThreshold\n      required: false\n      schema:\n        maximum: 100000\n        minimum: -1\n        type: integer\n      style: form\n    xOptsParam:\n      description: |\n        *x*-axis options.\n\n        A comma or semicolon separated string of options in the order:\n\n        1. minimum value\n        2. maximum value\n        3. tick count\n        4. scale\n        5. axis title\n\n        For category axes, the minimum value can be a comma separated list to define the category order, in which case semicolons must be used as the primary separator. Tick count may be used to specify the number of categories and a `+` sign to indicate that an `other` category should be included.\n      examples:\n        null:\n          value:\n          summary: Do not specify xOpts\n        assembly_span:\n          value: 10000000,10000000000,5\n          summary: Values between 10M and 10G with 4 ticks\n        scale_only:\n          value: \",,,linear\"\n          summary: Use a linear scale\n        category_axis:\n          value: \"chromosome,scaffold,,2+\"\n          summary: Show values for chromosome and scaffold plus other\n      in: query\n      name: xOpts\n      required: false\n      schema:\n        type: string\n    xParam:\n      description: |\n        Query to provide *x* values.\n\n        This should be a full query as used in the `query` field of **/search** and can be modified by search options such as `includeEstimates` and `exclude*`. For reports without an *x*-axis, this is the primary query.\n      examples:\n        taxon:\n          value: tax_tree(Chiroptera) AND assembly_level \u003e= scaffold\n          summary: Chiroptera with scaffold-level or better assemblies\n        assembly:\n          value: tax_name(9615) AND scaffold_n50 \u003e 100000\n          summary: Domestic dog assemblies with scaffold N50 better than 100 kb\n      in: query\n      name: x\n      required: false\n      schema:\n        type: string\n    yOptsParam:\n      description: |\n        *y*-axis options.\n\n        A comma or semicolon separated string of options as described for `xOpts`.\n      examples:\n        null:\n          value:\n          summary: Do not specify yOpts\n        assembly_span:\n          value: 10000000,10000000000,5\n          summary: Values between 10M and 10G with 4 ticks\n        scale_only:\n          value: \",,,linear\"\n          summary: Use a linear scale\n        category_axis:\n          value: \"chromosome,scaffold;;2+\"\n          summary: Show values for chromosome and scaffold plus other\n      in: query\n      name: yOpts\n      required: false\n      schema:\n        type: string\n    yParam:\n      description: |\n        Query to provide *y* values.\n\n        Values added here will be combined with the value in `x` to generate the full query. For reports without an *y*-axis, this is the secondary query, except for `xInY` reports where this should be a full query.\n      examples:\n        assembly_span:\n          value: assembly_span\u003e1000000000\n          summary: Assembly span greater than 1 Gb\n      in: query\n      name: \"y\"\n      required: false\n      schema:\n        type: string\n    zParam:\n      description: |\n        **Not in use:** Query to provide *z* values\n      in: query\n      name: z\n      required: false\n      schema:\n        type: string\n  schemas:\n    Count:\n      description: Number of records matching query\n      type: integer\n    Fields:\n      properties:\n        group:\n          type: string\n        name:\n          type: string\n      type: object\n    Records:\n      items:\n        properties:\n          found:\n            type: boolean\n          id:\n            type: string\n          index:\n            type: string\n          record:\n            type: object\n        type: object\n      type: array\n    Results:\n      items:\n        properties:\n          reason:\n            items:\n              properties:\n                fields:\n                  type: object\n                score:\n                  type: number\n              type: object\n            type: array\n          result:\n            type: object\n          score:\n            type: number\n        type: object\n      type: array\n    Status:\n      properties:\n        error:\n          type: string\n        hits:\n          type: integer\n        success:\n          type: boolean\n        took:\n          description: Time (ms) taken to execute query\n          type: integer\n      type: object\n    Suggestions:\n      items:\n        properties:\n          suggestion:\n            properties:\n              collate_match:\n                type: boolean\n              highlighted:\n                type: string\n              score:\n                type: number\n              text:\n                type: string\n            type: object\n          text:\n            type: string\n        type: object\n      type: array\n    Summaries:\n      items:\n        properties:\n          field:\n            type: string\n          name:\n            type: string\n          summary:\n            type: object\n        type: object\n      type: array\n    Taxonomies:\n      items:\n        type: string\n      type: array\ninfo:\n  contact:\n    email: goat@genomehubs.org\n    name: GoaT\n    url: https://goat.genomehubs.org\n  description: |\n    Genomes on a Tree Application Programming Interface (GoaT API).\n\n    Provides a low-level API to retrieve records, lookup, search and generate reports across all taxon and assembly data in GoaT.\n  license:\n    name: MIT License\n    url: https://github.com/genomehubs/genomehubs/blob/main/LICENSE\n  title: GoaT API\n  version: 2.3.0\nopenapi: 3.0.0\npaths:\n  /count:\n    get:\n      description: |\n        Fetch the record count for a search query without including any of the results.\n\n        **/count** supports all relevant **/search** parameters to allow a record count to be obtained for a query prior to a full search.\n      operationId: getSearchResultCount\n      parameters:\n        - $ref: \"#/components/parameters/queryParam\"\n        - $ref: \"#/components/parameters/resultParam\"\n        - $ref: \"#/components/parameters/fieldsParam\"\n        - $ref: \"#/components/parameters/includeEstimatesParam\"\n        - $ref: \"#/components/parameters/searchRawValuesParam\"\n        - $ref: \"#/components/parameters/excludeAncestralParam\"\n        - $ref: \"#/components/parameters/excludeDescendantParam\"\n        - $ref: \"#/components/parameters/excludeDirectParam\"\n        - $ref: \"#/components/parameters/excludeMissingParam\"\n        - $ref: \"#/components/parameters/taxonomyParam\"\n        - $ref: \"#/components/parameters/releaseParam\"\n        - $ref: \"#/components/parameters/indentParam\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: \"#/components/schemas/Status\"\n                    status: null\n                  - $ref: \"#/components/schemas/Count\"\n                    count: null\n          description: successful operation\n        \"400\":\n          description: Invalid query\n      summary: Count of records matching a search query\n      tags:\n        - Data\n      x-eov-operation-handler: api/v2/routes/count\n  /download:\n    get:\n      description: Returns indexed files\n      operationId: getFile\n      parameters:\n        - $ref: \"#/components/parameters/recordIdParamDownload\"\n        - $ref: \"#/components/parameters/filenameParam\"\n        - $ref: \"#/components/parameters/previewParam\"\n        - $ref: \"#/components/parameters/streamFileParam\"\n      responses:\n        \"200\":\n          content:\n            application/*:\n              schema:\n                format: binary\n            application/json:\n              schema:\n                type: string\n            image/*:\n              schema:\n                format: binary\n            text/*:\n              schema:\n                type: string\n          description: successful operation\n        \"400\":\n          description: Invalid query\n        \"404\":\n          description: Not Found\n      summary: Download file\n      tags:\n        - Tools\n      x-eov-operation-handler: api/v2/routes/download\n  /lookup:\n    get:\n      description: |\n        Find record IDs matching a search term based on full or partial matches to a record ID, name, snyonym or other identifier.\n\n        If no exact matches are found, suggestions my be returned based on fuzzy matches.\n      operationId: getIdentifiers\n      parameters:\n        - $ref: \"#/components/parameters/searchTermParam\"\n        - $ref: \"#/components/parameters/resultParam\"\n        # - $ref: \"#/components/parameters/prefixQueryParam\"\n        - $ref: \"#/components/parameters/sizeParam\"\n        - $ref: \"#/components/parameters/lineageParam\"\n        - $ref: \"#/components/parameters/taxonomyParam\"\n        - $ref: \"#/components/parameters/releaseParam\"\n        - $ref: \"#/components/parameters/suggestSizeParam\"\n        - $ref: \"#/components/parameters/gramSizeParam\"\n        - $ref: \"#/components/parameters/maxErrorsParam\"\n        - $ref: \"#/components/parameters/confidenceParam\"\n        - $ref: \"#/components/parameters/preTagParam\"\n        - $ref: \"#/components/parameters/postTagParam\"\n        - $ref: \"#/components/parameters/indentParam\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: \"#/components/schemas/Status\"\n                    status: null\n                  - $ref: \"#/components/schemas/Results\"\n                    results: null\n                  - $ref: \"#/components/schemas/Suggestions\"\n                    suggestions: null\n          description: successful operation\n        \"400\":\n          description: Invalid queryTerm\n      summary: Lookup record IDs based on exact, partial or fuzzy matching\n      tags:\n        - Data\n      x-eov-operation-handler: api/v2/routes/lookup\n  /progress:\n    get:\n      description: Returns progress of a long-running search or report query\n      operationId: getProgress\n      parameters:\n        - $ref: \"#/components/parameters/queryIdParam\"\n        - $ref: \"#/components/parameters/indentParam\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: \"#/components/schemas/Status\"\n                    status: null\n                  - $ref: \"#/components/schemas/Records\"\n                    results: null\n          description: successful operation\n        \"400\":\n          description: Invalid queryId\n      summary: Returns query progress\n      tags:\n        - Tools\n      x-eov-operation-handler: api/v2/routes/progress\n  /record:\n    get:\n      description: Fetch records matching a record identifier to obtain all information for a single taxon or assembly.\n      operationId: getRecords\n      parameters:\n        - $ref: \"#/components/parameters/recordIdParam\"\n        - $ref: \"#/components/parameters/resultParam\"\n        - $ref: \"#/components/parameters/sizeParam\"\n        - $ref: \"#/components/parameters/taxonomyParam\"\n        - $ref: \"#/components/parameters/releaseParam\"\n        - $ref: \"#/components/parameters/indentParam\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: \"#/components/schemas/Status\"\n                    status: null\n                  - $ref: \"#/components/schemas/Records\"\n                    results: null\n          description: successful operation\n        \"400\":\n          description: Invalid recordId\n      summary: Fetch records matching a record identifier\n      tags:\n        - Data\n      x-eov-operation-handler: api/v2/routes/record\n  /report:\n    get:\n      description: |\n        Generate reports based on search queries. \n\n        General parameters `result`, `report` and `taxonomy` are required for all reports. Additional required and optional parameters vary according to report type:\n\n        | Report        | Required          | Optional       |\n        | ------------- | ----------------- | -------------- |\n        | **Histogram** | `x`, `rank`       | `cat`, `xOpts` |\n        | **Scatter**   | `x`, `y`, `rank`  | `cat`, `xOpts`, `yOpts`, `scatterThreshold` |\n        | **Sources**   | -                 | -              |\n        | **Tree**      | `x`               | `y`, `cat`, `xOpts`, `yOpts`, `collapseMonotypic`, `treeThreshold` |\n        | **xInY**      | `x`, `rank`       | `y`            |\n        | **xPerRank**  | `x`               | `ranks`        |\n\n        Search related parameters `fields`, `includeEstimates`, `exclude*` and `queryId` are optional for all reports (except `sources` where they have no effect).\n      operationId: getReport\n      parameters:\n        - $ref: \"#/components/parameters/resultParam\"\n        - $ref: \"#/components/parameters/reportParam\"\n        - $ref: \"#/components/parameters/fieldsParam\"\n        - $ref: \"#/components/parameters/xParam\"\n        - $ref: \"#/components/parameters/yParam\"\n        # - $ref: \"#/components/parameters/zParam\"\n        - $ref: \"#/components/parameters/catParam\"\n        - $ref: \"#/components/parameters/rankParam\"\n        - $ref: \"#/components/parameters/includeEstimatesParam\"\n        - $ref: \"#/components/parameters/collapseMonotypicParam\"\n        - $ref: \"#/components/parameters/ranksParam\"\n        - $ref: \"#/components/parameters/namesParam\"\n        - $ref: \"#/components/parameters/excludeAncestralParam\"\n        - $ref: \"#/components/parameters/excludeDescendantParam\"\n        - $ref: \"#/components/parameters/excludeDirectParam\"\n        - $ref: \"#/components/parameters/excludeMissingParam\"\n        - $ref: \"#/components/parameters/taxonomyParam\"\n        - $ref: \"#/components/parameters/xOptsParam\"\n        - $ref: \"#/components/parameters/yOptsParam\"\n        - $ref: \"#/components/parameters/scatterThresholdParam\"\n        - $ref: \"#/components/parameters/treeThresholdParam\"\n        - $ref: \"#/components/parameters/queryIdParam\"\n        - $ref: \"#/components/parameters/releaseParam\"\n        - $ref: \"#/components/parameters/indentParam\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: \"#/components/schemas/Status\"\n                    status: null\n                  - $ref: \"#/components/schemas/Summaries\"\n                    results: null\n            text/x-nh:\n              schema:\n                type: string\n            application/xml:\n              schema:\n                type: string\n            application/zip:\n              schema:\n                type: string\n                format: octal\n          description: successful operation\n        \"400\":\n          description: Invalid query\n        \"404\":\n          description: Not Found\n      summary: Generate a report\n      tags:\n        - Data\n      x-eov-operation-handler: api/v2/routes/report\n  /resultFields:\n    get:\n      description: Returns available fields for a given result type\n      operationId: getResultFields\n      parameters:\n        - $ref: \"#/components/parameters/resultParam\"\n        - $ref: \"#/components/parameters/releaseParam\"\n        - $ref: \"#/components/parameters/taxonomyParam\"\n        - $ref: \"#/components/parameters/indentParam\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: \"#/components/schemas/Status\"\n                    status: null\n                  - $ref: \"#/components/schemas/Fields\"\n                    results: null\n          description: successful operation\n        \"400\":\n          description: Invalid recordId\n      summary: Returns available fields\n      tags:\n        - Metadata\n      x-eov-operation-handler: api/v2/routes/resultFields\n  /search:\n    get:\n      description: Returns records matching a query\n      operationId: getSearchResults\n      parameters:\n        - $ref: \"#/components/parameters/queryParam\"\n        - $ref: \"#/components/parameters/resultParam\"\n        - $ref: \"#/components/parameters/fieldsParam\"\n        - $ref: \"#/components/parameters/ranksParam\"\n        - $ref: \"#/components/parameters/namesParam\"\n        - $ref: \"#/components/parameters/includeEstimatesParam\"\n        - $ref: \"#/components/parameters/includeRawValuesParam\"\n        - $ref: \"#/components/parameters/searchRawValuesParam\"\n        - $ref: \"#/components/parameters/summaryValuesParam\"\n        - $ref: \"#/components/parameters/excludeAncestralParam\"\n        - $ref: \"#/components/parameters/excludeDescendantParam\"\n        - $ref: \"#/components/parameters/excludeDirectParam\"\n        - $ref: \"#/components/parameters/excludeMissingParam\"\n        - $ref: \"#/components/parameters/sizeParam\"\n        - $ref: \"#/components/parameters/offsetParam\"\n        - $ref: \"#/components/parameters/sortByParam\"\n        - $ref: \"#/components/parameters/sortOrderParam\"\n        - $ref: \"#/components/parameters/sortModeParam\"\n        - $ref: \"#/components/parameters/taxonomyParam\"\n        - $ref: \"#/components/parameters/releaseParam\"\n        - $ref: \"#/components/parameters/queryIdParam\"\n        - $ref: \"#/components/parameters/indentParam\"\n        - $ref: \"#/components/parameters/tidyDataParam\"\n        - $ref: \"#/components/parameters/filenameParam\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: \"#/components/schemas/Status\"\n                    status: null\n                  - $ref: \"#/components/schemas/Records\"\n                    results: null\n            text/csv:\n              schema:\n                type: string\n            text/tab-separated-values:\n              schema:\n                type: string\n          description: successful operation\n        \"400\":\n          description: Invalid query\n      summary: Fetch field values for records matching a search query\n      tags:\n        - Data\n      x-eov-operation-handler: api/v2/routes/search\n  /summary:\n    get:\n      description: Returns a summary of raw field values\n      operationId: getFieldSummary\n      parameters:\n        - $ref: \"#/components/parameters/recordIdParam\"\n        - $ref: \"#/components/parameters/summaryParam\"\n        - $ref: \"#/components/parameters/resultParam\"\n        - $ref: \"#/components/parameters/fieldsParamSummary\"\n        - $ref: \"#/components/parameters/taxonomyParam\"\n        - $ref: \"#/components/parameters/releaseParam\"\n        - $ref: \"#/components/parameters/indentParam\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                anyOf:\n                  - $ref: \"#/components/schemas/Status\"\n                    status: null\n                  - $ref: \"#/components/schemas/Summaries\"\n                    results: null\n          description: successful operation\n        \"400\":\n          description: Invalid query\n      summary: Field value summary\n      tags:\n        - Data\n      x-eov-operation-handler: api/v2/routes/summary\n  /taxonomies:\n    get:\n      description: Returns a list of available taxonomies\n      operationId: getTaxonomies\n      parameters:\n        - $ref: \"#/components/parameters/releaseParam\"\n        - $ref: \"#/components/parameters/indentParam\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Taxonomies\"\n          description: successful operation\n        \"400\":\n          description: Invalid query\n      summary: List of taxonomies\n      tags:\n        - Metadata\n      x-eov-operation-handler: api/v2/routes/taxonomies\nservers:\n  - url: http://localhost:3000/api/v2\ntags:\n  - description: Retrieve search results, records and reports\n    name: Data\n  - description: List available terms and properties\n    name: Metadata\n  - description: Download files and check query progress\n    name: Tools\n",
			"canonicalURL": "/github.com/genomehubs/genomehubs@9b506bde3cb748bf303cb52dfc24e0e26ddebf38/-/blob/src/genomehubs-api/src/api-v2.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/genomehubs/genomehubs/blob/9b506bde3cb748bf303cb52dfc24e0e26ddebf38/src/genomehubs-api/src/api-v2.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: Unsupported map key of type: %!s(\u003cnil\u003e), key: \u003cnil\u003e, value: map[interface {}]interface {}{\"summary\":\"Do not return names\", \"value\":interface {}(nil)}"
}