{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ietf-tools/bibxml-service"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "templates/openapi.yaml",
			"byteSize": 17687,
			"content": "openapi: 3.1.0\n\ninfo:\n  title: IETF BibXML service\n  description: |\n    IETF BibXML service provides an open and public API for its users to fetch references from.\n\n    For xml2rfc-style paths (e.g., \u003ccode\u003e/public/rfc/bibxml/...\u003c/code\u003e),\n    see \u003ca href=\"{% url \"openapi_readable_spec\" \"openapi_spec_legacy\" %}\"\u003ecompatibility API reference\u003c/a\u003e.\n  contact:\n    email: ietf-ribose@ribose.com\n  license:\n    name: BSD 3-Clause\n    url: https://github.com/ietf-ribose/bibxml-service/blob/main/LICENSE\n  version: {{ snapshot }}\n\nservers:\n- url: /api/v1\n\npaths:\n\n  /by-docid/:\n    get:\n      summary: Get bibliographic item by document ID\n      description: \u003e\n        Retrieve a bibliographic item by document identifier.\n\n        If no match is found in indexed bibliographic data sources,\n        and a suitable `doctype` is supplied, external sources are attempted\n        unless `check_external_sources` flag is set to `never`.\n      operationId: getBibItemByDocId\n\n      parameters:\n      - name: docid\n        in: query\n        description: |\n          Document ID. For example, `RFC7991`.\n\n          More valid identifier examples:\n          {% for doctype in known_doctypes %}\n          - `{{ doctype.1 }}`\n          {% endfor %}\n        required: true\n        schema:\n          type: string\n\n      - name: doctype\n        in: query\n        description: |\n          Document identifier type (optional).\n\n          Note that the schema lists _currently available types_\n          (present across indexed bibliographic items at the time of viewing this page),\n          other document types can be available at different points in time\n          depending on index state.\n        required: false\n        schema:\n          $ref: '#/components/schemas/AvailableDoctypes'\n\n      - name: format\n        in: query\n        description: |\n          Format to return bibliographic item in.\n          If `bibxml` is requested, returns an application/xml response;\n          otherwise application/json response with Relaton structure under `data` key.\n\n          (Note: `bibxml` output is not yet fully featured in this endpoint.)\n        schema:\n          type: string\n          default: relaton\n          enum: [bibxml, relaton]\n\n      - name: anchor\n        in: query\n        description: |\n          Only has effect when ``format`` is ``bibxml``.\n          If provided, the returned XML root element will have its\n          ``anchor`` attribute set to this value.\n        schema:\n          type: string\n\n      - name: check_external_sources\n        in: query\n        description: |\n          Whether to check external sources (such as Crossref or Datatracker).\n          Only has effect if suitable `doctype` is provided with request.\n\n          `last_resort` means only if nothing could be found in indexed sources,\n          `never` means never.\n        schema:\n          type: string\n          default: last_resort\n          enum: [last_resort, never]\n\n      security:\n      - DatatrackerAPIKeyAuth: []\n\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BibliographicItemResponse'\n            application/xml:\n              schema:\n                type: string\n                description: |\n                  RFC 7991-formatted bibliographic item\n                  with ``\u003creference\u003e`` or ``\u003creferencegroup\u003e``\n                  root element.\n\n        404:\n          description: no bibliographic item found matching given document identifier type and id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n        500:\n          description: operation failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /search/{query}/:\n    parameters:\n    - name: query\n      in: path\n      schema:\n        type: string\n        example: |\n          %2Bnist+%22metropolitan+area%22+-%22wind+damage%22\n      description: |\n        Search query string. Format depends on `query_format` parameter.\n        Special characters, such as forward slashes, must be URL-escaped.\n    get:\n      summary: Search bibliographic items\n      description: |\n        Find bibliographic items across indexed (non-external) datasets that match given query.\n\n        Results are ordered by recorded date (publication, revision, etc.) from latest to oldest.\n\n        NOTE: as of now, this API may not return the latest and complete results at all times,\n        as various source indexes could be cleared and/or be mid-indexation.\n      parameters:\n      - name: query_format\n        in: query\n        schema:\n          type: string\n          enum:\n          {% for format in supported_search_query_formats %}\n          - {{ format }}\n          {% endfor %}\n          default: {{ supported_search_query_formats|first }}\n        description: |\n          Determines how to treat the query.\n          See search help on the \u003ca href=\"/\"\u003emain page\u003c/a\u003e.\n      - name: page\n        in: query\n        schema:\n          type: integer\n        description: Page number, for cases with many matches.\n      operationId: searchBibItems\n\n      security:\n      - DatatrackerAPIKeyAuth: []\n\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResponse'\n\n        500:\n          description: operation failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n  /management/{dataset}/status/:\n    parameters:\n    - name: dataset\n      in: path\n      description: Indexable source ID\n      required: true\n      schema:\n        $ref: '#/components/schemas/IndexableSources'\n    get:\n      summary: Get dataset status\n      description: |\n        Returns a list of recent indexing tasks for given dataset, starting from most recently started task.\n      operationId: getDatasetTaskStatus\n      responses:\n        200:\n          description: successful operation, shows index current status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IndexerStatus'\n\n  /management/{dataset}/reindex/:\n    parameters:\n    - name: dataset\n      in: path\n      description: Indexable source ID\n      required: true\n      schema:\n        $ref: '#/components/schemas/IndexableSources'\n    post:\n      summary: (Re)index dataset\n      description: |\n        Indexing dataset sources is required to enable searching across bibliographic item data.\n        Currently, indexing is done manually.\n        A call to this endpoint reindexes either the entire dataset or specified refs\n        from dataset source(s).\n      operationId: indexDataset\n      consumes:\n      - application/x-www-form-urlencoded\n      requestBody:\n        description: Indexation options.\n        content:\n          'application/x-www-form-urlencoded':\n            schema:\n              type: object\n              properties:\n                refs:\n                  description: |\n                    Comma-separated list of refs to index.\n                    Whether this option has effect depends on indexable source implementation.\n                    If not provided, the entire dataset is reindexed.\n                  type: array\n                  items:\n                    type: string\n            encoding:\n              refs:\n                style: form\n                explode: false\n      security:\n      - APIKeyAuth: []\n      responses:\n        200:\n          description: Indexing task had been queued (does not mean indexing completed without errors)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessMessage'\n        500:\n          description: Queueing failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n\n  /management/{dataset}/reset-index/:\n    parameters:\n    - name: dataset\n      in: path\n      description: Indexable source ID\n      required: true\n      schema:\n        $ref: '#/components/schemas/IndexableSources'\n    post:\n      summary: Clear dataset index\n      description: Clears indexed data for given dataset; notably, does not abort any indexing tasks queued or progressing.\n      operationId: resetDatasetIndex\n      security:\n      - APIKeyAuth: []\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessMessage'\n        500:\n          description: operation failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n\n  /management/tasks/{task_id}/stop/:\n    parameters:\n    - name: task_id\n      in: path\n      description: Task ID. The ID of an indexing task can be obtained from dataset status endpoint.\n      required: true\n      schema:\n        $ref: '#/components/schemas/IndexableSources'\n    post:\n      summary: Stop task\n      description: Revokes given task, and attempts to terminate if running.\n      operationId: stopTask\n      security:\n      - APIKeyAuth: []\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessMessage'\n        500:\n          description: operation failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n\n  /management/tasks/stop-all/:\n    post:\n      summary: Revoke all tasks\n      description: Revokes any pending tasks. Tries to terminate those already running, but no guarantees.\n      operationId: stopAllTasks\n      security:\n      - APIKeyAuth: []\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SuccessMessage'\n        500:\n          description: operation failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorMessage'\n\n  /ref/{dataset}/{ref_id}/:\n    parameters:\n    - name: dataset\n      in: path\n      description: |\n        Relaton dataset ID.\n\n        Note that the schema lists all registered datasets,\n        even those from which no bibliographic items are indexed at the moment of viewing this page.\n      required: true\n      schema:\n        $ref: '#/components/schemas/RelatonDatasets'\n    - name: ref_id\n      in: path\n      description: |\n        Standard reference, as it appears in source dataset.\n        Special characters, such as forward slashes, must be URL-escaped.\n      required: true\n      schema:\n        type: string\n\n    get:\n      parameters:\n      - name: format\n        in: query\n        description: |\n          Format to return bibliographic item in.\n          If `bibxml` is requested, returns an application/xml response;\n          otherwise application/json response with Relaton structure under `data` key.\n        schema:\n          type: string\n          default: relaton\n          enum: [bibxml, relaton]\n      summary: Get bibliographic item by reference in source dataset\n      description: |\n        This endpoint allows you to retrieve a reference from given dataset.\n\n        For external datasets, this always incurs an additional network request.\n\n        NOTE: This endpoint may not be what you want to use, as datasets represent\n        internal sources of bibliographic item data. The /docid/… endpoint allows\n        you to get a bibliographic item by document type and ID, which may be more useful.\n        External dataset support for this endpoint may be removed.\n      operationId: getCitationByReferenceId\n\n      security:\n      - DatatrackerAPIKeyAuth: []\n\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: string\n                description: BibXML-formatted bibliographic item\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BibliographicItemResponse'\n\n        404:\n          description: reference not found in given dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n        500:\n          description: operation failed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n\n\ncomponents:\n\n  schemas:\n\n    AvailableDoctypes:\n      type: string\n      enum:\n      {% for doctype in known_doctypes %}\n      - {{ doctype.0 }}\n      {% endfor %}\n\n    RelatonDatasets:\n      type: string\n      enum:\n      {% for ds_id in relaton_datasets %}\n      - {{ ds_id }}\n      {% endfor %}\n\n    BibliographicItemResponse:\n      type: object\n      properties:\n        data:\n          type: object\n          $ref: '#/components/schemas/BibliographicItem'\n\n    ErrorResponse:\n      type: object\n      properties:\n        error:\n          type: object\n          properties:\n            code:\n              type: integer\n              description: Code for automatic error processing\n            message:\n              type: string\n              description: Human readable error message\n\n    SearchResponse:\n      type: object\n      properties:\n        meta:\n          type: object\n          required:\n            - total\n          properties:\n            total:\n              type: integer\n              description: Total number of bibliographic items found for this query.\n            next:\n              type: string\n              description: Domain-relative URL to next batch of search results, if any.\n            prev:\n              type: string\n              description: Domain-relative URL to previous batch of search results, if any.\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/BibliographicItem'\n\n    IndexableSources:\n      type: string\n      enum:\n      {% for source_id in indexable_sources %}\n      - {{ source_id }}\n      {% endfor %}\n\n    IndexerStatus:\n      type: object\n      description: Recent dataset indexing task history\n      properties:\n        tasks:\n          description: A list of most recent indexing tasks for given dataset\n          type: array\n          items:\n            type: object\n            description: Describes indexing task\n            required:\n              - task_id\n              - status\n            properties:\n              task_id:\n                format: string\n                description: Task ID; can be used to cancel this task using the tasks endpoint\n              status:\n                type: string\n                description: Short status keyword (e.g., STARTED, PROGRESS, FAILED or similar; not strictly normalized)\n\n              dataset_id:\n                format: string\n                description: Dataset ID\n              requested_refs:\n                type: array\n                description: Refs that were requested for indexing\n                items:\n                  type: string\n\n              started_at:\n                type: string\n                format: datetime\n\n              action:\n                type: string\n                description: For a task in progress, human-readable summary of what’s currently happening\n              progress:\n                description: For a task in progress, completion progress\n                type: object\n                required:\n                  - current\n                properties:\n                  total:\n                    description: Total, e.g. number of source files found\n                    type: integer\n                  current:\n                    description: Current item, e.g. number of indexed files so far\n                    type: integer\n\n              completed_at:\n                type: string\n                format: datetime\n                description: For a successful task, completion timestamp\n              outcome_summary:\n                type: string\n                description: For a successful task, human-readable description of the outcome\n\n              error:\n                type: object\n                description: For a failed task, error details\n                properties:\n                  type:\n                    type: string\n                  message:\n                    type: string\n\n    SuccessMessage:\n      type: object\n      description: Generic success response\n      properties:\n        message:\n          type: string\n          description: Human-readable success message\n\n    ErrorMessage:\n      type: object\n      description: Generic error response\n      properties:\n        error:\n          type: object\n          properties:\n            code:\n              type: integer\n              description: Code for automatic error processing\n            message:\n              type: string\n              description: Human-readable error message\n\n{{ pre_indented_bibliographic_item_definitions|safe }}\n\n  securitySchemes:\n    APIKeyAuth:\n      type: apiKey\n      in: header\n      name: X-IETF-Token\n    DatatrackerAPIKeyAuth:\n      type: apiKey\n      in: header\n      name: X-Datatracker-Token\n",
			"canonicalURL": "/github.com/ietf-tools/bibxml-service@20b9faac26ea6dd5fc980f6b70a4e1087ca123d5/-/blob/templates/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ietf-tools/bibxml-service/blob/20b9faac26ea6dd5fc980f6b70a4e1087ca123d5/templates/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: yaml: line 153:11: found character that cannot start any token"
}