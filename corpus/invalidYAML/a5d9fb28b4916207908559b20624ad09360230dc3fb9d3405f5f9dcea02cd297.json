{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/elyra-ai/elyra"
		},
		"file": {
			"name": "elyra.yaml",
			"size": 0,
			"path": "elyra/api/elyra.yaml",
			"byteSize": 25749,
			"content": "#\n# Copyright 2018-2022 Elyra Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nopenapi: 3.0.1\ninfo:\n  title: Elyra API\n  description: The API for the Elyra extensions.\n  contact:\n    name: Elyra\n    url: https://github.com/elyra-ai/elyra\n  version: \"1\"\n\npaths:\n\n  /elyra/elyra.yaml:\n    get:\n      tags:\n        - api\n      summary: Get API information (yaml).\n      responses:\n        200:\n          description: Returns a swagger specification in yaml.\n          content:\n            text/x-yaml:\n              schema:\n                type: string\n        500:\n          description: Unexpected error.\n\n  /elyra/schemaspace:\n    get:\n      tags:\n        - schemaspace\n      summary: Get current schemaspace names.\n      responses:\n        200:\n          description: Returns the list of current schemaspace names.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  schemaspaces:\n                    items: {\n                      type: string\n                    }\n                    description: The list of current schemaspace names.\n        500:\n          description: Unexpected error.\n\n  /elyra/schemaspace/{schemaspace_name_or_id}:\n    get:\n      tags:\n        - schemaspace\n      summary: Get properties for a given schemaspace.\n      parameters:\n        - name: schemaspace_name_or_id\n          in: path\n          description: The name or id of the schemaspace.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns the single-valued properties of the current schemaspace.\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - $ref: '#/components/schemas/SchemaspaceResource'\n        404:\n          description: Schemaspace not found.\n          content: {}\n        500:\n          description: Unexpected error.\n\n  /elyra/schema/{schemaspace_name_or_id}:\n    get:\n      tags:\n        - schema\n      summary: Get schemas for a given schemaspace\n      parameters:\n        - name: schemaspace_name_or_id\n          in: path\n          description: The name or id of the schemaspace\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns the schema instances for a given schemaspace name or id.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  schemaspace:\n                    type: array\n                    description: The schema instances within the schemaspace.\n                    items:\n                      $ref: '#/components/schemas/SchemaResource'\n        404:\n          description: Schemaspace not found.\n          content: {}\n        500:\n          description: Unexpected error.\n\n  /elyra/schema/{schemaspace_name_or_id}/{resource}:\n    get:\n      tags:\n        - schema\n      summary: Get a given schema instance from a given schemaspace name or id.\n      parameters:\n        - name: schemaspace_name_or_id\n          in: path\n          description: The name or id of the schemaspace.\n          required: true\n          schema:\n            type: string\n        - name: resource\n          in: path\n          description: The name of the resource in a given schemaspace.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The named schema instance within the schemaspace.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchemaResource'\n        404:\n          description: Schemaspace/Resource not found.\n          content: {}\n        500:\n          description: Unexpected error.\n\n  /elyra/metadata/{schemaspace_name_or_id}:\n    get:\n      tags:\n        - metadata\n      summary: Get metadata for a given schemaspace name or id.\n      parameters:\n        - name: schemaspace_name_or_id\n          in: path\n          description: The name or id of the schemaspace.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The metadata instances within the schemaspace.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  schemaspace:\n                    type: array\n                    description: The name of the schemaspace.\n                    items:\n                      $ref: '#/components/schemas/MetadataResource'\n        400:\n          description: An error (validation, syntax) occurred relative to the instance data.\n        404:\n          description: Schemaspace not found.\n          content: {}\n        500:\n          description: Unexpected error.\n    post:\n      tags:\n        - metadata\n      summary: Create a metadata instance in a given schemaspace.\n      parameters:\n        - name: schemaspace_name_or_id\n          in: path\n          description: The name or id of the schemaspace.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataResourceBody'\n\n      responses:\n        201:\n          description: The newly-created metadata instance.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataResource'\n          headers:\n            Location:\n              description: Resource endpoint\n              schema:\n                type: string\n                format: url\n        400:\n          description: An error (validation, syntax) occurred relative to the instance data.\n        404:\n          description: Schemaspace not found.\n        409:\n          description: Resource already exists.\n        500:\n          description: Unexpected error.\n\n  /elyra/metadata/{schemaspace_name_or_id}/{resource}:\n    get:\n      tags:\n        - metadata\n      summary: Get a given metadata instance from a given schemaspace name or id.\n      parameters:\n        - name: schemaspace_name_or_id\n          in: path\n          description: The name or id of the schemaspace.\n          required: true\n          schema:\n            type: string\n        - name: resource\n          in: path\n          description: The name of the resource in a given schemaspace.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The named metadata instance within the schemaspace.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataResource'\n        400:\n          description: An error (validation, syntax) occurred relative to the instance data.\n        404:\n          description: Schemaspace/Resource not found.\n          content: {}\n        500:\n          description: Unexpected error.\n\n    put:\n      tags:\n        - metadata\n      summary: Update a given metadata resource within a given schemaspace.\n      parameters:\n        - name: schemaspace_name_or_id\n          in: path\n          description: The name or id of the schemaspace.\n          required: true\n          schema:\n            type: string\n        - name: resource\n          in: path\n          description: The name of the resource in a given schemaspace.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataResourceBody'\n\n      responses:\n        200:\n          description: The updated metadata instance.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataResource'\n        400:\n          description: An error (validation, syntax, not supported) occurred relative to the instance data.\n        404:\n          description: The resource to update was not found.\n        500:\n          description: Unexpected error.\n\n    delete:\n      tags:\n        - metadata\n      summary: Delete a given metadata resource from a given schemaspace.\n      parameters:\n        - name: schemaspace_name_or_id\n          in: path\n          description: The name or id of the schemaspace.\n          required: true\n          schema:\n            type: string\n        - name: resource\n          in: path\n          description: The name of the resource in a given schemaspace.\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: The resource was successfully deleted.\n        400:\n          description: An error (validation, syntax) occurred relative to the instance data.\n        403:\n          description: Deletion of the resource is not permitted.\n        404:\n          description: The resource was not found.\n        500:\n          description: Unexpected error.\n\n  /elyra/pipeline/components/cache:\n    put:\n      tags:\n        - component\n      summary: Initiates a refresh of the entire component cache.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ComponentCacheResource'\n      responses:\n        204:\n          description: The refresh request was initiated successfully.\n        400:\n          description: Invalid request, malformed body.\n        409:\n          description: Cache refresh is in progress - try request later.\n\n  /elyra/pipeline/components/cache/{catalog}:\n    parameters:\n      - name: catalog\n        in: path\n        description: The name of the component catalog to refresh\n        required: true\n        schema:\n          type: string\n    put:\n      tags:\n        - component\n      summary: Initiates a refresh of the given component catalog.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ComponentCacheResource'\n      responses:\n        204:\n          description: The refresh request was initiated successfully.\n        400:\n          description: Invalid request, malformed body.\n        404:\n          description: Catalog not found.\n\n  /elyra/pipeline/components/{processor}:\n    parameters:\n      - name: processor\n        in: path\n        description: The name of the runtime processor.  Will match the runtime schema name (e.g., \"kfp\", \"airflow\", etc.).\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - pipeline\n        - component\n      summary: Fetch all components associated with the given runtime processor.\n      responses:\n        200:\n          description: The components relative to the given runtime processor for use in the Elyra front-end.\n          content:\n            application/json:\n              schema:\n                type: object\n        400:\n          description: Invalid runtime processor.\n\n  /elyra/pipeline/components/{processor}/{component_id}/properties:\n    parameters:\n      - name: processor\n        in: path\n        description: The name of the runtime processor.  Will match the runtime schema name (e.g., \"kfp\", \"airflow\", etc.).\n        required: true\n        schema:\n          type: string\n      - name: component_id\n        in: path\n        description: The component identifier - composed of the catalog connector schema name, \":\", and the component's hash.\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - pipeline\n        - component\n      summary: Fetch a component's properties for use in the Elyra front-end\n      responses:\n        200:\n          description: JSON containing the component definition.\n          content:\n            application/json:\n              schema:\n                type: object\n        400:\n          description: Invalid runtime processor or component ID.\n\n /elyra/pipeline/{processor}/properties:\n    parameters:\n      - name: processor\n        in: path\n        description: The name of the runtime processor.  Will match the RuntimeType string form (e.g., \"KUBEFLOW_PIPELINES\", \"AIRFLOW\", etc.).\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - pipeline\n      summary: Fetch a pipeline's properties for use in the Elyra front-end\n      responses:\n        200:\n          description: JSON containing the pipeline properties definition.\n          content:\n            application/json:\n              schema:\n                type: object\n        400:\n          description: Invalid runtime processor.\n\n  /elyra/pipeline/export:\n    post:\n      tags:\n        - pipeline\n      summary: Export a pipeline.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PipelineExportBodyPost'\n      responses:\n        201:\n          description: The pipeline export response.\n          headers:\n            Location:\n              description: The resource endpoint.\n              schema:\n                type: string\n                format: url\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  export_path:\n                    type: string\n                    description: The pipeline export path.\n\n\n  /elyra/pipeline/runtimes/types:\n    get:\n      tags:\n        - pipeline\n      summary: Get the set of static resources associated with currently configured runtime types\n      responses:\n        200:\n          description: The resources associated with the currently configured runtime types\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  runtime_types:\n                    type: array\n                    description: The list of resources associated with each configured runtime type.\n                    items:\n                      $ref: '#/components/schemas/RuntimeTypeResources'\n\n  /elyra/pipeline/schedule:\n    post:\n      tags:\n        - pipeline\n      summary: Execute pipelines as batch jobs.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PipelineResource'\n      responses:\n        200:\n          description: The pipeline processor response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PipelineScheduleResponse'\n\n  /elyra/pipeline/validate:\n    post:\n      tags:\n        - pipeline\n      summary: Validate a pipeline.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PipelineResource'\n      responses:\n        200:\n          description: The pipeline validation response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PipelineValidationResponse'\n\n\n  /elyra/contents/properties/{filepath}:\n    get:\n      tags:\n        - contents\n      summary: Get a dictionary of properties for a file.\n      parameters:\n        - name: filepath\n          in: path\n          description: The path to the file to be parsed, relative to the JupyterLab server root directory.\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The dictionary of properties found while parsing the file.\n          content:\n            application/json:\n              schema:\n                type: object\n                description: A dictionary of properties.\n                allOf:\n                  - $ref: '#/components/schemas/ContentsPropertiesResource'\n        400:\n          description: File is a directory.\n        404:\n          description: File not found.\n\n\ncomponents:\n  schemas:\n    MetadataResourceBody:\n      description: The set of properties comprising the request body for POST and PUT requests.\n      required:\n        - display_name\n        - schema_name\n        - metadata\n      type: object\n      properties:\n        name:\n          type: string\n          description: The canonical name of the resource.  Will be derived from display_name if not provided on POST.\n        display_name:\n          type: string\n          description: The display name of the resource.\n        schema_name:\n          type: string\n          description: The schema name used to validate the resource.\n        metadata:\n          type: object\n          properties: {}\n          description: A free-form dictionary consisting of additional information\n            about the resource.\n\n    MetadataResource:\n      description: The set of properties comprising a metadata resource entity.\n      required:\n        - name\n        - display_name\n        - schema_name\n        - metadata\n      type: object\n      properties:\n        name:\n          type: string\n          description: The canonical name of the metadata resource.\n        display_name:\n          type: string\n          description: The display name of the metadata resource.\n        schema_name:\n          type: string\n          description: The schema name used to validate the metadata resource.\n        metadata:\n          type: object\n          properties: {}\n          description: A free-form dictionary consisting of additional information\n            about the resource.\n\n    SchemaResource:\n      description: The set of properties comprising a schema resource entity.\n      required:\n        - name\n        - schemaspace\n      type: object\n      properties:\n        schemaspace:\n          type: string\n          description: The schemaspace name or id of the schema resource.\n        name:\n          type: string\n          description: The canonical name of the schema resource.\n        title:\n          type: string\n          description: The title of the schema resource.\n        properties:\n          type: object\n          properties: {}\n          description: A free-form dictionary consisting of additional information\n            about the resource.\n\n    SchemaspaceResource:\n      description: The set of properties comprising a schemaspace resource entity.\n      required:\n        - name\n        - id\n        - display_name\n        - description\n      type: object\n      properties:\n        name:\n          type: string\n          description: The canonical name of the schemaspace resource.\n        id:\n          type: string\n          description: The id of the schemaspace resource.\n        display_name:\n          type: string\n          description: The display name of the schemaspace resource.\n        description:\n          type: string\n          description: The description of the schemaspace resource.\n\n    PipelineResource:\n      description: The set of properties comprising a pipeline resource entity.\n      required:\n        - primary_pipeline\n        - pipelines\n      type: object\n      properties:\n        primary_pipeline:\n          type: string\n          description: The primary pipeline id.\n        pipelines:\n          type: array\n          description: A set of pipeline definitions.\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                description: The unique identifier of the pipeline.\n              name:\n                type: string\n                description: The name of the pipeline.\n              nodes:\n                type: array\n                description: The set of nodes in the pipeline.\n                items:\n                  type: object\n                  properties: {}\n                  description: The node configuration.\n              runtime:\n                type: string\n                description: The runtime type for the pipeline.\n              runtime-config:\n                type: object\n                properties: {}\n                description: The runtime configuration that should be used to submit the pipeline.\n\n    PipelineScheduleResponse:\n      description: The set of properties comprising a pipeline processor response entity.\n      required:\n        - run_url\n        - object_storage_url\n        - object_storage_path\n      type: object\n      properties:\n        run_url:\n          type: string\n          description: The runtime URL to access the pipeline experiment.\n        object_storage_url:\n          type: string\n          description: The object storage URL to access the pipeline outputs\n            and processed notebooks.\n        object_storage_path:\n          type: string\n          description: The object storage working directory path where the pipeline outputs\n            and processed notebooks are located.\n\n    PipelineExportBodyPost:\n      description: The set of properties comprising the request body for POST request.\n      required:\n        - pipeline\n        - export_format\n        - export_path\n        - overwrite\n      type: object\n      properties:\n        pipeline:\n          $ref: '#/components/schemas/PipelineResource'\n        export_format:\n          type: string\n          description: The pipeline export format.\n        export_path:\n          type: string\n          description: The pipeline export path.\n        overwrite:\n          type: boolean\n          description: Determines if the existing export should be overwritten.\n\n    PipelineValidationResponse:\n      description: The set of properties comprising a pipeline validation response entity.\n      required:\n        - title\n        - description\n        - issues\n      type: object\n      properties:\n        title:\n          type: string\n          description: The title relative to the validation response.\n        description:\n          type: string\n          description: The description relative to the validation response.\n        issues:\n          type: array\n          description: The issues encountered during validation.  This will be empty if no issues were encountered.\n          items:\n            type: object\n            properties:\n              severity:\n                type: integer\n                enum: [1, 2, 3, 4]\n                description: The numeric value representing the severity of the issue - Error (1), Warning (2), Information (3), Hint (4)\n              source:\n                type: string\n                description: The highlevel source of the validation issue.\n              type:\n                type: string\n                description: Indicator of the category of the issue (e.g., \"invalidNodeProperty\", \"invalidRuntime\", etc.).\n              message:\n                type: string\n                description: The message corresponding to the validation issue.\n              data:\n                type: object\n                description: JSON consisting of information pertaining to where the issue occurred.\n\n    RuntimeTypeResources:\n      description: The set of properties comprising a runtime type resource entity.\n      required:\n        - id\n        - display_name\n        - icon\n        - export_file_types\n      type: object\n      properties:\n        id:\n          type: string\n          description: The id of the runtime type resource.\n        display_name:\n          type: string\n          description: The display name of the runtime type resource.\n        icon:\n          type: string\n          description: The location (endpoint) in which the runtime type icon can be found.\n        export_file_types:\n          type: array\n          description: The set of export file types this runtime type supports.\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                description: The supported file suffix\n              display_name:\n                type: string\n                description: The label corresponding to the export file type\n\n    ContentsPropertiesResource:\n      description: The set of resources comprising the request body.\n      required:\n        - env_vars\n        - inputs\n        - outputs\n      type: object\n      properties:\n        env_vars:\n          type: object\n          description: A dictionary with a key for each environment variable name found and a value corresponding to the variable value or null.\n          additionalProperties:\n            type: string\n        inputs:\n          type: array\n          description: A list of input file names.\n          items:\n            type: string\n        outputs:\n          type: array\n          description: A list of output file names.\n          items:\n            type: string\n\n    ComponentCacheResource:\n      description: The request body for refreshing the component cache.\n      required:\n        - action\n      type: object\n      properties:\n        action:\n          type: string\n          description: The action to carry out on the cache.  Only 'refresh' is supported.\n          enum:\n            - refresh",
			"canonicalURL": "/github.com/elyra-ai/elyra@228e39ef9eae13c0df97321bb91a07452137eb3e/-/blob/elyra/api/elyra.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/elyra-ai/elyra/blob/228e39ef9eae13c0df97321bb91a07452137eb3e/elyra/api/elyra.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: yaml: line 420: did not find expected key"
}