{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/insight-centre/naisc"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 9658,
			"content": "openapi: 3.0.0\ninfo:\n  title: Naisc Linking Services\n  version: \"1.0\"\nservers:\n  - url: http://localhost:8080/\n  description: SwaggerHub API Auto Mocking\npaths:\n  /naisc/upload/{id}:\n    put:\n      summary: Upload a dataset to Naisc\n      operationId: upload\n      parameters:\n      - name: id\n        in: path\n        description: The identifier of the dataset\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/rdf+xml:\n            schema:\n              type: string\n          text/turtle:\n            schema:\n              type: string\n          application/n-triples:\n            schema:\n              type: string\n      responses:\n        \"200\":\n          description: Dataset uploaded successfully\n  /naisc/{config}/block:\n    get:\n      summary: Find a blocking between two datasets\n      operationId: block\n      parameters:\n      - name: left\n        in: query\n        description: The ID of the left dataset to block as uploaded to upload\n        required: true\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: right\n        in: query\n        description: The ID of the right dataset to block as uploaded to upload\n        required: true\n        style: form\n        explode: true\n        schema:\n          type: string\n      - name: config\n        in: path\n        description: The configuration to be used for matching\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The blocking succeeded\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Blocking'\n  /naisc/{config}/extract_text:\n    post:\n      summary: Extract text with a lens\n      operationId: extract_text\n      parameters:\n      - name: config\n        in: path\n        description: The configuration to be used for matching\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Blocking'\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LangStringPair'\n  /naisc/{config}/text_features:\n    post:\n      summary: Extract features from text\n      operationId: text_features\n      parameters:\n      - name: config\n        in: path\n        description: The configuration to use\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LangStringPair'\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Feature'\n  /naisc/{config}/graph_features:\n    post:\n      summary: Extract features from the graph\n      operationId: graph_features\n      parameters:\n      - name: config\n        in: path\n        description: The configuration to use\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Blocking'\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Feature'\n  /naisc/{config}/score:\n    post:\n      summary: Produce a score from a set of features\n      operationId: score\n      parameters:\n      - name: config\n        in: path\n        description: The configuration to use\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Feature'\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Score'\n  /naisc/{config}/match:\n    post:\n      summary: Produce a matching from some alignments\n      operationId: match\n      parameters:\n      - name: config\n        in: path\n        description: The configuration to use\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Alignment'\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Alignment'\n  /naisc/{config}/prematch:\n    post:\n      summary: Check if a matching is trivial and can be computed without artificial\n        intelligence\n      operationId: prematch\n      parameters:\n      - name: config\n        in: path\n        description: The configuration to use\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Blocking'\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: boolean\ncomponents:\n  schemas:\n    Blocking:\n      required:\n      - entity1\n      - entity2\n      type: object\n      properties:\n        entity1:\n          $ref: '#/components/schemas/Resource'\n        entity2:\n          $ref: '#/components/schemas/Resource'\n      example:\n        entity1:\n          uri: http://dbpedia.org/resource/Example\n          dataset: dbpedia\n        entity2:\n          uri: http://en-word.net/lemma/example\n          dataset: english-wordnet\n    Resource:\n      required:\n      - dataset\n      - uri\n      type: object\n      properties:\n        uri:\n          type: string\n          description: The URI of the resource\n          example: http://www.example.com/foo\n        dataset:\n          type: string\n          description: The Dataset ID this resource occurs in\n          example: dataset\n    LangStringPair:\n      required:\n      - lang1\n      - lang2\n      - string1\n      - string2\n      - tag\n      type: object\n      properties:\n        string1:\n          type: string\n          description: The first string\n        string2:\n          type: string\n          description: The second string\n        lang1:\n          type: string\n          description: The language of the first string\n          format: lang\n        lang2:\n          type: string\n          description: The language of the second string\n          format: lang\n        tag:\n          type: string\n          description: The tag decides how the feature will be extracted based on\n            the configuration, normally this is just `default`\n      example:\n        string1: example\n        lang1: en\n        string2: Beispiel\n        lang2: de\n        tag: default\n    Feature:\n      required:\n      - name\n      - value\n      type: object\n      properties:\n        name:\n          type: string\n          description: A name that identifies this feature. Unique in the feature\n            list\n        value:\n          type: number\n          description: The value of this feature\n          format: double\n      example:\n        name: jaccard\n        value: 0.6\n    Score:\n      required:\n      - probability\n      - property\n      type: object\n      properties:\n        property:\n          type: string\n          description: The URI of the property that is being predicted. Most frequently\n            this is `skos:exactMatch`\n          format: url\n        probability:\n          maximum: 1\n          minimum: 0\n          type: number\n          description: The probability that this property holds\n          format: double\n      example:\n        property: http://www.w3.org/2004/02/skos/core#exactMatch\n        probability: 0.8\n    Alignment:\n      required:\n      - entity1\n      - entity2\n      - probability\n      - property\n      type: object\n      properties:\n        entity1:\n          $ref: '#/components/schemas/Resource'\n        entity2:\n          $ref: '#/components/schemas/Resource'\n        probability:\n          maximum: 1\n          minimum: 0\n          type: number\n          description: The probability that the property holds\n          format: double\n        property:\n          type: string\n          description: The property that is predicted\n          format: url\n      example:\n        entity1:\n          uri: http://dbpedia.org/resource/Example\n          dataset: dbpedia\n        entity2:\n          uri: http://en-word.net/lemma/example\n          dataset: english-wordnet\n        property: http://www.w3.org/2004/02/skos/core#exactMatch\n        probability: 0.8\n",
			"canonicalURL": "/github.com/insight-centre/naisc@cac4425f2532bc4149ff302b811d3489faf5b0b7/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/insight-centre/naisc/blob/cac4425f2532bc4149ff302b811d3489faf5b0b7/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: yaml: line 6: did not find expected '-' indicator"
}