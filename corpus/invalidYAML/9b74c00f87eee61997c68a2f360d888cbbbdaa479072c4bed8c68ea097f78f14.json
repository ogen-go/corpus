{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/xuzhg/OData.OpenAPI"
		},
		"file": {
			"name": "Basic.OpenApi.yaml",
			"size": 0,
			"path": "Microsoft.OData.OpenAPI/Microsoft.OData.OpenAPI.Tests/Resources/Basic.OpenApi.yaml",
			"byteSize": 16821,
			"content": "ï»¿openapi: 3.0.0\ninfo:\n  title: OData Service for namespace DefaultNs\n  description: This OData service is located at http://localhost\n  version: 1.0.1\nservers:\n  - url: http://localhost\npaths:\n  /People:\n    get:\n      summary: Get entities from People\n      tags:\n        - People\n      parameters:\n        - $ref: '#/components/parameters/top',\n        - $ref: '#/components/parameters/skip',\n        - $ref: '#/components/parameters/search',\n        - $ref: '#/components/parameters/filter',\n        - $ref: '#/components/parameters/count',\n        - name: $orderby\n          in: query\n          description: Order items by property values\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - UserName\n                - UserName desc\n                - HomeAddress\n                - HomeAddress desc\n                - WorkAddress\n                - WorkAddress desc\n                - Addresses\n                - Addresses desc,\n        - name: $select\n          in: query\n          description: Select properties to be returned\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - UserName\n                - HomeAddress\n                - WorkAddress\n                - Addresses,\n        - name: $expand\n          in: query\n          description: Expand related entities\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - *\n      responses:\n        200:\n          description: Retrieved entities\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Collection of People\n                properties:\n                  value:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DefaultNs.Person'\n        default:\n          $ref: '#/components/responses/error'\n    post:\n      summary: Add new entity to People\n      tags:\n        - People\n      requestBody:\n        description: New entity\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DefaultNs.Person'\n        required: true\n      responses:\n        201:\n          description: Created entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultNs.Person'\n        default:\n          $ref: '#/components/responses/error'\n  /People('{UserName}'):\n    get:\n      summary: Get entity from People by key\n      tags:\n        - People\n      parameters:\n        - name: UserName\n          in: path\n          description: key: UserName\n          required: true\n          style: simple,\n        - name: $select\n          in: query\n          description: Select properties to be returned\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - UserName\n                - HomeAddress\n                - WorkAddress\n                - Addresses,\n        - name: $expand\n          in: query\n          description: Expand related entities\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - *\n      responses:\n        200:\n          description: Retrieved entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultNs.Person'\n        default:\n          $ref: '#/components/responses/error'\n    delete:\n      summary: Delete entity from People\n      tags:\n        - People\n      parameters:\n        - name: UserName\n          in: path\n          description: key: UserName\n          required: true\n          style: simple,\n        - name: If-Match\n          in: header\n          description: ETag\n          style: simple\n          schema:\n            type: string\n      responses:\n        204:\n          description: Success\n        default:\n          $ref: '#/components/responses/error'\n    patch:\n      summary: Update entity in People\n      tags:\n        - People\n      parameters:\n        - name: UserName\n          in: path\n          description: key: UserName\n          required: true\n          style: simple\n      requestBody:\n        description: New property values\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DefaultNs.Person'\n        required: true\n      responses:\n        204:\n          description: Success\n        default:\n          $ref: '#/components/responses/error'\n  /City:\n    get:\n      summary: Get entities from City\n      tags:\n        - City\n      parameters:\n        - $ref: '#/components/parameters/top',\n        - $ref: '#/components/parameters/skip',\n        - $ref: '#/components/parameters/search',\n        - $ref: '#/components/parameters/filter',\n        - $ref: '#/components/parameters/count',\n        - name: $orderby\n          in: query\n          description: Order items by property values\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - Name\n                - Name desc,\n        - name: $select\n          in: query\n          description: Select properties to be returned\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - Name,\n        - name: $expand\n          in: query\n          description: Expand related entities\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - *\n      responses:\n        200:\n          description: Retrieved entities\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Collection of City\n                properties:\n                  value:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DefaultNs.City'\n        default:\n          $ref: '#/components/responses/error'\n    post:\n      summary: Add new entity to City\n      tags:\n        - City\n      requestBody:\n        description: New entity\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DefaultNs.City'\n        required: true\n      responses:\n        201:\n          description: Created entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultNs.City'\n        default:\n          $ref: '#/components/responses/error'\n  /City('{Name}'):\n    get:\n      summary: Get entity from City by key\n      tags:\n        - City\n      parameters:\n        - name: Name\n          in: path\n          description: key: Name\n          required: true\n          style: simple,\n        - name: $select\n          in: query\n          description: Select properties to be returned\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - Name,\n        - name: $expand\n          in: query\n          description: Expand related entities\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - *\n      responses:\n        200:\n          description: Retrieved entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultNs.City'\n        default:\n          $ref: '#/components/responses/error'\n    delete:\n      summary: Delete entity from City\n      tags:\n        - City\n      parameters:\n        - name: Name\n          in: path\n          description: key: Name\n          required: true\n          style: simple,\n        - name: If-Match\n          in: header\n          description: ETag\n          style: simple\n          schema:\n            type: string\n      responses:\n        204:\n          description: Success\n        default:\n          $ref: '#/components/responses/error'\n    patch:\n      summary: Update entity in City\n      tags:\n        - City\n      parameters:\n        - name: Name\n          in: path\n          description: key: Name\n          required: true\n          style: simple\n      requestBody:\n        description: New property values\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DefaultNs.City'\n        required: true\n      responses:\n        204:\n          description: Success\n        default:\n          $ref: '#/components/responses/error'\n  /CountryOrRegion:\n    get:\n      summary: Get entities from CountryOrRegion\n      tags:\n        - CountryOrRegion\n      parameters:\n        - $ref: '#/components/parameters/top',\n        - $ref: '#/components/parameters/skip',\n        - $ref: '#/components/parameters/search',\n        - $ref: '#/components/parameters/filter',\n        - $ref: '#/components/parameters/count',\n        - name: $orderby\n          in: query\n          description: Order items by property values\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - Name\n                - Name desc,\n        - name: $select\n          in: query\n          description: Select properties to be returned\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - Name,\n        - name: $expand\n          in: query\n          description: Expand related entities\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - *\n      responses:\n        200:\n          description: Retrieved entities\n          content:\n            application/json:\n              schema:\n                type: object\n                title: Collection of CountryOrRegion\n                properties:\n                  value:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/DefaultNs.CountryOrRegion'\n        default:\n          $ref: '#/components/responses/error'\n    post:\n      summary: Add new entity to CountryOrRegion\n      tags:\n        - CountryOrRegion\n      requestBody:\n        description: New entity\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DefaultNs.CountryOrRegion'\n        required: true\n      responses:\n        201:\n          description: Created entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultNs.CountryOrRegion'\n        default:\n          $ref: '#/components/responses/error'\n  /CountryOrRegion('{Name}'):\n    get:\n      summary: Get entity from CountryOrRegion by key\n      tags:\n        - CountryOrRegion\n      parameters:\n        - name: Name\n          in: path\n          description: key: Name\n          required: true\n          style: simple,\n        - name: $select\n          in: query\n          description: Select properties to be returned\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - Name,\n        - name: $expand\n          in: query\n          description: Expand related entities\n          style: form\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n              enum:\n                - *\n      responses:\n        200:\n          description: Retrieved entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DefaultNs.CountryOrRegion'\n        default:\n          $ref: '#/components/responses/error'\n    delete:\n      summary: Delete entity from CountryOrRegion\n      tags:\n        - CountryOrRegion\n      parameters:\n        - name: Name\n          in: path\n          description: key: Name\n          required: true\n          style: simple,\n        - name: If-Match\n          in: header\n          description: ETag\n          style: simple\n          schema:\n            type: string\n      responses:\n        204:\n          description: Success\n        default:\n          $ref: '#/components/responses/error'\n    patch:\n      summary: Update entity in CountryOrRegion\n      tags:\n        - CountryOrRegion\n      parameters:\n        - name: Name\n          in: path\n          description: key: Name\n          required: true\n          style: simple\n      requestBody:\n        description: New property values\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DefaultNs.CountryOrRegion'\n        required: true\n      responses:\n        204:\n          description: Success\n        default:\n          $ref: '#/components/responses/error'\ncomponents:\n  schemas:\n    DefaultNs.Color:\n      type: string\n      title: Color\n      enum:\n        - Blue\n        - White\n    DefaultNs.Person:\n      type: object\n      title: Person\n      properties:\n        UserName:\n          type: string\n        HomeAddress:\n          $ref: '#/components/schemas/DefaultNs.Address'\n        WorkAddress:\n          $ref: '#/components/schemas/DefaultNs.Address'\n        Addresses:\n          type: array\n          items:\n            $ref: '#/components/schemas/DefaultNs.Address'\n    DefaultNs.City:\n      type: object\n      title: City\n      properties:\n        Name:\n          type: string\n    DefaultNs.CountryOrRegion:\n      type: object\n      title: CountryOrRegion\n      properties:\n        Name:\n          type: string\n    DefaultNs.Address:\n      type: object\n      title: Address\n      properties:\n        Id:\n          type: integer\n        City:\n          $ref: '#/components/schemas/DefaultNs.City'\n    DefaultNs.WorkAddress:\n      allOf:\n        - $ref: '#/components/schemas/DefaultNs.Address',\n        - type: object\n          title: WorkAddress\n          properties:\n            CountryOrRegion:\n              $ref: '#/components/schemas/DefaultNs.CountryOrRegion'\n    odata.error:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          $ref: '#/components/schemas/odata.error.main'\n    odata.error.main:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n        target:\n          type: string\n        details:\n          type: array\n          items:\n            $ref: '#/components/schemas/odata.error.detail'\n        innererror:\n          type: object\n          description: The structure of this object is service-specific\n    odata.error.detail:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n        target:\n          type: string\n  responses:\n    error:\n      description: error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/odata.error'\n  parameters:\n    top:\n      name: $top\n      in: query\n      description: Show only the first n items\n      style: form\n      schema:\n        type: integer\n        minimum: 0\n      example:\n        example: 50\n    skip:\n      name: $skip\n      in: query\n      description: Skip only the first n items\n      style: form\n      schema:\n        type: integer\n        minimum: 0\n    count:\n      name: $count\n      in: query\n      description: Include count of items\n      style: form\n      schema:\n        type: boolean\n    filter:\n      name: $filter\n      in: query\n      description: Filter items by property values\n      style: form\n      schema:\n        type: string\n    search:\n      name: $search\n      in: query\n      description: Search items by search phrases\n      style: form\n      schema:\n        type: string\ntags:\n  - name: People,\n  - name: City,\n  - name: CountryOrRegion\n\n",
			"canonicalURL": "/github.com/xuzhg/OData.OpenAPI@a618aeae1f176b61a3213abc6085694c156f3fd4/-/blob/Microsoft.OData.OpenAPI/Microsoft.OData.OpenAPI.Tests/Resources/Basic.OpenApi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/xuzhg/OData.OpenAPI/blob/a618aeae1f176b61a3213abc6085694c156f3fd4/Microsoft.OData.OpenAPI/Microsoft.OData.OpenAPI.Tests/Resources/Basic.OpenApi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: yaml: line 14:10: did not find expected key"
}