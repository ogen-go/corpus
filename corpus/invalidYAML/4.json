{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/emissions-api/emissions-api"
		},
		"file": {
			"name": "openapi.yml",
			"path": "emissionsapi/openapi.yml",
			"content": "openapi: 3.0.0\ninfo:\n  title: Emissions API\n  description: \u003e-\n      Emissions API’s mission is to provide easy access to this data without\n      the need of being an expert in satellite data analysis and without having\n      to process terabytes of data.\n  version: \"2\"\n  contact:\n    name: The Emissions API Developers\n    url: https://emissions-api.org\n    email: info@emissions-api.org\nexternalDocs:\n  description: GitHub project\n  url: https://github.com/emissions-api/emissions-api\npaths:\n  /api/v2/{product}/geo.json:\n    get:\n      operationId: emissionsapi.web.get_data\n      description: |\n          Get all points in [GeoJSON](https://geojson.org/) format.\n\n          The parameters `geoframe`, `country`, `polygon` and `point` are mutually exclusive.\n      parameters:\n        - $ref: '#/components/parameters/product'\n        - $ref: '#/components/parameters/geoframe'\n        - $ref: '#/components/parameters/country'\n        - $ref: '#/components/parameters/polygon'\n        - $ref: '#/components/parameters/point'\n        - $ref: '#/components/parameters/begin'\n        - $ref: '#/components/parameters/end'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      responses:\n        200:\n          description: The response contains all known points located within the specified rectangle contained in a GeoJSON feature collection.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Feature Collection'\n        400:\n          description: Parameter error\n  /api/v2/{product}/average.json:\n    get:\n      operationId: emissionsapi.web.get_average\n      description: |\n          Get daily average for a specified area filtered by time.\n\n          The parameters `geoframe`, `country`, `polygon` and `point` are mutually exclusive.\n          Providing one of these parameters is mandatory.\n      parameters:\n        - $ref: '#/components/parameters/product'\n        - $ref: '#/components/parameters/geoframe'\n        - $ref: '#/components/parameters/country'\n        - $ref: '#/components/parameters/polygon'\n        - $ref: '#/components/parameters/point'\n        - $ref: '#/components/parameters/begin'\n        - $ref: '#/components/parameters/end'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      responses:\n        200:\n          description: Array of calculated averages.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Averages'\n        400:\n          description: Parameter error\n  /api/v2/{product}/statistics.json:\n    get:\n      operationId: emissionsapi.web.get_statistics\n      description: |\n          Get statistical values for specified time intervals.\n\n          The parameters `geoframe`, `country`, `polygon` and `point` are mutually exclusive.\n          Providing one of these parameters is mandatory.\n      parameters:\n        - $ref: '#/components/parameters/product'\n        - $ref: '#/components/parameters/geoframe'\n        - $ref: '#/components/parameters/country'\n        - $ref: '#/components/parameters/polygon'\n        - $ref: '#/components/parameters/point'\n        - $ref: '#/components/parameters/interval'\n        - $ref: '#/components/parameters/begin'\n        - $ref: '#/components/parameters/end'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n      responses:\n        200:\n          description: Array of statistical data about the chosen product for specified intervals.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Statistics'\n        400:\n          description: Parameter error\n  /api/v2/{product}/data-range.json:\n    get:\n      operationId: emissionsapi.web.get_data_range\n      description: |\n          Get the range of data currently available from the API.\n      parameters:\n        - $ref: '#/components/parameters/product'\n      responses:\n        200:\n          description: Object describing the range of data available.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DataRange'\n  /api/v2/products.json:\n    get:\n      operationId: emissionsapi.web.get_products\n      description: |\n          Get the currently available products from the API.\n      responses:\n        200:\n          description: List of Products.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Products'\n  /api/v2/countries.json:\n    get:\n      operationId: emissionsapi.web.get_country_codes\n      description: |\n          Get list of valid country codes and names.\n      responses:\n        200:\n          description: Object with country codes and names.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Countries'\n\ncomponents:\n  parameters:\n    product:\n      in: path\n      name: product\n      required: true\n      schema:\n        type: string\n        enum: {{ products }}\n    limit:\n      in: query\n      name: limit\n      description: Limit number of returned items.\n      schema:\n        type: integer\n        minimum: 0\n      example: 100\n    offset:\n      in: query\n      name: offset\n      description: Specify the offset of the first item to return.\n      schema:\n        type: integer\n        minimum: 0\n      example: '0'\n    interval:\n      in: query\n      name: interval\n      description: |\n        Specify the time interval length for which data is being aggregated.\n        Defaults to `day`.\n      schema:\n        type: string\n        enum: [minute, hour, day, week, month, quarter, year, decade, century]\n      example: day\n    geoframe:\n      in: query\n      name: geoframe\n      schema:\n        type: array\n        items:\n          type: number\n        maxItems: 4\n        minItems: 4\n      description: |\n        Defines an area from which measurements included in the response are taken.\n\n        The parameter is an array in the form `lon1,lat1,lon2,lat2`,\n        representing the upper left and lower right corners of a rectangle.\n    point:\n      in: query\n      name: point\n      schema:\n        type: array\n        items:\n          type: number\n        maxItems: 2\n        minItems: 2\n      description: |\n          Defines a single `point` in the form longitude,latitude.\n          The nearest point in the grid is used for calculations.\n    country:\n      in: query\n      name: country\n      schema:\n        type: string\n      description: |\n        Specifies a bounding box of the specified country\n        from which measurements included in the response are taken.\n\n        The country is selected using an [ISO-3166, two-letter or three-letter country code\n        ](https://www.iban.com/country-codes).\n    polygon:\n      in: query\n      name: polygon\n      schema:\n        type: array\n        items:\n          type: number\n        minItems: 6\n      description: |\n        Defines an area from which measurements included in the response are taken.\n\n        The parameter is an array in the form `lon1,lat1,lon2,lat2,…`.\n        Every value pair represents a vertex of longitude and latitude.\n        The polygon is then defined as the line segments of the consecutive vertices.\n\n        If the first and last vertices do not match, the first vertex is automatically appended to close the polygon.\n      example: [30, 10, 40, 40, 20, 40, 10, 20, 30, 10]\n    begin:\n      in: query\n      name: begin\n      schema:\n        type: string\n      description: |\n        Defines an inclusive lower bound for measurements included in the response.\n\n        In regards of time filtering, the set of measurements considered in a response\n        is defined as `{ measurement | begin ≤ measurement.time \u003c end }`.\n      example: 2019-02-10\n    end:\n      in: query\n      name: end\n      schema:\n        type: string\n      description: |\n        Defines a non-inclusive upper bound for measurements included in the response.\n\n        In regards of time filtering, the set of measurements considered in a response\n        is defined as `{ measurement | begin ≤ measurement.time \u003c end }`.\n      example: 2019-02-11\n\n\n  schemas:\n    Feature Collection:\n      description: Points as GeoJSON Feature Collection\n      type: object\n      properties:\n        features:\n          type: array\n          items:\n            type: object\n            properties:\n              type:  # This is the name of the key\n                type: string\n                example: FeatureCollection\n              properties:  # This is the name of the key\n                type: object\n                properties:\n                  value:\n                    type: number\n                    example: 0.0273975990712643\n                  timestamp:\n                    type: string\n                    example: \"2019-09-21T12:26:28.762000Z\"\n              geometry:\n                type: object\n                properties:\n                  coordinates:\n                    type: array\n                    maxItems: 2\n                    minItems: 2\n                    items:\n                      type: number\n                    example: [15.096772, 44.516739]\n                  type:  # This is the name of the key\n                    type: string\n                    example: \"Point\"\n    Averages:\n      type: array\n      description: Array of daily values of the chosen product.\n      items:\n        type: object\n        properties:\n          average:\n            type: number\n            example: 0.0312481193586528\n          start:\n            type: string\n            format: date-time\n            example: 2019-02-10T13:05:08.812000Z\n          end:\n            type: string\n            format: date-time\n            example: 2019-02-10T13:03:40.254000Z\n    Statistics:\n      type: array\n      description: Array of statistical data about the chosen product for specified intervals.\n      items:\n        type: object\n        properties:\n          value:\n            type: object\n            properties:\n              count:\n                type: number\n                example: 100\n              average:\n                type: number\n                example: 0.0312481193586528\n              standard deviation:\n                type: number\n                example: 0.0123\n              min:\n                type: number\n                example: 0.02\n              max:\n                type: number\n                example: 0.04\n          time:\n            type: object\n            properties:\n              min:\n                type: string\n                format: date-time\n                example: 2019-02-10T13:05:08.812000Z\n              max:\n                type: string\n                format: date-time\n                example: 2019-02-10T13:03:40.254000Z\n              interval_start:\n                type: string\n                format: date-time\n                example: 2019-02-10T00:00:00Z\n    DataRange:\n      type: object\n      properties:\n        first:\n          type: string\n          format: date-time\n          example: 2019-02-10T13:05:08.812000Z\n        last:\n          type: string\n          format: date-time\n          example: 2019-02-10T13:03:40.254000Z\n    Products:\n      type: array\n      description: Products of the API.\n      items:\n        type: object\n        properties:\n          name:\n            type: string\n            example: carbonmonoxide\n            description: Name of the product\n          description:\n            type: string\n            example: Average atmosphere mole content of carbon monoxide\n            description: Description of data type and unit.\n          product_variable:\n            type: string\n            example: carbonmonoxide_total_column\n            description: Name of the variable as defined from the ESA from within the processed files.\n    Countries:\n      type: object\n      additionalProperties:\n        type: string\n      example:\n        BE: Belgium\n        DE: Germany\n        DEU: Germany\n"
		}
	},
	"Error": "yaml: invalid map key: map[interface {}]interface {}{\"products\":interface {}(nil)}"
}