{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "reserved_words.yaml",
			"path": "modules/openapi-generator/src/test/resources/3_0/kotlin/reserved_words.yaml",
			"content": "openapi: 3.0.1\ninfo:\n  title: Test for Kotlin reserved words\n  version: 1.0.0\npaths:\n  /ping:\n    get:\n      summary: Ping\n      description: Pingy Ping\n      parameters:\n        - name: as\n          in: header\n          schema:\n            type: string\n        - name: break\n          in: header\n          schema:\n            type: string\n        - name: class\n          in: header\n          schema:\n            type: string\n        - name: continue\n          in: header\n          schema:\n            type: string\n        - name: do\n          in: header\n          schema:\n            type: string\n        - name: else\n          in: header\n          schema:\n            type: string\n        - name: \"false\"\n          in: header\n          schema:\n            type: string\n        - name: for\n          in: header\n          schema:\n            type: string\n        - name: fun\n          in: header\n          schema:\n            type: string\n        - name: if\n          in: header\n          schema:\n            type: string\n        - name: in\n          in: header\n          schema:\n            type: string\n        - name: interface\n          in: header\n          schema:\n            type: string\n        - name: is\n          in: header\n          schema:\n            type: string\n        - name: \"null\"\n          in: header\n          schema:\n            type: string\n        - name: object\n          in: header\n          schema:\n            type: string\n        - name: package\n          in: header\n          schema:\n            type: string\n        - name: return\n          in: header\n          schema:\n            type: string\n        - name: super\n          in: header\n          schema:\n            type: string\n        - name: this\n          in: header\n          schema:\n            type: string\n        - name: throw\n          in: header\n          schema:\n            type: string\n        - name: \"true\"\n          in: header\n          schema:\n            type: string\n        - name: try\n          in: header\n          schema:\n            type: string\n        - name: typealias\n          in: header\n          schema:\n            type: string\n        - name: typeof\n          in: header\n          schema:\n            type: string\n        - name: val\n          in: header\n          schema:\n            type: string\n        - name: value\n          in: header\n          schema:\n            type: string\n        - name: var\n          in: header\n          schema:\n            type: string\n        - name: when\n          in: header\n          schema:\n            type: string\n        - name: while\n          in: header\n          schema:\n            type: string\n        - name: open\n          in: header\n          schema:\n            type: string\n        - name: external\n          in: header\n          schema:\n            type: string\n        - name: internal\n          in: header\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: \"#/components/schemas/Good\"\n\ncomponents:\n  schemas:\n    Good:\n      description: OK, Good\n      type: object\n      properties:\n        as:\n          type: string\n        break:\n          type: string\n        class:\n          type: string\n        continue:\n          type: string\n        do:\n          type: string\n        else:\n          type: string\n        false:\n          type: string\n        for:\n          type: string\n        fun:\n          type: string\n        if:\n          type: string\n        in:\n          type: string\n        interface:\n          type: string\n        is:\n          type: string\n        null:\n          type: string\n        object:\n          type: string\n        package:\n          type: string\n        return:\n          type: string\n        super:\n          type: string\n        this:\n          type: string\n        throw:\n          type: string\n        true:\n          type: string\n        try:\n          type: string\n        typealias:\n          type: string\n        typeof:\n          type: string\n        val:\n          type: string\n        value:\n          type: string\n        var:\n          type: string\n        when:\n          type: string\n        while:\n          type: string\n        open:\n          type: string\n        external:\n          type: string\n        internal:\n          type: string\n        linked:\n          $ref: '#/components/schemas/Linked'\n\n    Linked:\n      description: Refernce links\n      type: object\n      properties:\n        as:\n          $ref: '#/components/schemas/as'\n        break:\n          $ref: '#/components/schemas/break'\n        class:\n          $ref: '#/components/schemas/class'\n        continue:\n          $ref: '#/components/schemas/continue'\n        do:\n          $ref: '#/components/schemas/do'\n        else:\n          $ref: '#/components/schemas/else'\n        false:\n          $ref: '#/components/schemas/false'\n        for:\n          $ref: '#/components/schemas/for'\n        fun:\n          $ref: '#/components/schemas/fun'\n        if:\n          $ref: '#/components/schemas/if'\n        in:\n          $ref: '#/components/schemas/in'\n        interface:\n          $ref: '#/components/schemas/interface'\n        is:\n          $ref: '#/components/schemas/is'\n        null:\n          $ref: '#/components/schemas/null'\n        object:\n          $ref: '#/components/schemas/object'\n        package:\n          $ref: '#/components/schemas/package'\n        return:\n          $ref: '#/components/schemas/return'\n        super:\n          $ref: '#/components/schemas/super'\n        this:\n          $ref: '#/components/schemas/this'\n        throw:\n          $ref: '#/components/schemas/throw'\n        true:\n          $ref: '#/components/schemas/true'\n        try:\n          $ref: '#/components/schemas/try'\n        typealias:\n          $ref: '#/components/schemas/typealias'\n        typeof:\n          $ref: '#/components/schemas/typeof'\n        val:\n          $ref: '#/components/schemas/val'\n        value:\n          $ref: '#/components/schemas/value'\n        var:\n          $ref: '#/components/schemas/var'\n        when:\n          $ref: '#/components/schemas/when'\n        while:\n          $ref: '#/components/schemas/while'\n        open:\n          $ref: '#/components/schemas/open'\n        external:\n          $ref: '#/components/schemas/external'\n        internal:\n          $ref: '#/components/schemas/internal'\n    as:\n      title: Testing reserved word 'as'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    break:\n      title: Testing reserved word 'break'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    class:\n      title: Testing reserved word 'class'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    continue:\n      title: Testing reserved word 'continue'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    do:\n      title: Testing reserved word 'do'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    else:\n      title: Testing reserved word 'else'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    false:\n      title: Testing reserved word 'false'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    for:\n      title: Testing reserved word 'for'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    fun:\n      title: Testing reserved word 'fun'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    if:\n      title: Testing reserved word 'if'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    in:\n      title: Testing reserved word 'in'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    interface:\n      title: Testing reserved word 'interface'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    is:\n      title: Testing reserved word 'is'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    null:\n      title: Testing reserved word 'null'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    object:\n      title: Testing reserved word 'object'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    package:\n      title: Testing reserved word 'package'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    return:\n      title: Testing reserved word 'return'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    super:\n      title: Testing reserved word 'super'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    this:\n      title: Testing reserved word 'this'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    throw:\n      title: Testing reserved word 'throw'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    true:\n      title: Testing reserved word 'true'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    try:\n      title: Testing reserved word 'try'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    typealias:\n      title: Testing reserved word 'typealias'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    typeof:\n      title: Testing reserved word 'typeof'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    val:\n      title: Testing reserved word 'val'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    value:\n      title: Testing reserved word 'value'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    var:\n      title: Testing reserved word 'var'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    when:\n      title: Testing reserved word 'when'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    while:\n      title: Testing reserved word 'while'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    open:\n      title: Testing reserved word 'open'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    external:\n      title: Testing reserved word 'external'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n\n    internal:\n      title: Testing reserved word 'internal'\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64"
		}
	},
	"Error": "Unsupported map key of type: %!s(\u003cnil\u003e), key: \u003cnil\u003e, value: map[interface {}]interface {}{\"properties\":map[interface {}]interface {}{\"id\":map[interface {}]interface {}{\"format\":\"int64\", \"type\":\"integer\"}}, \"title\":\"Testing reserved word 'null'\", \"type\":\"object\"}"
}