{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aces/Loris"
		},
		"file": {
			"name": "schema.yml",
			"size": 0,
			"path": "modules/dataquery/static/schema.yml",
			"byteSize": 11857,
			"content": "openapi: 3.0.1\ninfo:\n  title: LORIS Data Query Tool API endpoints\n  description: |-\n    This is the API for the parts of the Loris data query module which are intended to be used as an API.\n  contact:\n    name: LORIS Development Team\n    url: 'https://github.com/aces/Loris'\n  license:\n    name: 'GNU Public License, Version 3'\n    url: 'https://opensource.org/licenses/GPL-3.0'\n  version: \"3.0\"\nservers:\n  - url: /dataquery/\nsecurity:\n  - ApiKeyAuth: []\npaths:\n  /queries:\n    get:\n      summary: Get a list of a recent, shared, and study (top) queries for the current user.\n      responses:\n        '200':\n          description: Successfully operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AllQueries'\n        '403':\n          description: Permission denied\n    post:\n      description: Create a new query and return the QueryID. If the same query (fields and criteria) already exists, the same QueryID will be returned instead of a new one being created.\n      requestBody:\n        description: A Query object (without the QueryID)\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryObject'\n      responses:\n        '200':\n          description: Query successfully created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  QueryID:\n                    type: integer\n        '400':\n          description: An invalid body was supplied\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n  /queries/runs:\n    get:\n      summary: Get a list of a recent, query runs for the current user.\n      responses:\n        '200':\n          description: Successfully operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/QueryRunList'\n  /queries/{QueryID}:\n    parameters:\n      - name: QueryID\n        in: path\n        description: the QueryID returned by posting to /queries\n        required: true\n        style: simple\n        schema:\n          type: integer\n    get:\n      responses:\n        '200':\n          description: The Query was successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Query'\n        '403':\n          description: Permission denied\n    patch:\n      parameters:\n        - name: share\n          in: query\n          style: spaceDelimited\n          schema:\n            type: boolean\n          description: if true, the query will be shared. If false, it will be unshared\n        - name: star\n          in: query\n          style: spaceDelimited\n          description: if true, the query will be shared. If false, it will be unshared\n          schema:\n            type: boolean\n        - name: adminname\n          in: query\n          style: pipeDelimited\n          description: The admin name to pin the query as. If the empty string, will be unpinned.\n          schema:\n            type: string\n        - name: dashboardname\n          in: query\n          style: pipeDelimited\n          description: The admin name to pin the query to the dashboard as. If the empty string, will be unpinned.\n          schema:\n            type: string\n        - name: name\n          in: query\n          style: pipeDelimited\n          description: The name to set for the query for this user.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The access was performed\n        '403':\n          description: The access was not performed because of permissions being denied.\n  /queries/{QueryID}/run:\n    parameters:\n      - name: QueryID\n        in: path\n        description: the QueryID returned by posting to /queries\n        required: true\n        style: simple\n        schema:\n          type: integer  \n    post:\n      description: |- \n        Run the query QueryID and returns the results. \n        \n        This endpoint will result in a new query run being generated, which will be returned in the queries of the user on the /queries endpoint.\n      responses:\n        '200':\n          description: The query was able to be successfully run\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/QueryResults'              \n        '500':\n          description: Something went wrong on the server running the query\n  /queries/{QueryID}/count:      \n    parameters:\n    - name: QueryID\n      in: path\n      description: the QueryID returned by posting to /queries\n      required: true\n      style: simple\n      schema:\n        type: integer  \n    get:\n      responses:\n        '200':\n          description: |-\n           A count of the number of candidate matches that would be returned if the query were to be run by the current user right now.\n           \n           This endpoint does *not* result in a new query run being generated or run the query, it only returns the count of how many candidates would match if the query *were* to be run.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  count:\n                    type: integer\n                    description: The number of candidates that match the filters \n                    example: 34\n  /queries/{QueryID}/run/{QueryRunID}: \n    description: |-\n      Returns the cached results of a previously run query\n      \n      Note: This endpoint is aspirational.\n    parameters:\n    - name: QueryID\n      in: path\n      description: the QueryID returned by posting to /queries\n      required: true\n      style: simple\n      schema:\n        type: integer\n    - name: QueryRunID\n      in: path\n      description: the identifier of a previous run for this QueryID.\n      required: true\n      style: simple\n      schema:\n        type: integer \n    get:\n      responses:\n        '500':\n          description: Not implemented\n          content:\n            application/json:\n              schema:\n                type: object\n            \ncomponents:\n  schemas:\n    AllQueries:\n      type: object\n      properties:\n        queries:\n          type: array\n          items:\n            $ref: '#/components/schemas/Query'\n    QueryRunList:\n      type: object\n      properties:\n        queryruns:\n          type: array\n          items:\n            $ref: '#/components/schemas/QueryRun'\n    Query:\n      type: object\n      properties:\n        self:\n          type: string\n          description: |-\n             A URL that this query can be accessed at.\n\n             Accessing the query directly through the URL is sure to have the same fields\n             and criteria, but other details of the object returned may not be identical.\n\n             For instance, the starred and name properties may vary based on the user\n             accessing the URI.\n          example: \"https://example.com/dataquery/queries/4\"\n        Query:\n          $ref: '#/components/schemas/QueryObject'\n        AdminName:\n          type: string\n          description: The name given by the admin for a pinned query\n          example: \"Important Study Query Of Missing T1s\"\n        Name:\n          type: string\n          description: The name given by the current user for this query\n          example: \"My Query\"\n        SharedBy:\n          type: array\n          items:\n            type: string\n            example: \"admin\"\n        Starred:\n          type: boolean\n          description: The query has been starred by the user\n        Public:\n          type: boolean\n          description: The query has been shared (made public to all users)\n        Pinned:\n          type: boolean\n          description: The query has been pinned by an administrator\n        QueryID:\n          type: integer\n          example: 3\n    QueryRun:\n      type: object\n      properties:\n        self:\n          type: string\n          description: A URL to access this query run\n          example: \"https://example.com/dataquery/queries/3/run/34\"\n        QueryURI: string\n          description: A URL to access the query that was run\n          example: \"https://example.com/dataquery/queries/3\"\n        RunTime:\n          type: string\n          example: \"2022-11-02 15:34:38\"\n        QueryID:\n          type: integer\n          description: A reference to an object in the queries property identified by QueryID\n          example: 3\n        QueryRunID:\n          type: integer\n          description: A reference to the run number of this query\n          example: 4\n    QueryField:\n      type: object\n      properties:\n        module:\n          type: string\n          example: \"candidate_parameters\"\n        category:\n          type: string\n          example: \"Identifiers\"\n        field:\n          type: string\n          example: \"CandID\"\n      required:\n        - module\n        - category\n        - field\n    QueryObject:\n      type: object\n      description: A set of filters and fields used to determine what is being queried.\n      properties:\n        type:\n          type: string\n          enum: ['candidates']\n          example: \"candidates\"\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/QueryField'\n        criteria:\n          $ref: '#/components/schemas/QueryCriteriaGroup'\n      required:\n        - type\n        - fields\n    QueryCriteriaGroup:\n      type: object\n      description: An and/or group used for filtering, all items in the group must be the same operator (but an item in the group may be a query criteria subgroup using a different operator)\n      properties:\n        operator:\n          type: string\n          enum: ['and', 'or']\n          description: The operator to connect the items in group\n        group:\n          type: array\n          items:\n            $ref: '#/components/schemas/QueryGroupField'\n    QueryGroupField:\n      type: object\n      properties:\n        module:\n          type: string\n          example: \"candidate_parameters\"\n        category:\n          type: string\n          example: \"Identifiers\"\n        fieldname:\n          type: string\n          example: \"CandID\"\n        op:\n          type: string\n          enum: \n            # Standard operators\n            - 'lt'\n            - 'lte'\n            - 'eq'\n            - 'neq'\n            - 'gte'\n            - 'gt'\n            # Enum operator\n            - 'in'\n            # String operators\n            - 'startsWith'\n            - 'endsWith'\n            - 'contains'\n            # Optional cardinality operators\n            - 'isnotnull'\n            - 'isnull'\n            # Many cardinality operators\n            - 'exists'\n            - 'notexists'\n            - 'numberof'\n        value:\n          type: string\n      required:\n        - module\n        - category\n        - fieldname\n        - op\n        - value\n    QueryResults:\n      description: |- \n        The result of running a query.\n        \n        The result is a stream of data for each CandID that matched by the query. Candidates are separated by an ASCII record separator (0x??). Each cell within the candidate is separated by an ASCII ?? separateor (0x??). Each row should have the exact number of fields that were in the query fields attribute.\n        \n        Within each cell, the format of the data varies based on the dictionary of the field type. If the data is candidate scoped, a value is directly returned. If it is session scoped variable or has cardinality of many:one, a JSON object is returned.\n  \n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      name: Authorization\n      in: header\n\n",
			"canonicalURL": "/github.com/aces/Loris@7d8cbefcccb8238488289b507908aa621ecd8065/-/blob/modules/dataquery/static/schema.yml",
			"externalURLs": [
				{
					"url": "https://github.com/aces/Loris/blob/7d8cbefcccb8238488289b507908aa621ecd8065/modules/dataquery/static/schema.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: yaml: line 265:21: mapping values are not allowed in this context"
}