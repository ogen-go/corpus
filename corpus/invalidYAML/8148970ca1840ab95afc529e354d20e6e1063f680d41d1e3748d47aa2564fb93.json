{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenLiberty/open-liberty"
		},
		"file": {
			"name": "airlines_openapi.yaml",
			"size": 0,
			"path": "dev/com.ibm.ws.microprofile.openapi/resources/airlines_openapi.yaml",
			"byteSize": 16651,
			"content": "openapi: 3.0.0\ninfo:\n  title: Validation App\n  version: \"1.0\"\n  termsOfService: http://www.termsofservice.com\n  contact:\n    name: AirlinesRatingApp API Support\n    url:  http://www.contacts.com\n    email: airlines@gmail.com\n  license:\n    name: Apache 2.0\n    url: http://www.license.com\nexternalDocs:\n  description: instructions for how to deploy this app\n  url:  http://www.externaldocumentation.com\nservers:\n- url: http://localhost:9080\ntags:\n- name: Airlines\n  description: airlines app\n- name: airline\n  description: all the airlines methods\n- name: availability\n  description: all the availibility methods\n- name: bookings\n  description: all the bookings methods\n- name: reviews\n  description: all the review methods\npaths:\n  /:\n    get:\n      tags:\n      - airline\n      summary: Retrieve all available airlines\n      responses:\n        202:\n          description: failed operation\n          content:\n            applictaion/json:\n              schema:\n                $ref: '#/components/schemas/Flight'\n      operationId: getAirlines\n      servers:\n      - url: localhost:9080/oas3-airlines/airlines/id\n        description: view of all the bookings\n  /availability:\n    get:\n      tags:\n      - availability\n      summary: Retrieve all available flights\n      operationId: getFlights\n      parameters:\n      - name: departureDate\n        in: query\n        description: Customer departure date\n        required: true\n        schema:\n          type: string\n      - name: airportFrom\n        in: query\n        description: Airport the customer departs from\n        required: true\n        schema:\n          type: string\n      - name: returningDate\n        in: query\n        description: Customer return date\n        required: true\n        schema:\n          type: string\n      - name: airportTo\n        in: query\n        description: Airport the customer returns to\n        required: true\n        schema:\n          type: string\n      - name: numberOfAdults\n        in: query\n        description: Number of adults on the flight\n        required: true\n        schema:\n          minimum: 0\n          type: string\n      - name: numberOfChildren\n        in: query\n        description: Number of children on the flight\n        required: true\n        schema:\n          minimum: 0\n          type: string\n      responses:\n        202:\n          description: failed operation\n          content:\n            applictaion/json:\n              schema:\n                $ref: '#/components/schemas/Flight'\n        404:\n          description: No available flights found\n          content:\n            n/a: {}\n      servers:\n      - url: localhost:9080/oas3-airlines/availability\n        description: view of all the bookings\n  /bookings:\n    get:\n      tags:\n      - bookings\n      summary: Retrieve all bookings for current user\n      operationId: getBookings\n      responses:\n        200:\n          description: Bookings retrieved\n          content:\n            application/json:\n              schema:\n                type: string\n        404:\n          description: No bookings found for the user.\n    post:\n      tags:\n      - bookings\n      summary: Create a booking\n      description: Create a new booking record with the booking information provided.\n      operationId: createBooking\n      requestBody:\n        description: Create a new booking with the provided information.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Booking'\n            examples:\n              booking:\n                summary: External booking example\n                externalValue: http://foo.bar/examples/booking-example.json\n      responses:\n        201:\n          description: Booking created\n          content:\n            application/json:\n              schema:\n                type: string\n                description: id of the new booking\n\n  /bookings/{id}:\n    get:\n      tags:\n      - bookings\n      summary: Get a booking with ID\n      operationId: getBooking\n      parameters:\n      - name: id\n        required: true\n        in: path\n        description: ID of the booking\n        schema:\n          type: integer\n      responses:\n        200:\n          description: booking retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Booking'\n        404:\n          description: No bookings found for the user.\n      servers:\n      - url: localhost:9080/oas3-airlines/bookings/{id}\n        description: view of all the bookings for this user\n        variables:\n          id:\n            default: \"1\"\n            description: id of the booking\n    put:\n      tags:\n      - bookings\n      summary: Update a booking with ID\n      description: Updates the given booking with the given ID.\n      externalDocs:\n        description: instructions on how to use this method\n        url: http://www.externaldocumentation.com\n      operationId: updateBooking\n      deprecated: true\n      security:\n      - bookingoauth2:\n        - write:reviews\n      servers:\n      - url: localhost:9080/oas3-airlines/booking\n        description: view of all the reviews\n      parameters:\n      - name: id\n        in: path\n        style: simple\n        deprecated: false\n        allowEmptyValue: true\n        description: id of the booking\n        explode: false\n        description: ID of the booking\n        example: \"1\"\n        required: true\n        schema:\n          type: integer\n      requestBody:\n        description: requestbody consists of a booking\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                departtureFlight:\n                  $ref: '#/components/schemas/Flight'\n                returningFlight:\n                  $ref: '#/components/schemas/Flight'\n                creditCard:\n                  $ref: '#/components/schemas/CreditCard'\n                airMiles:\n                  type: string\n                  example: 32126319\n                seatPreference:\n                  type: string\n                  example: window\n            encoding:\n              profileImage:\n                contentType: text/plain\n                style: form\n                explode: false\n                allowReserved: true\n                headers:\n                  X-Rate-Limit-Limit:\n                    description: The number of allowed requests in the current period\n                    schema:\n                      type: integer\n      responses:\n        200:\n          description: Booking updated\n        404:\n          description: Booking not found\n      callbacks:\n        testCallback:\n          http://localhost:9080/oas3-airlines/bookings: {}\n    delete:\n      tags:\n      - bookings\n      summary: Delete a booking with ID\n      operationId: deleteBooking\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Booking deleted successfully.\n        404:\n          description: Booking not found.\n  /reviews:\n    get:\n      tags:\n      - reviews\n      summary: get all the reviews\n      operationId: getReview\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  oneOf:\n                  - $ref: '#/components/schemas/Review'\n      servers:\n      - url: localhost:9080/oas3-airlines/reviews\n        description: endpoint for all the review related methods\n    post:\n      tags:\n      - reviews\n      summary: Create a Review\n      operationId: createReview\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Review'    \n        description: example review to add\n        required: true\n      responses:\n        201:\n          description: review created\n          content:\n            application/json:\n              schema:\n                type: string\n                description: id of the new review\n      callbacks:\n        testCallback:\n          http://localhost:9080/oas3-airlines/reviews:\n            get:\n              tags:\n              - reviews\n              summary: get all the reviews\n              operationId: getReviewCallback\n              responses:\n                200:\n                  description: successful operation\n                  content:\n                    application/json:\n                      schema:\n                        type: array\n                        items:\n                          oneOf:\n                          - $ref: '#/components/schemas/Review'\n      security:\n      - reviewoauth2:\n        - write:reviews\n      servers:\n      - url: localhost:9080/oas3-airlines/reviews/{id}\n        description: view of all the reviews\n        variables:\n          id:\n            description: id of the review\n            default: \"1\"\n  /reviews/{id}:\n    get:\n      tags:\n      - reviews\n      summary: Get a review with ID\n      operationId: getReviewById\n      parameters:\n      - name: id\n        in: path\n        description: ID of the booking\n        required: true\n        content:\n          '*/*':\n            schema:\n              type: integer\n      responses:\n        200:\n          description: Review retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Review'\n          links:\n            ReviewId:\n              description: The id corresponding to a particular review\n              operationId: getReviewById\n        404:\n          description: Review not found\n      servers:\n      - url: localhost:9080/oas3-airlines/reviews/{id}\n        description: endpoint for all the review related methods\n        variables:\n          id:\n            default: \"11\"\n            description: id of the review\n    delete:\n      tags:\n      - reviews\n      summary: Delete a Review with ID\n      operationId: deleteReview\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Review deleted\n        404:\n          description: Review not found\n  /reviews/{user}:\n    get:\n      tags:\n      - reviews\n      summary: Get all reviews by user\n      operationId: getReviewByUser\n      parameters:\n      - name: user\n        in: path\n        description: username of the user for the reviews\n        required: true\n        content:\n          '*/*':\n            schema:\n              type: string\n            examples:\n              ?\n              : value: bsmith\n      responses:\n        200:\n          description: Review(s) retrieved\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/Review'\n                - $ref: '#/components/schemas/User'\n                discriminator:\n                  propertyName: pet_type\n                  mapping:\n                    review: '#/components/schemas/Review'\n                    user: '#/components/schemas/User'\n        404:\n          description: Review(s) not found\n  /reviews/{airline}:\n    get:\n      tags:\n      - reviews\n      summary: Get all reviews by airlines\n      operationId: getReviewByAirline\n      parameters:\n      - name: airline\n        in: path\n        description: name of the airlines for the reviews\n        required: true\n        content:\n          '*/*':\n            schema:\n              type: string\n            examples:\n              ?\n              : value: Acme Air\n      responses:\n        200:\n          description: Review(s) retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Review'\n        404:\n          description: Review(s) not found\n  /reviews/{user}/{airlines}:\n    get:\n      tags:\n      - reviews\n      summary: Get all reviews for an airline by User\n      operationId: getReviewByAirlineAndUser\n      parameters:\n      - name: user\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: airlines\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: Review(s) retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Review'\n        404:\n          description: Review(s) not found\ncomponents:\n  schemas:\n    User:\n      required:\n      - age\n      - email\n      - firstName\n      - lastName\n      - password\n      - phone\n      - sex\n      type: object\n      properties:\n        password:\n          type: string\n          example: bobSm37\n        firstName:\n          type: string\n          example: Bob\n        lastName:\n          type: string\n          example: Smith\n        sex:\n          type: string\n          example: M\n        age:\n          type: integer\n          example: 37\n        email:\n          type: string\n          example: bob@test.ca\n        phone:\n          type: string\n          example: 123-456-7890\n        id:\n          type: integer\n        username:\n          type: string\n        status:\n          title: User Status\n          type: integer\n    Airline:\n      required:\n      - contactPhone\n      - name\n      type: object\n      properties:\n        name:\n          type: string\n          example: Acme Air\n          xml:\n            name: airlinename\n        contactPhone:\n          type: string\n          example: 1-888-1234-567\n          xml:\n            prefix: number\n            namespace: http://example.com/schema/sample\n    Flight:\n      required:\n      - airportFrom\n      - airportTo\n      - dateTime\n      - number\n      - price\n      - status\n      type: object\n      properties:\n        airline:\n          $ref: '#/components/schemas/Airline'\n        dateTime:\n          pattern: dateTime\n          type: string\n          example: 2016-03-05 18:00\n        number:\n          type: string\n          example: AC190\n        status:\n          type: string\n          example: On Schedule\n        airportFrom:\n          type: string\n          example: YYZ\n        airportTo:\n          type: string\n          example: LAX\n        price:\n          type: string\n          example: US$350\n    Booking:\n      required:\n      - airMiles\n      - seatPreference\n      type: object\n      properties:\n        departtureFlight:\n          $ref: '#/components/schemas/Flight'\n        returningFlight:\n          $ref: '#/components/schemas/Flight'\n        creditCard:\n          $ref: '#/components/schemas/CreditCard'\n        airMiles:\n          type: string\n          example: 32126319\n        seatPreference:\n          type: string\n          example: window\n    Review:\n      required:\n      - id\n      - rating\n      type: object\n      properties:\n        id:\n          type: string\n          example: 0\n        user:\n          $ref: '#/components/schemas/User'\n        airlines:\n          $ref: '#/components/schemas/Airline'\n        rating:\n          type: integer\n          example: 8\n        comment:\n          type: string\n          example: Great service!\n    CreditCard:\n      required:\n      - cardNumber\n      - cardholderName\n      - cvv\n      - expiryDate\n      - issuer\n      type: object\n      properties:\n        issuer:\n          type: string\n          example: VISA\n        cardholderName:\n          type: string\n          example: Joe Smith\n        cardNumber:\n          type: string\n          example: '**********1234'\n        cvv:\n          type: string\n          example: \"0322\"\n        expiryDate:\n          type: string\n          example: 04/19        \n  securitySchemes:\n    reviewoauth2:\n      type: oauth2\n      description: authentication needed to create and delete reviews\n      flows:\n        implicit:\n          authorizationUrl: https://example.com/api/oauth/dialog\n          scopes:\n            write:reviews: create a review\n    bookingoauth2:\n      type: oauth2\n      description: authentication needed to edit bookings\n      flows:\n        implicit:\n          authorizationUrl: https://example.com/api/oauth/dialog\n          scopes:\n            write:booking: edit a booking\n  links:\n    UserName:\n      description: The username corresponding to provided user id\n      operationId: getUserByUserName\n    ReviewId:\n      description: The id corresponding to a particular review\n      operationId: getReviewById\n",
			"canonicalURL": "/github.com/OpenLiberty/open-liberty@ebe619b72ba1b23fd6ea1a69a945a3f8d9dc3557/-/blob/dev/com.ibm.ws.microprofile.openapi/resources/airlines_openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenLiberty/open-liberty/blob/ebe619b72ba1b23fd6ea1a69a945a3f8d9dc3557/dev/com.ibm.ws.microprofile.openapi/resources/airlines_openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: Unsupported map key of type: %!s(\u003cnil\u003e), key: \u003cnil\u003e, value: map[interface {}]interface {}{\"value\":\"bsmith\"}"
}