{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/muharihar/d3ta-go"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "www/templates/openapis/openapi.yaml",
			"byteSize": 28795,
			"content": "openapi: \"3.0.3\"\n\ninfo:\n  title: '{{index . \"info.Title\"}}'\n  description: '{{index . \"info.Description\"}}'\n  contact:\n    name: '{{index . \"info.Contact.Name\"}}'\n    url: '{{index . \"info.Contact.URL\"}}'\n    email: '{{index . \"info.Contact.Email\"}}'\n  license:\n    name: '{{index . \"info.License.Name\"}}'\n    url: '{{index . \"info.License.URL\"}}'\n  version: '{{index . \"info.Version\"}}'\n\nservers:\n  - url: '{scheme}://{host}'\n    description: Server\n    variables:\n      scheme:\n        description: The API is accessible via https and http\n        enum:\n          - https\n          - http\n        default: http\n      host:\n        default: '{{index . \"server.URL.Host.Default\"}}'\n\ntags:\n  - name: Systems\n    description: \u003e-\n      [Generic (sub)Domain] Systems\n  - name: Auths\n    description: \u003e-\n      [Generic (sub)Domain] Authentication (using DDD layered architecture, [G]ORM)\n  - name: GeoLocation\n    description: \u003e-\n      [Supporting (sub)Domain] Geo Location Data (using Simple CRUD with [G]ORM, ElasticSearch)\n  - name: Email\n    description: \u003e-\n      [Generic (sub)Domain] Email (using DDD layered architecture, [G]ORM, smtp)\n  - name: Covid19\n    description: \u003e-\n      [Core (sub)Domain] Covid19 (using DDD layered architecture, adapter-connector, Redis)\n  \nsecurity:\n  - bearerAuth: []\n\npaths:\n  # System\n  /system/health:\n    get:\n      tags:\n        - Systems\n      security: []\n      operationId: Systems.CheckHealth\n      summary: System Health Check\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  /system/captcha/generate:\n    get:\n      tags:\n        - Systems\n      security: []\n      operationId: Systems.Captcha.Generate\n      summary: System Generate Captcha\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  /system/captcha/image/{captchaID}:\n    get:\n      tags:\n        - Systems\n      security: []\n      operationId: Systems.Captcha.GenerateImage\n      summary: System Generate Captcha Image\n      parameters:\n        - $ref: '#/components/parameters/system.param.captchaID'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n        \n  # Auths\n  /api/v1/auths/register:\n    post:\n      tags:\n        - Auths\n      security: []\n      operationId: Auths.Register\n      summary: User Registration\n      requestBody:\n        $ref: '#/components/requestBodies/auths.Register.Request'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  \n  /api/v1/auths/registration/activate/{activationCode}/{format}:\n    get:\n      tags:\n        - Auths\n      security: []\n      operationId: Auths.ActivateRegistration\n      summary: Activate Registration\n      parameters:\n        - $ref: '#/components/parameters/auths.param.regActivationCode'\n        - $ref: '#/components/parameters/auths.param.reqActivationFormat'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  \n  /api/v1/auths/login:\n    post:\n      tags:\n        - Auths\n      security: []\n      operationId: Auths.Login\n      summary: User Login (local user)\n      requestBody:\n        $ref: '#/components/requestBodies/auths.Login.Request'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  \n  /api/v1/auths/login-app:\n    post:\n      tags:\n        - Auths\n      security: []\n      operationId: Auths.LoginApp\n      summary: Client Login App (local user)\n      requestBody:\n        $ref: '#/components/requestBodies/auths.LoginApp.Request'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  \n  # GeoLocation\n  /api/v1/geolocation/countries/list-all:\n    get:\n      tags:\n        - GeoLocation\n      operationId: GeoLocation.Country.ListALl\n      summary: Display Country List\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n\n  /api/v1/geolocation/countries/indexer/refresh:\n    post:\n      tags:\n        - GeoLocation\n      operationId: GeoLocation.Country.RefreshIndexer\n      summary: Refresh Country Indexer [ElasticSearch]\n      requestBody:\n        $ref: '#/components/requestBodies/geoLocation.Country.RefreshIndexer.Request'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  \n  /api/v1/geolocation/countries/indexer/search:\n    post:\n      tags:\n        - GeoLocation\n      operationId: GeoLocation.Country.SearchIndexer\n      summary: Search Country Indexer [ElasticSearch]\n      requestBody:\n        $ref: '#/components/requestBodies/geoLocation.Country.SearchIndexer.Request'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n\n  /api/v1/geolocation/country:\n    post:\n      tags:\n        - GeoLocation\n      operationId: GeoLocation.Country.Add\n      summary: Add Country\n      requestBody:\n        $ref: '#/components/requestBodies/geoLocation.Country.Add.Request'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n\n  /api/v1/geolocation/country/{code}:\n    get:\n      tags:\n        - GeoLocation\n      operationId: GeoLocation.Country.GetDetail\n      summary: Get Detail Country\n      parameters:\n        - $ref: '#/components/parameters/geoLocation.param.countryCode'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n    put:\n      tags:\n        - GeoLocation\n      operationId: GeoLocation.Country.Update\n      summary: Update Country\n      requestBody:\n        $ref: '#/components/requestBodies/geoLocation.Country.Update.Request'\n      parameters:\n        - $ref: '#/components/parameters/geoLocation.param.countryCode'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n    delete:\n      tags:\n        - GeoLocation\n      operationId: GeoLocation.Country.Delete\n      summary: Delete Country\n      parameters:\n        - $ref: '#/components/parameters/geoLocation.param.countryCode'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  \n  # Email\n  /api/v1/email/send:\n    post:\n      tags:\n        - Email\n      operationId: email.Send\n      summary: Send Email using template\n      requestBody:\n        $ref: '#/components/requestBodies/email.Send.Request'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n\n  /api/v1/email/templates/list-all:\n    get:\n      tags:\n        - Email\n      operationId: email.Template.ListAll\n      summary: List All Email Template\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  \n  /api/v1/email/template:\n    post:\n      tags:\n        - Email\n      operationId: email.Template.Create\n      summary: Create new Email Template\n      requestBody:\n        $ref: '#/components/requestBodies/email.Template.Create.Request'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  \n  /api/v1/email/template/{code}:\n    get:\n      tags:\n        - Email\n      operationId: email.Template.FindByCode\n      summary: Find Email Template by Code\n      parameters:\n        - $ref: '#/components/parameters/email.param.emailTemplateCode'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n    delete:\n      tags:\n        - Email\n      operationId: email.Template.Delete\n      summary: Delete Email Template by Code\n      parameters:\n        - $ref: '#/components/parameters/email.param.emailTemplateCode'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  \n  /api/v1/email/template/update/{code}:\n    put:\n      tags:\n        - Email\n      operationId: email.Template.Update\n      summary: Update Email Template by Code\n      parameters:\n        - $ref: '#/components/parameters/email.param.emailTemplateCode'\n      requestBody:\n        $ref: '#/components/requestBodies/email.Template.Update.Request'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n  \n  /api/v1/email/template/set-active/{code}:\n    put:\n      tags:\n        - Email\n      operationId: email.Template.SetActive\n      summary: Set Active Email Template by Code\n      parameters:\n        - $ref: '#/components/parameters/email.param.emailTemplateCode'\n      requestBody:\n        $ref: '#/components/requestBodies/email.Template.SetActive.Request'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n\n  # Covid19\n  /api/v1/covid19/current/by-country:\n    post:\n      tags:\n        - Covid19\n      operationId: covid19.Current.ByCountry\n      summary: Display Current Data By Country\n      requestBody:\n        $ref: '#/components/requestBodies/covid19.Current.ByCountry.Request'\n      responses:\n        default:\n          $ref: '#/components/responses/GeneralResponse'\n\ncomponents:\n  #SecuritySchemes\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  \n  # Parameters\n  parameters:\n    # System\n    system.param.captchaID:\n      in: path\n      name: captchaID\n      description: \u003e-\n        captchaID (with extension: `.png`)\n      schema:\n        type: string\n      required: true\n      example: mv14bg7coWkbp9JtnQCb.png\n    \n    # Auths\n    auths.param.regActivationCode:\n      in: path\n      name: activationCode\n      description: \u003e-\n        Activation Code (from register process)\n      schema:\n        type: string\n      required: true\n      example: \"adhad-adlkajdandad-aldkjadjal-adkad\"\n    \n    auths.param.reqActivationFormat:\n      in: path\n      name: format\n      description: \u003e-\n        Dispay Format\n      schema:\n        type: string\n        enum:\n          - json\n          - html\n        default: json\n      required: true\n\n    # GeoLocation\n    geoLocation.param.countryCode:\n      in: path\n      name: code\n      description: \u003e-\n        Country Code (example: ID)\n      schema:\n        type: string\n      required: true\n      example: ID\n    \n    # Emails\n    email.param.emailTemplateCode:\n      in: path\n      name: code\n      description: \u003e-\n        Email Template Code\n      schema:\n        type: string\n      required: true\n      example: activate-registration\n\n  # Request Bodies\n  requestBodies:\n    # Auths\n    auths.Register.Request:\n      description: User Registration \n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/auths.Register.Request'\n          examples:\n            Registration:\n              value:\n                username: \"admin.d3tago\"\n                password: \"P4s$W0rd!@!\"\n                email: \"user.d3tago@email.tld\"\n                nickName: \"Hari\"\n                captcha: \"get-captcha/Value\"\n                captchaID: \"get-geptcha/ID\"\n    \n    auths.Login.Request:\n      description: User Login \n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/auths.Login.Request'\n          examples:\n            Registration:\n              value:\n                username: \"admin.d3tago\"\n                password: \"P4s$W0rd!@!\"\n                captcha: \"get-captcha/Value\"\n                captchaID: \"get-geptcha/ID\"\n    \n    auths.LoginApp.Request:\n      description: Client Login App \n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/auths.LoginApp.Request'\n          examples:\n            Registration:\n              value:\n                clientKey: \"clientKey\"\n                secretKey: \"secretkey\"\n  \n    # GeoLocation\n    geoLocation.Country.Add.Request:\n      description: Add Geolocation Country\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/geoLocation.Country.Add.Request'\n          examples:\n            Detail:\n              value:\n                code: ID\n                name: INDONESIA\n                ISO2Code: ID\n                ISO3Code: IDN\n                WHORegion: SEARO\n            Simple:\n              value:\n                code: ID\n                name: INDONESIA\n                ISO2Code: ID\n                ISO3Code: \n                WHORegion: SEARO\n    \n    geoLocation.Country.RefreshIndexer.Request:\n      description: Refresh Geolocation Country Indexer\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/geoLocation.Country.RefreshIndexer.Request'\n          examples:\n            Sync:\n              value:\n                processType: SYNC\n            Async:\n              value:\n                processType: ASYNC\n    \n    geoLocation.Country.SearchIndexer.Request:\n      description: Search Geolocation Country Indexer\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/geoLocation.Country.SearchIndexer.Request'\n          examples:\n            Min2Char:\n              value:\n                name: IN\n            More2Char:\n              value:\n                name: IND\n    \n    geoLocation.Country.Update.Request:\n      description: Update Geolocation Country\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/geoLocation.Country.Update.Request'\n          examples:\n            Detail:\n              value:\n                name: INDONESIA UPDATED\n                ISO2Code: ID\n                ISO3Code: IDN\n                WHORegion: SEARO\n            Simple:\n              value:\n                name: INDONESIA UPDATED\n                ISO2Code: ID\n                ISO3Code: \n                WHORegion: SEARO\n    \n    # Email\n    email.Template.Create.Request:\n      description: Create Email Template Request\n      required: true\n      content:\n        application/json:\n          schema:\n             $ref: '#/components/schemas/email.Template.Create.Request'\n          examples:\n            PlainTextSample:\n              value:\n                code: \"plain-email-template-code\"\n                name: \"Plain Text Email Template Name\"\n                isActive: true\n                emailFormat: \"TEXT\"\n                template:\n                  subjectTpl: \"Subject Template\"\n                  bodyTpl: \"replace bodyTpl value from: http://{{index . \"server.URL.Host.Default\"}}/openapi/docs/swagger-ui/assets/examples/plain-text-template.json\"\n            HTMLSample:\n              value:\n                code: \"html-email-template-code\"\n                name: \"HTML Email Template Name\"\n                isActive: true\n                emailFormat: \"HTML\"\n                template:\n                  subjectTpl: \"Subject Template\"\n                  bodyTpl: \"replace bodyTpl value from: http://{{index . \"server.URL.Host.Default\"}}/openapi/docs/swagger-ui/assets/examples/html-template.json\"\n    \n    email.Template.Update.Request:\n      description: Update Email Template Request\n      required: true\n      content:\n        application/json:\n          schema:\n             $ref: '#/components/schemas/email.Template.Update.Request'\n          examples:\n            PlainTextSample:\n              value:\n                name: \"Plain Text Email Template Name\"\n                isActive: true\n                emailFormat: \"TEXT\"\n                template:\n                  subjectTpl: \"Subject Template\"\n                  bodyTpl: \"replace bodyTpl value from: http://{{index . \"server.URL.Host.Default\"}}/openapi/docs/swagger-ui/assets/examples/plain-text-template.json\"\n            HTMLSample:\n              value:\n                name: \"HTML Email Template Name\"\n                isActive: true\n                emailFormat: \"HTML\"\n                template:\n                  subjectTpl: \"Subject Template\"\n                  bodyTpl: \"replace bodyTpl value from: http://{{index . \"server.URL.Host.Default\"}}/openapi/docs/swagger-ui/assets/examples/html-template.json\"\n    \n    email.Template.SetActive.Request:\n      description: Set Active Email Template Request\n      required: true\n      content:\n        application/json:\n          schema:\n             $ref: '#/components/schemas/email.Template.SetActive.Request'\n          examples:\n            Activate:\n              value:\n                isActive: true\n            InActivate:\n              value:\n                isActive: false\n\n    email.Send.Request:\n      description: Send Email\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/email.Send.Request'\n          examples:\n            Simple:\n              value:\n                templateCode: activate-registration-html\n                from:\n                  email: d3tago.from@domain.tld\n                  name: D3TA Golang\n                to:\n                  email: d3ta.to@domain.tld\n                  name: D3TA Golang To\n                templateData:\n                  Header.Name: John Doe\n                  Body.UserAccount: john.doe\n                  Body.ActivationURL: https://google.com\n                  Footer.Name: Customer Service\n                processingType: SYNC\n            WithCC:\n              value:\n                templateCode: activate-registration-html\n                from:\n                  email: d3tago.from@domain.tld\n                  name: D3TA Golang\n                to:\n                  email: d3tago.to@domain.tld\n                  name: D3TA Golang To\n                cc:\n                  - email: d3tago.cc1@domain.tld\n                    name: D3TA Golang CC 1\n                  - email: d3tago.cc2@gmail.tld\n                    name: D3TA Golang CC 2\n                templateData:\n                  Header.Name: John Doe\n                  Body.UserAccount: john.doe\n                  Body.ActivationURL: https://google.com\n                  Footer.Name: Customer Service\n                processingType: SYNC\n            WithBCC:\n              value:\n                templateCode: activate-registration-html\n                from:\n                  email: d3tago.from@domain.tld\n                  name: D3TA Golang\n                to:\n                  email: d3tago.to@domain.tld\n                  name: D3TA Golang To\n                bcc:\n                  - email: d3tago.bcc1@domain.tld\n                    name: D3TA Golang BCC 1\n                  - email: d3tago.bcc2@gmail.tld\n                    name: D3TA Golang BCC 2\n                templateData:\n                  Header.Name: John Doe\n                  Body.UserAccount: john.doe\n                  Body.ActivationURL: https://google.com\n                  Footer.Name: Customer Service\n                processingType: ASYNC\n            WithCCAndBCC:\n              value:\n                templateCode: activate-registration-html\n                from:\n                  email: d3tago.from@domain.tld\n                  name: D3TA Golang\n                to:\n                  email: d3tago.to@domain.tld\n                  name: D3TA Golang To\n                cc:\n                  - email: d3tago.cc1@domain.tld\n                    name: D3TA Golang CC 1\n                  - email: d3tago.cc2@gmail.tld\n                    name: D3TA Golang CC 2\n                bcc:\n                  - email: d3tago.bcc1@domain.tld\n                    name: D3TA Golang BCC 1\n                  - email: d3tago.bcc2@gmail.tld\n                    name: D3TA Golang BCC 2\n                templateData:\n                  Header.Name: John Doe\n                  Body.UserAccount: john.doe\n                  Body.ActivationURL: https://google.com\n                  Footer.Name: Customer Service\n                processingType: ASYNC\n\n    # Covid19  \n    covid19.Current.ByCountry.Request:\n      description: Display Covid19 Current Data By Country Requst \n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/covid19.Current.ByCountry.Request'\n          examples:\n            WHO.Provider:\n              value:\n                countryCode: ID\n                providers:\n                  - code: WHO\n            Covid19GoId.Provider:\n              value:\n                countryCode: ID\n                providers:\n                  - code: COVID19GOID\n            WHOAndCovid19GoId.Provider:\n              value:\n                countryCode: ID\n                providers:\n                  - code: WHO\n                  - code: COVID19GOID\n            ALL.Default:\n              value:\n                countryCode: ID\n                providers:\n                  - code: _DEFAULT_\n            ALL.Provider:\n              value:\n                countryCode: ID\n                providers:\n                  - code: _ALL_\n\n  responses:\n    GeneralResponse:\n      description: General Response\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GeneralResponse'\n\n  # Schemas\n  schemas:\n    GeneralResponse:\n      required:\n        - status\n        - response\n        - serverInfo\n      properties:\n        status:\n          type: string\n          enum:\n            - OK\n            - ERROR\n          example: OK\n        response:\n          type: object\n        serverInfo:\n          type: object\n\n    # Auths\n    auths.Register.Request:\n      type: object\n      properties:\n        username:\n          $ref: '#/components/schemas/auths.field.username'\n        password:\n          $ref: '#/components/schemas/auths.field.password'\n        email:\n          $ref: '#/components/schemas/auths.field.email'\n        nickName:\n          $ref: '#/components/schemas/auths.field.nickName'\n        captcha:\n          $ref: '#/components/schemas/auths.field.captcha'\n        captchaID:\n          $ref: '#/components/schemas/auths.field.captchaID'\n\n    auths.Login.Request:\n      type: object\n      properties:\n        username:\n          $ref: '#/components/schemas/auths.field.username'\n        password:\n          $ref: '#/components/schemas/auths.field.password'\n        captcha:\n          $ref: '#/components/schemas/auths.field.captcha'\n        captchaID:\n          $ref: '#/components/schemas/auths.field.captchaID'\n    \n    auths.LoginApp.Request:\n      type: object\n      properties:\n        clientKey:\n          $ref: '#/components/schemas/auths.field.clientKey'\n        secretKey:\n          $ref: '#/components/schemas/auths.field.secretKey'\n    \n    auths.field.username:\n      type: string\n      example: \"user.d3tago\"\n    auths.field.password:\n      type: string\n      example: \"P4s$W0rd!@!\"\n    auths.field.email:\n      type: string\n      format: email\n      example: \"user.d3tago@email.tld\"\n    auths.field.nickName:\n      type: string\n      example: \"Hari\"\n    \n    auths.field.captcha:\n      type: string\n      example: 1234\n    auths.field.captchaID:\n      type: string\n      example: \"adao293aoadh39uekha\"\n\n    auths.field.clientKey:\n      type: string\n      example: \"clientKey\"\n    auths.field.secretKey:\n      type: string\n      example: \"clientKey\"\n\n    # GeoLocation\n    geoLocation.Country.Add.Request:\n      type: object\n      properties:\n        code:\n          $ref: '#/components/schemas/geoLocation.field.country.code'\n        name:\n          $ref: '#/components/schemas/geoLocation.field.country.name'\n        ISO2Code:\n          $ref: '#/components/schemas/geoLocation.field.country.ISO2Code'\n        ISO3Code:\n          $ref: '#/components/schemas/geoLocation.field.country.ISO3Code'\n        WHORegion:\n          $ref: '#/components/schemas/geoLocation.field.country.WHORegion'\n    \n    geoLocation.Country.RefreshIndexer.Request:\n      type: object\n      properties:\n        processType:\n          $ref: '#/components/schemas/geoLocation.indexer.field.processingType'\n\n    geoLocation.Country.SearchIndexer.Request:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/geoLocation.field.country.name'\n\n    geoLocation.indexer.field.processingType:\n      type: string\n      example: SYNC\n      enum:\n        - SYNC\n        - ASYNC\n\n    geoLocation.Country.Update.Request:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/geoLocation.field.country.name'\n        ISO2Code:\n          $ref: '#/components/schemas/geoLocation.field.country.ISO2Code'\n        ISO3Code:\n          $ref: '#/components/schemas/geoLocation.field.country.ISO3Code'\n        WHORegion:\n          $ref: '#/components/schemas/geoLocation.field.country.WHORegion'\n    \n    geoLocation.field.country.code:\n      type: string\n      example: ID\n    geoLocation.field.country.name:\n      type: string\n      example: INDONESIA\n    geoLocation.field.country.ISO2Code:\n      type: string\n      example: ID\n    geoLocation.field.country.ISO3Code:\n      type: string\n      example: IDN\n    geoLocation.field.country.WHORegion:\n      type: string\n      example: SEARO\n    \n    # Email\n    email.Template.Create.Request:\n      type: object\n      properties:\n        code:\n          $ref: '#/components/schemas/email.Template.field.code'\n        name:\n          $ref: '#/components/schemas/email.Template.field.name'\n        isActive:\n          $ref: '#/components/schemas/email.Template.field.isActive'\n        emailFormat:\n          $ref: '#/components/schemas/email.Template.field.emailFormat'\n        template:\n          $ref: '#/components/schemas/email.Template.obj.template'\n\n    email.Template.Update.Request:\n      type: object\n      properties:\n        name:\n          $ref: '#/components/schemas/email.Template.field.name'\n        isActive:\n          $ref: '#/components/schemas/email.Template.field.isActive'\n        emailFormat:\n          $ref: '#/components/schemas/email.Template.field.emailFormat'\n        template:\n          $ref: '#/components/schemas/email.Template.obj.template'\n\n    email.Template.SetActive.Request:\n      type: object\n      properties:\n        isActive:\n          $ref: '#/components/schemas/email.Template.field.isActive'\n    \n    email.Template.field.code:\n      type: string\n      example: email-template-code\n    email.Template.field.name:\n      type: string\n      example: Email Template\n    email.Template.field.isActive:\n      type: boolean\n      example: true\n    email.Template.field.emailFormat:\n      type: string\n      enum:\n        - HTML\n        - TEXT\n    email.Template.obj.template:\n      type: object\n      properties:\n        subjectTpl:\n          $ref: '#/components/schemas/email.Template.field.subjectTpl'\n        bodyTpl:\n          $ref: '#/components/schemas/email.Template.field.bodyTpl'\n    \n    email.Template.field.subjectTpl:\n      type: string\n      example: Email Subject\n    email.Template.field.bodyTpl:\n      type: string\n      example: Please refer to examples url\n    \n    email.Send.Request:\n      type: object\n      properties:\n        templateCode:\n          $ref: '#/components/schemas/email.Template.field.code'\n        from:\n          $ref: '#/components/schemas/email.send.obj.emailAddress'\n        to:\n          $ref: '#/components/schemas/email.send.obj.emailAddress'\n        cc:\n          $ref: '#/components/schemas/email.send.arr.emailAddress'\n        bcc:\n          $ref: '#/components/schemas/email.send.arr.emailAddress'\n        templateData:\n          type: object\n          description: \u003e- \n            Template Data (depend on email template)\n        processingType:\n          $ref: '#/components/schemas/email.send.field.processingType'\n    \n    email.send.arr.emailAddress:\n      type: array\n      items:\n        $ref: '#/components/schemas/email.send.obj.emailAddress'\n    \n    email.send.obj.emailAddress:\n      type: object\n      properties:\n        email:\n          $ref: '#/components/schemas/email.send.field.email'\n        name:\n          $ref: '#/components/schemas/email.send.field.name'\n          \n    email.send.field.email:\n      type: string\n      format: email\n    email.send.field.name:\n      type: string\n    email.send.field.processingType:\n      type: string\n      enum:\n        - SYNC\n        - ASYNC\n      description: Processing Type [ SYNC (Synchronous) or ASYNC (Asyncrounous) ]\n    \n    # Covid19\n    covid19.Current.ByCountry.Request:\n      type: object\n      properties:\n        countryCode:\n          $ref: '#/components/schemas/geoLocation.field.country.code'\n        providers:\n          $ref: '#/components/schemas/covid19.arr.provider'\n    \n    covid19.arr.provider:\n      type: array\n      items:\n        $ref: '#/components/schemas/covid19.obj.provider'\n    covid19.obj.provider:\n      type: object\n      properties:\n        code:\n          $ref: '#/components/schemas/covid19.provider.field.code'\n    covid19.provider.field.code:\n      type: string\n      example: _ALL_\n"
		}
	},
	"Error": "invalidYAML: yaml: line 522: did not find expected key"
}