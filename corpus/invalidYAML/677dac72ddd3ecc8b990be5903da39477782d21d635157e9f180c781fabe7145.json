{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/qri-io/qri"
		},
		"file": {
			"name": "api_doc_template.yaml",
			"size": 0,
			"path": "docs/api_doc_template.yaml",
			"byteSize": 4727,
			"content": "openapi: 3.0.0\ninfo:\n  title: Qri API\n  description: Qri API used to communicate with a Qri node.\n  version: {{ .QriVersion }}\ntags:\n{{- range .MethodSets }}\n{{- if gt .MethodCount 0}}\n- name: {{ .Name }}\n  description: \"{{ .Doc }}\"\n{{ end -}}\n{{ end -}}\npaths:\n{{- range .LibMethods }}\n{{- if .Endpoint }}\n  '{{ .Endpoint }}':\n    {{ .HTTPVerb }}:\n{{ if .Doc }}      description: {{ .Doc }}{{end}}\n      operationId: '{{ .MethodSet }}.{{ .MethodName }}'\n      tags:\n      - {{ .MethodSet }}\n      {{- if eq .HTTPVerb \"get\" }}\n      {{- if eq .Params.Name \"pathParams\" }}\n{{ if .Params.Fields }}      parameters: {{end}}\n{{- range .Params.Fields }}\n{{- if not .Hidden }}\n      - name: '{{ .Name }}'\n        in: path\n        required: true\n        schema:\n          type: string\n{{ end -}}\n{{ end -}}\n      {{ end }}\n      {{ end -}}\n      {{- if eq .HTTPVerb \"post\" }}\n      {{- if ne .Params.Name \"\" }}\n      {{- if not .Params.IsBinary }}\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              '$ref': '#/components/schemas/{{ .Params.Name }}'\n      {{ end }}\n      {{- if .Params.IsBinary }}\n      requestBody:\n        required: true\n        content:\n          {{ .Params.Name }}:\n            schema:\n              type: string\n              format: binary\n      {{ end }}\n      {{ end -}}\n      {{ end }}\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      data:\n{{ if not .Response.IsArray }}\n                        allOf:\n                          - $ref: '#/components/schemas/{{ .Response.Type }}'\n{{ end }}\n{{ if .Response.IsArray }}\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: '#/components/schemas/{{ .Response.Type }}'\n{{ end}}\n{{ if .Paginated }}\n                      pagination:\n                        allOf:\n                          - $ref: '#/components/schemas/Pagination'\n{{ end }}\n          description: OK\n        '400':\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Bad request\n        '500':\n          content:\n            application/json:\n              schema:\n                type: string\n                nullable: true\n          description: Server error\n        default:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/APIResponse'\n                  - properties:\n                      meta:\n                        allOf:\n                          - $ref: '#/components/schemas/APIMetaError'\n          description: Error\n{{- end -}}\n{{- end }}\n\ncomponents:\n  schemas:\n{{- range .Types }}\n    {{ .Name }}:\n      type: object\n{{ if .Fields }}      properties: {{end}}\n        {{- range .Fields }}\n        {{- if not .Hidden }}\n        {{ .Name }}:\n{{ if .TypeIsCommon }}          type: {{ .Type }}{{ end }}\n{{ if not .TypeIsCommon }}          type: object {{ end }}\n{{ if ne .Doc \"\" }}          description: \"{{ .Doc }}\"{{ end }}\n{{ if ne .Example \"\" }}          example: \"{{ .Example }}\"{{ end }}\n{{- end -}}\n{{- end -}}\n{{- end -}}\n### Response Schemas\n## Base\n    APIResponse:\n      type: object\n      properties:\n        data:\n          type: object\n          nullable: true\n        meta:\n          type: object\n          nullable: true\n    StatusOK:\n      type: object\n    String:\n      type: string\n    Nil:\n      type: object\n      nullable: true\n    NotDefined:\n      type: object\n      nullable: true\n    Pagination:\n      type: object\n      properties:\n        page:\n          type: integer\n        pageSize:\n          type: integer\n        resultCount:\n          type: integer\n        nextUrl:\n          type: string\n        prevUrl:\n          type: string\n    RawResponse:\n      # supports all string formats: string, binary, byte\n      type: string\n## Qri\n    StatusItem:\n      type: object\n    Profile:\n      type: object\n    DAGManifest:\n      type: object\n    DAGInfo:\n      type: object\n    ChangeReport:\n      type: object\n    MappedArraysOfVersionInfo:\n      type: object\n      additionalProperties: true\n## Error\n    APIMetaError:\n      type: object\n      properties:\n        code:\n          type: integer\n        error:\n          type: string"
		}
	},
	"Error": "invalidYAML: yaml: line 8: could not find expected ':'"
}