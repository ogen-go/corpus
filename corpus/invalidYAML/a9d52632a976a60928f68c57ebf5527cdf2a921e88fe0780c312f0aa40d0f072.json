{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Amsterdam/signals"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/app/signals/apps/api/templates/api/swagger/openapi.yaml",
			"byteSize": 153246,
			"content": "openapi: 3.0.0\ninfo:\n  title: Signalen Informatievoorziening Amsterdam (SIA) API spec V1\"\n  description: \u003e-\n    One of the tasks of the municipality of Amsterdam is to maintain\n    public spaces like roads, parks. When citizens have complaints about public\n    spaces they can leave these complaints with the municipality. SIA, the\n    Signalen Informatievoorziening Amsterdam, receives these complaints and is\n    used to track progress towards their resolution.\n\n\n    SIA provides an API that is used both by the SIA frontend and external\n    systems that integrate with SIA. This swagger file documents that API.\n  contact:\n    email: \"datapunt@amsterdam.nl\"\n  version: \"TBD\"\npaths:\n  /signals/v1/private/signals/:\n    get:\n      description: Signals list endpoint\n      parameters:\n        - name: ordering\n          in: query\n          description: Order the result of this endpoint (ASC or DESC)\n          schema:\n            type: string\n            enum:\n              - id\n              - -id\n              - created_at\n              - -created_at\n              - updated_at\n              - -updated_at\n              - stadsdeel\n              - -stadsdeel\n              - sub_category\n              - -sub_category\n              - main_category\n              - -main_category\n              - status\n              - -status\n              - priority\n              - -priority\n              - address\n              - -address\n              - assigned_user_email\n              - -assigned_user_email\n          example: created_at\n          required: false\n        - name: id\n          in: query\n          description: \u003e-\n            Filter Signals on a given id\n          schema:\n            type: integer\n            example: 123456789\n          required: false\n        - name: address_text\n          in: query\n          description: \u003e-\n            Filter Signals located on a (part) of an address (case insensitive)\n          schema:\n            type: string\n            example: 'Amstel 1'\n          required: false\n        - name: area_code\n          in: query\n          description: \u003e-\n            Filter signals according to the currently assigned location area_code, accepts\n            a single area_code\n          schema:\n            type: string\n            example: 'ASC'\n          required: false\n        - name: area_type_code\n          in: query\n          description: \u003e-\n            Filter signals according to the currently assigned location area_type_code, accepts\n            a single area_type_code\n          schema:\n            type: string\n            example: 'district'\n          required: false\n        - name: buurt_code\n          deprecated: true\n          in: query\n          description: \u003e-\n            Deprecated, will be removed in the near future.\n\n            Filter signals according to the currently assigned location buurt_code\n          schema:\n            type: string\n            example: 'E17a'\n          required: false\n        - name: category_id\n          description: \u003e-\n            Filter returns only signals with matching category id(s). This will overrule the use of\n            maincategory_slug and/or category_slug.\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: category_slug\n          description: \u003e-\n            If the category_id filter is used this will overwrite the use of the\n            maincategory_slug/category_slug filter. Filter returns only signals with matching\n            sub category slug.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: contact_details\n          in: query\n          description: \u003e-\n            Filter signals according to the presence of contact details, accepts\n            (a combination of) the following values `none` for no contact\n            details, `phone` for the presence of a reporter's phone number, and\n            `email` for the presence of a reporter's email address.\n          schema:\n            type: string\n            enum:\n              - none\n              - phone\n              - email\n          required: false\n        - name: created_after\n          in: query\n          description: \u003e-\n            Filter returns only signals created after specified datetime. Note\n            the date time string should be in ISO 8601 format and URL encoded.\n          schema:\n            type: string\n            format: date-time\n          required: false\n        - name: created_before\n          in: query\n          description: \u003e-\n            Filter returns only signals created before specified datetime. Note\n            the date time string should be in ISO 8601 format and URL encoded.\n          schema:\n            type: string\n            format: date-time\n          required: false\n        - name: directing_department\n          in: query\n          description: \u003e-\n            Filter (parent) signals according to the currently assigned directing department(s),\n            accepts (a combination of) the codes of the declared departments. The value \"null\" will\n            select all (parent) signals without a directing department assignment. This means that\n            the \"is_responsible\" department associated with the category is considered the\n            \"directing department\".\n          schema:\n            type: string\n          examples:\n            ASC:\n              value: 'ASC'\n              summary: Will select all (parent) Signals where ASC is set explicitly as the directing department\n            null:\n              value: 'null'\n              summary: Will select all (parent) Signals without a directing department assignment\n          required: false\n        - name: feedback\n          in: query\n          description: \u003e-\n            Filter Signals/meldingen according to wether feedback was received\n            for them. This filter accepts one of the following values:\n            `satisfied` (reporter was satisfied with the resolution),\n            `not_satisfied` (reporter was not satisfied with the resolution),\n            or `not_received` (no feedback was sent by the reporter). Only the\n            newest feedback is taken into account.\n          required: false\n          schema:\n            type: string\n            enum:\n              - satisfied\n              - not_satisfied\n              - not_received\n        - name: has_changed_children\n          in: query\n          description: \u003e-\n            Filters all parent signals that have changes or no changes in children. Accepts true,\n            false or both. When both true and false are given only parent Signals are returned.\n          required: false\n          schema:\n            type: boolean\n            example:\n              true: true\n              false: false\n        - name: kind\n          in: query\n          description: \u003e-\n            Filter Signals according to whether they are a Signal (\"signal\"), A parent Signal\n            (\"parent_signal\") and/or a child Signal (\"child_signal\"). An additional option can be\n            used to select all Signals that are NOT a parent Signal, this option is\n            \"exclude_parent_signal\". This filter accepts (a combination of) the options \"signal\",\n            \"parent_signal\", \"exclude_parent_signal\" or \"child_signal\". Parent/Child Signals can\n            contain both \"split Signals\" and/or \"Hoofd- en deelmeldingen\".\n          required: false\n          schema:\n            type: string\n            enum:\n              - signal\n              - parent_signal\n              - exclude_parent_signal\n              - child_signal\n            example:\n              signal:\n                value: 'signal'\n              parent_signal:\n                value: 'parent_signal'\n              exclude_parent_signal:\n                value: 'exclude_parent_signal'\n              child_signal:\n                value: 'child_signal'\n              combination:\n                value: [ 'parent_signal', 'signal' ]\n        - name: incident_date\n          in: query\n          description: \u003e-\n            Filter returns only signals with a incident_date at the exact specified date\n          schema:\n            type: string\n            format: date\n          required: false\n        - name: incident_date_after\n          in: query\n          description: \u003e-\n            Filter returns only signals with a incident_date after the specified date\n          schema:\n            type: string\n            format: date\n          required: false\n        - name: incident_date_before\n          in: query\n          description: \u003e-\n            Filter returns only signals with a incident_date before the specified date\n          schema:\n            type: string\n            format: date\n          required: false\n        - name: maincategory_slug\n          description: \u003e-\n            If the category_id filter is used this will overwrite the use of the\n            maincategory_slug/category_slug filter. Filter returns only signals with matching main\n            category slug.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: note_keyword\n          in: query\n          description: \u003e-\n            This filter option is temporary, and will likely be replaced by\n            either proper tagging or extended search using the Elastic Search\n            implementation of SIA.\n            Filter Signals/meldingen according to the presence of a certain\n            keyword in one or more of notes associated with a Signal/melding.\n            Accepts one keyword, will check wether it is present and return the\n            Signals/meldingen where it is present.\n          required: false\n          schema:\n            type: string\n        - name: priority\n          in: query\n          description: \u003e-\n            Filter signals according to their priority, accepts (a combination\n            of) the following values: `low`, `high` and/or `normal`.\n          required: false\n          schema:\n            type: string\n            enum:\n              - low\n              - normal\n              - high\n        - name: source\n          in: query\n          description: \u003e-\n            Filter Signals/meldingen according to their source, accepted values\n            are derived from the database. Source `online` are Signals/meldingen\n            that were created in the public website.\n          required: false\n          schema:\n            type: string\n        - name: stadsdeel\n          in: query\n          description: Filter signals according to the currently assigned location stadsdeel\n          schema:\n            type: string\n          required: false\n        - name: status\n          in: query\n          description: Filter returns only signals with specified status.\n          schema:\n            $ref: '#/components/schemas/StatusStateChoices'\n          required: false\n        - name: 'type'\n          in: query\n          description: \u003e-\n            Filter signals according to the currently assigned type, accepts\n            (a combination of) the values `SIG` a \"Signal/Melding\", `REQ` a \"Request/Aanvraag\", `QUE` a \"QuestionVraag\", `COM` a \"Complaint/Klacht\" and `MAI` a \"Maintenance/Groot onderhoud\"\n          schema:\n            type: string\n            enum:\n              - SIG\n              - REQ\n              - QUE\n              - COM\n              - MAI\n          required: false\n        - name: updated_after\n          in: query\n          description: \u003e-\n            Filter returns only signals updated after specified datetime. Note\n            the date time string should be in ISO 8601 format and URL encoded.\n          schema:\n            type: string\n            format: date-time\n          required: false\n        - name: updated_before\n          in: query\n          description: \u003e-\n            Filter returns only signals updated before specified datetime. Note\n            the date time string should be in ISO 8601 format and URL encoded.\n          schema:\n            type: string\n            format: date-time\n          required: false\n        - name: assigned_user_email\n          in: query\n          description: \u003e-\n            !!! Currently not used by Amsterdam !!!\n            Filter signals based on the email address of the assigned user.\n          required: false\n          schema:\n            type: string\n            format: email\n        - name: reporter_email\n          in: query\n          description: Filter signals based on the email address of its reporter.\n          required: false\n          schema:\n            type: string\n            format: email\n        - name: routing_department_code\n          in: query\n          description: \u003e-\n            !!! Currently not used by Amsterdam !!!\n            Filter signals based on the department code set by the routing mechanism.\n          required: false\n          schema:\n            type: string\n        - name: punctuality\n          in: query\n          description: Filter signals that are being worked on to check that\n            they are within allotted time \"on_time\", late in general \"late\", or\n            late by a factor of three \"late_factor_3\". This filter accepts only\n            one choice. It is also possible to look for Signals that have no\n            deadline associated with them using \"null\" as a value. Signals in\n            states \"AFGEHANDELD\", \"GEANNULEERD\", or \"GESPLITST\" will not match.\n          required: false\n          schema:\n            type: string\n            enum:\n              - \"null\"\n              - \"on_time\"\n              - \"late\"\n              - \"late_factor_3\"\n      responses:\n        '200':\n          description: List of signals\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PrivateSignalListGet'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Not authorized to access this endpoint.\n      security:\n        - OAuth2:\n            - SIG/ALL\n    post:\n      description: Creates a new signal\n      requestBody:\n        description: Serialized signal data.\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/V1PrivateSignalPost'\n                - $ref: '#/components/schemas/V1PrivateSignalPostBulk'\n      responses:\n        '201':\n          description: New signal created\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/V1PrivateSignalDetailGet'\n                  - $ref: '#/components/schemas/V1PrivateSignalDetailGetBulk'\n        '400':\n          description: Bad request\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Not authorized to access this endpoint.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/signals/geography:\n    get:\n      description: Signals geography list endpoint\n      parameters:\n        - name: \"created_before\"\n          in: query\n          description: \u003e-\n            Filter returns only signals created before specified datetime. Note\n            the date time string should be in ISO 8601 format and URL encoded.\n          schema:\n            type: string\n            format: date-time\n          required: false\n        - name: \"created_after\"\n          in: query\n          description: \u003e-\n            Filter returns only signals created after specified datetime. Note\n            the date time string should be in ISO 8601 format and URL encoded.\n          schema:\n            type: string\n            format: date-time\n          required: false\n        - name: \"updated_before\"\n          in: query\n          description: \u003e-\n            Filter returns only signals updated before specified datetime. Note\n            the date time string should be in ISO 8601 format and URL encoded.\n          schema:\n            type: string\n            format: date-time\n          required: false\n        - name: updated_after\n          in: query\n          description: \u003e-\n            Filter returns only signals updated after specified datetime. Note\n            the date time string should be in ISO 8601 format and URL encoded.\n          schema:\n            type: string\n            format: date-time\n          required: false\n        - name: status\n          in: query\n          description: Filter returns only signals with specified status.\n          schema:\n            $ref: '#/components/schemas/StatusStateChoices'\n          required: false\n        - name: maincategory_slug\n          description: Filter returns only signals with matching main category\n            slug.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: category_slug\n          description: \u003e-\n            Filter returns only signals with matching sub category slug.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: contact_details\n          in: query\n          description: \u003e-\n            Filter signals according to the presence of contact details, accepts\n            (a combination of) the following values `none` for no contact\n            details, `phone` for the presence of a reporter's phone number, and\n            `email` for the presence of a reporter's email address.\n          schema:\n            type: string\n            enum:\n              - none\n              - phone\n              - email\n          required: false\n        - name: priority\n          in: query\n          description: \u003e-\n            Filter signals according to their priority, accepts (a combination\n            of) the following values: `low`, `high` and/or `normal`.\n          required: false\n          schema:\n            type: string\n            enum:\n              - low\n              - normal\n              - high\n        - name: feedback\n          in: query\n          description: \u003e-\n            Filter Signals/meldingen according to wether feedback was received\n            for them. This filter accepts one of the following values:\n            `satisfied` (reporter was satisfied with the resolution),\n            `not_satisfied` (reporter was not satisfied with the resolution),\n            or `not_received` (no feedback was sent by the reporter). Only the\n            newest feedback is taken into account.\n          required: false\n          schema:\n            type: string\n            enum:\n              - satisfied\n              - not_satisfied\n              - not_received\n        - name: source\n          in: query\n          description: \u003e-\n            Filter Signals/meldingen according to their source, accepted values\n            are derived from the database. Source `online` are Signals/meldingen\n            that were created in the public website.\n          required: false\n          schema:\n            type: string\n        - name: 'type'\n          in: query\n          description: \u003e-\n            Filter signals according to the currently assigned type, accepts\n            (a combination of) the values `SIG` a \"Signal/Melding\", `REQ` a \"Request/Aanvraag\", `QUE` a \"QuestionVraag\", `COM` a \"Complaint/Klacht\" and `MAI` a \"Maintenance/Groot onderhoud\"\n          schema:\n            type: string\n            enum:\n              - SIG\n              - REQ\n              - QUE\n              - COM\n              - MAI\n          required: false\n        - name: note_keyword\n          in: query\n          description: \u003e-\n            This filter option is temporary, and will likely be replaced by\n            either proper tagging or extended search using the Elastic Search\n            implementation of SIA.\n            Filter Signals/meldingen according to the presence of a certain\n            keyword in one or more of notes associated with a Signal/melding.\n            Accepts one keyword, will check wether it is present and return the\n            Signals/meldingen where it is present.\n          required: false\n          schema:\n            type: string\n\n      responses:\n        '200':\n          description: List of signals\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PrivateSignalListGetGeography'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Not authorized to access this endpoint.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/signals/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of signal that is requested\n        required: true\n        schema:\n          type: integer\n          example: 1\n    get:\n      description: Retrieve signal by ID.\n      responses:\n        '200':\n          description: The requested signal\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PrivateSignalDetailGet'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Not authorized to access this endpoint.\n        '404':\n          description: Signal not found.\n      security:\n        - OAuth2:\n            - SIG/ALL\n    patch:\n      description: Partial update to signal.\n      requestBody:\n        description: JSON data to update signal.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V1PrivateSignalPatch'\n      responses:\n        '200':\n          description: The updated signal\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PrivateSignalDetailGet'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Not authorized to access this endpoint.\n        '404':\n          description: Signal not found.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/signals/{id}/children/:\n    parameters:\n      - name: id\n        in: path\n        description: ID of signal whose child signals are requested\n        required: true\n        schema:\n          type: integer\n          example: 1\n    get:\n      description: Retrieve child signals by parent signal ID.\n      responses:\n        '200':\n          description: Child signals associated with the specified parent.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PrivateSignalchildrenGet'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Not authorized to access this endpoint.\n        '404':\n          description: \u003e-\n            Parent signal not found or requesting children of a parent signal\n            that has no child signals.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/signals/{id}/history:\n    parameters:\n      - name: id\n        in: path\n        description: ID of signal whose history needs to be retrieved.\n        required: true\n        schema:\n          type: integer\n    get:\n      description: History of signal instance with specified ID.\n      responses:\n        '200':\n          description: List of history entries for given signal instance.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '404':\n          description: Signal not found.\n      security:\n      - OAuth2:\n        - SIG/ALL\n\n  /signals/v1/private/signals/{id}/pdf:\n    parameters:\n      - name: id\n        in: path\n        description: ID of signal whose PDF is to be downloaded.\n        required: true\n        schema:\n          type: integer\n    get:\n      description: Download a PDF summarizing this signals.\n      responses:\n        '200':\n          description: PDF downloaded successfully.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden, user not authorized to request signal PDF.\n        '404':\n          description: Signal not found.\n      security:\n      - OAuth2:\n        - SIG/ALL\n\n  /signals/v1/private/signals/{id}/attachments/:\n    parameters:\n      - name: id\n        in: path\n        description: ID of signal whose attachments are requested.\n        required: true\n        schema:\n          type: integer\n    get:\n      description: A list of attachments that belong to the Signal\n      responses:\n        '200':\n          description: A list of attachments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PrivateSignalAttachmentsList'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden, user not authorized to request signal attachments.\n        '404':\n          description: Signal not found.\n    post:\n      description: Create an attachment for a Signal\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        '201':\n          description: Created an attachment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PrivateSignalAttachmentDetail'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden, user not authorized to request signal attachments.\n        '404':\n          description: Signal not found.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/signals/{id}/attachments/{attachment_id}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of signal whose attachments are requested.\n        required: true\n        schema:\n          type: integer\n      - name: attachment_id\n        in: path\n        description: ID the requested attachment\n        required: true\n        schema:\n          type: integer\n    get:\n      description: A list of attachments that belong to the Signal\n      responses:\n        '200':\n          description: A list of attachments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PrivateSignalAttachmentDetail'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden, user not authorized to request signal attachments.\n        '404':\n          description: Signal not found.\n\n  /signals/v1/private/signals/{id}/context/:\n    parameters:\n      - name: id\n        in: path\n        description: ID of the signal\n        required: true\n        schema:\n          type: integer\n    get:\n      description: Returns an overview of context related information about a Signal\n      responses:\n        '200':\n          description: Context overview\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateContextResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden, user not authorized to request signal context.\n        '404':\n          description: The endpoint is not available OR no context is available for the given signal\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/signals/{id}/context/reporter/:\n    parameters:\n      - name: id\n        in: path\n        description: ID of the signal\n        required: true\n        schema:\n          type: integer\n    get:\n      description: A detailed overview of context related to the reporter (based on the email address of a reporter)\n      responses:\n        '200':\n          description: Context overview\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateContextReporterResponseList'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden, user not authorized to request signal reporter context.\n        '404':\n          description: The endpoint is not available OR no context is available for the given signal\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/signals/{id}/context/near/geography/:\n    parameters:\n      - name: id\n        in: path\n        description: ID of the signal\n        required: true\n        schema:\n          type: integer\n    get:\n      description: A context overview of Signals near the selected Signal\n      responses:\n        '200':\n          description: Context overview\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateContextNearGeographyResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden, user not authorized to request signal geography context.\n        '404':\n          description: The endpoint is not available OR no context is available for the given signal\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/signals/{id}/email/preview/:\n    parameters:\n      - name: id\n        in: path\n        description: ID of the signal\n        required: true\n        schema:\n          type: integer\n    post:\n      description: A email preview for the given status\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                status:\n                  description: The status a email preview is requested for\n                  example: ingepland\n                text:\n                  description: The status text that must appear in the email preview\n                  type: string\n      responses:\n        '200':\n          description: Email preview (subject and html body)\n          content:\n            application/json:\n              schema:\n                description: JSON serialization of the email preview subject and html body\n                type: object\n                properties:\n                  subject:\n                    type: string\n                    description: The subject of the email\n                    example: Uw melding SIA-123456789\n                  html:\n                    type: string\n                    description: The rendered body (HTML) of the email\n                    example: \u003c!DOCTYPE html\u003e\u003chtml lang=\"nl\"\u003e\u003chead\u003e\u003cmeta charset=\"UTF-8\"\u003e\u003ctitle\u003eUw melding SIA-123456789\u003c/title\u003e\u003c/head\u003e\u003cbody\u003e\u003cp\u003eGeachte melder,\u003c/p\u003e\u003cp\u003eLorem ipsum...\u003c/p\u003e\u003cp\u003eMet vriendelijke groet,\u003c/p\u003e\u003cp\u003eGemeente Amsterdam\u003c/p\u003e\u003c/body\u003e\u003c/html\u003e\n        '400':\n          description: Bad request\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden, user not authorized to request signal geography context.\n        '404':\n          description: No email preview is found for the given status transition on the selected Signal\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n\n  /signals/v1/public/signals:\n    post:\n      description: Create a new Signal/melding.\n      requestBody:\n        description: Serialized signal data.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/V1PublicSignalPost'\n      responses:\n        '201':\n          description: New signal created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PublicSignalDetailGet'\n        '400':\n          description: Bad request, see response body for the reason.\n\n  /signals/v1/public/signals/{signal_id}:\n    get:\n      description: Public data about a Signal/melding.\n      parameters:\n        - name: signal_id\n          in: path\n          description: Public identifier for a Signal/melding\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: Public data about a Signal/melding.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PublicSignalDetailGet'\n        '404':\n          description: Signal not found\n\n  /signals/v1/public/signals/{signal_id}/attachments/:\n    parameters:\n      - name: signal_id\n        in: path\n        description: Public identifier for a Signal/melding\n        required: true\n        schema:\n          type: string\n          format: uuid\n    post:\n      description: Create an attachment for a Signal\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        '201':\n          description: Created an attachment\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PrivateSignalAttachmentDetail'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden, user not authorized to request signal attachments.\n        '404':\n          description: Signal not found.\n\n  /signals/v1/public/signals/geography:\n    get:\n      description: Public signals geography endpoint, returns GEOjson\n      parameters:\n        - name: bbox\n          description: A bounding box to filter. Format is min_lon, min_lat, max_lon, max_lat\n          in: query\n          required: True\n          schema:\n            type: string\n            example: 4.877157,52.357204,4.929686,52.385239\n        - name: maincategory_slug\n          description: Filter returns only signals with matching main category\n            slug.\n          in: query\n          required: true\n          schema:\n            type: string\n            example: afval\n        - name: category_slug\n          description: \u003e-\n            Filter returns only signals with matching sub category slug.\n          in: query\n          required: true\n          schema:\n            type: string\n            example: overig-afval\n        - name: group_by\n          description: \u003e-\n            Group the results by (at this moment the only option is 'category')\n          in: query\n          required: false\n          schema:\n            type: string\n            example: category\n\n      responses:\n        '200':\n          description: List of signals\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PublicSignalGeographyGEOJson'\n        '400':\n          description: Required query parameters not provided\n          content:\n            application/json:\n              schema:\n                description: JSON data describing the public category response\n                type: object\n                properties:\n                  {name_of_query_param}:\n                    type: array\n                    items:\n                      type: string\n                example: {'bbox': ['Dit veld is vereist.']}\n\n  /signals/v1/public/terms/categories:\n    get:\n      description: Categories known to SIA. **May be changed**\n      responses:\n        '200':\n          description: List of all main categories with embedded sub categories.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/publicCategoryListResponse'\n\n  /signals/v1/public/terms/categories/{main_slug}:\n    get:\n      description: \u003e-\n        Information about a specific main category and its sub categories.\n        **May be changed**\n      responses:\n        '200':\n          description: Detailed information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/publicCategoryParentResponse'\n      parameters:\n        - name: main_slug\n          in: path\n          description: Slug that identifies the main category.\n          required: true\n          schema:\n            type: string\n\n  /signals/v1/public/terms/categories/{main_slug}/sub_categories/{sub_slug}:\n    get:\n      description: Information about a specific sub category.  **May be changed**\n      responses:\n        '200':\n          description: Detailed information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/publicCategoryChildResponse'\n      parameters:\n        - name: main_slug\n          in: path\n          description: Slug that identifies the main category.\n          required: true\n          schema:\n            type: string\n        - name: sub_slug\n          in: path\n          description: Slug that identifies the sub category.\n          required: true\n          schema:\n            type: string\n\n  /signals/user/auth/me:\n    get:\n      description: Information about the currently authenticated user.\n      responses:\n        '200':\n          description: User information including permissions.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n      security:\n        - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/signals/category/removed:\n    get:\n      description: \u003e-\n        Signals that dropped from a certain category are listed here.\n        **URL may be changed**\n      parameters:\n        - name: after\n          in: query\n          description: Timestamp after which dropped signals are to found.\n          schema:\n            type: string\n        - name: before\n          in: query\n          description: Timestamp before which dropped signals are to found.\n          schema:\n            type: string\n        - name: category_slug\n          in: query\n          description: Slug for the category.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of droppen Signal instances.\n      security:\n      - OAuth2:\n        - SIG/ALL\n\n  /signals/v1/private/signals/promoted/parent:\n    get:\n      description: \u003e-\n        Signals that became a Parent are listed here.\n        **URL may be changed**\n      parameters:\n        - name: after\n          in: query\n          description: Timestamp after which promoted signals are to be found.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of Signal ID's.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/categories/:\n    get:\n      description: List of all categories available in the system\n      responses:\n        '200':\n          description: List of all categories available in the system\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateCategoryListResponse'\n      security:\n        - OAuth2:\n          - SIG/ALL\n    post:\n      description: Creation of categories is not allowed\n      responses:\n        '405':\n          description: Method not allowed\n      security:\n        - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/categories/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of category\n        required: true\n        schema:\n          type: integer\n    get:\n      description: Retrieves the category matching the given id\n      responses:\n        '200':\n          description: Details of the category matching the given id\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateCategoryResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token\n        '404':\n          description: Category not found\n      security:\n        - OAuth2:\n          - SIG/ALL\n    patch:\n      description: \u003e-\n        Will update the following items on a category\n          * name\n          * is_active\n          * description\n          * slo (A new slo will be added to the sla list)\n          * public_name\n          * is_public_accessible\n      responses:\n        '200':\n          description: Changes are made, returns the current state of the category\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateCategoryResponse'\n        '400':\n          description: \u003e-\n            Bad request.\n        '401':\n          description: Not authenticated, may be caused by expired token\n        '404':\n          description: Category not found\n      requestBody:\n        description: JSON data to update signal\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/privateCategoryPatch'\n      security:\n        - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/terms/categories/{main_slug}/status-message-templates/:\n    parameters:\n      - name: main_slug\n        in: path\n        description: Slug that identifies the main category.\n        required: true\n        schema:\n          type: string\n    get:\n      description: List of all status message templates for the selected category per state\n      responses:\n        '200':\n          description: List of all categories available in the system\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesResponse'\n      security:\n        - OAuth2:\n          - SIG/ALL\n    post:\n      description: Create/Update all status message templates for the selected category per state\n      requestBody:\n        description: Serialized new user data.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesRequest'\n      responses:\n        '201':\n          description: Status message templates created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesResponse'\n      security:\n        - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/terms/categories/{main_slug}/sub_categories/{sub_slug}/status-message-templates/:\n    parameters:\n      - name: main_slug\n        in: path\n        description: Slug that identifies the main category.\n        required: true\n        schema:\n          type: string\n      - name: sub_slug\n        in: path\n        description: Slug that identifies the sub category.\n        required: true\n        schema:\n          type: string\n    get:\n      description: List of all status message templates for the selected category per state\n      responses:\n        '200':\n          description: List of all categories available in the system\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesResponse'\n      security:\n        - OAuth2:\n          - SIG/ALL\n    post:\n      description: Create/Update all status message templates for the selected category per state\n      requestBody:\n        description: Serialized new user data.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesRequest'\n      responses:\n        '201':\n          description: Status message templates created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesResponse'\n      security:\n        - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/csv:\n    get:\n      description: Retrieve datawarehouse csv dump as zip file if authorised (requires reporting permission)\n      responses:\n        '200':\n          description: zip file containing csv files\n        '401':\n          description: Not authenticated, may be caused by expired token\n        '403':\n          description: Not authorized to access this endpoint.\n        '404':\n          description: If no csv was generated\n      security:\n        - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/users/:\n    get:\n      description: Retrieve list of all users.\n      parameters:\n        - name: \"username\"\n          in: query\n          description: Filter by username, allows partial matches\n          schema:\n            type: string\n          required: false\n        - name: \"is_active\"\n          in: query\n          description: Filter active (true) and inactive (false).\n          schema:\n            type: string\n        - name: \"role\"\n          in: query\n          description: Filter users by role, accepts one or more role names.\n          schema:\n            type: string\n        - name: \"profile_department_code\"\n          in: query\n          description: Filter users by department, accepts one or more department codes.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of all users.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateUserListResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Not authorized to access this endpoint.\n      security:\n        - OAuth2:\n          - SIG/ALL\n    post:\n      description: Create a new user.\n      requestBody:\n        description: Serialized new user data.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/userCreate'\n      responses:\n        '201':\n          description: JSON serialization of detailed newly created SIA user data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateUserDetailResponse'\n        '400':\n          description: Bad request. Posted new user data did not validate.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/users/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of user\n        required: true\n        schema:\n          type: integer\n    get:\n      description: Retrieve user by id.\n      responses:\n        '200':\n          description: JSON serialization of detailed SIA user data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateUserDetailResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n          - SIG/ALL\n    patch:\n      description: Partial update of user data.\n      responses:\n        '200':\n          description: User data successfully updated.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/me/:\n    get:\n      description: Retrieve loggedin user data.\n      responses:\n        '200':\n          description: JSON serialization of detailed SIA loggedin user data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateUserDetailResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/me/filters/:\n    get:\n      description: Retrieve stored signal filters for the loggedin User\n      responses:\n        '200':\n          description: JSON serialization of the stored Signal filters\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateStoredSignalFilterResponseList'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n            - SIG/ALL\n    post:\n      description: Creation of a stored Signal filter.\n      requestBody:\n        description: JSON serialized stored Signal filter data.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/privateStoredSignalFilterRequest'\n      responses:\n        '201':\n          description: stored Signal filter successfully created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateStoredSignalFilterResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/me/filters/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of stored Signal filter\n        required: true\n        schema:\n          type: integer\n    get:\n      description: Retrieve stored Signal filter\n      responses:\n        '200':\n          description: JSON serialization of the stored Signal filter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateStoredSignalFilterResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n            - SIG/ALL\n    patch:\n      description: Partial update of the stored Signal filter.\n      requestBody:\n        description: JSON serialized stored Signal filter data.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/privateStoredSignalFilterRequest'\n      responses:\n        '200':\n          description: stored Signal filter successfully updated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateStoredSignalFilterResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n            - SIG/ALL\n    delete:\n      description: Delete a stored Signal filter.\n      responses:\n        '410':\n          description: stored Signal filter successfully deleted.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/departments/:\n    get:\n      description: Retrieve list of departments.\n      parameters:\n        - name: \"can_direct\"\n          in: query\n          description: \u003e-\n            Filter by can_direct property of a department, `true` if a department\n            has the ability to direct a parent Signal/hoofdmelding else `false`.\n          schema:\n            type: string\n          required: false\n      responses:\n        '200':\n          description: List of departments.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateDepartmentListResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n          - SIG/ALL\n    post:\n      description: Create a department.\n      requestBody:\n        description: JSON serialized new department data.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/departmentCreate'\n      responses:\n        '200':\n          description: Detailed department data after creation.\n        '400':\n          description: Bad request.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/departments/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of department\n        required: true\n        schema:\n          type: integer\n    get:\n      description: Retrieve detailed data for a department.\n      responses:\n        '200':\n          description: Detailed department data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateDepartmentDetailResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n        '404':\n          description: Not Found.\n      security:\n      - OAuth2:\n          - SIG/ALL\n    patch:\n      description: (Partial) update of department data.\n      requestBody:\n        description: JSON serialized new department data.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/departmentPatch'\n      responses:\n        '200':\n          description: Detailed department data after successful update.\n        '400':\n          description: Bad request.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n        '404':\n          description: Not Found.\n      security:\n      - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/expressions/:\n    get:\n      description: (EXPERIMENTAL) An expression is a simple piece of code such as 'a \u003e 1'. It can be used as a domain specific language for condition evaluation. We could evaluate an condition such as 'location in area' and use the result to perform actions. The expressions are configurable and don't require a developer to add logic. Currently it is being used to dynamically filter signal attributes. But it is generic and can be used on arbitrary objects.\n      responses:\n        '200':\n          description: List of expressions.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n          - SIG/ALL\n    post:\n      description: Create a expression.\n      requestBody:\n        description: JSON serialized new expression data.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/expressionCreate'\n      responses:\n        '200':\n          description: Detailed expression data after creation.\n        '400':\n          description: Bad request.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n      security:\n        - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/expressions/context:\n    parameters:\n      - name: type\n        in: query\n        description: A context is used to categorized expressions (similar to a type). We could have 'routing' and 'email' contexes. The 'routing' context is used for signal routing for example.\n        required: true\n        schema:\n          type: string\n    get:\n      description: Retrieve collection of available expression identifiers/types for a context.\n      responses:\n        '200':\n          description: Detailed expression context data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1PrivateExpressionContextGet'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n        '404':\n          description: Not Found.\n      security:\n      - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/expressions/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: ID of expression\n        required: true\n        schema:\n          type: integer\n    get:\n      description: Retrieve detailed data for a expression.\n      responses:\n        '200':\n          description: Detailed department data.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n        '404':\n          description: Not Found.\n      security:\n      - OAuth2:\n          - SIG/ALL\n    patch:\n      description: (Partial) update of expression data.\n      requestBody:\n        description: JSON serialized new expression data.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/expressionPatch'\n      responses:\n        '200':\n          description: Detailed expression data after successful update.\n        '400':\n          description: Bad request.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n        '404':\n          description: Not Found.\n      security:\n      - OAuth2:\n          - SIG/ALL\n    delete:\n      description: delete expression.\n      responses:\n        '204':\n          description: successful delete.\n        '400':\n          description: Bad request.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n        '404':\n          description: Not Found.\n      security:\n      - OAuth2:\n          - SIG/ALL\n\n  /signals/v1/private/areas/geography/:\n    get:\n      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed\n      parameters:\n        - name: \"code\"\n          in: query\n          description: \u003e-\n            Filter returns only areas with a certain code. Can be used to filter on multiple type\n            codes. For example the code for stadsdeel centrum van amsterdam \"03630000000018\"\n          schema:\n            type: string\n            format: string\n          required: false\n        - name: \"type_code\"\n          in: query\n          description: \u003e-\n            Filter returns only areas of a certain type. Can be used to filter on multiple type\n            codes. For example a \"buurt\" or a \"stadsdeel\" or combination of these codes.\n          schema:\n            type: string\n            format: string\n          required: false\n      responses:\n        '200':\n          description: List of area data GEOjson\n          headers:\n            X-Total-Count:\n              schema:\n                type: integer\n                example: 1\n              description: The total areas in the database\n            Links:\n              schema:\n                type: string\n                example: \u003chttp://127.0.0.1:8000/signals/v1/private/areas/?page=2\u003e; rel=\"self\",\u003chttp://127.0.0.1:8000/signals/v1/private/areas/?page=3\u003e; rel=\"next\",\u003chttp://127.0.0.1:8000/signals/v1/private/areas/\u003e; rel=\"prev\"\n              description: The pagination links for GEOjson list endpoints\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1AreasGEOJsonList'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n        '404':\n          description: Not Found.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/public/areas/geography/:\n    get:\n      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed\n      parameters:\n        - name: \"code\"\n          in: query\n          description: \u003e-\n            Filter returns only areas with a certain code. Can be used to filter on multiple type\n            codes. For example the code for stadsdeel centrum van amsterdam \"03630000000018\"\n          schema:\n            type: string\n            format: string\n          required: false\n        - name: \"type_code\"\n          in: query\n          description: \u003e-\n            Filter returns only areas of a certain type. Can be used to filter on multiple type\n            codes. For example a \"buurt\" or a \"stadsdeel\" or combination of these codes.\n          schema:\n            type: string\n            format: string\n          required: false\n      responses:\n        '200':\n          description: List of area data GEOjson\n          headers:\n            X-Total-Count:\n              schema:\n                type: integer\n                example: 1\n              description: The total areas in the database\n            Links:\n              schema:\n                type: string\n                example: \u003chttp://127.0.0.1:8000/signals/v1/private/areas/?page=2\u003e; rel=\"self\",\u003chttp://127.0.0.1:8000/signals/v1/private/areas/?page=3\u003e; rel=\"next\",\u003chttp://127.0.0.1:8000/signals/v1/private/areas/\u003e; rel=\"prev\"\n              description: The pagination links for GEOjson list endpoints\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1AreasGEOJsonList'\n        '404':\n          description: Not Found.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/areas/:\n    get:\n      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed\n      parameters:\n        - name: \"code\"\n          in: query\n          description: \u003e-\n            Filter returns only areas with a certain code. Can be used to filter on multiple type\n            codes. For example the code for stadsdeel centrum van amsterdam \"03630000000018\"\n          schema:\n            type: string\n            format: string\n          required: false\n        - name: \"type_code\"\n          in: query\n          description: \u003e-\n            Filter returns only areas of a certain type. Can be used to filter on multiple type\n            codes. For example a \"buurt\" or a \"stadsdeel\" or combination of these codes.\n          schema:\n            type: string\n            format: string\n          required: false\n      responses:\n        '200':\n          description: List of area data json\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1AreasJsonList'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Forbidden.\n        '404':\n          description: Not Found.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/public/areas/:\n    get:\n      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed\n      parameters:\n        - name: \"code\"\n          in: query\n          description: \u003e-\n            Filter returns only areas with a certain code. Can be used to filter on multiple type\n            codes. For example the code for stadsdeel centrum van amsterdam \"03630000000018\"\n          schema:\n            type: string\n            format: string\n          required: false\n        - name: \"type_code\"\n          in: query\n          description: \u003e-\n            Filter returns only areas of a certain type. Can be used to filter on multiple type\n            codes. For example a \"buurt\" or a \"stadsdeel\" or combination of these codes.\n          schema:\n            type: string\n            format: string\n          required: false\n      responses:\n        '200':\n          description: List of area data json\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1AreasJsonList'\n        '404':\n          description: Not Found.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/public/questions/:\n    get:\n      description: Retrieve a list of questions in the database. Experimental, the content of the response can still be changed\n      parameters:\n        - name: main_slug\n          in: query\n          description: Slug that identifies the main category. Only questions related to the main category is returned if only the main_slug is provided.\n          required: true\n          schema:\n            type: string\n        - name: sub_slug\n          in: query\n          description: Slug that identifies the sub category. Questions are returned for main_slug and sub_slug (sorted on main_slug.order, sub_slug.order)\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of questions data json\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1QuestionsJsonList'\n        '404':\n          description: Not Found.\n\n  /signals/v1/private/sources/:\n    get:\n      description: Retrieve a list of signal sources.\n      parameters:\n        - name: \"is_active\"\n          in: query\n          description: Filter by \"is_active\" flag\n          schema:\n            type: boolean\n          required: false\n        - name: \"can_be_selected\"\n          in: query\n          description: Filter by \"can_be_selected\" flag\n          schema:\n            type: boolean\n          required: false\n      responses:\n        '200':\n          description: List of signal sources\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/V1SourceList'\n        '404':\n          description: Not Found.\n\n  /signals/v1/private/autocomplete/usernames/:\n    get:\n      description: Retrieve list of usernames filtered on username.\n      parameters:\n        - name: \"username\"\n          in: query\n          description: Filter by username, allows partial matches (must be at least 3 characters long)\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: List of usernames.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateUsernameListResponse'\n        '400':\n           description: Filter username not provided or filter username too short.\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Not authorized to access this endpoint.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/reports/signals/open/:\n    get:\n      description: \u003e-\n        Selects all Signals in a \"open\" state that have surpassed by a factor 3 of the deadline.\n\n        A Signal is considered to be in a \"open\" state if the status is NOT in one of the following states:\n          - AFGEHANDELD\n          - GEANNULEERD\n          - GESPLITST\n\n        Returns a total count of these Signals + a count per category.\n      parameters:\n        - name: \"start\"\n          in: query\n          description: Filters Signals created after this datetime\n          schema:\n            type: string\n          required: false\n        - name: \"end\"\n          in: query\n          description: Filters Signals created before this datetime\n          schema:\n            type: string\n          required: false\n      responses:\n        '200':\n          description: Returns a total count of Signals in a \"open\" state + a count per category\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateReportResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Not authorized to access this endpoint.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\n  /signals/v1/private/reports/signals/reopen-requested/:\n    get:\n      description: Returns a total count of Signals in the \"reopen requested\" state + a count per category\n      parameters:\n        - name: \"start\"\n          in: query\n          description: Filters Signals put in the  \"reopen requested\" state after this datetime\n          schema:\n            type: string\n          required: false\n        - name: \"end\"\n          in: query\n          description: Filters Signals put in the  \"reopen requested\" state before this datetime\n          schema:\n            type: string\n          required: false\n      responses:\n        '200':\n          description: Returns a total count of Signals in the \"reopen requested\" state + a count per category\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/privateReportResponse'\n        '401':\n          description: Not authenticated, may be caused by expired token.\n        '403':\n          description: Not authorized to access this endpoint.\n      security:\n        - OAuth2:\n            - SIG/ALL\n\ncomponents:\n  schemas:\n    StatusStateChoices:\n      description: Status string (predefined).\n      type: string\n      enum:\n        - m\n        - i\n        - b\n        - h\n        - o\n        - a\n        - s\n        - reopened\n        - ingepland\n        - ready to send\n        - sent\n        - send failed\n        - done external\n\n    PriorityPriorityChoices:\n      type: string\n      enum:\n        - normal\n        - high\n        - low\n\n    TypeCodeChoices:\n      type: string\n      enum:\n        - SIG\n        - REQ\n        - QUE\n        - COM\n        - MAI\n      example: 'SIG'\n\n    _NestedLocationRequestData:\n      description: JSON Data\n      type: object\n      properties:\n        stadsdeel:\n          type: string\n        buurt_code:\n          type: string\n        address:\n          type: object\n          properties:\n            openbare_ruimte:\n              type: string\n            huisnummer:\n              type: number\n            huisletter:\n              type: string\n            huisnummer_toevoeging:\n              type: number\n            postcode:\n              type: string\n            woonplaats:\n              type: string\n        geometrie:\n          type: string\n          properties:\n            'type':\n              type: string\n              enum:\n                - Point\n            coordinates:\n              type: array\n              items:\n                type: number\n                minItems: 2\n                maxItems: 3\n          required:\n            - coordinates\n            - 'type'\n        extra_properties:\n          type: string\n\n    _NestedLocationResponseData:\n      description: JSON Data\n      type: object\n      properties:\n        stadsdeel:\n          type: string\n          example: \"E\"\n        buurt_code:\n          type: string\n          example: \"E17a\"\n        address:\n          type: object\n          properties:\n            postcode:\n              type: string\n              example: \"1053KP\"\n            huisletter:\n              type: string\n              nullable: true\n              example: \"\"\n            huisnummer:\n              type: string\n              example: \"157\"\n            woonplaats:\n              type: string\n              example: \"Amsterdam\"\n            openbare_ruimte:\n              type: string\n              example: \"Bilderdijkstraat\"\n            huisnummer_toevoeging:\n              type: string\n              example: \"3\"\n        address_text:\n          type: string\n          example: \"Bilderdijkstraat 157-3 1053KP Amsterdam\"\n        geometrie:\n          type: object\n          properties:\n            'type':\n              type: string\n              example: \"Point\"\n            coordinates:\n              type: array\n              items:\n                type: number\n                minItems: 2\n                maxItems: 3\n              example: [4.87170696258545, 52.36805320057393]\n        extra_properties:\n          type: object\n          example: {}\n\n    _NestedStatusRequestData:\n      description: JSON Data\n      type: object\n      properties:\n        text:\n          type: string\n        state:\n          $ref: '#/components/schemas/StatusStateChoices'\n        target_api:\n          type: string\n          nullable: true\n          enum:\n            - sigmax\n            - null\n        extra_properties:\n          type: string\n\n    _NestedStatusResponseData:\n      description: JSON Data\n      type: object\n      properties:\n        text:\n          nullable: true\n          type: string\n          example: null\n        state:\n          $ref: '#/components/schemas/StatusStateChoices'\n        target_api:\n          type: string\n          nullable: true\n          example: 'sigmax'\n        extra_properties:\n          type: object\n          example: {}\n        created_by:\n          type: string\n          nullable: true\n          example: 'test@test.com'\n        created_at:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n\n    _NestedCategoryRequestData:\n      description: JSON Data\n      type: object\n      properties:\n        sub_category:\n          type: string\n          format: uri\n          example: https://api.data.amsterdam.nl/signals/v1/public/terms/categories/overig/sub_categories/overig\n        text:\n          type: string\n          description: Message to log with category update, will show in logs.\n\n    _NestedCategoryResponseData:\n      description: JSON Data\n      type: object\n      properties:\n        sub:\n          type: string\n          example: \"Overlast terrassen\"\n        sub_slug:\n          type: string\n          example: \"overlast-terrassen\"\n        main:\n          type: string\n          example: \"Overlast Bedrijven en Horeca\"\n        main_slug:\n          type: string\n          example: \"overlast-bedrijven-en-horeca\"\n        category_url:\n          type: string\n          format: uri\n          example: \"http://127.0.0.1:8000/signals/v1/public/terms/categories/overlast-bedrijven-en-horeca/sub_categories/overlast-terrassen\"\n        departments:\n          type: string\n          example: \"VTH\"\n        created_by:\n          type: string\n          nullable: true\n          example: null\n        text:\n          type: string\n          nullable: true\n          example: null\n        deadline:\n          description: Deadline if available. Note\n            this field may be moved based on user feedback.\n          type: string\n          format: date-time\n          nullable: true\n        deadline_factor_3:\n          description: Deadline delayed by a factor three if available. Note\n            this field may be moved based on user feedback.\n          type: string\n          format: date-time\n          nullable: true\n\n    _NestedReporterRequestData:\n      description: JSON Data\n      type: object\n      properties:\n        email:\n          type: string\n          description: Email address of reporter.\n          format: email\n        phone:\n          type: string\n          description: Phone number of reporter.\n        sharing_allowed:\n          type: boolean\n          description: Reporter allows their contact information to be shared (true) or not (false).\n\n    _NestedReporterResponseData:\n      description: JSON Data\n      type: object\n      properties:\n        email:\n          type: string\n          nullable: true\n          example: 'test@test.com'\n        phone:\n          type: string\n          nullable: true\n          example: ''\n        sharing_allowed:\n          type: boolean\n          description: Reporter allows their contact information to be shared (true) or not (false).\n          example: false\n\n    _NestedPriorityRequestData:\n      description: JSON Data\n      type: object\n      properties:\n        priority:\n          $ref: '#/components/schemas/PriorityPriorityChoices'\n\n    _NestedPriorityResponseData:\n      description: JSON Data\n      type: object\n      properties:\n        priority:\n          $ref: '#/components/schemas/PriorityPriorityChoices'\n        created_by:\n          type: string\n          nullable: true\n          example: 'test@test.com'\n\n    _NestedNoteRequestData:\n      description: JSON Data\n      type: object\n      properties:\n        text:\n          type: string\n\n    _NestedDirectingDepartmentRequestData:\n      description: JSON Data\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n\n    _NestedNoteResponseData:\n      description: JSON Data\n      type: object\n      properties:\n        text:\n          type: string\n          example: 'De statusupdate is per e-mail verzonden aan de melder'\n        created_by:\n          type: string\n          nullable: true\n          example: 'test@test.com'\n\n    _NestedTypeRequestData:\n      description: JSON Data\n      type: object\n      properties:\n        code:\n          $ref: '#/components/schemas/TypeCodeChoices'\n\n    _NestedTypeResponseData:\n      description: JSON Data\n      type: object\n      properties:\n        code:\n          $ref: '#/components/schemas/TypeCodeChoices'\n        created_at:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        created_by:\n          type: string\n          nullable: true\n          example: 'test@test.com'\n\n    _NestedDirectingDepartmentResponseData:\n      description: JSON Data of a directing department, can only be set on a parent Signal\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n        code:\n          type: string\n          example: 'ASC'\n        name:\n          type: string\n          example: 'Actie service centrum'\n        is_intern:\n          type: boolean\n          example: false\n\n    _NestedRoutingDepartmentResponseData:\n      description: JSON Data of a routing department, can only be set on a parent Signal\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 1\n        code:\n          type: string\n          example: 'ASC'\n        name:\n          type: string\n          example: 'Actie service centrum'\n        is_intern:\n          type: boolean\n          example: false\n\n    V1PrivateSignalPostBulk:\n      description: JSON data for creation of Signals/meldingen in bulk (private version). When creating children all items in the list must belong to the same parent. Can also be used to create \"normal\" Signals/meldingen (Signals/meldingen withouth a parent link).\n      type: array\n      items:\n        $ref: '#/components/schemas/V1PrivateSignalPost'\n      minItems: 1\n      maxItems: 10\n\n    V1PrivateSignalPost:\n      description: JSON data for creation of Signal/melding (private version).\n      type: object\n      properties:\n        source:\n          type: string\n          example: 'online'\n        text:\n          type: string\n          description: The complaint\n          example: 'Er ligt vuilnis midden op straat'\n        text_extra:\n          type: string\n          nullable: true\n          example: 'Extra tekst kan hier worden meegegeven, dit veld is niet verplicht'\n        location:\n          $ref: '#/components/schemas/_NestedLocationRequestData'\n        reporter:\n          $ref: '#/components/schemas/_NestedReporterRequestData'\n        category:\n          $ref: '#/components/schemas/_NestedCategoryRequestData'\n        priority:\n          $ref: '#/components/schemas/_NestedPriorityRequestData'\n        'type':\n          $ref: '#/components/schemas/_NestedTypeRequestData'\n        incident_date_start:\n          type: string\n          format: date-time\n          example: '2020-01-01T00:00:00+00:00'\n        incident_date_end:\n          type: string\n          format: date-time\n          nullable: true\n          example: '2020-01-01T00:00:00+00:00'\n        operational_date:\n          type: string\n          format: date-time\n          nullable: true\n          example: '2020-01-01T00:00:00+00:00'\n        extra_properties:\n          type: object\n          example: {}\n        parent:\n          description: Makes the given Signal a parent of the newly created (child) Signal\n          type: integer\n        directing_departments:\n          description: A list of directing departments that can be set on a parent Signal. For each object in the list only the id is required.\n          type: array\n          items:\n            $ref: '#/components/schemas/_NestedDirectingDepartmentRequestData'\n          minItems: 0\n        attachments:\n          type: array\n          items:\n            type: string\n            example: 'http://127.0.0.1:8000/signals/v1/private/signals/123/attachments/456'\n          minItems: 0\n        session:\n          description: The UUID of a Session containing the answers of a specific Questionnaire\n          type: string\n          pattern: '^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$'\n          example: '00000000-0000-0000-0000-000000000000'\n          nullable: true\n      required:\n        - text\n        - location\n        - reporter\n        - category\n        - incident_date_start\n\n    V1PublicSignalPost:\n      description: JSON data for creation of Signal/melding (public version).\n      type: object\n      properties:\n        source:\n          description: This field is optional, if not given the source will be set to \"online\". Only Sources that are defined public can be used.\n          type: string\n          example: online\n        text:\n          type: string\n          description: The complaint\n          example: Er ligt vuilnis op straat.\n        text_extra:\n          type: string\n          nullable: true\n        location:\n          $ref: '#/components/schemas/_NestedLocationRequestData'\n        category:\n          $ref: '#/components/schemas/_NestedCategoryRequestData'\n        reporter:\n          $ref: '#/components/schemas/_NestedReporterRequestData'\n        incident_date_start:\n          description: Start of nuisance or problem.\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        incident_date_end:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n          nullable: true\n        extra_properties:\n          type: array\n          items:\n            type: object\n          example: []\n        session:\n          description: The UUID of a Session containing the answers of a specific Questionnaire\n          type: string\n          pattern: '^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$'\n          example: '00000000-0000-0000-0000-000000000000'\n          nullable: true\n      required:\n        - text\n        - location\n        - incident_date_start\n\n    V1PrivateSignalPatch:\n      type: object\n      properties:\n        location:\n          $ref: '#/components/schemas/_NestedLocationRequestData'\n        status:\n          $ref: '#/components/schemas/_NestedStatusRequestData'\n        category:\n          $ref: '#/components/schemas/_NestedCategoryRequestData'\n        priority:\n          $ref: '#/components/schemas/_NestedPriorityRequestData'\n        'type':\n          $ref: '#/components/schemas/_NestedTypeRequestData'\n        notes:\n          $ref: '#/components/schemas/_NestedNoteRequestData'\n        extra_properties:\n          type: object\n          example: {}\n        directing_departments:\n          description: A list of directing departments that can be set on a parent Signal. For each object in the list only the id is required.\n          type: array\n          items:\n            $ref: '#/components/schemas/_NestedDirectingDepartmentRequestData'\n          minItems: 0\n\n    V1PrivateSignalListGet:\n      description: JSON serialization of paginated list of signals\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of current page\n                  format: uri\n                  example: http://127.0.0.1:8000/signals/v1/private/signals/\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the next page\n                  format: uri\n                  nullable: true\n                  example: http://127.0.0.1:8000/signals/v1/private/signals/?page=2\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the previous page\n                  format: uri\n                  nullable: true\n                  example: null\n        count:\n          type: integer\n          description: Total count of results for the request\n          example: 10\n        results:\n          type: array\n          description: A list of signals, paginated\n          items:\n            $ref: '#/components/schemas/V1PrivateSignalDetailList'\n\n    V1PrivateSignalDetailList:\n      description: Detailed JSON serialization of SIA Signals/meldingen.\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            _link:\n              description: HAL JSON links\n              type: object\n              properties:\n                self:\n                  type: object\n                  properties:\n                    href:\n                      description: URI of this user in API\n                      type: string\n                      format: uri\n                      example: \"http://127.0.0.1:8000/signals/v1/private/signals/1\"\n        _display:\n          description: Textual representation of signal for display purposes.\n          type: string\n          example: 1 - m - E17a - 2020-01-01 00:00:00.000000+00:00\n        category:\n          $ref: '#/components/schemas/_NestedCategoryResponseData'\n        id:\n          description: ID of the signal\n          type: integer\n          example: 1\n        signal_id:\n          description: Public identifier for SIA signal, use on public detail endpoint.\n          type: string\n          format: uuid\n        has_attachments:\n          type: boolean\n          example: false\n        location:\n          $ref: '#/components/schemas/_NestedLocationResponseData'\n        status:\n          $ref: '#/components/schemas/_NestedStatusResponseData'\n        reporter:\n          $ref: '#/components/schemas/_NestedReporterResponseData'\n        priority:\n          $ref: '#/components/schemas/_NestedPriorityResponseData'\n        notes:\n          type: array\n          items:\n            $ref: '#/components/schemas/_NestedNoteResponseData'\n          example:\n            - text: 'Automatische e-mail bij registratie van de melding is verzonden aan de melder.'\n              created_by: 'test@test.com'\n            - text: 'De statusupdate is per e-mail verzonden aan de melder'\n              created_by: 'test@test.com'\n        'type':\n          $ref: '#/components/schemas/_NestedTypeResponseData'\n        directing_departments:\n          type: array\n          items:\n            $ref: '#/components/schemas/_NestedDirectingDepartmentResponseData'\n        source:\n          type: string\n          example: Telefoon – ASC\n        text:\n          type: string\n          example: Het cafe op de hoek maakt enorme herrie\n        text_extra:\n          type: string\n          nullable: true\n          example: null\n        created_at:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        incident_date_start:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        incident_date_end:\n          type: string\n          format: date-time\n          nullable: true\n          example: \"2022-01-01T00:00:00+00:00\"\n        operational_date:\n          type: string\n          format: date-time\n          nullable: true\n          example: \"2022-01-01T00:00:00+00:00\"\n        has_parent:\n          type: boolean\n        has_children:\n          type: boolean\n        extra_properties:\n          description: \u003e-\n            The extra_properties field is used to store the additional questions and answers (questionnaire) that are filled out by a reporter.\n            This field contains valid JSON and is generated by the frontend application. The API only performs a couple of simple checks on the format of the provided JSON.\n            This leaves considerable freedom to the frontend application with regards to the actual content.\n\n            What checks the API performs can be found in the following JSON schemas:\n            - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties.json\n            - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties_streetlights.json\n          nullable: true\n        routing_departments:\n          type: array\n          items:\n            $ref: '#/components/schemas/_NestedRoutingDepartmentResponseData'\n          nullable: true\n        assigned_user_email:\n          description: The assigned user's email address\n          type: string\n          format: email\n          nullable: true\n\n    V1PrivateSignalListGetGeography:\n      description: Geography\n      type: object\n      properties:\n        'type':\n          type: string\n          example: \"FeatureCollection\"\n        features:\n          type: array\n          items:\n            type: object\n            properties:\n              'type':\n                type: string\n                example: \"Feature\"\n              geometry:\n                type: object\n                properties:\n                  'type':\n                    type: string\n                    example: \"Point\"\n                  coordinates:\n                    type: array\n                    items:\n                      type: integer\n                    minItems: 0\n                    maxItems: 2\n                    example: [4.890986949631043, 52.41875227274259]\n              'properties':\n                type: object\n                properties:\n                  id:\n                    description: The ID of the Signal\n                    type: integer\n                    example: 1\n                  created_at:\n                    type: string\n                    format: date-time\n                    example: \"2020-01-01T00:00:00+00:00\"\n\n    V1PrivateSignalDetailGetBulk:\n      description: Detailed JSON serialization of SIA Signals/meldingen when creating them in bulk.\n      type: array\n      items:\n        $ref: '#/components/schemas/V1PrivateSignalDetailGet'\n      minItems: 1\n      maxItems: 10\n\n    V1PrivateSignalDetailGet:\n      description: Detailed JSON serialization of a SIA Signal/melding.\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            curies:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The compact URI (curie) named 'sia'\n                  example: 'sia'\n                href:\n                  type: string\n                  example: \"http://127.0.0.1:8000/signals/v1/relations\"\n            _link:\n              description: HAL JSON links\n              type: object\n              properties:\n                self:\n                  type: object\n                  properties:\n                    href:\n                      description: URI of this user in API\n                      type: string\n                      format: uri\n                      example: \"http://127.0.0.1:8000/signals/v1/private/signals/123\"\n            archives:\n              type: object\n              properties:\n                href:\n                  type: string\n                  format: uri\n                  example: \"http://127.0.0.1:8000/signals/v1/private/signals/123/history\"\n            sia:attachments:\n              type: object\n              properties:\n                href:\n                  type: string\n                  format: uri\n                  example: \"http://127.0.0.1:8000/signals/v1/private/signals/123/attachments\"\n            sia:pdf:\n              type: object\n              properties:\n                href:\n                  type: string\n                  format: uri\n                  example: \"http://127.0.0.1:8000/signals/v1/private/signals/123/pdf\"\n        _display:\n          description: Textual representation of signal for display purposes.\n          type: string\n          example: 123 - m - E17a - 2020-01-01 00:00:00.000000+00:00\n        category:\n          $ref: '#/components/schemas/_NestedCategoryResponseData'\n        id:\n          description: ID of the signal\n          type: integer\n          example: 123\n        has_attachments:\n          type: boolean\n          example: false\n        location:\n          $ref: '#/components/schemas/_NestedLocationResponseData'\n        status:\n          $ref: '#/components/schemas/_NestedStatusResponseData'\n        reporter:\n          $ref: '#/components/schemas/_NestedReporterResponseData'\n        priority:\n          $ref: '#/components/schemas/_NestedPriorityResponseData'\n        notes:\n          type: array\n          items:\n            $ref: '#/components/schemas/_NestedNoteResponseData'\n          example:\n            example:\n              - text: 'Automatische e-mail bij registratie van de melding is verzonden aan de melder.'\n                created_by: 'test@test.com'\n              - text: 'De statusupdate is per e-mail verzonden aan de melder'\n                created_by: 'test@test.com'\n        'type':\n          $ref: '#/components/schemas/_NestedTypeResponseData'\n        source:\n          type: string\n          example: Telefoon – ASC\n        text:\n          type: string\n          example: Het cafe op de hoek maakt enorme herrie\n        text_extra:\n          type: string\n          nullable: true\n          example: null\n        extra_properties:\n          description: \u003e-\n            The extra_properties field is used to store the additional questions and answers (questionnaire) that are filled out by a reporter.\n            This field contains valid JSON and is generated by the frontend application. The API only performs a couple of simple checks on the format of the provided JSON.\n            This leaves considerable freedom to the frontend application with regards to the actual content.\n\n            What checks the API performs can be found in the following JSON schemas:\n            - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties.json\n            - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties_streetlights.json\n          nullable: true\n        created_at:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        incident_date_start:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        incident_date_end:\n          type: string\n          format: date-time\n          nullable: true\n          example: null\n        directing_departments:\n          type: array\n          items:\n            $ref: '#/components/schemas/_NestedDirectingDepartmentResponseData'\n        routing_departments:\n          type: array\n          items:\n            $ref: '#/components/schemas/_NestedRoutingDepartmentResponseData'\n          nullable: true\n        attachments:\n          type: array\n          items:\n            type: string\n            example: 'http://127.0.0.1:8000/signals/v1/private/signals/123/attachments/456'\n          minItems: 0\n        assigned_user_email:\n          description: The assigned user's email address\n          type: string\n          format: email\n          nullable: true\n\n    V1PublicSignalDetailGet:\n      description: Detailed JSON serialization of a SIA Signal.\n      type: object\n      properties:\n        _display:\n          description: Textual representation of signal for display purposes.\n          type: string\n          example: SIA-123\n        signal_id:\n          description: Public identifier for SIA signal, use on public detail endpoint.\n          type: string\n          format: uuid\n        created_at:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        updated_at:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        incident_date_start:\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        incident_date_end:\n          type: string\n          format: date-time\n          nullable: true\n          example: null\n        status:\n          description: Filtered status of Signal.\n          type: object\n          properties:\n            state:\n              description: Public state code either \"OPEN\" or \"CLOSED\".\n              type: string\n            state_display:\n              description: Public state display text.\n              type: string\n\n    V1PublicSignalGeographyGEOJson:\n      description: Signals in a GEOjson format\n      type: object\n      properties:\n        'type':\n          type: string\n          example: \"FeatureCollection\"\n        features:\n          type: array\n          items:\n            type: object\n            properties:\n              'type':\n                type: string\n                example: \"Feature\"\n              geometry:\n                type: object\n                properties:\n                  'type':\n                    type: string\n                    example: \"Point\"\n                  coordinates:\n                    type: array\n                    items:\n                      type: integer\n                    minItems: 0\n                    maxItems: 2\n                    example: [4.890986949631043, 52.41875227274259]\n              'properties':\n                type: object\n                properties:\n                  category:\n                    description: The category the signal is in\n                    type: object\n                    properties:\n                      name:\n                        description: The public name of the category (fallback is the internal name)\n                        example: Zwerfvuil op straat\n                  created_at:\n                    type: string\n                    format: date-time\n                    example: \"2022-02-24T00:00:00+00:00\"\n\n    userCreate:\n      description: JSON data for user creation\n      type: object\n      properties:\n        username:\n          description: Username in SIA, will be shown in interface.\n          type: string\n          format: email\n        first_name:\n          type: string\n        last_name:\n          type: string\n        is_active:\n          description: User is active (true) or inactive (false), the default is true\n          type: boolean\n        role_ids:\n          type: array\n          items:\n            description: ID of role\n            type: integer\n        profile:\n          description: User profile.\n          type: object\n          properties:\n            department_ids:\n              type: array\n              items:\n                description: ID of department to which the new user belongs.\n                type: integer\n            note:\n              description: Note on this new user.\n              type: string\n      required:\n        - username\n\n    userPatch:\n      description: JSON data for user update\n      type: object\n      properties:\n        first_name:\n          type: string\n        last_name:\n          type: string\n        is_active:\n          description: User is active (true) or inactive (false)\n          type: boolean\n        role_ids:\n          type: array\n          items:\n            description: ID of role\n            type: integer\n        profile:\n          description: User profile.\n          type: object\n          properties:\n            department_ids:\n              type: array\n              items:\n                description: ID of department to which the new user belongs.\n                type: integer\n            note:\n              description: Note on this new user.\n              type: string\n\n    publicCategoryListResponse:\n      description: JSON data describing the public category response\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the list endpoint\n                  format: uri\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the next page of the list endpoint (if not available this is null)\n                  format: uri\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the previous page of the list endpoint (if not available this is null)\n                  format: uri\n        count:\n          type: integer\n          description: Total count of results for the request\n        results:\n          type: array\n          description: A list of categories, paginated\n          items:\n            $ref: '#/components/schemas/publicCategoryParentResponse'\n\n    publicCategoryParentResponse:\n      description: JSON data describing the public parent category response\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            curies:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The compact URI (curie) named 'sia'\n                href:\n                  type: string\n                  format: uri\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the public category\n                  format: uri\n        _display:\n          type: string\n          description: The display value of the category\n          example: Afval\n        name:\n          type: string\n          description: The name of the category\n          example: Afval\n        slug:\n          type: string\n          description: The (generated) slug of the category\n          example: afval\n        public_name:\n          type: string\n          description: The public name\n          nullable: True\n        sub_categories:\n          type: array\n          description: A list of child categories\n          items:\n            $ref: '#/components/schemas/publicCategoryChildResponse'\n\n    publicCategoryChildResponse:\n      description: JSON data describing the public parent category response\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            curies:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The compact URI (curie) named 'sia'\n                href:\n                  type: string\n                  format: uri\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the public category\n                  format: uri\n        _display:\n          type: string\n          description: The display value of the category\n          example: Asbest / accu\n        name:\n          type: string\n          description: The name of the category\n          example: Asbest / accu\n        slug:\n          type: string\n          description: The (generated) slug of the category\n          example: asbest-accu\n        handling:\n          type: string\n          example: A3DMC\n        departments:\n          type: array\n          items:\n            type: object\n            properties:\n              code:\n                description: The code of the department\n                type: string\n                example: ASC\n              name:\n                description: The name of the department\n                type: string\n                example: Actie service centrum\n              is_intern:\n                description: Department is internal or external\n                type: boolean\n                example: true\n        is_active:\n          type: boolean\n          description: If the current category is still active\n          example: false\n        description:\n          type: string\n          description: Description of the category\n          nullable: true\n        handling_message:\n          type: string\n          description: Handling message of the category (this is also mailed to the reporter)\n          example: We laten u binnen 3 werkdagen weten wat we hebben gedaan...\n        public_name:\n          type: string\n          description: The public name\n          nullable: True\n          example: Asbest / accu (Publieke naam)\n\n    privateCategoryResponse:\n      description: JSON data describing the category response\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            curies:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The compact URI (curie) named 'sia'\n                href:\n                  type: string\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the private category\n                public:\n                  type: string\n                  description: URI to the public category\n            sia:status-message-templates:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the status message templates of the category\n            sia:parent:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the private parent category parent\n                public:\n                  type: string\n                  description: URI to the public parent category detail\n            sia:questionnaire:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the public questionnaire\n        _display:\n          type: string\n          description: The display value of the category\n        id:\n          type: integer\n          description: The id of the category\n        name:\n          type: string\n          description: The name of the category\n        slug:\n          type: string\n          description: The (generated) slug of the category\n        is_active:\n          type: boolean\n          description: If the current category is still active\n        description:\n          type: string\n          description: Description of the category\n        handling_message:\n          type: string\n          description: Handling message of the category (this is also mailed to the reporter)\n        sla:\n          type: object\n          properties:\n            n_days:\n              type: integer\n              description: Number of days describing the SLA time\n            use_calendar_days:\n              type: boolean\n              description: If the n_days is in calendar days (true) or working days (false)\n        departments:\n          type: array\n          description: A readonly list of departments for the selected category\n          items:\n            type: object\n            properties:\n              id:\n                description: ID of the department\n                type: integer\n              code:\n                description: The code of the department\n                type: string\n              name:\n                description: The name of the department\n                type: string\n              is_intern:\n                description: Department is internal or external\n                type: boolean\n              is_responsible:\n                description: \u003e-\n                  The department being created is responsible for given category\n                  as identified by the `category_id` (true) or not (false).\n                  Defaults to false.\n                type: boolean\n              can_view:\n                description: \u003e-\n                  The department being created can view given category as\n                  identified by the `category_id` (true) or not (false).\n                  Defaults to false.\n                type: boolean\n        note:\n          type: string\n          nullable: true\n          description: Note field, used internally.\n        public_name:\n          type: string\n          nullable: true\n          description: The public name of a Category\n        is_public_accessible:\n          type: boolean\n          nullable: false\n          default: false\n          description: \u003e-\n            This will toggle if the category (and it's signals) can be accessed \n            through the public endpoin(s). Will be used for the public map\n            showing the reporter open siganls in the area for the categroy \n            he/she is making a complaint.\n\n    privateCategoryListResponse:\n      description: JSON data describing the category response\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the list endpoint\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the next page of the list endpoint (if not available this is null)\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the previous page of the list endpoint (if not available this is null)\n        count:\n          type: integer\n          description: Total count of results for the request\n        results:\n          type: array\n          description: A list of categories, paginated\n          items:\n            $ref: '#/components/schemas/privateCategoryResponse'\n\n    privateCategoryPatch:\n      description: JSON data for category updates\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the category\n        description:\n          type: string\n          description: Description of the category\n        is_active:\n          type: boolean\n          description: If the current category is still active\n        new_sla:\n          type: object\n          description: This will add a new sla to the category\n          properties:\n            n_days:\n              type: integer\n              description: Number of days describing the SLA time\n            use_calendar_days:\n              type: boolean\n              description: If the n_days is in calendar days (true) or working days (false)\n        handling_message:\n          type: string\n          description: The handling message, used in the e-mail to the reporter\n        public_name:\n          type: string\n          nullable: true\n          description: The public name of a Category\n        is_public_accessible:\n          type: boolean\n          nullable: false\n          description: \u003e-\n            This will toggle if the category (and it's signals) can be accessed \n            through the public endpoin(s). Will be used for the public map\n            showing the reporter open siganls in the area for the categroy \n            he/she is making a complaint.\n\n    privateCategoryStatusMessageTemplatesRequest:\n      description: JSON data describing the status message templates for a category and state (Request)\n      type: array\n      items:\n        type: object\n        properties:\n          state:\n            $ref: '#/components/schemas/StatusStateChoices'\n            example: 'm'\n          templates:\n            type: array\n            items:\n              type: object\n              properties:\n                title:\n                  type: string\n                  example: Title of the status message template\n                text:\n                  type: string\n                  example: The text of the status message template\n                is_active:\n                  description: Not required, will default to False\n                  type: boolean\n                  example: true\n\n    privateCategoryStatusMessageTemplatesResponse:\n      description: JSON data describing the status message templates for a category and state (Response)\n      type: array\n      items:\n        type: object\n        properties:\n          state:\n            $ref: '#/components/schemas/StatusStateChoices'\n            example: 'm'\n          templates:\n            type: array\n            items:\n              type: object\n              properties:\n                title:\n                  type: string\n                  example: Title of the status message template\n                text:\n                  type: string\n                  example: The text of the status message template\n                is_active:\n                  type: boolean\n                  example: true\n\n    privateDepartmentListResponse:\n      description: JSON data for a list of departments.\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the list endpoint\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the next page of the list endpoint (if not available this is null)\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the previous page of the list endpoint (if not available this is null)\n        count:\n          type: integer\n          description: Total count of results for the request\n        results:\n          type: array\n          description: A list of categories, paginated\n          items:\n            $ref: '#/components/schemas/privateDepartmentResponse'\n\n    privateDepartmentResponse:\n      description: JSON data for a department.\n      type: object\n      properties:\n        _links:\n          description: HAL JSON links\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  description: URI of this department in API\n                  type: string\n                  format: uri\n        _display:\n          description: Textual representation of department for display purposes.\n          type: string\n        id:\n          description: ID of department\n          type: integer\n        name:\n          type: string\n          description: Name of department\n        code:\n          type: string\n          description: Three letter code of department\n        is_intern:\n          type: boolean\n          description: TBD, defaults to false.\n        can_direct:\n          type: boolean\n          description: \u003e-\n            This department can potentially be a directing department if true.\n        category_names:\n          type: array\n          items:\n            description: Name of linked category\n            type: string\n\n    privateDepartmentDetailResponse:\n      description: Detailed JSON data for a department.\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  description: Hyperlink to detailed data of this department.\n                  type: string\n              required:\n                - href\n          required:\n            - self\n        _display:\n          description: Textual representation of department for display purposes.\n          type: string\n        id:\n          description: ID of department\n          type: integer\n        name:\n          type: string\n          description: Name of department\n        code:\n          type: string\n          description: Three letter code of department\n        is_intern:\n          type: boolean\n          description: TBD, defaults to false.\n        can_direct:\n          type: boolean\n          description: \u003e-\n            This department can potentially be a directing department if true.\n        categories:\n          type: array\n          description: \u003e-\n            List of categories associated with this department (both those that\n            are visible to this department and those for which this department\n            is responsible).\n          items:\n            type: object\n            description: Nested category representation\n\n    departmentCreate:\n      description: JSON data for new department\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of department\n        code:\n          type: string\n          description: Three letter code of department\n        is_intern:\n          type: boolean\n          description: TBD, defaults to false.\n        can_direct:\n          type: boolean\n          description: \u003e-\n            This department can potentially be a directing department if true.\n        categories:\n          type: array\n          items:\n            type: object\n            properties:\n              category_id:\n                description: ID of category\n                type: integer\n              is_responsible:\n                description: \u003e-\n                  The department being created is responsible for given category\n                  as identified by the `category_id` (true) or not (false).\n                  Defaults to false.\n                type: boolean\n              can_view:\n                description: \u003e-\n                  The department being created can view given category as\n                  identified by the `category_id` (true) or not (false).\n                  Defaults to false.\n                type: boolean\n            required:\n              - category_id\n      required:\n        - name\n        - code\n\n    departmentPatch:\n      description: JSON data for partial update to department.\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of department\n        code:\n          type: string\n          description: Three letter code of department\n        is_intern:\n          type: boolean\n          description: TBD, defaults to false.\n        can_direct:\n          type: boolean\n          description: \u003e-\n            This department can potentially be a directing department if true.\n        categories:\n          type: array\n          items:\n            type: object\n            properties:\n              category_id:\n                description: ID of category\n                type: integer\n              is_responsible:\n                description: \u003e-\n                  The department being created is responsible for given category\n                  as identified by the `category_id` (true) or not (false).\n                  Defaults to false.\n                type: boolean\n              can_view:\n                description: \u003e-\n                  The department being created can view given category as\n                  identified by the `category_id` (true) or not (false).\n                  Defaults to false.\n                type: boolean\n\n    V1PrivateExpressionContextGet:\n      description: \u003e-\n        Example identifiers with types for context.\n      type: object\n      properties:\n        results:\n          description: List of child expression context types\n          type: array\n          items:\n            type: object\n            properties:\n              identifier:\n                description: identifier name\n                type: string\n              identifier_type:\n                description: identifier type (point, time, str, set, dict, number)\n                type: string\n              type:\n                description: context type name\n                type: string\n\n    expressionCreate:\n      description: JSON data for new department\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of expression\n        code:\n          type: string\n          description: expression in expression language\n        type:\n          type: string\n          description: type of expression\n      required:\n        - name\n        - code\n        - type\n\n    expressionPatch:\n      description: JSON data for partial update to department.\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of expression\n        code:\n          type: string\n          description: expression in expression language\n        type:\n          type: string\n          description: type of expression\n      required:\n        - name\n        - code\n        - type\n\n    privateUserListResponse:\n      description: JSON serialization of paginated list of SIA users.\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of current page\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the next page in SIA users list (null) if not available\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the previous page in SIA users list (null) if not available\n        count:\n          type: integer\n          description: Total count of results for the request\n        results:\n          type: array\n          description: A list of categories, paginated\n          items:\n            $ref: '#/components/schemas/privateNestedUserResponse'\n\n    privateNestedUserResponse:\n      description: JSON serialization of a SIA user.\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  description: Hyperlink to detailed data of this user.\n                  type: string\n              required:\n                - href\n          required:\n            - self\n        _display:\n          description: Textual representation of user for display purposes.\n          type: string\n        id:\n          description: ID of user\n          type: integer\n        username:\n          description: Username\n          type: string\n          format: email\n        is_active:\n          description: User is active (true) or inactive (false)\n          type: boolean\n        roles:\n          description: List of roles for this user.\n          type: array\n          items:\n            description: Name of role.\n            type: string\n        profile:\n          $ref: '#/components/schemas/privateNestedProfileResponse'\n\n    privateNestedProfileResponse:\n      description: JSON serialization of a SIA user profile\n      type: object\n      properties:\n        note:\n          description: Note field associated with a SIA user.\n          type: string\n        departments:\n          description: List of departments associated with a SIA user.\n          type: array\n          items:\n            description: Name of department\n            type: string\n        created_at:\n          description: Timestamp of user profile creation\n          type: string\n          format: date-time\n        updated_at:\n          description: Timestamp of last user profile update\n          type: string\n          format: date-time\n\n    privateUserDetailResponse:\n      description: Detailed JSON serialization of a SIA user.\n      type: object\n      properties:\n        _link:\n          description: HAL JSON links\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  description: URI of this user in API\n                  type: string\n                  format: uri\n        _display:\n          description: Textual representation of user for display purposes.\n          type: string\n        id:\n          description: ID of user\n          type: integer\n        username:\n          description: Username (must be an email address for SIA).\n          type: string\n          format: email\n        email:\n          description: Email of user, matches username.\n          type: string\n          format: email\n        first_name:\n          description: First name of SIA user.\n          type: string\n        last_name:\n          description: Last name of SIA user.\n          type: string\n        is_active:\n          description: User is active (true) or inactive (false)\n          type: boolean\n        is_staff:\n          description: \u003e-\n            SIA is build using the Django web framework. This framework has a\n            built-in admin interface for maintenance, users that have the\n            is_staff flag set to true are allowed access to this admin\n            interface. In SIA the admin is purely for technical purposes,\n            day-to-day user management can be achieved through the API and\n            associated frontend.\n          type: boolean\n        is_superuser:\n          description: \u003e-\n            User has superuser privileges that trump all permission checks\n            (true) or has normal user user privileges (false).\n          type: boolean\n        roles:\n          description: List of roles associated with the SIA user.\n          type: array\n          items:\n            $ref: '#/components/schemas/privateNestedRoleResponse'\n        permissions:\n          description: List of permissions assigned directly to user (not via roles).\n          type: array\n          items:\n            $ref: '#/components/schemas/privateNestedPermissionResponse'\n        profile:\n           $ref: '#/components/schemas/privateNestedProfileResponse'\n\n    privateUsernameListResponse:\n      description: JSON serialization of paginated list of SIA users.\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of current page\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the next page in SIA users list (null) if not available\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the previous page in SIA users list (null) if not available\n        count:\n          type: integer\n          description: Total count of results for the request\n        results:\n          type: array\n          description: A list of categories, paginated\n          items:\n            $ref: '#/components/schemas/privateNestedUsernameResponse'\n\n    privateNestedUsernameResponse:\n      description: JSON serialization of a SIA username.\n      type: object\n      properties:\n        username:\n          description: Username\n          type: string\n          format: email\n\n    V1PrivateSignalchildrenGet:\n      description: \u003e-\n        Child signals associated with a specific parent Signal. If the\n        requesting user has access to the parent signal and not the child\n        signals, they will still be visible in this endpoint in an\n        abridged representation.\n      type: object\n      properties:\n        _links:\n          description: HAL JSON links\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  description: URI of these child signals in API\n                  type: string\n                  format: uri\n        count:\n          description: Number of child signals associated with parent signal.\n          type: integer\n        results:\n          description: List of child signals\n          type: array\n          items:\n            type: object\n            properties:\n              _links:\n                description: HAL JSON links\n                type: object\n                properties:\n                  self:\n                    type: object\n                    properties:\n                      href:\n                        description: URI of this child signal\n                        type: string\n                        format: uri\n              id:\n                description: child signal ID\n                type: integer\n              status:\n                description: child signal status\n                type: object\n                properties:\n                  state:\n                    type: string\n                    description: status \"state\" code\n                  state_display:\n                    type: string\n                    description: display name of status\n              category:\n                description: Main and sub category of child signal\n                type: object\n                properties:\n                  sub:\n                    type: string\n                    description: sub category name\n                  sub_slug:\n                    type: string\n                    description: sub category slug\n                  departments:\n                    type: string\n                    description: department codes associated with sub category\n                  main:\n                    type: string\n                    description: main category name\n                  main_slug:\n                    type: string\n                    description: main category slug\n\n    privateNestedRoleResponse:\n      description: A SIA role\n      type: object\n      properties:\n        _link:\n          description: HAL JSON links\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  description: URI of this role in API\n                  type: string\n                  format: uri\n        _display:\n          description: Textual representation of role for display purposes.\n          type: string\n        id:\n          description: ID of this role\n          type: integer\n        name:\n          description: Name of this role\n          type: string\n        permissions:\n          description: List of permissions associated with this role\n          type: array\n          items:\n            $ref: '#/components/schemas/privateNestedPermissionResponse'\n\n    privateNestedPermissionResponse:\n      description: SIA permission\n      type: object\n      properties:\n        _link:\n          description: HAL JSON links\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  description: URI of this permission in API\n                  type: string\n                  format: uri\n        _display:\n          description: Textual representation of permission for display purposes.\n          type: string\n        id:\n          description: ID of this permission\n          type: integer\n        name:\n          description: Name of this permission\n          type: string\n        codename:\n          description: Codename (technical) of this permission\n          type: string\n\n    V1AreasGEOJsonList:\n      description: EXPERIMENTAL - Area GEOjson list\n      type: object\n      properties:\n        'type':\n          type: string\n          example: \"FeatureCollection\"\n        features:\n          type: array\n          items:\n            items:\n              $ref: '#/components/schemas/V1AreaGEOJson'\n\n    V1AreaGEOJson:\n      description: EXPERIMENTAL - Area GEOjson\n      type: object\n      properties:\n        'type':\n          type: string\n          example: \"Feature\"\n        geometry:\n          type: object\n          properties:\n            'type':\n              type: string\n              example: \"MultiPolygon\"\n            coordinates:\n              type: array\n              items:\n                type: integer\n              minItems: 0\n              maxItems: 2\n              example: [[[[0.0, 0.0], [0.0, 1.0], [1.0, 1.0], [0.0, 0.0]]], [[[1.0, 1.0], [1.0, 2.0], [2.0, 2.0], [1.0, 1.0]]]]\n        'properties':\n          type: object\n          properties:\n            name:\n              description: The Name of the Area\n              type: string\n              example: Amsterdam\n            'type':\n              type: object\n              properties:\n                name:\n                  description: The Name of the Area type\n                  type: string\n                  example: Gebied\n                code:\n                  description: The code of the Area type\n                  type: string\n                  example: gebied\n\n    V1AreasJsonList:\n      description: EXPERIMENTAL - Area GEOjson list\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of current page\n                  format: uri\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the next page\n                  format: uri\n                  nullable: true\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the previous page\n                  format: uri\n                  nullable: true\n                  example: null\n        count:\n          type: integer\n          description: Total count of results for the request\n          example: 1\n        results:\n          type: array\n          description: A list of signals, paginated\n          items:\n            $ref: '#/components/schemas/V1AreaJson'\n\n    V1AreaJson:\n      description: EXPERIMENTAL - Area GEOjson\n      type: object\n      properties:\n        name:\n          description: The Name of the Area\n          type: string\n          example: Gebied\n        code:\n          description: The code of the Area\n          type: string\n          example: gebied\n        'type':\n          type: object\n          properties:\n            name:\n              description: The Name of the Area type\n              type: string\n              example: Gebied\n            code:\n              description: The code of the Area type\n              type: string\n              example: gebied\n        bbox:\n          type: array\n          items:\n            type: integer\n          example: [4.804035, 52.306854, 4.87683, 52.352063]\n\n    V1QuestionsJsonList:\n      description: EXPERIMENTAL - Questions json list\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of current page\n                  format: uri\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the next page\n                  format: uri\n                  nullable: true\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the previous page\n                  format: uri\n                  nullable: true\n                  example: null\n        count:\n          type: integer\n          description: Total count of results for the request\n          example: 1\n        results:\n          type: array\n          description: A list of signals, paginated\n          items:\n            $ref: '#/components/schemas/V1QuestionJson'\n\n    V1QuestionJson:\n      description: EXPERIMENTAL - Question json\n      type: object\n      properties:\n        key:\n          description: The question key\n          type: string\n          example: extra_bedrijven_horeca_personen\n        field_type:\n          description: The code of the Area\n          type: string\n          enum:\n            - 'PlainText'\n            - 'TextInput'\n            - 'MultiTextInput'\n            - 'CheckboxInput'\n            - 'RadioInput'\n            - 'SelectInput'\n            - 'TextareaInput'\n            - 'MapSelect'\n            - 'AssetSelect'\n          example: CheckboxInput\n        meta:\n          type: object\n\n    V1SourceList:\n      description: List of sources\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of current page\n                  format: uri\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the next page\n                  format: uri\n                  nullable: true\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the previous page\n                  format: uri\n                  nullable: true\n                  example: null\n        count:\n          type: integer\n          description: Total count of results for the request\n          example: 1\n        results:\n          type: array\n          description: A list of signals, paginated\n          items:\n            $ref: '#/components/schemas/V1Source'\n\n    V1Source:\n      description: Possible signal source\n      type: object\n      properties:\n        id:\n          description: ID of source\n          type: integer\n          example: 1\n        name:\n          description: Name of source\n          type: string\n          example: Eigen organisatie\n        description:\n          description: Description of source\n          type: string\n          example: Binnengekomen via de eigen organisatie\n\n    V1PrivateSignalAttachmentsList:\n      description: List of sources\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of current page\n                  format: uri\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the next page\n                  format: uri\n                  nullable: true\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the previous page\n                  format: uri\n                  nullable: true\n                  example: null\n        count:\n          type: integer\n          description: Total count of results for the request\n          example: 1\n        results:\n          type: array\n          description: A list of Attachments, paginated\n          items:\n            $ref: '#/components/schemas/V1PrivateSignalAttachmentDetail'\n\n    V1PrivateSignalAttachmentDetail:\n      description: Attachment\n      type: object\n      properties:\n        _display:\n          description: Textual representation of signal for display purposes.\n          type: string\n          example: Attachment object (1)\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the attachment detail\n        location:\n          description: The location of the attachment, for downloading.\n          type: string\n          example: /signals/media/images/2020/01/01/happy-new-year.jpg\n        is_image:\n          description: Boolean that indicates whether this attachment is image. Value is `true` if image else `false`.\n          type: boolean\n          example: true\n        created_at:\n          description: Timestamp of attachment's creation (upload).\n          type: string\n          format: date-time\n          example: \"2020-01-01T00:00:00+00:00\"\n        created_by:\n          description: Username of the attachment's uploader.\n          type: string\n          example: someuser@example.com\n\n    privateContextResponse:\n      description: JSON data describing the context overview of a Signal\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            curies:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The compact URI (curie) named 'sia'\n                href:\n                  type: string\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the context overview of a Signal\n                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/\n            sia:context-reporter-detail:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the detailed context based on the reporter email\n                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/\n            sia:context-geography-detail:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI to the detailed context based on geography\n                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/near/geography/\n        near:\n          type: object\n          properties:\n            signal_count:\n              type: integer\n              example: 10\n        reporter:\n          type: object\n          properties:\n            signal_count:\n              type: integer\n              example: 5\n            open_count:\n              type: integer\n              example: 2\n            positive_count:\n              type: integer\n              example: 2\n            negative_count:\n              type: integer\n              example: 1\n\n    privateContextReporterResponse:\n      description: Detailed JSON serialization of SIA Signals/meldingen related to the reporter email\n      type: object\n      properties:\n        id:\n          description: ID of the signal\n          type: integer\n          example: 1\n        created_at:\n          type: string\n          format: date-time\n          example: \"2021-04-14T00:00:00+00:00\"\n        category:\n          type: object\n          properties:\n            sub:\n              type: string\n              example: \"Overlast terrassen\"\n            sub_slug:\n              type: string\n              example: \"overlast-terrassen\"\n            main:\n              type: string\n              example: \"Overlast Bedrijven en Horeca\"\n            main_slug:\n              type: string\n              example: \"overlast-bedrijven-en-horeca\"\n            departments:\n              type: string\n              example: \"VTH\"\n        status:\n          type: object\n          properties:\n            state:\n              type: string\n              example: 'm'\n            state_display:\n              type: string\n              example: 'Gemeld'\n        feedback:\n          type: object\n          description: The latest given feedback, can also be null if there is no feedback\n          nullable: true\n          properties:\n            is_satisfied:\n              type: boolean\n              example: false\n            submitted_at:\n              type: string\n              format: date-time\n              example: \"2021-04-14T00:00:00+00:00\"\n        can_view_signal:\n          type: boolean\n          example: true\n        has_children:\n          type: boolean\n          example: true\n\n    privateContextReporterResponseList:\n      description: JSON serialization of paginated list of signals related to the reporter email\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of current page\n                  format: uri\n                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/?page=2\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the next page\n                  format: uri\n                  nullable: true\n                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/?page=3\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the previous page\n                  format: uri\n                  nullable: true\n                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/?page=1\n        count:\n          type: integer\n          description: Total count of results for the request\n          example: 10\n        results:\n          type: array\n          description: A list of signals context, paginated\n          items:\n            $ref: '#/components/schemas/privateContextReporterResponse'\n\n    privateContextNearGeographyResponse:\n      description: Geography\n      type: object\n      properties:\n        'type':\n          type: string\n          example: \"FeatureCollection\"\n        features:\n          type: array\n          items:\n            type: object\n            properties:\n              'type':\n                type: string\n                example: \"Feature\"\n              geometry:\n                type: object\n                properties:\n                  'type':\n                    type: string\n                    example: \"Point\"\n                  coordinates:\n                    type: array\n                    items:\n                      type: integer\n                    minItems: 0\n                    maxItems: 2\n                    example: [ 4.890986949631043, 52.41875227274259 ]\n              'properties':\n                type: object\n                properties:\n                  id:\n                    description: The ID of the Signal\n                    type: integer\n                    example: 1\n                  status:\n                    type: object\n                    properties:\n                      state:\n                        format: string\n                        example: \"m\"\n                      state_display:\n                        format: string\n                        example: \"Gemeld\"\n                  created_at:\n                    type: string\n                    format: date-time\n                    example: \"2020-01-01T00:00:00+00:00\"\n\n    privateReportResponse:\n      type: object\n      properties:\n        total_signal_count:\n          type: integer\n          example: 12345\n        results:\n          type: array\n          items:\n            type: object\n            properties:\n              category:\n                type: object\n                properties:\n                  name:\n                    type: string\n                    example: \"Example Category\"\n                  departments:\n                    type: array\n                    items:\n                      type: string\n                      example: 'ASC'\n              signal_count:\n                type: integer\n                example: 12345\n            minItems: 0\n\n    privateStoredSignalFilterResponseList:\n      description: JSON serialization of paginated list of stored Signal filters\n      type: object\n      properties:\n        _links:\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of current page\n                  format: uri\n                  example: http://127.0.0.1:8000/signals/v1/private/me/filters\n            next:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the next page\n                  format: uri\n                  nullable: true\n                  example: http://127.0.0.1:8000/signals/v1/private/me/filters/?page=2\n            previous:\n              type: object\n              properties:\n                href:\n                  type: string\n                  description: URI of the previous page\n                  format: uri\n                  nullable: true\n                  example: null\n        count:\n          type: integer\n          description: Total count of results for the request\n          example: 10\n        results:\n          type: array\n          description: A list of stored Signal filters, paginated\n          items:\n            $ref: '#/components/schemas/privateStoredSignalFilterResponse'\n\n    privateStoredSignalFilterResponse:\n      description: Detailed JSON serialization of a stored Signal filter.\n      type: object\n      properties:\n        _link:\n          description: HAL JSON links\n          type: object\n          properties:\n            self:\n              type: object\n              properties:\n                href:\n                  description: URI of this stored Signal filter in API\n                  type: string\n                  format: uri\n                  example: http://127.0.0.1:8000/signals/v1/private/me/filters/123\n        _display:\n          description: Textual representation of the stored Signal filter for display purposes.\n          type: string\n        id:\n          description: ID of stored Signal filter\n          type: integer\n          example: 123\n        name:\n          type: string\n          example: \"My stored filter\"\n        created_at:\n          type: string\n          format: date-time\n          example: \"2021-08-16T00:00:00+00:00\"\n        options:\n          type: object\n          example: {}\n        refresh:\n          type: boolean\n          default: False\n        show_on_overview:\n          type: boolean\n          default: False\n\n    privateStoredSignalFilterRequest:\n      description: Detailed JSON post/patch serialization for a stored Signal filter.\n      type: object\n      properties:\n        name:\n          type: string\n          example: \"My stored filter\"\n        created_at:\n          type: string\n          format: date-time\n          example: \"2021-08-16T00:00:00+00:00\"\n        options:\n          type: object\n          example: { }\n        refresh:\n          type: boolean\n          default: False\n        show_on_overview:\n          type: boolean\n          default: False\n\n  securitySchemes:\n    OAuth2:\n      description: SIA API is using OAuth2 implicit grant flow.\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: '/oauth2/authorize'\n          scopes:\n            SIG/ALL: General access to SIA Django application.\n"
		}
	},
	"Error": "invalidYAML: yaml: invalid map key: map[interface {}]interface {}{\"name_of_query_param\":interface {}(nil)}"
}