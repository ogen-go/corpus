{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/briangormanly/agora"
		},
		"file": {
			"name": "agoraApi.yaml",
			"size": 0,
			"path": "server/agoraApi.yaml",
			"byteSize": 12462,
			"content": "openapi: 3.0.2\ninfo:\n  title: Agora API\n  version: 1.0.0\n  description: Agora's super cool API. You can find out more about Agora at [https://freeagora.com](https://freeagora.com)\n  termsOfService: https://freeagora.com/terms/\n  contact:\n    email: api@freeagora.com\n  license:\n    name: BSD 3-Clause License\n    url: https://opensource.org/licenses/BSD-3-Clause\ntags:\n  - name: Tags\n    description: Manage global tags, tags are used to relate other entities and are associated to enities by users using the Tagged object.\npaths:\n  /tags:\n    get:\n      tags:\n        - Tags\n      summary: Retrieves all available tags, provide limit and offset for pagnation, top limit 100.\n      parameters:\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          description: The number of records to return, maximum 100\n        - in: query\n          name: offset\n          schema:\n            type: integer\n          description: The starting record number, defaults to 0\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/ForbiddenError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n    post:\n      tags:\n        - Tags\n      summary: Save a new tag. If the name of the tag already exists the current tag will not be duplicated. If the ownedBy member is provided with an existing tag name the owner will be updated to the provided value.  Only the tag value is required.\n      requestBody:\n        description: Include a Tag object to save in JSON format *NOTE* - Only the tag member is required, id will be ignored, lastUsed will be used if provided and override the default behavior of assigning the authenticed user id, lastUsed will be updated to the current time.\n        required: true\n        content: \n          application/json:\n            schema: \n              type: object\n              $ref: '#/components/schemas/ShortTag'\n      responses:\n        '201':\n          description: New Tag created\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/Tag'\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        '200':\n          description: Updated existing record - the tag name already existed, current record used.\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/Tag'\n          headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/ForbiddenError'\n  /tags/{id}:\n    get:\n      tags: \n        - Tags \n      summary: Retrieve existing tag by Id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the tag to retrieve \n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/Tag'\n        headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/ForbiddenError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n    delete:\n      tags: \n        - Tags\n      summary: Delete an existing tag providing it's Id\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          description: id of the tag to delete \n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/Tag'\n        headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/ForbiddenError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n  /goals:\n    get:\n      tags:\n        - Goals\n      summary: Manage Listing, creating, updating and deleting user goals\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Goals'\n        headers:\n            x-agora-message-title:\n              schema:\n                type: string\n              description: Title of Agora API message\n            x-agora-message-message:\n              schema:\n                type: string\n              description: Message of Agora API message\n        '400':\n          $ref: '#/components/responses/BadRequest' \n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '403':\n          $ref: '#/components/responses/ForbiddenError'\nservers:\n  - url: http://localhost:4200/api/v1/auth\n  - url: http://freeagora.com/api/v1/auth\ncomponents:\n  securitySchemes:\n    basicAuth:     # \u003c-- arbitrary name for the security scheme\n      type: http\n      scheme: basic\n  schemas:\n    ShortTag:\n      type: object\n      required:\n        - tag\n      properties:\n        id:\n          type: integer\n          description: Assigned automatically for new tags, used to update existing tag if provided\n        tag:\n          type: string\n          description: The tag name\n        ownedBy:\n          type: integer\n          description: Id of the user that first generated the tag\n        lastUsed:\n          type: string\n          description: date the tag was last used or updated. This should be set to the current time any time a tag is applied using the tagged object\n      example:\n        tag: Learning Python\n    Tag:\n      type: object\n      required:\n        - tag\n      properties:\n        id:\n          type: integer\n          description: Assigned automatically for new tags, used to update existing tag if provided\n        tag:\n          type: string\n          description: The tag name\n        ownedBy:\n          type: integer\n          description: Id of the user that first generated the tag\n        lastUsed:\n          type: string\n          description: date the tag was last used or updated. This should be set to the current time any time a tag is applied using the tagged object\n      example:\n        id: 10\n        tag: Learning Python\n        ownedBy: 1\n        lastUsed: 2022-08-07T14:04:17.935Z\n    Tags:\n      type: array\n      items:\n        $ref: '#/components/schemas/Tag'\n    Goal:\n      type: object\n      required:\n        - goalName\n      properties:\n        id:\n          type: integer\n          description: Assigned automatically for new goals, used to update existing goal if provided\n          uniqueItems: true\n        version:\n          type: integer\n          description: tracks the changes to goals and is automatically incremented on updates\n        goalName:\n          type: string\n          description: The tag\n        goalDescription:\n          type: string\n        goalImage:\n          type: string\n          description: filename of the associated image for the goal\n        active:\n          type: boolean\n          description: Active status, inactive items will not be returned in most queries\n        completable:\n          type: boolean\n          description: Completable goals monitor progress of users through topics\n        visibility:\n          type: integer\n          description: Public = 0, Shared = 1, Private = 0\n        createTime:\n          type: timestamp\n          description: Automatically generated timestamp of record creation\n        ownedBy:\n          type: integer\n          description: Id of the user that first generated the tag\n      example:\n        id: 1\n        version: 1\n        goalName: \"Learn how to use Agora\"\n        goalDescription: \"Follow the tutorials and other resources provided to learn the Agora system.\"\n        goalImage: \"myImage.png\"\n        active: true\n        completable: true\n        visibility: 0\n        createTime: \"2022-08-07T06:58:53.744Z\"\n        ownedBy: 1\n    Goals:\n      type: array\n      items:\n        $ref: '#/components/schemas/Goal'\n  responses:\n    BadRequest:\n      description: The HyperText Transfer Protocol (HTTP) 400 Bad Request response status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing). See the x-agora-message-title and x-agora-message-detail response parameters for more detail.\n      headers:\n        x-agora-message-title:\n          schema:\n            type: string\n          description: Title of Agora API message\n        x-agora-message-message:\n          schema:\n            type: string\n          description: Message of Agora API message\n    UnauthorizedError:\n      description: Authentication information is missing or invalid - In basic HTTP authentication, a request contains a header field in the form of Authorization - Basic \u003ccredentials\u003e, where credentials is the Base64 encoding of ID and password joined by a single colon. See the x-agora-message-title and x-agora-message-detail response parameters for more detail.\n      headers:\n        x-agora-message-title:\n          schema:\n            type: string\n          description: Title of Agora API message\n        x-agora-message-message:\n          schema:\n            type: string\n          description: Message of Agora API message\n    ForbiddenError:\n      description: The credentials provided in the Authorization header did not authorize the user to take the requested action. See the x-agora-message-title and x-agora-message-detail response parameters for more detail.\n      headers:\n        x-agora-message-title:\n          schema:\n            type: string\n          description: Title of Agora API message\n        x-agora-message-message:\n          schema:\n            type: string\n          description: Message of Agora API message \n    NotFoundError:\n      description: The requested resource was not found. Check id provided or see the x-agora-message-title and x-agora-message-detail response parameters for more detail.\n      headers:\n        x-agora-message-title:\n          schema:\n            type: string\n          description: Title of Agora API message\n        x-agora-message-message:\n          schema:\n            type: string\n          description: Message of Agora API message\nsecurity:\n  - basicAuth: []",
			"canonicalURL": "/github.com/briangormanly/agora@75a58cb40968c61180a9dc2b5278d49b9be18afd/-/blob/server/agoraApi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/briangormanly/agora/blob/75a58cb40968c61180a9dc2b5278d49b9be18afd/server/agoraApi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: yaml: line 89: mapping values are not allowed in this context"
}