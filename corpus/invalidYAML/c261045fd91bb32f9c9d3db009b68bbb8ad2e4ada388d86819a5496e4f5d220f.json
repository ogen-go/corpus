{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/usnationalarchives/federalregister-api-core"
		},
		"file": {
			"name": "open_api_v3.yml",
			"size": 0,
			"path": "data/open_api_v3.yml",
			"byteSize": 20441,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  title: FR API Documentation\n  version: ''\nservers:\n  - url: \"<%= SETTINGS['app']['canonical_url'] %>/api/v1/\"\npaths:\n  \"/documents/{document_number}.{format}\":\n    get:\n      summary: Fetch a single Federal Register document\n      parameters:\n      - name: format\n        description: What format the response should be\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/Format'\n      - name: fields[]\n        description: Which attributes of the documents to return; by default, a reasonable set is returned, but a user can customize it to return exactly what is needed.\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/DocumentField'\n      - name: document_number\n        description: Federal Register document number\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Federal Register Documents\n  \"/documents/{document_numbers}.{format}\":\n    get:\n      summary: Fetch multiple Federal Register documents\n      parameters:\n      - name: format\n        description: What format the response should be\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/Format'\n      - name: fields[]\n        description: Which attributes of the documents to return; by default, a reasonable set is returned, but a user can customize it to return exactly what is needed.\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/DocumentField'\n      - name: document_numbers\n        description: Federal Register document number\n        in: path\n        explode: false\n        required: true\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Federal Register Documents\n  \"/documents.{format}\":\n    get:\n      summary: Search all Federal Register documents published since 1994.\n      parameters:\n      - name: format\n        description: What format the response should be\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/Format'\n      - name: fields[]\n        description: Which attributes of the documents to return; by default, a reasonable set is returned, but a user can customize it to return exactly what is needed.\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/DocumentField'\n      - name: per_page\n        description: How many documents to return at once; 1000 maximum.\n        in: query\n        schema:\n          type: integer\n          default: 20\n          minimum: 1\n          maximum: 1000\n      - name: page\n        description: The page of the result set.\n        in: query\n        schema:\n          type: integer\n      - name: order\n        description: The order the results should be returned in.\n        in: query\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n            - relevance\n            - newest\n            - oldest\n            - executive_order_number\n      - name: conditions[term]\n        description: Full text search\n        in: query\n        schema:\n          type: string\n      - name: conditions[publication_date][is]\n        description: Exact publication date match (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[publication_date][year]\n        description: Find documents published in a given year (YYYY)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrYear'\n      - name: conditions[publication_date][gte]\n        description: Find documents published on or after a given date (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[publication_date][lte]\n        description: Find documents published on or before a given date (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[effective_date][is]\n        description: Exact effective date match (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[effective_date][year]\n        description: Find documents with an effective date in a given year (YYYY)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[effective_date][gte]\n        description: Find documents with an effective date on or after a given date (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[effective_date][lte]\n        description: Find documents with an effective date on or before a given date (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[agencies][]\n        description: Publishing agency\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/Agency'\n      - name: conditions[type][]\n        description: >\n          Document Type:\n            * RULE: Final Rule\n            * PRORULE: Proposed Rule\n            * NOTICE: Notice\n            * PRESDOCU: Presidential Document\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/DocumentType'\n      - name: conditions[presidential_document_type][]\n        description: Presidential document type; only available for Presidential Docuements\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/PresidentialDocumentType'\n      - name: conditions[president][]\n        description: Signing President; only available for Presidential Documents\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/President'\n      - name: conditions[docket_id]\n        description: Agency docket number associated with document\n        in: query\n        schema:\n          type: string\n      - name: conditions[regulation_id_number]\n        description: Regulation ID Number (RIN) associated with document\n        in: query\n        schema:\n          type: string\n      - name: conditions[sections][]\n        description: Limit to documents that appeared within a particular section of FederalRegister.gov\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/Section'\n      - name: conditions[topics][]\n        description: Limit to documents associated with a particular topic (CFR Indexing term)\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/Topic'\n      - name: conditions[significant]\n        description: >\n          Deemed Significant Under EO 12866:\n            * \"0\": Not Deemed Significant\n            * \"1\": Deemed Significant\n        in: query\n        schema:\n          type: string\n          enum:\n          - 0\n          - 1\n      - name: conditions[cfr][title]\n        description: documents affecting the associated CFR title\n        in: query\n        schema:\n          type: integer\n      - name: conditions[cfr][part]\n        description: Part or part range (eg '17' or '1-50'); requires the CFR title to be provided\n        in: query\n        schema:\n          type: integer\n      - name: conditions[near][location]\n        description: Location search; enter zipcode or City and State\n        in: query\n        schema:\n          type: string\n      - name: conditions[near][within]\n        description: Location search; maximum distance from location in miles (max 200)\n        in: query\n        schema:\n          type: integer\n          maximum: 200\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Federal Register Documents\n  \"/documents/facets/{facet}\":\n    get:\n      summary: Fetch counts of matching Federal Register Documents grouped by a facet\n      parameters:\n      - name: facet\n        description: What to group the returned documents by for counting\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/Facet'\n      - name: conditions[term]\n        description: Full text search\n        in: query\n        schema:\n          type: string\n      - name: conditions[publication_date][is]\n        description: Exact publication date match (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[publication_date][year]\n        description: Find documents published in a given year (YYYY)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrYear'\n      - name: conditions[publication_date][gte]\n        description: Find documents published on or after a given date (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[publication_date][lte]\n        description: Find documents published on or before a given date (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[effective_date][is]\n        description: Exact effective date match (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[effective_date][year]\n        description: Find documents with an effective date in a given year (YYYY)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[effective_date][gte]\n        description: Find documents with an effective date on or after a given date (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[effective_date][lte]\n        description: Find documents with an effective date on or before a given date (YYYY-MM-DD)\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[agencies][]\n        description: Publishing agency\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/Agency'\n      - name: conditions[type][]\n        description: >\n          Document Type:\n            * RULE: Final Rule\n            * PRORULE: Proposed Rule\n            * NOTICE: Notice\n            * PRESDOCU: Presidential Document\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/DocumentType'\n      - name: conditions[presidential_document_type][]\n        description: Presidential document type; only available for Presidential Docuements\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/PresidentialDocumentType'\n      - name: conditions[president][]\n        description: Signing President; only available for Presidential Documents\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/President'\n      - name: conditions[docket_id]\n        description: Agency docket number associated with document\n        in: query\n        schema:\n          type: string\n      - name: conditions[regulation_id_number]\n        description: Regulation ID Number (RIN) associated with document\n        in: query\n        schema:\n          type: string\n      - name: conditions[sections][]\n        description: Limit to documents that appeared within a particular section of FederalRegister.gov\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/Section'\n      - name: conditions[significant]\n        description: >\n          Deemed Significant Under EO 12866:\n            * \"0\": Not Deemed Significant\n            * \"1\": Deemed Significant\n        in: query\n        schema:\n          type: string\n          enum:\n          - 0\n          - 1\n      - name: conditions[cfr][title]\n        description: documents affecting the associated CFR title\n        in: query\n        schema:\n          type: integer\n      - name: conditions[cfr][part]\n        description: Part or part range (eg '17' or '1-50'); requires the CFR title to be provided\n        in: query\n        schema:\n          type: integer\n      - name: conditions[near][location]\n        description: Location search; enter zipcode or City and State\n        in: query\n        schema:\n          type: string\n      - name: conditions[near][within]\n        description: Location search; maximum distance from location in miles (max 200)\n        in: query\n        schema:\n          type: integer\n          maximum: 200\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Federal Register Documents\n  \"/public-inspection-documents/{document_number}.{format}\":\n    get:\n      summary: Fetch a single public inspection document.\n      parameters:\n      - name: format\n        description: What format the response should be\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/Format'\n      - name: document_number\n        description: Federal Register document number\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Public Inspection Documents\n  \"/public-inspection-documents/{document_numbers}.{format}\":\n    get:\n      summary: Fetch multiple public inspection documents.\n      parameters:\n      - name: format\n        description: What format the response should be\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/Format'\n      - name: document_numbers\n        description: Federal Register document numbers, separated by a comma\n        in: path\n        explode: false\n        required: true\n        schema:\n          type: array\n          items:\n            type: string\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Public Inspection Documents\n  \"/public-inspection-documents/current.{format}\":\n    get:\n      summary: Fetch all the public inspection documents that are currently on public inspection.\n      parameters:\n      - name: format\n        description: What format the response should be\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/Format'\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Public Inspection Documents\n  \"/public-inspection-documents.{format}\":\n    get:\n      summary: Search all the public inspection documents that are currently on public inspection; use the document search to find documents that have been published.\n      parameters:\n      - name: format\n        description: What format the response should be\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/Format'\n      - name: fields[]\n        description: Which attributes of the documents to return; by default, a reasonable set is returned, but a user can customize it to return exactly what is needed.\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/PublicInspectionDocumentField'\n      - name: per_page\n        description: How many documents to return at once; 1000 maximum.\n        in: query\n        schema:\n          type: integer\n          default: 20\n          minimum: 1\n          maximum: 1000\n      - name: page\n        description: The page of the result set.\n        in: query\n        schema:\n          type: integer\n      - name: conditions[available_on]\n        description: Public Inspection issue date (YYYY-MM-DD)\n        required: true\n        in: query\n        schema:\n          $ref: '#/components/schemas/FrDate'\n      - name: conditions[term]\n        description: Full text search\n        in: query\n        schema:\n          type: string\n      - name: conditions[agencies][]\n        description: Publishing agency\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/Agency'\n      - name: conditions[type][]\n        description: >\n          Document Type:\n            * RULE: Final Rule\n            * PRORULE: Proposed Rule\n            * NOTICE: Notice\n            * PRESDOCU: Presidential Document\n        in: query\n        explode: true\n        schema:\n          $ref: '#/components/schemas/DocumentType'\n      - name: conditions[special_filing]\n        description: >\n          Filing type:\n            * \"0\": Regular Filing\n            * \"1\": Special Filing\n        in: query\n        schema:\n          type: string\n          enum:\n          - 0\n          - 1\n      - name: conditions[docket_id]\n        description: Agency docket number associated with document\n        in: query\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Public Inspection Documents\n  \"/agencies\":\n    get:\n      summary: \"Fetch all agency details\"\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Agencies\n  \"/agencies/{slug}\":\n    get:\n      summary: Fetch a particular agency's details\n      parameters:\n      - name: slug\n        description: Federal Register slug for the agency\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/Agency'\n      - name: id\n        description: Federal Register ID for the agency (deprecated)\n        in: query\n        schema:\n          type: integer\n        deprecated: true\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Agencies\n  \"/suggested_searches\":\n    get:\n      summary: Fetch all suggested searches or limit by FederalRegister.gov section\n      parameters:\n      - name: conditions[sections]\n        description: Federal Register slug for the section\n        in: query\n        schema:\n          $ref: '#/components/schemas/Section'\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Suggested Searches\n  \"/suggested_searches/{slug}\":\n    get:\n      summary: Fetch a particular suggested search\n      parameters:\n      - name: slug\n        description: Federal Register slug for the suggested search\n        in: path\n        required: true\n        schema:\n          $ref: '#/components/schemas/SuggestedSearch'\n      responses:\n        '200':\n          description: Success\n      tags:\n        - Suggested Searches\n\ncomponents:\n  schemas:\n    Agency:\n      type: array\n      items:\n        type: string\n        enum: <% Agency.alphabetically.each do |a| %>\n        <%= \"- #{a.slug} \" %>\n        <% end %>\n    DocumentField:\n      type: array\n      items:\n        type: string\n        enum: <% EntryApiRepresentation.all_fields.each do |f| %>\n        <%= \"- #{f} \" %>\n        <% end %>\n    DocumentType:\n      type: array\n      items:\n        type: string\n        enum:\n        - RULE\n        - PRORULE\n        - NOTICE\n        - PRESDOCU\n    Facet:\n      type: string\n      enum:\n      - daily\n      - weekly\n      - monthly\n      - quarterly\n      - yearly\n      - agency\n      - topic\n      - section\n      - type\n      - subtype\n    PublicInspectionDocumentField:\n      type: array\n      items:\n        type: string\n        enum: <% PublicInspectionDocumentApiRepresentation.all_fields.each do |f| %>\n        <%= \"- #{f} \" %>\n        <% end %>\n    President:\n      type: array\n      items:\n        type: string\n        enum: <% President.all.each do |x| %>\n        <%= \"- #{x.identifier} \" %>\n        <% end %>\n    PresidentialDocumentType:\n      type: array\n      items:\n        type: string\n        enum: <% PresidentialDocumentType.all.each do |x| %>\n        <%= \"- #{x.identifier} \" %>\n        <% end %>\n    Format:\n      type: string\n      enum:\n      - json\n      - csv\n    FrDate:\n      type: string\n      format: date\n    FrYear:\n      type: string\n    Section:\n      type: array\n      items:\n        type: string\n        enum: <% Section.alphabetically.each do |x| %>\n        <%= \"- #{x.slug} \" %>\n        <% end %>\n    SuggestedSearch:\n      type: string\n      enum: <% CannedSearch.alphabetically.each do |x| %>\n      <%= \"- #{x.slug} \" %>\n      <% end %>\n    Topic:\n      type: array\n      items:\n        type: string\n        enum: <% Topic.all.each do |x| %>\n        <%= \"- #{x.slug} \" %>\n        <% end %>\n",
			"canonicalURL": "/github.com/usnationalarchives/federalregister-api-core@9902b39d040b1201c0ce19995985539134c94849/-/blob/data/open_api_v3.yml",
			"externalURLs": [
				{
					"url": "https://github.com/usnationalarchives/federalregister-api-core/blob/9902b39d040b1201c0ce19995985539134c94849/data/open_api_v3.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: yaml: line 582: could not find expected ':'"
}