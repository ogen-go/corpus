{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/BlueBrain/BlueGraph"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "services/embedder/api.yaml",
			"byteSize": 6095,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: BlueBrainEmbedder API\n  description: Embedding service for Blue Brain Nexus.\n  version: 0.0.1\n\nservers:\n  - url: http://127.0.0.1/\n    port:\n        enum:\n          - '5000'\n        default: '5000'\n\npaths:\n  /models:\n    get:\n      summary: Retrieve all the models from the catalogue.\n      responses:\n        '200':\n          description: A JSON object with the meta-data of existing models.\n          content: \n            application/json:\n              schema: \n                type: object\n                properties: \n                  models:\n                    type: array\n                    items: object\n                    properties:\n                      id:\n                        type: string\n                      name:\n                        type: string\n                      created:\n                        type: string\n                      modified:\n                        type: string\n                      distribution:\n                        type: string\n \n  /models/{model_name}:\n    get:\n      summary: Get an embedding model from the catalogue by name.\n      responses:\n        '200':\n          description: A JSON object with the model's meta-data.\n          content: \n            application/json:\n              schema: \n                type: object\n                properties: \n                  id:\n                    type: string\n                  name:\n                    type: string\n                  created:\n                    type: string\n                  modified:\n                    type: string\n                  distribution:\n                    type: string\n\n        '404'\n          description: Is returned when the model does not exist.\n\n  /models/{model_name}/{component}:\n    get:\n      summary: Get details on the embedding model component. Component values can be\n        \"preprocessor\", \"embedder\", \"similarity-processor\"\n      responses:\n        '200':\n          description: Respond with the JSON representation of the requested details\n        '404':\n          description: Returned when the requested model does not exist.\n\n  /models/{model_name}/embedding:\n    get:\n      summary: Retrieve embedding vectors of the specified ids of existing resources.\n      parameters:\n        - in: query\n          name: resource_ids\n          description: List of resource ids whose embeddings to retrieve.\n          type: array\n          items:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Respond with the JSON representation of the requested embeddings,\n            in this representation the embeddings are given by a dictionary whose keys\n            are resource ids and whose values are embedding vectors.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  vectors:\n                    type: object\n        '404':\n          description: Returned when the embeddings of the requested resources do not exist\n            (typically when the embedding model does not exist).\n    post:\n      summary: Retrieve embedding vectors of the specified ids of existing resources or \n               predict embedding vectors for the input data\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              resource_ids:\n                type: array\n                description: List of resource ids whose embeddings to retrieve.\n              data:\n                type: object\n                description: Input data for prediction in json representation\n              data_type:\n                type: string\n                description: Type of the input data for prediction\n              preprocessor_kwargs:\n                type: object\n                description: Keyword arguments to pass to the preprocessor\n              embedder_kwargs:\n                type: object\n                description: Keyword arguments to pass to the encoder\n\n  /models/{model_name}/neighbors:\n    get:\n      summary: Get nearest neighbors for the resources with the provided ids\n      parameters:\n        - in: query\n          name: resource_ids\n          description: List of resource ids whose nearest neighbors to retrieve.\n          type: array\n          items:\n            type: string\n          required: true\n        - in: query\n          name: k\n          description: Number of the most similar entities to retrieve.\n          type: integer\n          required: true\n        - in: query\n          name: values\n          description: Flag indicating if similarity measure values should be returned\n            (false by default).\n          type: boolean\n          required: false\n      responses:\n        '200':\n          description: If similar entities where successfully found, return an object, whose\n            keys are requested resource ids and whose values are similar points (with their\n            similarity measure, if requested)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  similar_points:\n                    type: object\n    post:\n      summary: Get nearest neighbors for the resources with the provided ids or for the input vectors\n      parameters:\n        - in: query\n          name: k\n          description: Number of the most similar entities to retrieve.\n          type: integer\n          required: true\n        - in: query\n          name: values\n          description: Flag indicating if similarity measure values should be returned\n            (false by default).\n          type: boolean\n          required: false\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              resource_ids:\n                type: array\n                description: List of resource ids whose neighbors to compute.\n              vectors:\n                description: Input vectors\n                type: array\n                items: array\n\n\n  \n",
			"canonicalURL": "/github.com/BlueBrain/BlueGraph@c892fa75b4337de10d22901261a6a1cbc9d2fb08/-/blob/services/embedder/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/BlueBrain/BlueGraph/blob/c892fa75b4337de10d22901261a6a1cbc9d2fb08/services/embedder/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: yaml: line 64:8: could not find expected ':'"
}