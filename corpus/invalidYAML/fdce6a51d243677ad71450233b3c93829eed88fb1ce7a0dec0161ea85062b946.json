{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/logicalclocks/rondb"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "storage/ndb/rest-server/rest-api-server/api/api.yml",
			"byteSize": 8550,
			"content": "#\n# This file is part of the RonDB REST API Server\n# Copyright (c) 2022 Hopsworks AB\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, version 3.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n#\nopenapi: 3.0.0\ninfo:\n  description: |\n    RonDB Key-Value REST API\n    [http://rondb.com](http://rondb.com) \n  version: \"1.0.0\"\n  title: RonDB KV API\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/rondb/RonDB2/1.0.0/\ntags:\n  - name: db-ops\n    description: Database operations\n    externalDocs:\n      description: Find out more\n      url: 'http://rondb.com'\n  - name: table-ops\n    description: Simple and batch operations for single table\n    externalDocs:\n      description: Find out more\n      url: 'http://rondb.com'\n  - name: multi-table-ops\n    description: Batch operation that span across multiple table\n    externalDocs:\n      description: Find out more\n      url: 'http://rondb.com'\n  - name: authentication\n    description: Operations for authenticating the user\n    externalDocs:\n      description: Find out more\n      url: 'http://rondb.com'\n\npaths:      \n#---------------------------------------------------------------------------------\n  /{db}/{table}/pk-read:\n    parameters:\n    - name: db\n      in: path\n      description: Database name\n      required: true\n      schema:\n        type: string\n      example: database_name\n    - name: table\n      in: path\n      description: Table name\n      required: true\n      schema:\n        type: string \n      example: table_name\n    get:\n      tags:\n        - table-ops\n      parameters:\n        - name: filter\n          in: query\n          style: form\n          explode: false\n          description: \u003e\n            An array of filter columns. If the table's primary key consists of one column\n            then add a filter object like **[{\"column\": \"employee_id\", \"value\": 1234 }]**, or if the primary \n            key contain multiple columns then add all the primary key columns in the filter object, \n            for example, **[{\"column\": \"item_id\", \"value\": 1234 }, {\"column\": \"order_id\", \"value\": 5678 }]**\n          required: true\n          schema:\n            $ref: '#/components/schemas/PKFilter' \n        - name: read-column\n          in: query\n          description: An array containing the names of the cloumns that are read from the database and returned to the user. If this parameter is not supplied then the entire row, that is, all the table columns are read from the database. \n          required: false\n          schema:\n            $ref: '#/components/schemas/ReadColumns' \n        - name: transaction-id\n          in: query\n          description: Transaction id. This is an ID returned by the *POST /transaction* API\n          required: false\n          schema:\n            type: number\n          \n      responses:\n        '200':\n          description: Successful primary key operation(s)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Row'\n        '400':\n          description: Bad request. Invalid database or table name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status'\n        '404':\n          description: Not Found. Database or the table does not exist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status' \n#---------------------------------------------------------------------------------\n  /batch:\n    post:\n      tags:\n        - table-ops\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BatchRequest'            \n      responses:\n        '200':\n          description: Successful batch operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BatchResponse'\n        '400':\n          description: Bad request. Invalid database or table name.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status'\n                \n#---------------------------------------------------------------------------------    \ncomponents:\n  schemas:\n#---------------------------------------------------------------------------------        \n    Status:\n      type: object\n      required:\n        - ok\n      properties:\n        ok:\n          type: boolean\n        message:\n          type: string\n      example:    \n        { ok: false, message: \"Something went wrong\"}\n    PKFilter:\n      type: array\n      items:\n        type: object\n        required:\n          - column\n          - value\n      example: [\n        {\n          column: \"pk_column_1_name\", \n          value: 1234\n        },\n        {\n          pk_column_2: \"pk_column_2_name\",\n          value: \"some value\"\n        }\n      ]\n    ReadColumns:\n      type: array\n      items:\n        type: string\n      example: [ \"table_column_name_1\", \"table_column_name_2\", \"table_column_name_3\"]      \n    Row:\n      type: object\n      required: \n        - columns\n        - values\n      properties:\n        operation-id:\n          type: number\n        columns:\n          type: array\n          items:\n            type: string      \n        values:\n          type: array\n          items:\n            anyOf:\n              - type: string\n              - type: number\n              - type: integer\n              - type: boolean\n      example: { columns:[\"col1\", \"col2\", \"cold3\"], values:[\"data1\", 1234, false]}\n    BatchRequest:\n      type: array\n      items:\n        type: object\n        required:\n          - method\n          - relative-url\n#          - body   uncomment it later when we support batching post operations\n        properties:\n          method:\n            type: string\n            enum: [GET] # later add post put delete when these API are available\n          relative-url:\n            type: string\n        example: [\n          {\n            method: \"GET\",\n            relative-url: \"/database-name-1/table-name-1/pk-read?filter[column]=pk_column_1_name\u0026filter[value]=1234\u0026filter[pk_column_2]=pk_column_2_name\u0026filter[value]=some value\u0026read-columns=table_column_name_1\u0026read-columns=table_column_name_2\u0026read-columns=table_column_name_3\"\n          },\n           {\n            method: \"GET\",\n            relative-url: \"/database-name-2/table-name-1/pk-read?filter[column]=pk_column_1_name\u0026filter[value]=1234\u0026filter[pk_column_2]=pk_column_2_name\u0026filter[value]=some value\u0026read-columns=table_column_name_1\u0026read-columns=table_column_name_2\u0026read-columns=table_column_name_3\"\n          }\n        ]\n    BatchResponse:\n      type: array\n      items: \n        type: object\n        required:\n          - code\n          - body\n        properties:\n          code:\n            type: number\n          body:\n            type: object\n            required: \n              - columns\n              - values\n            properties:\n              operation-id:\n                type: number\n              columns:\n                type: array\n                items:\n                  type: string      \n              values:\n                type: array\n                items:\n                  anyOf:\n                    - type: string\n                    - type: number\n                    - type: integer\n                    - type: boolean\n            example: [\n              { columns:[\"col1\", \"col2\", \"cold3\"], values:[\"data1\", 1234, false]},\n              { columns:[\"col1\", \"col2\", \"cold3\"], values:[\"data1\", 1234, false]}\n              ]\n",
			"canonicalURL": "/github.com/logicalclocks/rondb@40a1ef8a63ff35d6dcd0b70d542daaee94c85537/-/blob/storage/ndb/rest-server/rest-api-server/api/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/logicalclocks/rondb/blob/40a1ef8a63ff35d6dcd0b70d542daaee94c85537/storage/ndb/rest-server/rest-api-server/api/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "invalidYAML: yaml: line 211: did not find expected ',' or '}'"
}