{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/clowder-framework/clowder"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "public/swagger.yml",
			"byteSize": 168777,
			"content": "openapi: 3.0.1\n\n################################################################################\n# API Information                                                              #\n################################################################################\ninfo:\n  title: Clowder\n  description: |\n    Clowder is a customizable and scalable data management system to support any\n    data format and multiple research domains. It is under active development\n    and deployed for a variety of research projects.\n  version: 1.20.0\n  termsOfService: https://clowder.ncsa.illinois.edu/clowder/tos\n  contact:\n    name: Clowder\n    url: https://clowder.ncsa.illinois.edu/clowder/email\n  license:\n    name: The University of Illinois/NCSA Open Source License (NCSA)\n    url: https://github.com/clowder-framework/clowder/blob/master/LICENSE\n\n################################################################################\n# Servers                                                                      #\n################################################################################\nservers:\n  - url: https://clowder.ncsa.illinois.edu/clowder/api\n    description: Demo clowder server, runs latest released version of clowder.\n  - url: https://clowder-dev.ncsa.illinois.edu/clowder/api\n    description: Demo clowder server, runs the latest development of clowder.\n\n################################################################################\n# Security                                                                     #\n################################################################################\nsecurity:\n  - login: []\n  - apikey: []\n  - key: []\n\n################################################################################\n# Tags                                                                         #\n################################################################################\ntags:\n  - name: search\n    description: The basic search endpoint allows searching across resources.\n  - name: files\n    description: A file is the raw bytes plus metadata.\n  - name: folders\n    description: A folder is a container of files and other folders\n  - name: datasets\n    description: A dataset is a container for files and metadata\n  - name: collections\n    description: Collections are groupings of datasets\n  - name: spaces\n    description: Spaces are groupings of collections and datasets.\n  - name: extractions\n    description: Extractions for Files.\n  - name: thumbnails\n    description: A thumbnail is the raw bytes plus metadata.\n  - name: curations\n    description: |\n      A curation object is a request for publication that captures the state of\n      a dataset ready for publication\n  - name: logos\n    description: Logos and other data used in Clowder that is customizable\n  - name: metadata\n    description: Metadata is the descrption or data of data\n  - name: section\n    description: Files section is a select part from image file, with a tag or comment\n  - name: admin\n    description: Server admin actions\n\n\n################################################################################\n# Parameters                                                                   #\n################################################################################\n\n################################################################################\n# Paths                                                                        #\n################################################################################\npaths:\n\n  ##############################################################################\n  # Search                                                                     #\n  ##############################################################################\n\n  /search:\n    get:\n      tags:\n        - search\n      summary: Perform a basic search\n      description: |\n        Return files, datasets and/or collections matching query criteria. Search\n        can be filtered by a specific resource ID, limited to tags or specific\n        metadata fields.\n      parameters:\n        - name: query\n          in: query\n          description: String term to search for. Can include regular expressions using\n            Elasticsearch syntax.\n          schema:\n            type: string\n        - name: resource_type\n          in: query\n          description: Restrict search results to \"file\", \"dataset\", or \"collection\".\n          schema:\n            type: string\n        - name: datasetid\n          in: query\n          description: Return only resources belonging to a specific dataset.\n          schema:\n            type: string\n        - name: collectionid\n          in: query\n          description: Return only resources belonging to a specific collection.\n          schema:\n            type: string\n        - name: spaceid\n          in: query\n          description: Return only resources belonging to a specific space.\n          schema:\n            type: string\n        - name: folderid\n          in: query\n          description: Return only resources belonging to a specific folder.\n          schema:\n            type: string\n        - name: field\n          in: query\n          description: Restrict search to a specific metadata field, e.g. \"Alternative\n            Title\".\n          schema:\n            type: string\n        - name: tag\n          in: query\n          description: Search for resources with a specific tag.\n          schema:\n            type: string\n        - name: from\n          in: query\n          description: Starting index of first result; useful for pagination.\n          schema:\n            type: integer\n        - name: size\n          in: query\n          description: Number of search results to include; useful for pagination.\n          schema:\n            type: integer\n        - name: page\n          in: query\n          description: An alternative to \"from\" for pagination. Return the Nth page\n            assuming \"size\" items per page.\n          schema:\n            type: integer\n        - name: sort\n          in: query\n          description: A date or numeric field to sort by. If order is given but no field specified, created date is used.\n          schema:\n            type: string\n        - name: order\n          in: query\n          description: Whether to scored in asc (ascending) or desc (descending) order. If a field is given without an order, asc is used.\n          schema:\n            type: string\n            enum: [asc, desc]\n            default: asc\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  ##############################################################################\n  # Files                                                                      #\n  ##############################################################################\n\n  /files:\n    get:\n      tags:\n        - files\n      summary: List all files\n      description: Returns list of files and descriptions.\n      responses:\n        '200':\n          description: Successfully returns a list of files\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/File'\n        '401':\n          $ref: '#/components/responses/Disabled'\n\n  /files/{id}:\n    parameters:\n      - $ref: '#/components/parameters/fileId'\n    get:\n      tags:\n        - files\n      summary: Download file\n      description: |\n        Can use Chunked transfer encoding if the HTTP header RANGE is set.\n        This function will be reused to actually download the metadata of\n        the file, please use /files/{id}/blob to get the actual bytes.\n      responses:\n        200:\n          $ref: '#/components/responses/Blob'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n    delete:\n      tags:\n        - files\n      summary: Delete file\n      description: |\n        Cascading action (removes file from any datasets containing it and\n        deletes its previews, metadata and thumbnail).\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/blob:\n    get:\n      tags:\n        - files\n      summary: Download file\n      description: Can use Chunked transfer encoding if the HTTP header RANGE is set.\n      parameters:\n        - $ref: '#/components/parameters/fileId'\n      responses:\n        200:\n          $ref: '#/components/responses/Blob'\n        400:\n          $ref: '#/components/responses/BadRequest'\n        401:\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/remove:\n    post:\n      tags:\n        - files\n      summary: Delete file\n      description: use DELETE /files/{id} instead\n      parameters:\n        - $ref: '#/components/parameters/fileId'\n      responses:\n        200:\n          description: OK\n          content: {}\n      deprecated: true\n\n  /files/bulkRemove:\n    post:\n      tags:\n        - files\n      summary: Deletes files\n      description: Deletes a list of files by fileIds\n      responses:\n        '200':\n          description: Returns Status Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UUID'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/getPreviews:\n    get:\n      tags:\n        - files\n      summary: Get file previews\n      description: |\n        Return the currently existing previews of the selected file (full\n        description, including paths to preview files, previewer names etc).\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/metadata:\n    get:\n      tags:\n        - files\n      summary: Retrieve physical file object metadata\n      description: |\n        Get information of the file object (not the resource it describes) as JSON.\n        For example, size of file, date created, content type, filename.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully returns a list of files\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/File'\n        '401':\n          $ref: '#/components/responses/Disabled'\n        '404':\n          $ref: '#/components/responses/NotFound'\n    post:\n      tags:\n        - files\n      summary: Add technical metadata to file\n      description: |\n        Metadata in attached JSON object will describe the file's described\n        resource, not the file object itself.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: false\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/paths:\n    get:\n      tags:\n        - files\n      summary: Get path to file in dataset\n      description: |\n        Return the path from the dataset down to the folder\n        containing this file id.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /files/{id}/sendArchiveRequest:\n    post:\n      tags:\n        - files\n      summary: Submit this file to be archived\n      description: |\n        Submit this file to the queue to be archived.\n        This requires RabbitMQ and a compatible archival extractor to be running.\n        See https://github.com/clowder-framework/extractors-archival\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/archive:\n    post:\n      tags:\n        - files\n      summary: Changes a file's status to ARCHIVED\n      description: |\n        Callback that will change a file's status to ARCHIVED.\n        This is used by archival extractors and is not typically used by clients.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/sendUnarchiveRequest:\n    post:\n      tags:\n        - files\n      summary: Submit this file to be unarchived\n      description: |\n        Submit this file to the queue to be unarchived.\n        This requires RabbitMQ and a compatible archival extractor to be running.\n        See https://github.com/clowder-framework/extractors-archival\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/unarchive:\n    post:\n      tags:\n        - files\n      summary: Changes a file's status back to PROCESSED\n      description: |\n        Callback that will change a file's status back to PROCESSED.\n        This is used by archival extractors and is not typically used by clients.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n\n  /files/{id}/extractions:\n    post:\n      tags:\n        - files\n        - extractions\n      summary: Submit file for extraction by a specific extractor\n      description: Extractions for Files.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: array\n                  items:\n                    type: string\n                extractor:\n                  type: string\n                  description: the extractor Id\n              example:\n                extractor: ncsa.image.metadata\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n\n  /files/{id}/extractions/{msg_id}:\n    delete:\n      tags:\n        - files\n        - extractions\n      summary: Cancel a submitted file extraction.\n      description: Extractions for file.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: msg_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /uploadToDataset/{id}:\n    post:\n      tags:\n        - files\n        - datasets\n      summary: Upload a file to a specific dataset\n      description: |\n        Uploads the file, then links it with the dataset. Returns file id as\n        JSON object, or ids with filenames if multiple files are sent. ID can be\n        used to work on the file using the API. Uploaded file can be an XML\n        metadata file to be added to the dataset. If the optional Boolean\n        parameter extract is set to false, it does not send the file for\n        extraction. By default, Boolean parameter extract is set to true.\n      parameters:\n        - name: id\n          in: path\n          description: the dataset id\n          required: true\n          schema:\n            type: string\n        - name: showPreviews\n          in: query\n          description: default as \"DatasetLevel\"\n          schema:\n            type: string\n        - name: originalZipFile\n          in: query\n          description: the UUID string of original zip file\n          schema:\n            type: string\n        - name: flags\n          in: query\n          description: flags for previews\n          schema:\n            type: string\n        - name: extract\n          in: query\n          schema:\n            type: boolean\n        - name: folder_id\n          in: query\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n                - File\n              properties:\n                File:\n                  type: string\n                  description: |\n                    The file to upload to the dataset. if no specific key is provided,\n                    will attempt to upload every file. Otherwise, only upload the specific\n                    key we were given (e.g. \"File\")\n                  format: binary\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/unfollow:\n    post:\n      tags:\n        - files\n      summary: Unfollow file\n      description: |\n        Remove user from file followers and remove file from user followed\n        files.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /files/{id}/listpreviews:\n    get:\n      tags:\n        - files\n      summary: List file previews\n      description: |\n        Return the currently existing previews' basic characteristics (id,\n        filename, content type) of the selected file.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/withFlags/{flags}:\n    post:\n      tags:\n        - files\n      summary: Upload file\n      description: |\n        Upload the attached file using multipart form enconding. Returns file id\n        as JSON object, or ids with filenames if multiple files are sent. ID can\n        be used to work on the file using the API. Uploaded file can be an XML\n        metadata file.\n      parameters:\n        - name: flags\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /files/{id}/usermetadata:\n    post:\n      tags:\n        - files\n      summary: Add user-generated metadata to file\n      description: |\n        Metadata in attached JSON object will describe the file's described\n        resource, not the file object itself.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-codegen-request-body-name: metadata\n\n  /files/getRDFURLsForFile/{id}:\n    get:\n      tags:\n        - files\n      summary: Get URLs of file's RDF metadata exports.\n      description: |\n        URLs of metadata files exported from XML (if the file was an XML\n        metadata file) as well as the URL used to export the file's\n        user-generated metadata as RDF.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /previews:\n    post:\n      tags:\n        - files\n        - previews\n      summary: Upload a preview\n      description: Upload a preview\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n                - File\n              properties:\n                File:\n                  type: string\n                  description: |\n                    The preview to upload to the dataset. if no specific key is provided,\n                    will attempt to upload every file. Otherwise, only upload the specific\n                    key we were given (e.g. \"File\")\n                  format: binary\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /files/{id}/previews/{p_id}:\n    post:\n      tags:\n        - files\n      summary: Attach existing preview to file\n      description: A file is the raw bytes plus metadata.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: p_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                extractor_id:\n                  type: string\n        required: false\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/isBeingProcessed:\n    get:\n      tags:\n        - files\n      summary: Is being processed\n      description: Return whether a file is currently being processed by a preprocessor.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/reindex:\n    post:\n      tags:\n        - files\n      summary: Reindex a file\n      description: Reindex the existing file.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/filename:\n    put:\n      tags:\n        - files\n      summary: Update a file name\n      description: |\n        Takes one argument, a UUID of the file. Request body takes a key-value\n        pair for the name\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /files/{id}/updateMetadata:\n    post:\n      tags:\n        - files\n      summary: Update technical metadata of a file generated by a specific extractor\n      description: |\n        Metadata in attached JSON object will describe the file's described\n        resource, not the file object itself. The method will search the entire\n        techincal metadata array for the metadata generated by a specific\n        extractor (using extractor_id provided as an argument) and if a match is\n        found, it will update the corresponding metadata element.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: extractor_id\n          in: query\n          schema:\n            type: string\n      requestBody:\n        description: json body that can be parsed as DBObject\n        content:\n          application/json:\n            schema:\n              type: object\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-codegen-request-body-name: metadata\n\n  /files/{id}/follow:\n    post:\n      tags:\n        - files\n      summary: Follow file\n      description: Add user to file followers and add file to user followed files.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /files/{id}/metadata.jsonld:\n    get:\n      tags:\n        - files\n      summary: Retrieve metadata as JSON-LD\n      description: Get metadata of the file object as JSON-LD.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: extractor\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n    post:\n      tags:\n        - files\n      summary: Add JSON-LD metadata to the database.\n      description: |\n        Metadata in attached JSON-LD object will be added to metadata Mongo db\n        collection.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JSONLD'\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-codegen-request-body-name: matadata.jsonld\n    delete:\n      tags:\n        - files\n      summary: Remove JSON-LD metadata, filtered by extractor if necessary\n      description: Remove JSON-LD metadata from file object\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: extractor\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/metadata.jsonld:\n    get:\n      tags:\n        - files\n      summary: Retrieve metadata as JSON-LD for multiple files at once\n      description: Use ?id=123\u0026id=456\u0026... to retrieve metadata for multiple files\n        at once.\n      parameters:\n        - name: id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n    post:\n      tags:\n        - files\n      summary: Add JSON-LD metadata to multiple files at once.\n      description: |\n        JSON object in post should have a list of file IDs under \"files\" key and metadata under \"metadata\" key.\n        Metadata will be added to each file in metadata Mongo db collection.\n      requestBody:\n        description: the metadata to add and the file IDs to add it to\n        content:\n          application/json:\n            schema:\n              required:\n                - files\n                - metadata\n              type: object\n              properties:\n                files:\n                  type: array\n                  items:\n                    type: string\n                metadata:\n                  type: object\n                  properties: {}\n        required: false\n      responses:\n        200:\n          description: OK\n          content: {}\n      x-codegen-request-body-name: contents\n\n  /files/{id}/tags:\n    get:\n      tags:\n        - files\n      summary: Gets tags of a file\n      description: Returns a list of strings, List[String].\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n    post:\n      tags:\n        - files\n      summary: Adds tags to a file\n      description: |\n        Tag's (name, userId, extractor_id) tuple is used as a unique key. In\n        other words, the same tag names but diff userId or extractor_id are\n        considered as diff tags, so will be added.  The tags are expected as a\n        list of strings: List[String].  An example is:\u003cbr\u003e    curl -H\n        'Content-Type: application/json' -d '{\"tags\":[\"namo\", \"amitabha\"],\n        \"extractor_id\": \"curl\"}'\n        \"http://localhost:9000/api/files/533c2389e4b02a14f0943356/tags?key=theKey\"\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tags'\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n    delete:\n      tags:\n        - files\n      summary: Removes tags of a file\n      description: |\n        Tag's (name, userId, extractor_id) tuple is unique key. Same tag names\n        but diff userId or extractor_id are considered diff tags. Tags can only\n        be removed by the same user or extractor.  The tags are expected as a\n        list of strings: List[String].\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /files/{id}/license:\n    post:\n      tags:\n        - files\n      summary: Update License information of a file\n      description: |\n        Takes four arguments, all Strings. licenseType, rightsHolder,\n        licenseText, licenseUrl\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/License'\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /files/{id}/versus_metadata:\n    get:\n      tags:\n        - files\n      summary: Get Versus metadata of the resource described by the file\n      description: A file is the raw bytes plus metadata.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/updateDescription:\n    put:\n      tags:\n        - files\n      summary: Update file description\n      description: |\n        Takes one argument, a UUID of the file. Request body takes key-value\n        pair for the description\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - description\n              type: object\n              properties:\n                description:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-codegen-request-body-name: description\n\n  /files/{id}/technicalmetadatajson:\n    get:\n      tags:\n        - files\n      summary: Get technical metadata of the resource described by the file\n      description: A file is the raw bytes plus metadata.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/sendJob/{fileId}/{fileType}:\n    post:\n      tags:\n        - files\n      summary: (Re)send preprocessing job for file\n      description: |\n        Force Clowder to (re)send preprocessing job for selected file,\n        processing the file as a file of the selected MIME type. Returns file id\n        on success. In the requested file type, replace / with __ (two\n        underscores).\n      parameters:\n        - name: fileId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: fileType\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/xmlmetadatajson:\n    get:\n      tags:\n        - files\n      summary: |\n        Get metadata of the resource described by the file that were input as\n        XML\n      description: A file is the raw bytes plus metadata.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/extracted_metadata:\n    get:\n      tags:\n        - files\n      summary: Provides metadata extracted for a file\n      description: A file is the raw bytes plus metadata.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /files/{id}/comment:\n    post:\n      tags:\n        - files\n      summary: Add comment to file\n      description: A file is the raw bytes plus metadata.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Comment'\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-codegen-request-body-name: comment\n\n  /files/{id}/tags/remove:\n    post:\n      tags:\n        - files\n      summary: Removes a tag from a file\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n      deprecated: true\n\n  /files/{id}/tags/remove_all:\n    post:\n      tags:\n        - files\n      summary: Removes all tags of a file\n      description: |\n        This is a big hammer -- it does not check the userId or extractor_id and\n        forcefully remove all tags for this file.  It is mainly intended for\n        testing.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /fileThumbnail:\n    post:\n      tags:\n        - files\n      summary: Upload a thumbnail\n      description: Upload a thumbnail.\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          $ref: '#/components/responses/BadRequest'\n\n  /fileThumbnail/{id}/blob:\n    post:\n      tags:\n        - files\n      summary: Download a thumbnail\n      description: Download a thumbnail.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n\n  /files/{id}/thumbnails/{thumbnail_id}:\n    post:\n      tags:\n        - files\n      summary: Add thumbnail to file\n      description: Attaches an already-existing thumbnail to a file.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: thumbnail_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/metadataDefinitions:\n    get:\n      tags:\n        - files\n      summary: Get metadata definitions available for a file\n      description: |\n        The metadata definitions come from the spaces that the dataset the file\n        is part of. Directly or within a folder\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/rdfUserMetadata/{id}:\n    get:\n      tags:\n        - files\n      summary: Get the user-generated metadata of the selected file in an RDF file\n      description: A file is the raw bytes plus metadata.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /files/{id}/usermetadatajson:\n    get:\n      tags:\n        - files\n      summary: Get community-generated metadata of the resource described by the file\n      description: A file is the raw bytes plus metadata.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /queries/{id}:\n    get:\n      tags:\n        - files\n      summary: Fetches and downloads a particular query\n      description: Fetches and downloads a particular query.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n\n  /queries/{file_id}/thumbnails/{thumbnail_id}:\n    post:\n      tags:\n        - files\n      summary: Add thumbnail to a query image\n      description: Attaches an already-existing thumbnail to a query image.\n      parameters:\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: thumbnail_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n        ##############################################################################\n        # Metadata                                                                   #\n        ##############################################################################\n\n  /metadata.jsonld/{id}:\n    delete:\n      tags:\n        - metadata\n      summary: Delete the metadata by id.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          description: Invalid Metadata\n          content: {}\n\n  /metadata/autocompletenames:\n    get:\n      tags:\n        - metadata\n      summary: Get set of metadata fields containing filter substring for autocomplete.\n      parameters:\n        - name: filter\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /metadata/distinctdefinitions:\n    get:\n      tags:\n        - metadata\n      summary: Get Vocabulary definitions with distinct names.\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /metadata/definitions:\n    get:\n      tags:\n        - metadata\n      summary: Get Vocabulary definitions.\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /metadata/definitions/{id}:\n    get:\n      tags:\n        - metadata\n      summary: Get Vocabulary definitions by id.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n\n  ##############################################################################\n  # StandardVocabulary                                                         #\n  ##############################################################################\n\n  /standardvocab:\n    get:\n      tags:\n        - metadata\n      summary: List all Standard Vocabularies\n      description: |\n        Retrieve all Standard Vocabulary objects.\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          description: Bad request\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n    post:\n      tags:\n        - metadata\n      summary: Create a new Standard Vocabulary\n      description: |\n        Requires that the request body contains a List[String] of terms.\n      requestBody:\n        description: The list of terms to add to this vocabulary.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          description: Bad request\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n\n  /standardvocab/{id}:\n    get:\n      tags:\n        - metadata\n      summary: Get a specific Standard Vocabulary\n      description: |\n        Lookup and return an existing Standard Vocabulary using its ID.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          description: Bad request\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n    put:\n      tags:\n        - metadata\n      summary: Update a Standard Vocabulary\n      description: |\n        Requires that the request body contains a List[String] of terms.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The list of terms to add to this vocabulary.\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          description: Bad request\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n    delete:\n      tags:\n        - metadata\n      summary: Delete a Standard Vocabulary\n      description: |\n        Lookup and remove a Standard Vocabulary using its ID.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /standardvocab/{id}/terms:\n    get:\n      tags:\n        - metadata\n      summary: Get the terms list of a specific Standard Vocabulary\n      description: |\n        Lookup and return the term list of an existing Standard Vocabulary\n        using its ID.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          description: Bad request\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n\n  ##############################################################################\n  # Folders                                                                    #\n  ##############################################################################\n\n  /datasets/{parentDatasetId}/newFolder:\n    post:\n      tags:\n        - folders\n      summary: Create a Folder\n      description: |\n        New empty folder. Requires the ID of the dataset within the folder will\n        be created, and the parent information\n      parameters:\n        - name: parentDatasetId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                parentId:\n                  type: string\n                parentType:\n                  type: string\n                  enum:\n                    - dataset\n                    - folder\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n\n  /datasets/{parentDatasetId}/updateName/{folderId}:\n    put:\n      tags:\n        - folders\n      summary: Update folder name\n      description: Updates a folder's name\n      parameters:\n        - name: parentDatasetId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: folderId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n\n  /datasets/{parentDatasetId}/deleteFolder/{folderId}:\n    delete:\n      tags:\n        - folders\n      summary: Delete a folder\n      description: Deletes all the files and folder within a folder and then deletes\n        itself\n      parameters:\n        - name: parentDatasetId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: folderId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  ##############################################################################\n  # DATASETS ENDPOINTS                                                         #\n  ##############################################################################\n  /datasets:\n    get:\n      tags:\n        - datasets\n      summary: List all datasets the user can view\n      description: This will check for Permission.ViewDataset\n      parameters:\n        - name: when\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: date\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: title\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The number of collections returns, default as 12.\n          schema:\n            type: integer\n        - name: exact\n          in: query\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: OK\n          content: {}\n    post:\n      tags:\n        - datasets\n      summary: Create new dataset\n      description: |\n        New dataset containing one existing file, based on values of fields in\n        attached JSON. Returns dataset id as JSON object.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - file_id\n                - name\n              type: object\n              properties:\n                name:\n                  type: string\n                description:\n                  type: string\n                space:\n                  type: string\n                file_id:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}:\n    get:\n      tags:\n        - datasets\n      summary: Get a specific dataset\n      description: This will return a specific dataset requested\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n    delete:\n      tags:\n        - datasets\n      summary: Delete dataset\n      description: |\n        Cascading action (deletes all previews and metadata of the dataset and\n        all files existing only in the deleted dataset).\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n\n  /datasets/{ds_id}/copyDatasetToSpace/{space_id}:\n    post:\n      tags:\n        - datasets\n      summary: |\n        Copy the dataset, as well as the folders and files within the dataset\n        into a space, return the new dataset id\n      description: Check AddResourceToSpace permission.\n      parameters:\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: space_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n\n  /datasets/{ds_id}/files/{file_id}:\n    post:\n      tags:\n        - datasets\n      summary: Attach existing file to dataset\n      description: |\n        If the file is an XML metadata file, the metadata are added to the\n        dataset.\n      parameters:\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{ds_id}/moveFile/{folder_id}/{file_id}:\n    post:\n      tags:\n        - datasets\n      summary: Move existing file to a new folder within the same dataset\n      parameters:\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: folder_id\n          in: path\n          description: destination folder id\n          required: true\n          schema:\n            type: string\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                folderId:\n                  type: string\n                  description: old folder id\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{ds_id}/moveToDataset/{folder_id}/{file_id}:\n    post:\n      tags:\n        - datasets\n      summary: Move existing file from the old folder to a new dataset\n      parameters:\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: folder_id\n          in: path\n          description: old folder id\n          required: true\n          schema:\n            type: string\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{ds_id}/filesRemove/{file_id}/{ignoreNotFound}:\n    post:\n      tags:\n        - datasets\n      summary: Detach existing file from a dataset\n      description: Check CreateDataset permission\n      parameters:\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: ignoreNotFound\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{ds_id}/folders:\n    get:\n      tags:\n        - datasets\n      summary: list all folders in the dataset\n      parameters:\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/tags/remove_all:\n    post:\n      tags:\n        - datasets\n      summary: Remove all tags of dataset\n      description: |\n        Forcefully remove all tags for this dataset.  It is mainly intended for\n        testing.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{ds_id}/extractions:\n    post:\n      tags:\n        - extractions\n      summary: Submit dataset for extraction by a specific extractor\n      description: Extractions for dataset.\n      parameters:\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: array\n                  items:\n                    type: string\n                extractor:\n                  type: string\n                  description: the extractor Id\n              example:\n                extractor: ncsa.image.metadata\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{ds_id}/extractions/{msg_id}:\n    delete:\n      tags:\n        - extractions\n      summary: Cancel a submitted dataset extraction.\n      description: Extractions for dataset.\n      parameters:\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: msg_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/tags:\n    get:\n      tags:\n        - datasets\n      summary: Get the tags associated with this dataset\n      description: Returns a JSON object of multiple fields\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n    post:\n      tags:\n        - datasets\n      summary: Add tags to dataset\n      description: |\n        Requires that the request body contains a 'tags' field of List[String]\n        type.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tags'\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n    delete:\n      tags:\n        - datasets\n      summary: Remove tags of dataset\n      description: |\n        Requires that the request body contains a 'tags' field of List[String]\n        type.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/addFileEvent:\n    post:\n      tags:\n        - datasets\n      summary: Insert add_file Event\n      description: Insert an Event into the Events Collection\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: inFolder\n          in: query\n          description: if the file is add directly to the dataset or add to a folder\n          required: true\n          schema:\n            type: boolean\n        - name: fileCount\n          in: query\n          required: true\n          schema:\n            type: number\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/isBeingProcessed:\n    get:\n      tags:\n        - datasets\n      summary: Is being processed\n      description: Return whether a dataset is currently being processed by a preprocessor.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/createempty:\n    post:\n      tags:\n        - datasets\n      summary: Create new dataset with no file\n      description: |\n        New dataset requiring zero files based on values of fields in attached\n        JSON. Returns dataset id as JSON object. Requires name, description, and\n        space. Optional list of existing file ids to add.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Dataset'\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-codegen-request-body-name: dataset\n\n  /datasets/{id}/description:\n    put:\n      tags:\n        - datasets\n      summary: Update dataset description.\n      description: |\n        Takes one argument, a UUID of the dataset. Request body takes key-value\n        pair for description.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - description\n              type: object\n              properties:\n                description:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n      x-codegen-request-body-name: description\n\n  /datasets/{id}/usermetadata:\n    post:\n      tags:\n        - datasets\n      summary: Add user-generated metadata to dataset\n      description: A dataset is a container for files and metadata\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: false\n      responses:\n        200:\n          description: OK\n          content: {}\n      x-codegen-request-body-name: metadata\n\n  /datasets/{id}/technicalmetadatajson:\n    get:\n      tags:\n        - datasets\n      summary: List extractors generated metadata of a dataset\n      description: A dataset is a container for files and metadata\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}/usermetadatajson:\n    get:\n      tags:\n        - datasets\n      summary: Get community-generated metadata of the resource described by the dataset\n      description: A dataset is a container for files and metadata\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}/xmlmetadatajson:\n    get:\n      tags:\n        - datasets\n      summary: |\n        Get metadata of the resource described by the dataset that were input as\n        XML\n      description: A dataset is a container for files and metadata\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{ds_id}/{file_id}:\n    delete:\n      tags:\n        - datasets\n      summary: Detach file from dataset\n      description: |\n        File is not deleted, only separated from the selected dataset. If the\n        file is an XML metadata file, the metadata are removed from the dataset.\n      parameters:\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/comment:\n    post:\n      tags:\n        - datasets\n      summary: Add comment to dataset\n      description: A dataset is a container for files and metadata\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Comment'\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-codegen-request-body-name: comment\n\n  /datasets/{id}/user:\n    get:\n      tags:\n        - datasets\n      summary: List all users in the spaces that contain this dataset in json-ld format\n      description: A dataset is a container for files and metadata\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/metadata:\n    get:\n      tags:\n        - datasets\n      summary: |\n        Retrieve available metadata definitions for a dataset. It is an\n        aggregation of the metadata that a space belongs to.\n      description: A dataset is a container for files and metadata\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n    post:\n      tags:\n        - datasets\n      summary: Add metadata to dataset\n      description: |\n        The extractor is set as \"http://clowder.ncsa.illinois.edu/extractors/deprecatedapi\",\n        contextURL and contextID as None.\n        Returns success or failure.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-codegen-request-body-name: json\n\n  /datasets/getRDFURLsForDataset/{id}:\n    get:\n      tags:\n        - datasets\n      summary: Get URLs of dataset's RDF metadata exports\n      description: |\n        URLs of metadata exported as RDF from XML files contained in the\n        dataset, as well as the URL used to export the dataset's user-generated\n        metadata as RDF.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/rdfUserMetadata/{id}:\n    get:\n      tags:\n        - datasets\n      summary: Get the user-generated metadata of the selected dataset in an RDF file\n      description: A dataset is a container for files and metadata\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}/unfollow:\n    post:\n      tags:\n        - datasets\n      summary: Unfollow dataset.\n      description: |\n        Remove user from dataset followers and remove dataset from user followed\n        datasets.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/creator:\n    post:\n      tags:\n        - datasets\n      summary: Add a creator to the Dataset's list of Creators.\n      description: |\n        Takes one argument, a UUID of the dataset. Request body takes key-value\n        pair for creator.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                creator:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n      x-codegen-request-body-name: creator\n\n  /datasets/{id}/creator/remove:\n    delete:\n      tags:\n        - datasets\n      summary: Remove a creator from the Dataset's list of Creators.\n      description: Takes the UUID of the dataset and the entry to delete (a String).\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: creator\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/creator/reorder:\n    put:\n      tags:\n        - datasets\n      summary: Move a creator in a Dataset's list of creators.\n      description: |\n        Takes the UUID of the dataset, the creator to move (a String) and the\n        new position of the creator in the overall list of creators.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: creator\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: newPos\n          in: query\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/detachdelete:\n    post:\n      tags:\n        - datasets\n      summary: Detach and delete dataset\n      description: |\n        Detaches all files before proceeding to perform the stanadard delete on\n        the dataset.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/access:\n    put:\n      tags:\n        - datasets\n      summary: change the access of dataset\n      description: Downloads all files contained in a dataset.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: access\n          in: query\n          description: default as PRIVATE\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/canEdit:\n    get:\n      tags:\n        - datasets\n      summary: List all datasets the user can edit\n      description: |\n        This will check for Permission.AddResourceToDataset and\n        Permission.EditDataset\n      parameters:\n        - name: when\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: date\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: title\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The number of collections returns, default as 12.\n          schema:\n            type: integer\n        - name: exact\n          in: query\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/title:\n    put:\n      tags:\n        - datasets\n      summary: Update dataset name\n      description: |\n        Takes one argument, a UUID of the dataset. Request body takes key-value\n        pair for name.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n              type: object\n              properties:\n                name:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/queueArchival:\n    post:\n      tags:\n        - datasets\n      summary: Queue up all files in a dataset to be marked as ARCHIVED\n      description: |\n        Queue up all files in a dataset to be marked as ARCHIVED\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}/queueUnarchival:\n    post:\n      tags:\n        - datasets\n      summary: Queue up all files in a dataset to be marked as PROCESSED\n      description: |\n        Queue up all files in a dataset to be marked as PROCESSED\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /collections/{coll_id}/getDatasets:\n    get:\n      tags:\n        - datasets\n      summary: List all datasets in a collection\n      description: Returns list of datasets and descriptions.\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n      deprecated: true\n\n  /datasets/listOutsideCollection/{coll_id}:\n    get:\n      tags:\n        - datasets\n      summary: List all datasets outside a collection\n      description: Returns list of datasets and descriptions.\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/editing:\n    post:\n      tags:\n        - datasets\n      summary: Update dataset administrative information\n      description: |\n        Takes one argument, a UUID of the dataset. Request body takes key-value\n        pairs for name and description.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - description\n                - name\n              type: object\n              properties:\n                name:\n                  type: string\n                description:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/getPreviews:\n    get:\n      tags:\n        - datasets\n      summary: Get dataset previews\n      description: |\n        Return the currently existing previews of the selected dataset (full\n        description, including paths to preview files, previewer names etc).\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/searchmetadata:\n    post:\n      tags:\n        - datasets\n      summary: List datasets satisfying a general metadata search tree\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/searchusermetadata:\n    post:\n      tags:\n        - datasets\n      summary: List datasets satisfying a user metadata search tree\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/metadata.jsonld:\n    get:\n      tags:\n        - datasets\n      summary: Retrieve metadata as JSON-LD\n      description: Get metadata of the dataset object as JSON-LD.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: extractor\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n    post:\n      tags:\n        - datasets\n      summary: Add JSON-LD metadata to the database.\n      description: |\n        Metadata in attached JSON-LD object will be added to metadata Mongo db\n        collection.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/JSONLD'\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n      x-codegen-request-body-name: matadata.jsonld\n    delete:\n      tags:\n        - datasets\n      summary: Remove JSON-LD metadata, filtered by extractor if necessary\n      description: Remove JSON-LD metadata from dataset object\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: extractor\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}/license:\n    post:\n      tags:\n        - datasets\n      summary: Update license information of a dataset\n      description: |\n        Takes four arguments, all Strings. licenseType, rightsHolder,\n        licenseText, licenseUrl\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/License'\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/follow:\n    post:\n      tags:\n        - datasets\n      summary: Follow dataset\n      description: Add user to dataset followers and add dataset to user followed\n        datasets.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/attachmultiple:\n    post:\n      tags:\n        - datasets\n      summary: Attach multiple files to an existing dataset\n      description: |\n        Add multiple files, by ID, to a dataset that is already in the system.\n        Requires file ids and dataset id.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - datasetid\n                - existingfiles\n              type: object\n              properties:\n                datasetid:\n                  type: string\n                existingfiles:\n                  type: string\n                  description: file ids seperated by comma\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}/reindex:\n    post:\n      tags:\n        - datasets\n      summary: Reindex a dataset\n      description: |\n        Reindex the existing dataset, if recursive is set to true if will also\n        reindex all files in that dataset.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}/files:\n    get:\n      tags:\n        - datasets\n      summary: List files in dataset, including those within folders\n      description: Datasets and descriptions.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: max\n          in: query\n          schema:\n            type: number\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n    post:\n      tags:\n        - datasets\n      summary: Upload files and attach to given dataset\n      description: |\n        This will take a list of url or path objects that point to files that\n        will be ingested and added to this dataset.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n                - File\n              properties:\n                File:\n                  type: string\n                  description: |\n                    The file to upload to the dataset. if no specific key is provided,\n                    will attempt to upload every file. Otherwise, only upload the specific\n                    key we were given (e.g. \"File\")\n                  format: binary\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}/urls:\n    post:\n      tags:\n        - datasets\n      summary: Upload files and attach to given dataset\n      description: |\n        This will take an URL of file object that are added to this dataset,\n        the file source will be added as metadata. Request body takes key-value\n        pairs for file url, the key can be fileurl, weburl or url.\n        This can also add metadata at the same time.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: the key can be fileurl, weburl or url\n        content:\n          application/json:\n            schema:\n              type: object\n        required: false\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/moveFileToDataset:\n    get:\n      tags:\n        - datasets\n      summary: |\n        List all datasets in the space the user can edit and thus move the file\n        to\n      description: |\n        This will check for Permission.AddResourceToDataset and\n        Permission.EditDataset\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/listFiles:\n    get:\n      tags:\n        - datasets\n      summary: List files in dataset not in any folders\n      description: Datasets and descriptions.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{ds_id}/listAllFiles:\n    get:\n      tags:\n        - datasets\n      summary: List all file within a dataset\n      parameters:\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}/removeTag:\n    post:\n      tags:\n        - datasets\n      summary: Remove tag of dataset\n      description: A dataset is a container for files and metadata\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The body of the POST request.\n        content:\n          application/json:\n            schema:\n              required:\n                - tagId\n              type: object\n              properties:\n                tagId:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{datasetId}/moveBetweenDatasets/{toDataset}/{fileId}:\n    post:\n      tags:\n        - datasets\n      summary: Attach existing file to a new dataset and delete it from the old one\n      description: |\n        If the file is an XML metadata file, the metadata are added to the\n        dataset.\n      parameters:\n        - name: datasetId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: toDataset\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: fileId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}/download:\n    get:\n      tags:\n        - datasets\n      summary: Download dataset\n      description: Downloads all files contained in a dataset.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: compression\n          in: query\n          description: default as -1\n          schema:\n            type: number\n        - name: tracking\n          in: query\n          description: default as true\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/downloadPartial:\n    get:\n      tags:\n        - datasets\n      summary: Download a subset of files from a dataset\n      description: Takes dataset ID and a JSON-string representing a list of file IDs\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: fileList\n          in: query\n          description: ID of the files to download from the dataset\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/{id}/downloadFolder:\n    get:\n      tags:\n        - datasets\n      summary: Download a folder from a dataset\n      description: Takes dataset ID and a folder ID in that dataset and streams just that folder and sub-folders as a zip\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: folderId\n          in: query\n          description: ID of the folder to download\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/clearOldDatasetsTrash:\n    delete:\n      tags:\n        - datasets\n      summary: Deleted all datasets in trash older than days specified\n      description: Server admin action.\n      parameters:\n        - name: days\n          in: query\n          schema:\n            type: number\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/emptyTrash:\n    delete:\n      tags:\n        - datasets\n      summary: Emptying trash datasets\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /datasets/listTrash:\n    get:\n      tags:\n        - datasets\n      summary: list trash datasets\n      parameters:\n        - name: limit\n          in: query\n          schema:\n            type: number\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/restore/{id}:\n    put:\n      tags:\n        - datasets\n      summary: restore a trash dataset\n      description: |\n        This will check for Permission.DeleteDataset\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /datasets/{id}/tags/remove:\n    post:\n      tags:\n        - datasets\n      summary: remove a tag from a dataset\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n      deprecated: true\n\n\n  ##############################################################################\n  # COLLECTIONS ENDPOINTS                                                      #\n  ##############################################################################\n  /collections:\n    get:\n      tags:\n        - collections\n      summary: Return a list of collections that fit the query standard and user has\n        view permission\n      description: Collections are groupings of datasets\n      parameters:\n        - name: when\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: title\n          in: query\n          description: The title/ name of colletions\n          schema:\n            type: string\n        - name: date\n          in: query\n          description: The date collection is created\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The number of collections returns, default as 12.\n          schema:\n            type: integer\n        - name: exact\n          in: query\n          schema:\n            type: boolean\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n    post:\n      tags:\n        - collections\n      summary: Create a collection\n      description: Collections are groupings of datasets\n      requestBody:\n        description: The body of the POST request to create a collection.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Collection'\n        required: false\n      responses:\n        200:\n          description: OK\n          content: {}\n      x-codegen-request-body-name: collection\n\n  /collections/{coll_id}:\n    get:\n      tags:\n        - collections\n      summary: Get a specific collection\n      description: Get a specific collection\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n    delete:\n      tags:\n        - collections\n      summary: Remove collection\n      description: Does not delete the individual datasets in the collection.\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/getParentCollections:\n    get:\n      tags:\n        - collections\n      summary: Get parent collections for collection\n      description: Collections are groupings of datasets\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/allCollections:\n    get:\n      tags:\n        - collections\n      summary: Get all collections\n      description: Collections are groupings of datasets\n      parameters:\n        - name: limit\n          in: query\n          schema:\n            type: integer\n        - name: showAll\n          in: query\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/title:\n    put:\n      tags:\n        - collections\n      summary: Update a collection name\n      description: |\n        Takes one argument, a UUID of the collection. Request body takes a\n        key-value pair for the name\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n              type: object\n              properties:\n                name:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/possibleParents:\n    get:\n      tags:\n        - collections\n      summary: |\n        List all collections the user can edit except itself and its parent\n        collections\n      description: |\n        This will check for Permission.AddResourceToCollection and\n        Permission.EditCollection\n      parameters:\n        - name: when\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: currentCollectionId\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: title\n          in: query\n          schema:\n            type: string\n        - name: date\n          in: query\n          schema:\n            type: string\n        - name: limit\n          in: query\n          schema:\n            type: number\n        - name: exact\n          in: query\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{id}/unfollow:\n    post:\n      tags:\n        - collections\n      summary: Unfollow collection.\n      description: |\n        Remove user from collection followers and remove collection from user\n        followed collections.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/topLevelCollections:\n    get:\n      tags:\n        - collections\n      summary: Get all root collections or collections that do not have a parent\n      description: Collections are groupings of datasets\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/rootCollections:\n    get:\n      tags:\n        - collections\n      summary: Get all root collections\n      description: Collections are groupings of datasets\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/removeSubCollection/{sub_coll_id}:\n    post:\n      tags:\n        - collections\n      summary: Remove subcollection from collection\n      description: Collections are groupings of datasets\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: sub_coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/canEdit:\n    get:\n      tags:\n        - collections\n      summary: List all collections the user can edit\n      description: |\n        This will check for Permission.AddResourceToCollection and\n        Permission.EditCollection\n      parameters:\n        - name: when\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: title\n          in: query\n          schema:\n            type: string\n        - name: date\n          in: query\n          schema:\n            type: string\n        - name: limit\n          in: query\n          schema:\n            type: number\n        - name: exact\n          in: query\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/clearOldCollectionsTrash:\n    delete:\n      tags:\n        - collections\n      summary: Deleted all collections in trash older than days specified\n      description: Server admin action.\n      parameters:\n        - name: days\n          in: query\n          schema:\n            type: number\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/emptyTrash:\n    delete:\n      tags:\n        - collections\n      summary: Emptying trash collections\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/listTrash:\n    get:\n      tags:\n        - collections\n      summary: list trash collections\n      parameters:\n        - name: limit\n          in: query\n          schema:\n            type: number\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/restore/{coll_id}:\n    put:\n      tags:\n        - collections\n      summary: restore a trash collection\n      description: |\n        This will check for Permission.DeleteCollection\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/addSubCollection/{sub_coll_id}:\n    post:\n      tags:\n        - collections\n      summary: Add subcollection to collection\n      description: Collections are groupings of datasets\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: sub_coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/getChildCollections:\n    get:\n      tags:\n        - collections\n      summary: Get child collections in collection\n      description: Collections are groupings of datasets\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/datasets:\n    get:\n      tags:\n        - collections\n      summary: list all datasets in the collection\n      description: Collections are groupings of datasets\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/datasetPossibleParents/{ds_id}:\n    get:\n      tags:\n        - collections\n      summary: |\n        If dataset is in a space, list all collections can be the parent of\n        the dataset in this space, otherwise list all possiable collections\n      description: Collections are groupings of datasets\n      parameters:\n        - name: when\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: title\n          in: query\n          schema:\n            type: string\n        - name: date\n          in: query\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: default as 12\n          schema:\n            type: number\n        - name: exact\n          in: query\n          description: default as false\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/datasets/{ds_id}:\n    post:\n      tags:\n        - collections\n      summary: Add dataset to collection\n      description: Collections are groupings of datasets\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n    delete:\n      tags:\n        - collections\n      summary: Detach a dataset from collection\n      description: Collections are groupings of datasets\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: ignoreNotFound\n          in: query\n          description: default as True\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{c_id}/previews/{p_id}:\n    post:\n      tags:\n        - collections\n      summary: Attach existing preview to collection\n      description: Collections are groupings of datasets\n      parameters:\n        - name: c_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: p_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                extractor_id:\n                  type: string\n                preview_type:\n                  type: string\n        required: false\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{id}/follow:\n    post:\n      tags:\n        - collections\n      summary: Follow collection.\n      description: |\n        Add user to collection followers and add collection to user followed\n        collections.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/getParentCollectionIds:\n    get:\n      tags:\n        - collections\n      summary: Get parent collection ids of collection\n      description: Collections are groupings of datasets\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/reindex:\n    post:\n      tags:\n        - collections\n      summary: Reindex a collection\n      description: |\n        Reindex the existing collection, if recursive is set to true it will\n        also reindex all datasets and files.\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/unsetRootFlag/{spaceId}:\n    post:\n      tags:\n        - collections\n      summary: Removes root flag from a collection in  a space\n      description: Collections are groupings of datasets\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: spaceId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{coll_id}/removeFromSpaceAllowed/{space_id}:\n    get:\n      tags:\n        - collections\n      summary: Checks if we can remove a collection from a space\n      description: |\n        This will check if the collection has parent collection in this space.\n        If not, we can remove the collection from the space\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: space_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                example: true\n\n  /collections/{coll_id}/getChildCollectionIds:\n    get:\n      tags:\n        - collections\n      summary: Get child collection ids in collection\n      description: Collections are groupings of datasets\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/newCollectionWithParent:\n    post:\n      tags:\n        - collections\n      summary: Create a collection with parent\n      description: Collections are groupings of datasets\n      requestBody:\n        description: The body of the POST request to create a collection.\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n              type: object\n              properties:\n                name:\n                  type: string\n                description:\n                  type: string\n                space:\n                  type: string\n                googleAnalytics:\n                  type: string\n                parentId:\n                  type: string\n        required: false\n      responses:\n        200:\n          description: OK\n          content: {}\n      x-codegen-request-body-name: collection\n\n  /collections/{coll_id}/description:\n    put:\n      tags:\n        - collections\n      summary: Update collection description\n      description: |\n        Takes one argument, a UUID of the collection. Request body takes\n        key-value pair for the description\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - description\n              type: object\n              properties:\n                description:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          description: Not Found\n          content: {}\n      x-codegen-request-body-name: description\n\n  /collections/{coll_id}/rootFlag/{spaceId}:\n    post:\n      tags:\n        - collections\n      summary: Add root flags for a collection in space\n      description: Collections are groupings of datasets\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: spaceId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/{id}/download:\n    get:\n      tags:\n        - collections\n      summary: Download collection\n      description: Downloads all child collections, datasets and files in a collection.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: compression\n          in: query\n          description: default as -1\n          schema:\n            type: number\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /collections/list:\n    get:\n      tags:\n        - collections\n      summary: List all collections the user can view\n      description: This will check for Permission.ViewCollection\n      parameters:\n        - name: when\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: title\n          in: query\n          schema:\n            type: string\n        - name: date\n          in: query\n          schema:\n            type: string\n        - name: limit\n          in: query\n          schema:\n            type: number\n        - name: exact\n          in: query\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: OK\n          content: {}\n      deprecated: true\n\n  /collections/{coll_id}/datasetsRemove/{ds_id}/{ignoreNotFound}:\n    post:\n      tags:\n        - collections\n      summary: Remove a dataset from a collection.\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: ignoreNotFound\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n      deprecated: true\n\n  /collections/{coll_id}/remove:\n    post:\n      tags:\n        - collections\n      summary: remove a collection\n      parameters:\n        - name: coll_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n      deprecated: true\n\n  ##############################################################################\n  # SPACES ENDPOINTS                                                           #\n  ##############################################################################\n  /spaces:\n    get:\n      tags:\n        - spaces\n      summary: List spaces the user can view\n      description: Retrieves information about spaces\n      parameters:\n        - name: when\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: title\n          in: query\n          schema:\n            type: string\n        - name: date\n          in: query\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: default as 12\n          schema:\n            type: number\n      responses:\n        200:\n          description: OK\n          content: {}\n    post:\n      tags:\n        - spaces\n      summary: Create a space\n      description: Spaces are groupings of collections and datasets.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Space'\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          $ref: '#/components/responses/BadRequest'\n\n  /spaces/{id}:\n    get:\n      tags:\n        - spaces\n      summary: Get a space\n      description: Retrieves information about a space\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n    delete:\n      tags:\n        - spaces\n      summary: Remove a space\n      description: Does not delete the individual datasets and collections in the\n        space.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/{spaceId}/removeDataset/{datasetId}:\n    post:\n      tags:\n        - spaces\n      summary: Remove a dataset from a space\n      description: Spaces are groupings of collections and datasets.\n      parameters:\n        - name: spaceId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: datasetId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/{id}/collections:\n    get:\n      tags:\n        - spaces\n      summary: List UUIDs of all collections in a space\n      description: Spaces are groupings of collections and datasets.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: default as 12\n          schema:\n            type: number\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /spaces/{id}/datasets:\n    get:\n      tags:\n        - spaces\n      summary: List UUIDs of all datasets in a space\n      description: Spaces are groupings of collections and datasets.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: default as 12\n          schema:\n            type: number\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /spaces/{id}/verify:\n    put:\n      tags:\n        - spaces\n      summary: Set the space as verified\n      description: Server Admin Action\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/{spaceId}/addCollectionToSpace/{collectionId}:\n    post:\n      tags:\n        - spaces\n      summary: Associate a collection to a space\n      description: Spaces are groupings of collections and datasets.\n      parameters:\n        - name: spaceId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: collectionId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/{id}/rejectRequest:\n    post:\n      tags:\n        - spaces\n      summary: Reject Request\n      description: |\n        Reject user's request to the space, remove the request and send email to\n        the request user\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /spaces/{id}/acceptRequest:\n    post:\n      tags:\n        - spaces\n      summary: Accept Request\n      description: |\n        Accept user's request to the space and assign a specific Role, remove\n        the request and send email to the request user\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /spaces/{spaceId}/removeCollection/{collectionId}:\n    post:\n      tags:\n        - spaces\n      summary: Remove a collection from a space\n      description: Spaces are groupings of collections and datasets.\n      parameters:\n        - name: spaceId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: collectionId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /spaces/{id}/updateUsers:\n    post:\n      tags:\n        - spaces\n      summary: Update the user information associated with a space\n      description: Spaces are groupings of collections and datasets.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                rolesandusers:\n                  type: object\n                  properties: {}\n                  description: A map that contains a role level as a key and a comma\n                    separated String of user IDs as the value\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          description: rolesandusers data is missing from the updateUsers call.\n          content: {}\n        404:\n          $ref: '#/components/responses/NotFound'\n\n  /spaces/canEdit:\n    get:\n      tags:\n        - spaces\n      summary: List spaces the user can add to\n      description: Retrieves a list of spaces that the user has permission to add\n        to\n      parameters:\n        - name: when\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: title\n          in: query\n          schema:\n            type: string\n        - name: date\n          in: query\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: default as 12\n          schema:\n            type: number\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/{id}/removeUser:\n    post:\n      tags:\n        - spaces\n      summary: Remove a user from a space\n      description: Spaces are groupings of collections and datasets.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: removeUser\n          in: query\n          description: the UUID of the user\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/{id}/update:\n    post:\n      tags:\n        - spaces\n      summary: Update the information associated with a space\n      description: Spaces are groupings of collections and datasets.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - access\n                - description\n                - enabled\n                - name\n                - timetolive\n              type: object\n              properties:\n                name:\n                  type: string\n                description:\n                  type: string\n                timetolive:\n                  type: string\n                enabled:\n                  type: boolean\n                access:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/{id}/unfollow:\n    post:\n      tags:\n        - spaces\n      summary: Unfollow space\n      description: |\n        Remove user from space followers and remove space from user followed\n        spaces.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/{id}/follow:\n    post:\n      tags:\n        - spaces\n      summary: Follow space\n      description: Add user to space followers and add space to user followed spaces.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/{spaceId}/addDatasetToSpace/{datasetId}:\n    post:\n      tags:\n        - spaces\n      summary: Associate a dataset to a space\n      description: Spaces are groupings of collections and datasets.\n      parameters:\n        - name: spaceId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: datasetId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/{spaceId}/metadata:\n    post:\n      tags:\n        - spaces\n      summary: add metadata definition to a space\n      description: |\n        If uri is not defined, the uri will be set as\n        \"http://clowder.ncsa.illinois.edu/metadata/{uuid}#CamelCase\"\n      parameters:\n        - name: spaceId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - description\n                - label\n                - type\n              type: object\n              properties:\n                label:\n                  type: string\n                type:\n                  type: string\n                description:\n                  type: string\n                uri:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  ##############################################################################\n  # SPACE CURATION ENDPOINTS                                                   #\n  ##############################################################################\n  /spaces/curations/{id}/matchmaker:\n    post:\n      tags:\n        - curations\n      summary: Update the user repository preferences and call the matchmaker\n      description: |\n        A curation object is a request for publication that captures the state\n        of a dataset ready for publication\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/curations/retract/{id}:\n    delete:\n      tags:\n        - curations\n      summary: Retract the publication request\n      description: |\n        A curation object is a request for publication that captures the state\n        of a dataset ready for publication\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/curations/{id}/folders/{curationFolderId}:\n    delete:\n      tags:\n        - curations\n      summary: Delete a folder from a publication request\n      description: |\n        A curation object is a request for publication that captures the state\n        of a dataset ready for publication\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: curationFolderId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/curations/{id}/curationFile:\n    get:\n      tags:\n        - curations\n      summary: Get files in publication request\n      description: |\n        A curation object is a request for publication that captures the state\n        of a dataset ready for publication\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /spaces/curations/{id}/files/{curationFileId}:\n    delete:\n      tags:\n        - curations\n      summary: Delete a file from a publication request\n      description: |\n        A curation object is a request for publication that captures the state\n        of a dataset ready for publication\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: curationFileId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /curations/{curationId}/ore:\n    get:\n      tags:\n        - curations\n      summary: Get the ORE map for the proposed publication\n      description: |\n        A curation object is a request for publication that captures the state\n        of a dataset ready for publication\n      parameters:\n        - name: curationId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n\n\n  ##############################################################################\n  # EXTRACTORS ENDPOINTS                                                       #\n  ##############################################################################\n  /extractors:\n    get:\n      tags:\n        - extractors\n      summary: Lists information about all known extractors\n      description: Extractions for Files.\n      responses:\n        200:\n          description: OK\n          content: {}\n    post:\n      tags:\n        - extractors\n      summary: Register information about an extractor\n      description: |\n        Register information about an extractor.\n        Used when an extractor starts up.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              description: |\n                All fields in example are required.\n                The value of repository can be single value or an array.\n              example:\n                name: test\n                version: 0.1.0\n                description: test\n                author: Yan\n                contributors: []\n                contexts: []\n                repository: []\n                external_services: []\n                libraries: []\n                bibtex: []\n                process: []\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /extractors/{name}:\n    get:\n      tags:\n        - extractors\n      summary: Lists information about a specific extractor\n      description: Extractions for Files.\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        404:\n          description: Not found\n          content: {}\n\n  /extractors/labels:\n    post:\n      tags:\n        - extractors\n      summary: Create a new extractor label in the database\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExtractorsLabel'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtractorsLabel'\n\n  /extractors/labels/{id}:\n    put:\n      tags:\n        - extractors\n      summary: Updates an extractor label in the database\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExtractorsLabel'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtractorsLabel'\n    delete:\n      tags:\n        - extractors\n      summary: Deletes an extractor label from the database\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtractorsLabel'\n\n  ##############################################################################\n  # EXTRACTIONS ENDPOINTS                                                      #\n  ##############################################################################\n  /extractions/servers_ips:\n    get:\n      tags:\n        - extractions\n      summary: Lists servers IPs running the extractors\n      description: Extractions for Files.\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /extractions/extractors_names:\n    get:\n      tags:\n        - extractions\n      summary: Lists the currently running extractors\n      description: Extractions for Files.\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /extractions/upload_url:\n    post:\n      tags:\n        - extractions\n      summary: Uploads a file for extraction using the file's URL\n      description: |\n        Saves the uploaded file and sends it for extraction. If the optional URL\n        parameter extract is set to false, it does not send the file for\n        extraction. Does not index the file.\n      parameters:\n        - name: extract\n          in: query\n          description: default as true\n          schema:\n            type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              description: can only use fileurl as the key in body\n              example:\n                - fileurl: http://browndog.ncsa.illinois.edu/examples/pecan/ameriflux.sipnet.xml\n                  dataset: 58d9a0fbe4b03103c1487b72\n              items:\n                type: object\n                properties: {}\n        required: false\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /extractions/upload_file:\n    post:\n      tags:\n        - extractions\n      summary: Uploads a file for extraction of metadata and returns file id\n      description: |\n        Saves the uploaded file and sends it for extraction to Rabbitmq. If the\n        optional URL parameter extract is set to false, it does not send the\n        file for extraction. Does not index the file. Same as upload() except\n        for upload()\n      parameters:\n        - name: extract\n          in: query\n          description: default as true\n          schema:\n            type: boolean\n        - name: showPreviews\n          in: query\n          description: default as DatasetLevel\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n                - File\n              properties:\n                File:\n                  type: string\n                  description: file to upload\n                  format: binary\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /extractions/supported_input_types:\n    get:\n      tags:\n        - extractions\n      summary: Lists the input file format supported by currenlty running extractors\n      description: Extractions for Files.\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /extractions/multiple_uploadby_url:\n    post:\n      tags:\n        - extractions\n      summary: Uploads files for a given list of files' URLs\n      description: |\n        Saves the uploaded files and sends it for extraction. Does not index the\n        files. Returns id for the web resource\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /extractions/{id}/statuses:\n    get:\n      tags:\n        - extractions\n      summary: Checks for the extraction statuses of all files\n      description: Returns a list (file id, status of extractions)\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /extractions/requests:\n    get:\n      tags:\n        - extractions\n      summary: Lists dts extraction requests information\n      description: Extractions for Files.\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /extractions/{id}/metadata:\n    get:\n      tags:\n        - extractions\n      summary: Provides the metadata extracted from the file\n      description: Retruns Status of extractions and metadata extracted so far\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /extractions/extractors_details:\n    get:\n      tags:\n        - extractions\n      summary: Lists the currenlty details running extractors\n      description: Extractions for Files.\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /extractions/{id}/status:\n    get:\n      tags:\n        - extractions\n      summary: Checks for the status of all extractors processing the file with id\n      description: |\n        A list of status of all extractors responsible for extractions on the\n        file and the final status of extraction job\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  ##############################################################################\n  # LOGOS ENDPOINTS                                                            #\n  ##############################################################################\n  /logos:\n    get:\n      tags:\n        - logos\n      summary: List logos\n      description: List logos known to system\n      responses:\n        200:\n          description: OK\n          content: {}\n    post:\n      tags:\n        - logos\n      summary: Upload file\n      description: |\n        Files uploaded to this endpoint will be marked as special files, such as\n        favicon.png, logo.png. The file needs to be specified with image.\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /logos/{id}:\n    get:\n      tags:\n        - logos\n      summary: Get logo\n      description: Return logo information\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n    put:\n      tags:\n        - logos\n      summary: Set logo\n      description: Updates logo information\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n    delete:\n      tags:\n        - logos\n      summary: Delete file\n      description: Delete a static file\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /logos/{id}/blob:\n    get:\n      tags:\n        - logos\n      summary: Download file\n      description: Download a static file, or the alternate file\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /logos/{path}/{name}:\n    get:\n      tags:\n        - logos\n      summary: Get logo\n      description: Return logo information\n      parameters:\n        - name: path\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n    put:\n      tags:\n        - logos\n      summary: Set logo\n      description: Updates logo information\n      parameters:\n        - name: path\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n    delete:\n      tags:\n        - logos\n      summary: Delete file\n      description: Delete a static file\n      parameters:\n        - name: path\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /logos/{path}/{name}/blob:\n    get:\n      tags:\n        - logos\n      summary: Download file\n      description: Download a static file, or the alternate file\n      parameters:\n        - name: path\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  ##############################################################################\n  # PROXY ENDPOINTS                                                            #\n  ##############################################################################\n  /proxy/{endpoint_key}:\n    get:\n      tags:\n        - proxy\n      summary: Proxy a GET request to an endpoint specified in the proxy's configuration.\n      description: Access to the endpoint will be restricted by Clowder authentication.\n      parameters:\n        - name: endpoint_key\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        404:\n          description: Endpoint not configured\n          content: {}\n    put:\n      tags:\n        - proxy\n      summary: Proxy a PUT request to an endpoint specified in the proxy's configuration.\n      description: Access to the endpoint will be restricted by Clowder authentication.\n      parameters:\n        - name: endpoint_key\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The body of the PUT request to proxy.\n        content:\n          application/json:\n            schema:\n              type: object\n        required: false\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        404:\n          description: Endpoint not configured\n          content: {}\n    post:\n      tags:\n        - proxy\n      summary: Proxy a POST request to an endpoint specified in the proxy's configuration.\n      description: Access to the endpoint will be restricted by Clowder authentication.\n      parameters:\n        - name: endpoint_key\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The body of the POST request to proxy.\n        content:\n          application/json:\n            schema:\n              type: object\n        required: false\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        404:\n          description: Endpoint not configured\n          content: {}\n    delete:\n      tags:\n        - proxy\n      summary: Proxy a DELETE request to an endpoint specified in the proxy's configuration.\n      description: Access to the endpoint will be restricted by Clowder authentication.\n      parameters:\n        - name: endpoint_key\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        404:\n          description: Endpoint not configured\n          content: {}\n\n  /proxy/{endpoint_key}/{pathSuffix}:\n    get:\n      tags:\n        - proxy\n      summary: Proxy a GET request to an endpoint specified in the proxy's configuration.\n      description: Access to the endpoint will be restricted by Clowder authentication.\n      parameters:\n        - name: endpoint_key\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: pathSuffix\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        404:\n          description: Endpoint not configured\n          content: {}\n    put:\n      tags:\n        - proxy\n      summary: Proxy a PUT request to an endpoint specified in the proxy's configuration.\n      description: Access to the endpoint will be restricted by Clowder authentication.\n      parameters:\n        - name: endpoint_key\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: pathSuffix\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The body of the PUT request to proxy.\n        content:\n          application/json:\n            schema:\n              type: object\n        required: false\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        404:\n          description: Endpoint not configured\n          content: {}\n    post:\n      tags:\n        - proxy\n      summary: Proxy a POST request to an endpoint specified in the proxy's configuration.\n      description: Access to the endpoint will be restricted by Clowder authentication.\n      parameters:\n        - name: endpoint_key\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: pathSuffix\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The body of the POST request to proxy.\n        content:\n          application/json:\n            schema:\n              type: object\n        required: false\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        404:\n          description: Endpoint not configured\n          content: {}\n    delete:\n      tags:\n        - proxy\n      summary: Proxy a DELETE request to an endpoint specified in the proxy's configuration.\n      description: Access to the endpoint will be restricted by Clowder authentication.\n      parameters:\n        - name: endpoint_key\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: pathSuffix\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        404:\n          description: Endpoint not configured\n          content: {}\n\n  ##############################################################################\n  # REPORTING ENDPOINTS                                                        #\n  ##############################################################################\n  /reports/metrics:\n    get:\n      tags:\n        - reporting\n      summary: Download usage metrics report for files, datasets and collections as\n        CSV.\n      description: |\n        Download usage metrics report for files, datasets and collections as a CSV file.\n        Must be a server admin to access the report.\n      responses:\n        200:\n          description: A CSV with usage metrics\n          content:\n            text/csv:\n              schema:\n                type: string\n                format: binary\n        401:\n          description: Not authorized\n          content: {}\n\n  /reports/metrics/files:\n    get:\n      tags:\n        - reporting\n      summary: Download usage metrics report for files as CSV.\n      description: |\n        Download usage metrics report for files as a CSV file.\n        Must be a server admin to access the report. Supports ISO8601 date range filters.\n      parameters:\n        - name: since\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: until\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: A CSV with usage metrics\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n        401:\n          description: Not authorized\n          content: {}\n\n  /reports/metrics/datasets:\n    get:\n      tags:\n        - reporting\n      summary: Download usage metrics report for datasets as CSV.\n      description: |\n        Download usage metrics report for datasets as a CSV file.\n        Must be a server admin to access the report. Supports ISO8601 date range filters.\n      parameters:\n        - name: since\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: until\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: A CSV with usage metrics\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n        401:\n          description: Not authorized\n          content: {}\n\n  /reports/metrics/collections:\n    get:\n      tags:\n        - reporting\n      summary: Download usage metrics report for collections as CSV.\n      description: |\n        Download usage metrics report for collections as a CSV file.\n        Must be a server admin to access the report.\n      responses:\n        200:\n          description: A CSV with usage metrics\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n        401:\n          description: Not authorized\n          content: {}\n\n  /reports/storage/spaces:\n    get:\n      tags:\n        - reporting\n      summary: Download storage metrics report for spaces as CSV.\n      description: |\n        Download storage metrics report for files in a space as a CSV file. Space id is optional parameter.\n        Must be a server admin to access the report. Supports ISO8601 date range filters.\n      parameters:\n        - name: space\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: since\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: until\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: A CSV with usage metrics\n          content:\n            application/json:\n              schema:\n                type: string\n                format: binary\n        401:\n          description: Not authorized\n          content: {}\n\n  ##############################################################################\n  # SECTIONS ENDPOINTS                                                         #\n  ##############################################################################\n  /sections:\n    post:\n      tags:\n        - section\n      summary: Add a section.\n      requestBody:\n        description: The body of the POST request.\n        content:\n          application/json:\n            schema:\n              required:\n                - file_id\n              type: object\n              properties:\n                file_id:\n                  type: string\n              example:\n                file_id: 5b2a836d5e0e8956ed865b29\n                area:\n                  x: 0.23466666666666666\n                  y: 0.4729458917835671\n                  w: 0.248\n                  h: 0.23046092184368738\n        required: true\n      responses:\n        400:\n          description: No \"file_id\" specified, request body.\n          content: {}\n\n  /sections/{id}:\n    get:\n      tags:\n        - section\n      summary: Get a section.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                example:\n                  id: 5c6722eb5e0e9475289cd79a\n                  file_id: 5b2a836d5e0e8956ed865b29\n                  startTime: -1\n                  tags:\n                    - a object\n    delete:\n      tags:\n        - section\n      summary: Delete a section.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /sections/{id}/comments:\n    post:\n      tags:\n        - section\n      summary: Add comment to a section.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The body of the POST request.\n        content:\n          application/json:\n            schema:\n              required:\n                - text\n              type: object\n              properties:\n                text:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /sections/{id}/description:\n    post:\n      tags:\n        - section\n      summary: Add description to a section.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The body of the POST request.\n        content:\n          application/json:\n            schema:\n              required:\n                - description\n              type: object\n              properties:\n                description:\n                  type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          description: no section description specified.\n          content: {}\n\n  /sections/{id}/thumbnails/{thumbnail_id}:\n    post:\n      tags:\n        - section\n      summary: Add thumbnail to section.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: thumbnail_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n        400:\n          description: Thumbnail not found.\n          content: {}\n\n  /sections/{id}/tags:\n    get:\n      tags:\n        - section\n      summary: Get tags of a section.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n    post:\n      tags:\n        - section\n      summary: Add tags to section.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - tags\n              type: object\n              properties:\n                tags:\n                  type: array\n                  items:\n                    type: string\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n    delete:\n      tags:\n        - section\n      summary: Delete tags from section.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  /sections/{id}/tags/remove:\n    post:\n      tags:\n        - section\n      summary: remove a tag from a section\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n      deprecated: true\n\n  /sections/{id}/tags/remove_all:\n    post:\n      tags:\n        - section\n      summary: Delete all tags from section.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: OK\n          content: {}\n\n  ##############################################################################\n  # ADMIN ENDPOINTS                                                            #\n  ##############################################################################\n  /reindex:\n    post:\n      tags:\n        - admin\n      summary: Force a reindex of all resources in Elasticsearch.\n      description: |\n        Force a reindex of all resources in Elasticsearch.\n        Must be a server admin.\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n\n  /admin/configuration:\n    post:\n      tags:\n        - admin\n      summary: Update system configuration.\n      description: |\n        Update system configuration.\n        Must be a server admin.\n      requestBody:\n        description: The body of the POST request.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                theme:\n                  type: string\n                displayName:\n                  type: string\n                welcomeMessage:\n                  type: string\n                googleAnalytics:\n                  type: string\n                sensors:\n                  type: string\n                sensor:\n                  type: string\n                parameters:\n                  type: string\n                parameter:\n                  type: string\n                tosText:\n                  type: string\n                tosHtml:\n                  type: string\n        required: true\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n\n  /admin/mail:\n    post:\n      tags:\n        - admin\n      summary: Send email to admins.\n      description: |\n        Send email to admins.\n        Must be a server admin.\n      requestBody:\n        description: The body of the POST request.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                body:\n                  type: string\n                subject:\n                  type: string\n        required: true\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n\n  /admin/users:\n    post:\n      tags:\n        - admin\n      summary: Update all users status, set a list of users as active, inactive, admin\n        or normal user.\n      description: |\n        Update all users status, set a list of users as active, inactive, admin or normal user.\n        Must be a server admin.\n      requestBody:\n        description: The body of the POST request.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                active:\n                  type: array\n                  items:\n                    type: string\n                inactive:\n                  type: array\n                  items:\n                    type: string\n                admin:\n                  type: array\n                  items:\n                    type: string\n                unadmin:\n                  type: array\n                  items:\n                    type: string\n        required: true\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n        403:\n          description: Forbidden\n          content: {}\n\n  /changeAppearance:\n    post:\n      tags:\n        - admin\n      summary: Change themes of the clowder instance.\n      description: |\n        Change themes of the clowder instance.\n        Must be a server admin.\n      requestBody:\n        description: The body of the POST request.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                theme:\n                  type: string\n                displayName:\n                  type: string\n                welcomeMessage:\n                  type: string\n                googleAnalytics:\n                  type: string\n        required: true\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n\n\n  ##############################################################################\n  # 3DTEXTURES ENDPOINTS                                                       #\n  ##############################################################################\n  /3dTextures:\n    post:\n      tags:\n        - 3dTextures\n      summary: Upload a 3D texture\n      description: |\n        Upload a 3D texture file to Clowder.\n      responses:\n        401:\n          description: Not authorized\n          content: {}\n      deprecated: true\n\n\n  ##############################################################################\n  # MISC ENDPOINTS                                                             #\n  ##############################################################################\n  /me:\n    get:\n      summary: Fetch current user's info\n      description: |\n        Retrieve informatation on the currently logged-in user.\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n  /status:\n    get:\n      summary: Gets the status of the system\n      description: |\n        Returns a nested JSON object that contains the status of Clowder.\n        This includes health checks, enabled plugins, as well as helpful debug\n        information, such as the current size of the reindex queue.\n      responses:\n        200:\n          description: OK\n          content: {}\n  /tree/getChildrenOfNode:\n    get:\n      summary: Fetch children of the given node in the file tree\n      description: |\n        Fetch children of the given node in the file tree.\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n\n  ##############################################################################\n  # SELECTION ENDPOINTS                                                        #\n  ##############################################################################\n  /selected:\n    get:\n      tags:\n        - files\n      summary: Get the list of user-selected files\n      description: |\n        Get the list of user-selected files.\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n    post:\n      tags:\n        - files\n      summary: Select a specific file\n      description: |\n        Select a specific file.\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n\n  /selected/remove:\n    post:\n      tags:\n        - files\n      summary: De-select a specific file\n      description: |\n        De-select a specific file.\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n\n  /selected/files:\n    get:\n      tags:\n        - files\n      summary: Download all selected files\n      description: |\n        Download all selected files.\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n    delete:\n      tags:\n        - files\n      summary: Delete all selected files\n      description: |\n        Delete all selected files.\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n\n  /selected/clear:\n    post:\n      tags:\n        - files\n      summary: De-select all files\n      description: |\n        De-select all files.\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n\n  /selected/tag:\n    post:\n      tags:\n        - files\n      summary: Apply a tag to all selected files\n      description: |\n        Apply a tag to all selected files.\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n\n  /selected/submit/{ds_id}/{file_ids}:\n    post:\n      tags:\n        - extractions\n        - files\n      summary: Submit all selected files for extraction\n      description: |\n        Submit all selected files for extraction.\n      parameters:\n        - name: ds_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: file_ids\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: array\n                  items:\n                    type: string\n                extractor:\n                  type: string\n                  description: the extractor Id\n              example:\n                extractor: ncsa.image.metadata\n        required: true\n      responses:\n        200:\n          description: OK\n          content: {}\n        401:\n          description: Not authorized\n          content: {}\n\n\n################################################################################\n# Components                                                                   #\n################################################################################\ncomponents:\n\n  ##############################################################################\n  # Models                                                                     #\n  ##############################################################################\n  schemas:\n    UUID:\n      type: string\n      description: ID of an object\n    File:\n      type: object\n      description: holds all information about a file\n      properties:\n        id:\n          type: string\n          example: \"5b8e969d5e0e8690971ee23e\"\n        filename:\n          type: string\n          example: \"cat.jpg\"\n        filepath:\n          type: string\n          description: |\n            only specified if user is serveradmin, and storage is\n            DiskByteStorageService\n          example: \"/home/clowder/data/uploads/41/e2/1e/5b8e969d5e0e8690971ee241\"\n        service-endpoint:\n          type: string\n          description: |\n            only specified if user is serveradmin, and storage is\n            S3ByteStorageService\n        bucket-name:\n          type: string\n          description: |\n            only specified if user is serveradmin, and storage is\n            S3ByteStorageService\n        object-key:\n          type: string\n          description: |\n            only specified if user is serveradmin, and storage is\n            S3ByteStorageService\n        filedescription:\n          type: string\n          example: \"Picture of a cat\"\n        content-type:\n          type: string\n          example: \"image/jpeg\"\n        date-created:\n          type: string # should be date-time\n          example: \"Tue Sep 04 09:28:45 CDT 2018\"\n        size:\n          type: string # should be integer int64\n          format: int64\n          example: \"190497\"\n        authorId:\n          type: string # should be miniuser\n          description: id of user who uploaded the file\n          #$ref: '#/components/schemas/MiniUser'\n          example: \"5447f889fa429866bbd44dbd\"\n        thumbnail:\n          type: string\n          description: |\n            optinal id of the thumbnail image of this file\n          example: \"5bfd5a2640c6cd6147bb27e0\"\n        status:\n          type: string # should be enum\n          description: |\n            status of the file, this can be one of the following:\n            - CREATED file is created, but blob is not in final place yes\n            - PROCESSING blob is in final place, final processing is done such as sending messagess to RabbitMQ\n            - PROCESSED file is fully procesed by clowder\n          example: \"PROCESSED\"\n    MiniUser:\n      type: object\n    Space:\n      type: object\n      required:\n        - description\n        - name\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n    Collection:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        space:\n          type: string\n        googleAnalytics:\n          type: string\n    Dataset:\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        access:\n          type: string\n          enum:\n            - PUBLIC\n            - PRIVATE\n            - DEFAULT\n            - TRIAL\n        space:\n          type: array\n          description: if space is not set or set as default, this dataset will not\n            be add to any Spaces.\n          items:\n            type: string\n        collection:\n          type: array\n          description: if collection is not set or set as default, this dataset will\n            not be add to any Collections.\n          items:\n            type: string\n        existingfiles:\n          type: string\n          description: the list of file ids, seperated with comma\n      example:\n        name: A dataset\n    JSONLD:\n      type: object\n      example:\n        '@context':\n          - https://clowderframework.org/contexts/metadata.jsonld\n          - csv_headers: http://clowder.ncsa.illinois.edu/metadata/ncsa.csvheaders\n        attached_to:\n          resource_type: cat:file\n          url: https://clowderframework.org/clowder/files/5b2a836d5e0e8956ed865b29\n        created_at: Wed Jun 20 11:40:25 CDT 2018\n        agent:\n          '@type': cat:extractor\n          name: https://clowderframework.org/clowder/extractors/ncsa.csvheaders/1.0\n          extractor_id: https://clowderframework.org/clowder/extractors/ncsa.csvheaders/1.0\n        content:\n          csv_headers:\n            - Site_ID\n            - Date\u0026Time\n            - Discharge(cms)\n    Tags:\n      type: object\n      properties:\n        tags:\n          type: array\n          items:\n            type: string\n        extractor_id:\n          type: string\n      example:\n        tags:\n          - test1\n          - test2\n    Comment:\n      required:\n        - text\n      type: object\n      properties:\n        text:\n          type: string\n    License:\n      required:\n        - allowDownload\n        - licenseText\n        - licenseType\n        - licenseUrl\n        - rightsHolder\n      type: object\n      properties:\n        licenseType:\n          type: string\n        rightsHolder:\n          type: string\n        licenseUrl:\n          type: string\n        licenseText:\n          type: string\n          enum:\n            - by-nc-nd\n            - by-nd\n            - by-nc\n            - by-nc-sa\n            - by-sa\n            - by\n        allowDownload:\n          type: string\n    ExtractorsLabel:\n      type: object\n      description: An arbitrary text label on which users can filter the Extractor Catalog\n      properties:\n        id:\n          type: string\n          example: \"5b8e969d5e0e8690971ee23e\"\n        name:\n          type: string\n          example: \"Image\"\n        category:\n          type: string\n          example: \"Type\"\n        extractors:\n          type: array\n          example: [\"ncsa.image.preview\", \"ncsa.image.metadata\"]\n          items:\n            type: string\n\n  ##############################################################################\n  # Parameters                                                                 #\n  ##############################################################################\n  parameters:\n    fileId:\n      name: id\n      in: path\n      description: ID of file object\n      required: true\n      schema:\n        type: string\n\n  ##############################################################################\n  # Responses                                                                  #\n  ##############################################################################\n  responses:\n    Blob:\n      description: The requested data in binary form\n      content:\n        application/octet-stream:\n          schema:\n            type: string\n            format: binary\n\n    BadRequest:\n      description: |\n        The server could not process your request, this happens for example when\n        the id specified is not of the correct form. See the message field for\n        more information.\n      content:\n        application/json:\n          schema:\n            type: string\n\n    Disabled:\n      description: |\n        Access to this resource is disabled\n      content:\n        application/json:\n          schema:\n            type: string\n\n    Unauthorized:\n      description: |\n        The request has not been applied because it lacks valid authentication\n        credentials for the target resource.\n      content:\n        application/json:\n          schema:\n            type: string\n\n    NotFound:\n      description: The requested resource was not found\n      content:\n        text/plain:\n          schema:\n            type: string\n\n  # authentication, can be used in code\n  securitySchemes:\n    login:\n      type: http\n      scheme: basic\n    apikey:\n      type: apiKey\n      in: header\n      name: X-API-Key\n    key:\n      type: apiKey\n      in: query\n      description: This is deprecated, use X-API-Key in header instead\n      name: key\n"
		}
	},
	"Error": "security: failed to write file oas_security_gen.go: format: 137:3: expected 1 expression"
}