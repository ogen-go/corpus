{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "openapi/supportbee/openapi.yml",
			"byteSize": 42028,
			"content": "openapi: 3.0.0\ninfo:\n  title: SupportBee API\n  description: |\n    This is a generated connector for [SupportBee API v1](https://supportbee.com/api) OpenAPI specification.\n    SupportBeeâ€™s support ticket system enables teams to organize, prioritize and collaborate on customer support emails.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials. \n  \n    Create a [SupportBee account](https://supportbee.com) and obtain tokens by following [this guide](https://supportbee.com/api#authentication).\n  x-ballerina-display:\n    label: SupportBee\n    iconPath: \"icon.png\"\n  version: \"v2\"\nsecurity:\n- api_token: []\ntags:\n  - name: ticket\n  - name: user\n  - name: reply\n  - name: label\n  - name: comment\npaths:\n  /tickets:\n    post:\n      summary: \"Creates a ticket for the company.\"\n      description: \"https://supportbee.com/api#create_ticket\"\n      parameters: \n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n      requestBody:\n        description: The data required to create a ticket. \n        content:\n          application/json:\n            schema: \n              $ref: '#/components/schemas/CreateTicketRequest'\n      tags:\n        - \"ticket\"\n      responses:\n        201:\n          description: \"Created ticket\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/CreatedTicket'\n      operationId: \"create_ticket\"\n    get:\n      summary: \"Returns 15 tickets of the company in the order of their last activity. Only tickets that are not archived are returned.\"\n      description: \"https://supportbee.com/api#fetching_tickets\"\n      parameters:\n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"query\"\n          name: \"per_page\"\n          description: \"Specifies the number of tickets to retrieve. Must be less than 100. Defaults to 15.\"\n          schema:\n            type: integer\n          required: false\n        - in: \"query\"\n          name: \"page\"\n          description: \"Specifies the page of tickets to retrieve. Defaults to 1.\"\n          schema:\n            type: integer\n          required: false\n        - in: \"query\"\n          name: \"archived\"\n          description: \"If true, retrieves only archived tickets. If false, it does not return any archived tickets. If any, includes archived tickets in the result. Defaults to false.\"\n          schema:\n            type: string\n          required: false\n        - in: \"query\"\n          name: \"spam\"\n          description: \"If true, retrieved tickets contain tickets marked as spam. Defaults to false.\"\n          schema:\n            type: boolean\n          required: false\n        - in: \"query\"\n          name: \"trash\"\n          description: \"If true, retrieved tickets contain tickets that are trashed. Defaults to false.\"\n          schema:\n            type: boolean\n          required: false\n        - in: \"query\"\n          name: \"replies\"\n          description: \"If true, retrieved tickets contain only tickets with replies. If false, retrieved tickets contain only tickets without replies.\"\n          schema:\n            type: boolean\n          required: false\n        - in: \"query\"\n          name: \"max_replies\"\n          description: \"Specifies the number of replies that a ticket must have. This cannot be used with replies = false.\"\n          schema:\n            type: integer\n          required: false\n        - in: \"query\"\n          name: \"assigned_user\"\n          description: \"If me, retrieves only tickets assigned to the current user. If agent_id, retrieves only tickets assigned to the Agent with id agent_id. If any, retrieves tickets that are assigned to any user. If none, retrieves tickets that aren't assigned to any user.\"\n          schema:\n            type: string\n          required: false\n        - in: \"query\"\n          name: \"assigned_team\"\n          description: \"If mine, retrieves only tickets assigned to the teams of the current user. If team_id, retrieves only tickets assigned to the team with id team_id. If none, retrieves tickets that aren't assigned to any team.\"\n          schema:\n            type: string\n          required: false\n        - in: \"query\"\n          name: \"starred\"\n          description: \"If true, retrieves only the starred tickets of the current user. If false, retrieves only the non starred tickets assigned to the current user.\"\n          schema:\n            type: boolean\n          required: false\n        - in: \"query\"\n          name: \"label\"\n          description: \"Set to label_name, retrieves only the tickets with the label label_name.\"\n          schema:\n            type: string\n          required: false\n        - in: \"query\"\n          name: \"since\"\n          description: \"Can be used to retrieve tickets whose last activity timestamp is greater than the time specified in this parameter. The last activity timestamp of a ticket is updated whenever there is a new reply or a new comment on the ticket. To retrieve tickets sorted by creation time, instead of last activity, send the sort_by parameter along with the since parameter.\"\n          schema:\n            type: string\n          required: false\n        - in: \"query\"\n          name: \"until\"\n          description: \"Can be used to retrieve tickets whose last activity timestamp is lesser than the time specified in this parameter. The last activity timestamp of a ticket is updated whenever there is a new reply or a new comment on the ticket. To retrieve tickets sorted by creation time, instead of last activity, send the sort_by parameter along with the until parameter.\"\n          schema:\n            type: string\n          required: false\n        - in: \"query\"\n          name: \"sort_by\"\n          description: \"If last_activity, retrieves tickets sorted by last activity. If creation_time, retrieves tickets sorted by creation time. Defaults to last_activity.\"\n          schema:\n            type: string\n          required: false\n        - in: \"query\"\n          name: \"requester_emails\"\n          description: \"Can be used to filter tickets by requester email addresses. Accepts a string of comma separated email addresses. For Example requester_emails=test1@example.com,test2@example.com\"\n          schema:\n            type: string\n          required: false\n        - in: \"query\"\n          name: \"total_only\"\n          description: \"Can be used in conjunction with any other parameters to return only the total number of tickets. Accepts any truthy value. For example total_only=true. Defaults to false.\"\n          schema:\n            type: boolean\n          required: false\n      tags:\n        - \"ticket\"\n      responses:\n        200:\n          description: \"An object with a property tickets which is an array of Ticket objects.\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/Tickets'\n      operationId: \"list_tickets\"\n  /tickets/{id}:\n    get:\n      summary: \"Retrieves the ticket specified by the id.\"\n      description: \"https://supportbee.com/api#show_ticket\"\n      parameters:\n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false \n        - in: \"path\"\n          name: \"id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n      tags:\n        - \"ticket\"\n      responses:\n        200:\n          description: \"A ticket object\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/TicketObject'\n      operationId: \"get_ticket\"\n    delete:\n      summary: \"Deletes a trashed ticket.\"\n      description: \"https://supportbee.com/api#delete_trashed_ticket\"\n      parameters:\n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false \n        - in: \"path\"\n          name: \"id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n      tags:\n        - \"ticket\"\n      responses:\n        204:\n          description: \"An empty body if the ticket was successfully deleted.\"\n      operationId: \"delete_trashed_ticket\"\n  /tickets/{ticket_id}/archive:\n    post:\n      summary: \"Archives an unarchived ticket specified by ticket_id.\"\n      description: \"https://supportbee.com/api#ticket_actions\"\n      parameters: \n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false \n        - in: \"path\"\n          name: \"ticket_id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n      tags:\n        - \"ticket\"\n      responses:\n        204:\n          description: \"An empty body if the ticket was successfully archived.\"\n      operationId: \"archive_ticket\"\n  /tickets/{ticket_id}/trash:\n    post:\n      summary: \"Trashes' an un-trashed ticket specified by ticket_id.\"\n      description: \"https://supportbee.com/api#ticket_actions\"\n      parameters: \n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"path\"\n          name: \"ticket_id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n      tags:\n        - \"ticket\"\n      responses:\n        204:\n          description: \"An empty body if the ticket was successfully trashed.\"\n      operationId: \"trash_ticket\"\n  /tickets/{ticket_id}/user_assignment:\n    post:\n      summary: \"Assign a ticket to a user. If the ticket is already assigned to a team, then the given user must be a member of that team.\"\n      description: \"https://supportbee.com/api#ticket_actions\"\n      parameters: \n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"path\"\n          name: \"ticket_id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n      requestBody:\n        description: The data required to assign a ticket to a user. \n        content:\n          application/json:\n            schema: \n              $ref: '#/components/schemas/AssignUserRequest'\n      tags:\n        - \"ticket\"\n      responses:\n        201:\n          description: \"An object with a property user_assignment.\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/AssignedUserObject'\n      operationId: \"assign_user\"\n  /users/{id}:\n    get:\n      summary: \"Retrieves the user specified by id.\"\n      description: \"https://supportbee.com/api#get_user\"\n      parameters: \n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"path\"\n          name: \"id\"\n          description: \"The user ID\"\n          schema:\n            type: string\n          required: true\n        - in: \"query\"\n          name: \"max_tickets\"\n          description: \"Specify the maximum number of recent tickets you want to retrieve that this user created. If false returns all tickets.\"\n          schema:\n            type: string\n          required: false\n      tags:\n        - \"user\"\n      responses:\n        200:\n          description: \"A user object\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/GetUserObject'\n      operationId: \"get_user\"\n  /users:\n    get:\n      summary: \"Retrieves all users of the company.\"\n      description: \"https://supportbee.com/api#fetching_users\"\n      parameters:\n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"query\"\n          name: \"with_invited\"\n          description: \"If true, returns all the agents, including invited (unconfirmed) agents. Defaults to false.\"\n          schema:\n            type: boolean\n          required: false\n        - in: \"query\"\n          name: \"with_roles\"\n          description: \"Specifies the role of the users you want to get. The role must be one of these: admin, agent, collaborator, customer. Several or all of these values can be used. Defaults to admin,agent,collaborator.\"\n          schema:\n            type: string\n          required: false\n        - in: \"query\"\n          name: \"type\"\n          description: \"Specifies the type of the users you want to get. The type must be one of these: user, customer_group. Defaults to user.\"\n          schema:\n            type: string\n          required: false\n      tags:\n        - \"user\"\n      responses:\n        200:\n          description: \"An object with a property users which is an array of User objects.\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/Users'\n      operationId: \"list_users\"\n  /tickets/{ticket_id}/replies:\n    post:\n      summary: \"Posts a reply to the ticket with id ticket_id.\"\n      description: \"https://supportbee.com/api#create_reply\"\n      parameters: \n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"path\"\n          name: \"ticket_id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n      requestBody:\n        description: The data required to create a ticket. \n        content:\n          application/json:\n            schema: \n              $ref: '#/components/schemas/CreateReplyRequest'\n      tags:\n        - \"reply\"\n      responses:\n        201:\n          description: \"Created reply\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/CreatedReply'\n      operationId: \"create_reply\"\n    get:\n      summary: \"Retrieves all the replies of the ticket with id ticket_id.\"\n      description: \"https://supportbee.com/api#fetching_replies\"\n      parameters:\n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"path\"\n          name: \"ticket_id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n      tags:\n        - \"reply\"\n      responses:\n        200:\n          description: \"An object with a property replies which is an array of Reply objects.\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/Replies'\n      operationId: \"list_replies\"\n  /tickets/{ticket_id}/replies/{id}:\n    get:\n      summary: \"Retrieves the reply for ticket specified by the ticket_id with id.\"\n      description: \"https://supportbee.com/api#create_reply\"\n      parameters: \n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"path\"\n          name: \"ticket_id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n        - in: \"path\"\n          name: \"id\"\n          description: \"The reply ID\"\n          schema:\n            type: string\n          required: true\n      tags:\n        - \"reply\"\n      responses:\n        200:\n          description: \"A reply object\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/ReplyObject'\n      operationId: \"get_reply\"\n  /tickets/{ticket_id}/labels/{label_name}:\n    post:\n      summary: \"Adds the label with {label_name} to the ticket with id ticket_id\"\n      description: \"https://supportbee.com/api#adding_label\"\n      parameters: \n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"path\"\n          name: \"ticket_id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n        - in: \"path\"\n          name: \"label_name\"\n          description: \"The label name\"\n          schema:\n            type: string\n          required: true\n      tags:\n        - \"label\"\n      responses:\n        201:\n          description: \"Created reply\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/CreatedLabel'\n      operationId: \"create_label\"\n    delete:\n      summary: \"Removes label from a ticket.\"\n      description: \"https://supportbee.com/api#adding_label\"\n      parameters:\n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"path\"\n          name: \"ticket_id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n        - in: \"path\"\n          name: \"label_name\"\n          description: \"The label name\"\n          schema:\n            type: string\n          required: true\n      tags:\n        - \"label\"\n      responses:\n        204:\n          description: \"An empty body if the label was successfully removed.\"\n      operationId: \"remove_label\"\n  /labels:\n    get:\n      summary: \"Retrieves all the custom labels of a company.\"\n      description: \"https://supportbee.com/api#fetching_labels\"\n      parameters: \n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n      tags:\n        - \"label\"\n      responses:\n        200:\n          description: \"An object with a property labels which is an array of Label objects.\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/Labels'\n      operationId: \"list_labels\"\n  /tickets/{ticket_id}/comments:\n    post:\n      summary: \"Posts a comment to the ticket with id.\"\n      description: \"https://supportbee.com/api#create_comment\"\n      parameters: \n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"path\"\n          name: \"ticket_id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n      requestBody:\n        description: The data required to create a comment. \n        content:\n          application/json:\n            schema: \n              $ref: '#/components/schemas/CreateCommentRequest'\n      tags:\n        - \"comment\"\n      responses:\n        201:\n          description: \"Created comment\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/CreatedComment'\n      operationId: \"create_comment\"\n    get:\n      summary: \"Retrieves all the comments of the ticket with id.\"\n      description: \"https://supportbee.com/api#fetching_comments\"\n      parameters:\n        - in: \"header\"\n          name: \"Accept\"\n          description: \"All API requests must have a Accept header set to application/json.\"\n          schema:\n            type: string\n            default: \"application/json\"\n          required: false\n        - in: \"path\"\n          name: \"ticket_id\"\n          description: \"The ticket ID\"\n          schema:\n            type: string\n          required: true\n      tags:\n        - \"comment\"\n      responses:\n        200:\n          description: \"An object with a property comments which is an array of Comment objects.\"\n          content:\n            application/json:\n              schema: \n                $ref: '#/components/schemas/Comments'\n      operationId: \"list_comments\"\n\ncomponents:\n  schemas:\n    CreateTicketRequest:\n      type: object\n      properties:\n        ticket:\n          $ref: '#/components/schemas/TicketRequest'\n      description: The data required to create a ticket. \n    CreatedTicket:\n      type: object\n      properties:\n        ticket:\n          $ref: '#/components/schemas/Ticket'\n      description: Created ticket.\n    TicketObject:\n      type: object\n      properties:\n        ticket:\n          $ref: '#/components/schemas/Ticket'\n      description: A ticket object.\n    TicketRequest:\n      type: object\n      properties:\n        subject:\n          type: string\n          description: Specifies the subject of the ticket.\n        requester_name:\n          type: string\n          description: Specifies the name of the requester of the ticket. \n        requester_email:\n          type: string\n          description: Specifies the email of the requester of the ticket.\n        cc:\n          type: array\n          items:\n            type: string\n          description: Specifies the CC email addresses included in the ticket. If there are multiple emails, pass them comma separated. Up to 25 addresses are allowed.\n        bcc:\n          type: array\n          items:\n            type: string\n          description: Specifies the BCC email addresses included in the ticket. If there are multiple emails, pass them comma separated. Up to 25 addresses are allowed.\n        notify_requester:\n          type: boolean\n          description: If true, a copy of the ticket is sent to the requester and all email addresses in CC and BCC. An auto-response is not sent when this parameter is true (even if it's enabled in the settings). The sender name in this copy is taken from the forwarding address used to create the ticket.\n        content:\n          $ref: '#/components/schemas/Content'\n        attachment_ids:\n          type: array\n          items:\n              type: integer\n          description: Specifies the attachment IDs of the ticket.\n        forwarding_address_id:\n          type: string\n          description: This optional parameter lets you specify the email address/name to be used for sending out replies/auto-responses to the customer. You can find the forwarding address id by editing the desired forwarding address and copying the id from the URL once you are on the edit page (we are working on making this more straight forward). If you are using a SMTP server for delivering emails, it's important that you send this parameter and use the correct email address to avoid any delivery issues.\n      description: The data required to create a ticket.\n    Content:\n      type: object\n      properties:\n        text:\n          type: string\n          description: Specifies the text content of the ticket.\n        html:\n          type: string\n          description: Specifies the html content of the ticket.\n        attachment_ids:\n          type: array\n          items:\n              type: integer\n          description: Specifies the attachment IDs of the ticket.\n      description: Specifies the content of the ticket. Either text or html must be present.\n    Tickets:\n      type: object\n      properties:\n        total:\n          type: integer\n          description: Total tickets\n        current_page:\n          type: integer\n          description: Current page count\n        per_page:\n          type: integer\n          description: Per page count\n        total_pages:\n          type: integer\n          description: Total pages count\n        tickets:\n          type: array\n          items:\n            $ref: '#/components/schemas/Ticket'\n          description: An array of Ticket objects.\n      description: An object with a property tickets which is an array of Ticket objects.\n    Ticket:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Ticket ID \n        subject:\n          type: string\n          description: Subject of the ticket\n        replies_count:\n          type: integer\n          description: Reply count for the ticket \n        comments_count:\n          type: integer\n          description: Comments count for the ticket\n        last_activity_at:\n          type: string\n          description: Last activity at\n        created_at:\n          type: string\n          description: Created at\n        unanswered:\n          type: boolean\n          description: Unanswered status\n        archived:\n          type: boolean\n          description: Archived status\n        spam:\n          type: boolean\n          description: Spam status\n        starred:\n          type: boolean\n          description: Starred status \n        summary:\n          type: string\n          description: Summary of the ticket\n        source:\n          $ref: '#/components/schemas/Source'\n        cc:\n          type: array\n          items:\n            $ref: '#/components/schemas/CC'\n          description: Specifies the CC email addresses included in the ticket.\n        bcc:\n          type: array\n          items:\n            $ref: '#/components/schemas/BCC'\n          description: Specifies the BCC email addresses included in the ticket. \n        current_user_assignee:\n          $ref: '#/components/schemas/CurrentUserAssignee'\n        current_team_assignee:\n          $ref: '#/components/schemas/CurrentTeamAssignee'\n        requester:\n          $ref: '#/components/schemas/Requester'\n        content:\n          $ref: '#/components/schemas/TicketContent'\n      description: Ticket object\n    Source:\n      type: object\n      properties:\n        email:\n          type: string\n          description: Email address\n      description: Source of the ticket\n    Picture:\n      type: object\n      properties:\n        thumb20:\n          type: string\n          description: Thumb 20\n        thumb24:\n          type: string\n          description: Thumb 24\n        thumb32:\n          type: string\n          description: Thumb 32\n        thumb48:\n          type: string\n          description: Thumb 48\n        thumb64:\n          type: string\n          description: Thumb 64\n        thumb128:\n          type: string\n          description: Thumb 128\n      description: Picture object\n    CC:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Email ID \n        email:\n          type: string\n          description: Email address\n        name:\n          type: string\n          description: Name\n        role:\n          type: string\n          description: Role\n        agent:\n          type: boolean\n          description: Agent status\n        picture:\n          $ref: '#/components/schemas/Picture'\n      description: CC object\n    BCC:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Email ID \n        email:\n          type: string\n          description: Email address\n        name:\n          type: string\n          description: Name\n        role:\n          type: string\n          description: Role\n        agent:\n          type: boolean\n          description: Agent status\n        picture:\n          $ref: '#/components/schemas/Picture'\n      description: BCC object\n    CurrentUserAssignee:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n      description: Current user assignee\n    CurrentTeamAssignee:\n      type: object\n      properties:\n        team:\n          $ref: '#/components/schemas/Team'\n      description: Current team assignee\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Email ID \n        email:\n          type: string\n          description: Email address\n        name:\n          type: string\n          description: Name\n        agent:\n          type: boolean\n          description: Agent status\n        picture:\n          $ref: '#/components/schemas/Picture'\n      description: User object\n    Team:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Email ID \n        name:\n          type: string\n          description: Name\n        picture:\n          $ref: '#/components/schemas/Picture'\n      description: Team object\n    Requester:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Email ID \n        email:\n          type: string\n          description: Email address\n        name:\n          type: string\n          description: Name\n        role:\n          type: string\n          description: Role\n        agent:\n          type: boolean\n          description: Agent status\n        picture:\n          $ref: '#/components/schemas/Picture'\n      description: Requester object\n    TicketContent:\n      type: object\n      properties:\n        text:\n          type: string\n          description: Specifies the text content of the ticket.\n        html:\n          type: string\n          description: Specifies the html content of the ticket.\n        attachments:\n          type: array\n          items:\n              $ref: '#/components/schemas/Attachment'\n          description: Specifies the attachments of the ticket.\n      description: Specifies the content of the ticket.\n    Attachment:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Attachment ID\n        created_at:\n          type: string\n          description: Created at\n        filename:\n          type: string\n          description: Filename\n        content_type:\n          type: string\n          description: Content type\n        url:\n          $ref: '#/components/schemas/Url'\n      description: Specifies the attachment object.\n    Url:\n      type: object\n      properties:\n        original:\n          type: string\n          description: Original URL\n        thumb:\n          type: string\n          description: Thumbnail URL\n      description: URL object\n    AssignUserRequest:\n      type: object\n      properties:\n        user_assignment:\n          $ref: '#/components/schemas/UserAssignmentRequest'\n      description: The data required to assign a ticket to a user. \n    UserAssignmentRequest:\n      type: object\n      properties:\n        user_id:\n          type: integer\n          description: User ID\n      description: The data required to assign a ticket to a user.\n    AssignedUserObject:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: User assignment ID \n        created_at:\n          type: string\n          description: Created at\n        ticket:\n          $ref: '#/components/schemas/UserAssignmentTicket'\n        assignee:\n          $ref: '#/components/schemas/Assignee'    \n      description: The assigned user object\n    UserAssignmentTicket:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: User assignment ticket ID \n      description: User assignment ticket object\n    Assignee:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/User'\n      description: Assignee object\n    GetUserObject:\n      type: object\n      properties:\n        user:\n          $ref: '#/components/schemas/UserObject'\n      description: Get user object\n    UserObject:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: User ID \n        type:\n          type: string\n          description: User type\n        email:\n          type: string\n          description: Email address\n        first_name:\n          type: string\n          description: First name\n        last_name:\n          type: string\n          description: Last name\n        name:\n          type: string\n          description: Name\n        role:\n          type: string\n          description: Role    \n        agent:\n          type: boolean\n          description: Agent status\n        two_factor_authentication_enabled:\n          type: boolean\n          description: Two factor authentication enabled\n        picture:\n          $ref: '#/components/schemas/Picture'\n        can_members_access_group_tickets:\n          type: boolean\n          description: Can members access group tickets\n        members_count:\n          type: integer\n          description: Members count\n        active_tickets_count:\n          type: integer\n          description: Active tickets count   \n      description: User object\n    Users:\n      type: object\n      properties:\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserObject'\n          description: An array of User objects.\n      description: An object with a property users which is an array of User objects.\n    CreateReplyRequest:\n      type: object\n      properties:\n        reply:\n          $ref: '#/components/schemas/ReplyRequest'\n      description: The data required to create a reply. \n    CreatedReply:\n      type: object\n      properties:\n        reply:\n          $ref: '#/components/schemas/Reply'\n      description: Created reply.\n    ReplyObject:\n      type: object\n      properties:\n        reply:\n          $ref: '#/components/schemas/Reply'\n      description: A reply object.\n    ReplyRequest:\n      type: object\n      properties:\n        cc:\n          type: array\n          items:\n            type: string\n          description: Specifies the CC email addresses included in the reply. If there are multiple emails, pass them comma separated. Up to 25 addresses are allowed.\n        bcc:\n          type: array\n          items:\n            type: string\n          description: Specifies the BCC email addresses included in the reply. If there are multiple emails, pass them comma separated. Up to 25 addresses are allowed.\n        content:\n          $ref: '#/components/schemas/ReplyRequestContent'\n      description: The data required to create a reply.\n    ReplyRequestContent:\n      type: object\n      properties:\n        text:\n          type: string\n          description: Specifies the text content of the ticket.\n        html:\n          type: string\n          description: Specifies the html content of the ticket.\n        attachment_ids:\n          type: array\n          items:\n              type: integer\n          description: Specifies the attachment IDs of the ticket.\n      description: Specifies the content of the reply. Either text or html must be present. \n    Replies:\n      type: object\n      properties:\n        replies:\n          type: array\n          items:\n            $ref: '#/components/schemas/Reply'\n          description: An array of Reply objects.\n      description: An object with a property replies which is an array of Reply objects.\n    Reply:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Reply ID \n        created_at:\n          type: string\n          description: Created at\n        summary:\n          type: string\n          description: Summary of the reply\n        cc:\n          type: array\n          items:\n            $ref: '#/components/schemas/CC'\n          description: Specifies the CC email addresses included in the reply.\n        bcc:\n          type: array\n          items:\n            $ref: '#/components/schemas/BCC'\n          description: Specifies the BCC email addresses included in the reply. \n        ticket:\n          $ref: '#/components/schemas/Ticket'\n        replier:\n          $ref: '#/components/schemas/Replier'\n        content:\n          $ref: '#/components/schemas/ReplyContent'\n      description: Reply object\n    Replier:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Replier ID \n        email:\n          type: string\n          description: Email address\n        name:\n          type: string\n          description: Name\n        agent:\n          type: boolean\n          description: Agent status\n        picture:\n          $ref: '#/components/schemas/Picture'\n      description: Replier object\n    ReplyContent:\n      type: object\n      properties:\n        text:\n          type: string\n          description: Specifies the text content of the reply.\n        html:\n          type: string\n          description: Specifies the html content of the reply.\n        attachments:\n          type: array\n          items:\n              $ref: '#/components/schemas/Attachment'\n          description: Specifies the attachments of the reply.\n      description: Specifies the content of the reply.\n    CreatedLabel:\n      type: object\n      properties:\n        label:\n          $ref: '#/components/schemas/Label'\n      description: Created label.\n    Labels:\n      type: object\n      properties:\n        labels:\n          type: array\n          items:\n            $ref: '#/components/schemas/LabelObject'\n          description: An array of Label objects.\n      description: An object with a property labels which is an array of Label objects.\n    Label:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Label ID.\n        label:\n          type: string\n          description: Label name.\n        ticket:\n          type: integer\n          description: Ticket ID.\n      description: Label object.\n    LabelObject:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Label name \n        color:\n          type: string\n          description: Label color \n      description: Label object.\n    CreateCommentRequest:\n      type: object\n      properties:\n        comment:\n          $ref: '#/components/schemas/CommentRequest'\n      description: The data required to create a comment.\n    CreatedComment:\n      type: object\n      properties:\n        comment:\n          $ref: '#/components/schemas/Comment'\n      description: Created comment.\n    CommentRequest:\n      type: object\n      properties:\n        content:\n          $ref: '#/components/schemas/CommentRequestContent'\n      description: The data required to create a comment.\n    CommentRequestContent:\n      type: object\n      properties:\n        text:\n          type: string\n          description: Specifies the text content of the comment.\n        html:\n          type: string\n          description: Specifies the html content of the comment.\n        attachment_ids:\n          type: array\n          items:\n              type: integer\n          description: Specifies the attachment IDs of the comment.\n      description: Specifies the content of the comment. Either text or html must be present.\n    Comment:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Comment ID \n        created_at:\n          type: string\n          description: Created at\n        ticket:\n          $ref: '#/components/schemas/Ticket'\n        commenter:\n          $ref: '#/components/schemas/Commenter'\n        content:\n          $ref: '#/components/schemas/CommentContent'\n      description: Comment object\n    Commenter:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: Replier ID \n        email:\n          type: string\n          description: Email address\n        name:\n          type: string\n          description: Name\n        agent:\n          type: boolean\n          description: Agent status\n        picture:\n          $ref: '#/components/schemas/Picture'\n      description: Commenter object\n    CommentContent:\n      type: object\n      properties:\n        text:\n          type: string\n          description: Specifies the text content of the comment.\n        html:\n          type: string\n          description: Specifies the html content of the comment.\n        attachments:\n          type: array\n          items:\n              $ref: '#/components/schemas/Attachment'\n          description: Specifies the attachments of the comment.\n      description: Specifies the content of the comment.\n    Comments:\n      type: object\n      properties:\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/Comment'\n          description: An array of Comment objects.\n      description: An object with a property comments which is an array of Comment objects.\n\n  securitySchemes:\n    api_token:\n      type: apiKey\n      name: auth_token\n      in: query\n      description: Represents API Key `auth_token`\n"
		}
	},
	"Error": "security: failed to write file oas_security_gen.go: format: 105:3: expected 1 expression"
}