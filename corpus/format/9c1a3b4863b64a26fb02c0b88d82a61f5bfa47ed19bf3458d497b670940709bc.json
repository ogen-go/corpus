{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/spinitron.com/1.0.0/openapi.yaml",
			"byteSize": 30169,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://spinitron.com/api\ninfo:\n  contact:\n    x-twitter: Spinitron\n  description: |\n    ## Notes\n\n    **Tutorial demo** using this API is at [https://spinitron.com/v2-api-demo/](https://spinitron.com/v2-api-demo/). For web integration using iframes and/or JavaScript instead of an API, see [https://spinitron.github.io/v2-web-integration/](https://spinitron.github.io/v2-web-integration/).\n\n    **Your API key** is found in the Spinitron web app. Log in to Spinitron and go to *Automation \u0026 API* in the *Admin* menu.\n\n    **Authenticate** by presenting your API key using either HTTP Bearer Authorization\n    (preferred)\n\n        curl -H 'Authorization: Bearer YOURAPIKEY' 'https://spinitron.com/api/spins'\n\n    or in the query parameter `access-token` (less secure owing to webserver\n    log files)\n\n        curl 'https://spinitron.com/api/spins?access-token=YOURAPIKEY'\n\n    **Limit** per page of results is 20 by default and miximally 200.\n\n    **Try it out** below works to\n    generate example cURL requests but not to get responses from Spinitron. We\n    do not accept queries sent from web browsers. Copy-paste the cURL commands\n    and run them from your computer.\n\n    **Cache** the data you get from the API if you are using it in web or mobile integration. It's not ok to query the API on *every* page request you serve. The [demo](https://spinitron.com/v2-api-demo/) shows how easy it can be to implement a file cache.\n\n    An extension to this API with access to all stations for partner applications is available. Contact us.\n  title: Spinitron v2 API\n  version: 1.0.0\n  x-apisguru-categories:\n    - media\n  x-logo:\n    url: https://twitter.com/Spinitron/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://raw.githubusercontent.com/spinitron/v2api/master/spinitron.yaml\n      version: \"2.0\"\n  x-providerName: spinitron.com\nsecurity:\n  - httpBearer: []\n  - accessToken: []\ntags:\n  - name: Persona\n  - name: Show\n  - name: Playlist\n  - name: Spin\npaths:\n  /personas:\n    get:\n      parameters:\n        - description: Filter by Persona name\n          in: query\n          name: name\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Persona\"\n                        type: array\n                    type: object\n            application/xml:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Persona\"\n                        type: array\n                    type: object\n          description: The personas\n      summary: Get Personas\n      tags:\n        - Persona\n  \"/personas/{id}\":\n    get:\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Persona\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Persona\"\n          description: The Persona\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Persona not found\n      summary: Get Persona by id\n      tags:\n        - Persona\n  /playlists:\n    get:\n      description: |\n        Get Playlists optionally filtered by a datetime range.\n        Only past Playlists will be returned (with allowed tolerance equals 1 hour in future).\n\n        Ordered chronologically from newest to oldest.\n      parameters:\n        - description: |\n            The datetime starting from items must be returned. Maximum 1 hour in future.\n          in: query\n          name: start\n          schema:\n            format: date-time\n            type: string\n        - description: |\n            The ending datetime. Maximum 1 hour in future.\n          in: query\n          name: end\n          schema:\n            format: date-time\n            type: string\n        - description: Filter by show\n          in: query\n          name: show_id\n          schema:\n            type: integer\n        - description: Filter by persona\n          in: query\n          name: persona_id\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Playlist\"\n                        type: array\n                    type: object\n            application/xml:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Playlist\"\n                        type: array\n                    type: object\n          description: The playlists\n      summary: Returns playlists optionally filtered by {start} and/or {end} datetimes\n      tags:\n        - Playlist\n  \"/playlists/{id}\":\n    get:\n      description: |\n        The response object represents the playlist specified by {id}.\n\n        Status 404 is returned if a playlist with {id} does not exist or if it does but starts in the future (with allowed tolerance equals 1 hour in future).\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Playlist\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Playlist\"\n          description: The playlist\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Playlist not found or is in the future\n      summary: Get a Playlist by id\n      tags:\n        - Playlist\n  /shows:\n    get:\n      description: |\n        **Terminology**: Spinitron defines a *show* as a radio program. A show can have one or more *schedules*,\n        each of which may specify either an *occurence* or a *repetition*, which represents a set of occurences.\n        Thus scheduled shows have occurences that, for example, may be displayed in a calendar.\n\n        In the response, `items` is an array of objects representing occurences of scheduled shows.\n\n        You may optionally filter `items` to a datetime *range* by including in the request {start} and/or {end}\n        parameters, both of which must be no more than one hour in the past. An occurence starting at {end} is\n        included in the reponse.\n\n        `itmes` can include occurences that begin *or* end within the filter range. A show that goes on air before\n        {start} appears in `items` if it ends *after* but not *at* {start}. An occurence starting at or before {end}\n        is included.\n\n        If the request omits the {start} parameter, the server sets its value to the current time so that the filter\n        range's start is always defined. If the request specifies {end} then the requested range is *bounded*,\n        otherwise it is *unbounded*.\n\n        For a bounded request, `items` includes *every* occurence of all shows occuring in the range. The only\n        difference between objects in `items` representing a given show will be the `start` field value.\n\n        For an unbounded request, `items` includes *only one* occurence per show, specifically, the\n        next occurrence after {start} of all shows occuring after {start}.\n\n        Use an unbounded request to get a straight list all shows. Use a bounded request to get a calendar/agenda\n        of shows expanded into occurrences by thir shedules and repetitions.\n\n        Objects in `items` are ordered first by `datetime` and then by `id`.\n      parameters:\n        - description: |\n            The datetime starting from items must be returned. Maximum 1 hour in past.\n          in: query\n          name: start\n          schema:\n            format: date-time\n            type: string\n        - description: |\n            The ending datetime. Maximum 1 hour in past.\n          in: query\n          name: end\n          schema:\n            format: date-time\n            type: string\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Show\"\n                        type: array\n                    type: object\n            application/xml:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Show\"\n                        type: array\n                    type: object\n          description: The shows\n        \"422\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: |\n            Invalid datetimes in filter: either too old or {end} is less than {start}.\n      summary: Returns scheduled shows optionally filtered by {start} and/or {end} datetimes\n      tags:\n        - Show\n  \"/shows/{id}\":\n    get:\n      description: |\n        The response object represents the next occurence of the show specified by {id}.\n\n        Status 404 is returned if a show with {id} does not exist or if it does but all its scheduled occurences elapsed in the past.\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Show\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Show\"\n          description: The Show\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Show not found or too old\n      summary: Get a Show by id\n      tags:\n        - Show\n  /spins:\n    get:\n      description: |\n        Get Spins optionally filtered by a datetime range. Only past Spins will be returned.\n      parameters:\n        - description: |\n            The datetime starting from items must be returned.\n          in: query\n          name: start\n          schema:\n            format: date-time\n            type: string\n        - description: |\n            The ending datetime.\n          in: query\n          name: end\n          schema:\n            format: date-time\n            type: string\n        - description: Filter by playlist\n          in: query\n          name: playlist_id\n          schema:\n            type: integer\n        - description: Filter by show\n          in: query\n          name: show_id\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Spin\"\n                        type: array\n                    type: object\n            application/xml:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BaseIndexResponse\"\n                  - properties:\n                      items:\n                        items:\n                          $ref: \"#/components/schemas/Spin\"\n                        type: array\n                    type: object\n          description: The spins\n      summary: Returns spins optionally filtered by {start} and/or {end} datetimes\n      tags:\n        - Spin\n    post:\n      description: An endpoint for automation systems to log spins into the spin table.\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                artist:\n                  type: string\n                composer:\n                  type: string\n                duration:\n                  type: integer\n                genre:\n                  type: string\n                isrc:\n                  type: string\n                label:\n                  type: string\n                live:\n                  description: |\n                    Only when automation params are configured with the \"Pass through\" mode.\n                    Enables \"live assist\" mode. Default mode is \"full automation\".\n                  type: boolean\n                release:\n                  type: string\n                song:\n                  type: string\n                start:\n                  format: date-time\n                  type: string\n              required:\n                - artist\n                - song\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Spin\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Spin\"\n          description: The new created Spin.\n        \"422\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ValidationError\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ValidationError\"\n                type: array\n          description: Validation failed.\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Failed to create the object for unknown reason.\n      summary: Log a Spin\n      tags:\n        - Spin\n  \"/spins/{id}\":\n    get:\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/fields\"\n        - $ref: \"#/components/parameters/expand\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Spin\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Spin\"\n          description: The spin\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Spin not found\n      summary: Get a Spin by id\n      tags:\n        - Spin\ncomponents:\n  parameters:\n    expand:\n      description: Allows to select extra fields\n      in: query\n      name: expand\n      schema:\n        items:\n          type: string\n        type: array\n    fields:\n      description: Allows to select only needed fields\n      in: query\n      name: fields\n      schema:\n        items:\n          type: string\n        type: array\n    limit:\n      description: Amount of items to return\n      in: query\n      name: count\n      schema:\n        default: 20\n        minimum: 1\n        type: integer\n    page:\n      description: Offset, used together with count\n      in: query\n      name: page\n      schema:\n        minimum: 1\n        type: integer\n  schemas:\n    BaseIndexResponse:\n      properties:\n        _links:\n          properties:\n            self:\n              $ref: \"#/components/schemas/Link\"\n          type: object\n        _meta:\n          $ref: \"#/components/schemas/Pagination\"\n      type: object\n    Error:\n      properties:\n        code:\n          type: integer\n        message:\n          type: string\n        name:\n          type: string\n        status:\n          type: integer\n        type:\n          type: string\n      type: object\n    Link:\n      properties:\n        href:\n          type: string\n      type: object\n    Pagination:\n      properties:\n        currentPage:\n          type: integer\n        pageCount:\n          type: integer\n        perPage:\n          type: integer\n        totalCount:\n          type: integer\n      type: object\n    Persona:\n      description: The `Persona` object describes a radio DJ/host. One person can have multiple personas\n      properties:\n        _links:\n          properties:\n            self:\n              $ref: \"#/components/schemas/Link\"\n            shows:\n              items:\n                $ref: \"#/components/schemas/Link\"\n              type: array\n          type: object\n        bio:\n          description: HTML-formatted biography\n          example: \u003cp\u003eBesides DJ'ing industrial and experimental music since 1991, Deftly has performed in industrial ...\n          type: string\n        email:\n          description: DJ/host's email address\n          example: example@spinitron.com\n          format: email\n          type: string\n        id:\n          example: 2832\n          type: integer\n        image:\n          example: https://spinitron.com/images/Persona/28/2832-img_profile-original.jpg\n          format: url\n          type: string\n        name:\n          description: On-air DJ/host name\n          example: Deftly-D\n          type: string\n        since:\n          description: Since what year has the DJ/host been at the station?\n          example: 1991\n          format: year\n          type: integer\n        website:\n          description: URL to web site for the DJ/host\n          example: https://spinitron.com/example/doesnt/exist\n          format: url\n          type: string\n      type: object\n    Playlist:\n      properties:\n        _links:\n          properties:\n            persona:\n              $ref: \"#/components/schemas/Link\"\n            self:\n              $ref: \"#/components/schemas/Link\"\n            show:\n              $ref: \"#/components/schemas/Link\"\n            spins:\n              $ref: \"#/components/schemas/Link\"\n          type: object\n        automation:\n          description: Was the playlist created playlists created by a radio station automation system?\n          example: false\n          type: boolean\n        category:\n          description: Program/show category\n          example: Music\n          type: string\n        description:\n          description: HTML-formatted description of the playlist or program/show\n          example: It is a \u003cem\u003ecross-­cultural musical journey united in voices and rhythms\u003c/em\u003e.\n          type: string\n        duration:\n          description: Duration in seconds\n          example: 3600\n          type: integer\n        end:\n          description: UTC datetime ISO-8601\n          example: 2018-03-30T14:00:00+0000\n          format: date-time\n          type: string\n        episode_description:\n          description: HTML-formatted description of the episode\n          example: \u003cp\u003eEpisode description\u003c/p\u003e\n          type: string\n        episode_name:\n          description: Title of this episode of the program/show\n          type: string\n        hide_dj:\n          description: Should the client application hide information about the playlist's DJ/host?\n          example: false\n          type: boolean\n        id:\n          example: 219992\n          type: integer\n        image:\n          example: https://spinitron.com/images/Show/44/4498/img_show-original.jpg\n          format: url\n          type: string\n        persona_id:\n          example: 2832\n          type: integer\n        show_id:\n          example: 4498\n          type: integer\n        since:\n          description: Since what year has the program/show existed?\n          example: 1999\n          format: year\n          type: integer\n        start:\n          description: UTC datetime ISO-8601\n          example: 2018-03-30T13:00:00+0000\n          format: date-time\n          type: string\n        timezone:\n          description: Station's time zone\n          example: America/Chicago\n          type: string\n        title:\n          description: Program/show title\n          example: Transworld Airwaves\n          type: string\n        url:\n          description: URL to web site for the playlist or program/show\n          format: url\n          type: string\n      type: object\n    Show:\n      description: A `Show` object describes one occurrence of a radio program. A result set may contain multiple occurrences of the same show with difference `start` and `end` values.\n      properties:\n        _links:\n          properties:\n            personas:\n              items:\n                $ref: \"#/components/schemas/Link\"\n              type: array\n            playlists:\n              $ref: \"#/components/schemas/Link\"\n            self:\n              $ref: \"#/components/schemas/Link\"\n          type: object\n        category:\n          description: Program/show category\n          example: Music\n          type: string\n        description:\n          description: HTML-formatted description of the playlist or program/show\n          example: \u003cp\u003eSince 2001, \u003cstrong\u003eThe High Voltage Circumcision\u003c/strong\u003e show has delivered a full spectrum barrage of dark hard and experimental music from industrial to noise to idm to ebm to bizarre to audio collage often with a side of live guests, social consciousness, interviews, twisted humor, studio experiments and left turns.\u003c/p\u003e\n          type: string\n        duration:\n          description: Duration in seconds\n          example: 10800\n          type: integer\n        end:\n          description: UTC datetime ISO-8601\n          example: 2018-04-03T02:00:00+0000\n          format: date-time\n          type: string\n        hide_dj:\n          description: Should the client application hide information about the show's DJs/hosts?\n          example: false\n          type: boolean\n        id:\n          example: 4498\n          type: integer\n        image:\n          example: https://spinitron.com/images/Show/44/4498/img_show-original.jpg\n          format: url\n          type: string\n        one_off:\n          description: Is the show a one-off in the schedule instead of repeating?\n          example: false\n          type: boolean\n        since:\n          description: Since what year has the program/show existed?\n          example: 2001\n          format: year\n          type: integer\n        start:\n          description: UTC datetime ISO-8601\n          example: 2018-04-02T23:00:00+0000\n          format: date-time\n          type: string\n        timezone:\n          description: Station's time zone\n          example: America/Chicago\n          type: string\n        title:\n          description: Program/show title\n          example: Voidstar Productions’ High Voltage Circumcision Show\n          type: string\n        url:\n          description: URL to web site for the program/show\n          example: https://spinitron.com/example/doesnt/exist\n          format: url\n          type: string\n      type: object\n    Spin:\n      properties:\n        _links:\n          properties:\n            playlist:\n              $ref: \"#/components/schemas/Link\"\n            self:\n              $ref: \"#/components/schemas/Link\"\n          type: object\n        artist:\n          example: The Beatles\n          type: string\n        artist-custom:\n          description: Station-specific custom field relating to the song's artist\n          type: string\n        catalog-number:\n          description: Reference number in the record label's catalog\n          example: 5C 006-04982\n          type: string\n        classical:\n          description: Is the track's metadata schema \"classical\" rather than \"popular\"?\n          example: false\n          type: boolean\n        composer:\n          example: Lennon - McCartney\n          type: string\n        conductor:\n          description: For classical music, conducor of the ensemble\n          example: Herbert von Karajan\n          type: string\n        duration:\n          description: Duration in seconds\n          example: 199\n          type: integer\n        end:\n          description: UTC datetime ISO-8601\n          example: 2018-03-30T13:10:25+0000\n          format: date-time\n          type: string\n        ensemble:\n          description: For classical music, orchestra, performing ensemble, choir, etc.\n          example: Vienna Philharmonic Orchestra\n          type: string\n        genre:\n          example: Pop\n          type: string\n        id:\n          example: 8017277\n          type: integer\n        image:\n          description: Cover art\n          example: https://is5-ssl.mzstatic.com/image/thumb/Music3/v4/ef/e8/67/efe8674e-467a-adfe-9f67-8d50860b4f1e/dj.sokyjuyt.jpg/170x170bb.jpg\n          format: url\n          type: string\n        isrc:\n          example: GBAYE9901218\n          type: string\n        iswc:\n          example: T-010.434.166-3\n          type: string\n        label:\n          description: Record label, i.e. publisher of the sound recording\n          example: Apple Records\n          type: string\n        label-custom:\n          description: Station-specific custom field relating to the record label\n          type: string\n        local:\n          description: Is the artist local to the station?\n          example: false\n          type: boolean\n        medium:\n          description: Media format in which the sound recording was reased\n          example: 7\"\n          type: string\n        new:\n          description: Is this a recent release?\n          example: false\n          type: boolean\n        note:\n          description: HTML-formatted DJ annotation of the spin, can include images etc.\n          example: B-side of the \u003cstrong\u003eoriginal\u003c/strong\u003e 7\" vinyl in the station's collection.\n          type: string\n        performers:\n          description: For classical music, featured performing artists, e.g. soloists\n          example: Rohan DeSaram (cello), Marianne Schroeder (piano)\n          type: string\n        playlist_id:\n          example: 336722\n          type: integer\n        release:\n          example: All Together Now / Hey Bulldog\n          type: string\n        release-custom:\n          description: Station-specific custom field relating to the release\n          type: string\n        released:\n          description: Year of initial release\n          example: 1972\n          type: integer\n        request:\n          description: Was the spin requested by a listener?\n          example: false\n          type: boolean\n        song:\n          description: Title of the song or track\n          example: Hey Bulldog\n          type: string\n        start:\n          description: UTC datetime ISO-8601\n          example: 2018-03-30T13:07:08+0000\n          format: date-time\n          type: string\n        timezone:\n          description: Station's time zone\n          example: America/Chicago\n          type: string\n        upc:\n          description: Universal Product Code of the release\n          example: \"4006408126775\"\n          type: string\n        va:\n          description: Is it a \"Various Artists\" release?\n          example: false\n          type: boolean\n        work:\n          description: For classical music, the main compositional work the track (see `song` field) belongs to\n          example: The Marriage of Figaro\n          type: string\n      type: object\n    ValidationError:\n      properties:\n        field:\n          type: string\n        message:\n          type: string\n      type: object\n  securitySchemes:\n    accessToken:\n      in: query\n      name: access-token\n      type: apiKey\n    httpBearer:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n"
		}
	},
	"Error": "security: failed to write file oas_security_gen.go: format: 112:3: expected 1 expression"
}