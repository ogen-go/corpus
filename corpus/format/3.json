{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/data61/anonlink-entity-service"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "backend/entityservice/api_def/openapi.yaml",
			"content": "# An OpenAPI 3.0 definition of the Entity Service API.\n#\n# This is used for generating API documentation and the types used by the\n# server.\n#\n# Some style notes:\n# - This file is used by ReDoc, which allows GitHub Flavored Markdown in\n#   descriptions.\nopenapi: 3.0.2\ninfo:\n  version: '1.13'\n  title: Entity Matching API\n  x-logo:\n    url: http://clkhash.readthedocs.io/en/latest/_static/logo.svg\n  contact:\n    name: 'Confidential Computing, Data61 | CSIRO'\n    email: confidential-computing@csiro.au\n    url: https://github.com/data61/anonlink-entity-service\n\n  description: \u003e-\n    Allows multiple organisations to carry out private record linkage -\n    without disclosing personally identifiable information.\n\n    In general:\n\n    * All parameters and returned objects are JSON with content-type set to\n    `\"application/json\"`.\n\n    * All authentication tokens are 48 character hex strings.\n\n    * The `Project`/`Run` resource identifiers are also 48 char hex strings.\n\n    * HTTP status codes are used to distinguish server outcomes.\n\n\n    **Note:** Several important concepts including security considerations are described in\n    [separate documentation](./concepts.html).\n\n    ### Introduction\n\n    This is a service that computes matches of entity records between two parties.\n    The personally identifiable information used for linking is first locally transformed\n    to anonymous linking codes called [Cryptographic Longterm Keys](concepts.html#cryptographic-longterm-key)\n    (CLKs). Each party then uploads its CLKs to the service for matching.\n    The service supports three different [types of outputs](concepts.html#result-types)\n    of matching results, varying in privacy properties.\n    For the CLKs to be comparable, the parties need to agree on and follow a particular\n    [linkage schema](concepts.html#schema) and agree on a shared secret before generating\n    and uploading the CLKs.\n\n\n    ### Security\n\n    See the linked [security documentation](./security.html).\n\n\n    __Warning__: There are no restrictions on accessing the service, i.e., everyone can call the different endpoints.\n    However, authorization is required to access sensitive data. The authorization is described [here](security.html#auth).\n\n\n    Most endpoints require an authorization header to be sent along with any request.\n\n\n    ### Generating CLKs\n\n    See the [anonlink-client](https://github.com/data61/anonlink-client) project for details and a command line\n    tool to locally generate CLKs from entity data to upload.\n\n\n\n    ## Matching Protocols\n\n    The Entity Service supports three different **result types** with varying privacy properties which define the produced result,\n    and who may see the which part of the output.\n\n    See the documentation section on [output types](./concepts.html#result-types).\n\n    The options are:\n\n      * `\"permutations\"` - Creates random permutations and a mask.\n      * `\"similarity_scores\"` - Outputs a list of similarity scores of `[indexA, indexB, score]`, where `score`\n        represents the likelihood that `indexA = indexB`.\n      * `\"groups\"` - Outputs a list of groups of records, where each group represents one entity.\n\n    Only `\"groups\"` supports multi-party linkage. `\"permutations\"` and `\"similarity_scores\"` only support linkage\n    with two parties.\n\nservers:\n- url: https://anonlink.easd.data61.xyz/api/v1\n  description: default EASD cluster\n- url: http://localhost:8851/api/v1\n  description: Local deployment\n\npaths:\n  /status:\n    get:\n      operationId: entityservice.views.general.status_get\n      summary: Service status\n      tags:\n        - General\n      description: |\n        Suitable for using as load balancer health check. Checks that\n        redis cache and database are operational. Provides very high level system wide\n        metrics.\n      responses:\n        '200':\n          description: Service status.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    description: Will be \"ok\" if everything is working.\n                  project_count:\n                    description: Number of projects created on this server.\n                    type: integer\n                  rate:\n                    type: integer\n                    description: The most recent reported comparison rate of the system (comparisons per second).\n              example:\n                {\n                  \"status\": \"ok\",\n                  \"project_count\": 3118,\n                  \"rate\": 1793757\n                }\n        '500':\n          description: |\n            System is experiencing difficulties.\n            E.g. application can't connect to database.\n  /version:\n    get:\n      operationId: entityservice.views.general.version_get\n      summary: Version\n      tags:\n        - General\n      description: |\n        Return version numbers of libraries used.\n      responses:\n        '200':\n          description: Versions\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  anonlink:\n                    type: string\n                  entityservice:\n                    type: string\n                  python:\n                    type: string\n              example:\n                {\"anonlink\": \"0.6.3\", \"entityservice\": \"v1.7.2\", \"python\": \"3.6.4\"}\n  /projects:\n    get:\n      operationId: entityservice.views.project.projects_get\n      summary: List of record linkage projects.\n      tags:\n        - Project\n      description: |\n        List of all privacy preserving record linkage projects.\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectList'\n    post:\n      operationId: entityservice.views.project.projects_post\n      summary: Create and configure a new linkage project\n      tags:\n        - Project\n      description: |\n        Prepare resources and endpoints to accept CLK uploads from data providers.\n        Provides the caller with credentials that will be required for any further\n        interaction with this project.\n\n        ### Schema\n\n        Although these comprise the column names, the raw data will never be\n        sent to this entity service.\n\n        Each participant will be able to see the schema to verify it is\n        what they expect. Schema details should have been determined and agreed\n        on by each party before starting a mapping task. This is documented\n        in [schema](./concepts.html#schema).\n\n        ### Result Type\n\n        The result type specifies what information is available after the entity\n        resolving process has completed. All project **runs** will use this result type.\n\n        The parts of the computed linkage results that are accessable by the different tokens depends on the\n        `result_type`:\n\n        - `\"similarity_scores\"`, or `\"groups\"`\\\n        If the `result_type` is `\"similarity_scores\"` or `\"groups\"` then the results can be accessed with the\n        `result_token``token`, which is provided when initially creating the mapping.\n\n        - `\"permutations\"`\\\n        If the `result_type` is `permutations`, then the data providers can access their respective permutation with\n        their individual `receipt_token`, which they obtain when adding data to the mapping.\n        The mask can be accessed with the `result_token`.\n\n        Only `\"groups\"` supports multi-party linkage. If the result type is `\"similarity_scores\"` or\n        `\"permutations\"`, then the number of parties must be 2.\n\n      requestBody:\n        description: new project info\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewProject'\n      responses:\n        '201':\n          description: New project created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewProjectResponse'\n        '400':\n          $ref: \"#/components/responses/BadRequest\"\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\n  '/projects/{project_id}':\n    parameters:\n      - $ref: '#/components/parameters/token'\n      - $ref: '#/components/parameters/project_id'\n\n    get:\n      operationId: entityservice.views.project.project_get\n      summary: Description of a particular linkage project\n      tags:\n        - Project\n      description: |\n        Details provided at project creation.\n\n      responses:\n        '200':\n          description: Project description\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectDescription'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/Error'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\n    delete:\n      operationId: entityservice.views.project.project_delete\n      summary: Delete linkage project.\n      tags:\n        - Project\n      description: Remove the project and all associated data from the service.\n      responses:\n        '204':\n          description: Successfully deleted\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/Error'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\n  '/projects/{project_id}/authorize-external-upload':\n    get:\n      operationId: entityservice.views.objectstore.authorize_external_upload\n      summary: Retrieve temporary objest store credentials for uploading data\n      tags:\n        - Project\n      description: |\n        Returns a set of temporary security credentials that the client can use to upload data to the\n        object store.\n\n        A valid **upload token** is required to authorise this call. The returned *Temporary Object\n        Store Credentials* can be used with any S3 compatible client. For example by using `boto3` in\n        Python. The returned credentials are restricted to allow only uploading data to a particular path \n        in a particular bucket for a finite period (defaulting to 12 hours).\n\n        Note this feature may be disabled by the administrator, in this case the endpoint will return a\n        `500` server error.\n      parameters:\n        - $ref: '#/components/parameters/project_id'\n        - $ref: '#/components/parameters/token'\n      responses:\n        '201':\n          description: Temporary Object Store Credentials\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectStoreCredentials'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/Error'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\n  '/projects/{project_id}/clks':\n    post:\n      operationId: entityservice.views.project.project_clks_post\n      summary: Upload encoded data to a linkage project.\n      tags:\n        - Project\n      description: |\n        Called by each data provider with their encodings and optional blocking\n        information.\n\n        The caller must have both the `project_id` and a valid `upload_token` in order to contribute data,\n        both of these are generated when a project is created.\n        This endpoint can directly accept uploads up to several hundred MiB, and can pull encoding data from\n        an object store for larger uploads.\n\n        The data uploaded must be of one of the following formats:\n\n        - Encodings only: An array of base64 encoded [CLKs](./concepts.html#cryptographic-longterm-keys), one per\n          entity.\n        - CLKs with blocking information upload: An array of base64 encoded CLKs with corresponding blocking\n          information. One element in this array is an array with the first element being a base64 encoded CLK followed\n          by the block IDs the CLK corresponds to.\n\n        When the last party successfully uploads their data any existing project runs are queued\n        for execution.\n\n        The uploaded encodings must all have the same length in bytes. If the project's linkage schema\n        specifes an encoding size it will be checked and enforced before any runs are computed. Note a\n        minimum and maximum encoding size can be set at the server level at deployment time.\n        Currently anonlink requires this _encoding size_ to be a multiple of 8. A common value is `128 Bytes`.\n\n        Note in the default deployment the maximum request size is set to `~10 GB`, which __should__\n        translate to just over 20 million entities.\n\n        ### JSON Upload\n\n        This endpoint can be used with the Content-Type: application/json and uses the `CLKUpload`\n        structure of a JSON array of base64 encoded strings.\n\n        ### Object Store Upload\n\n        `encodings` and `blocks` can be pulled from an object store. `encodings` must be in the binary format\n        documented under the `/projects/{project_id}/binaryclks` endpoint. `blocks` must be a JSON file, comprising\n        a mapping of encoding identifiers to a list of block identifiers; both identifiers must be strings.\n\n        ### Binary Upload\n\n        An additional api endpoint (/projects/{project_id}/binaryclks) has been added for uploading CLKs as a binary\n        file. This is to allow for faster and more efficient data transfer.\n\n      parameters:\n        - $ref: '#/components/parameters/project_id'\n        - $ref: '#/components/parameters/token'\n      requestBody:\n        description: Data to upload\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/EncodingUpload'\n                - $ref: '#/components/schemas/CLKUpload'\n                - $ref: '#/components/schemas/CLKnBlockUpload'\n      responses:\n        '201':\n          description: Data Uploaded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UploadReceipt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/Error'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\n  '/projects/{project_id}/binaryclks':\n    post:\n      operationId: entityservice.views.project.project_binaryclks_post\n      summary: Upload binary encoded PII data to a linkage project.\n      tags:\n        - Project\n      description: |\n        An experimental api for directly uploading CLKs as a binary file. You may instead want to\n        upload via an object store.\n        Called by each of the data providers with their calculated `CLK` vectors.\n        The project must have been created, and the caller must have both the\n        `project_id` and a valid `upload_token` in order to contribute data.\n\n        When the last party successfully uploads their data any existing project runs are queued\n        for execution.\n\n        The uploaded encodings must all have the same length in bytes. If the project's linkage schema\n        specifes an encoding size it will be checked and enforced before any runs are computed. Note a\n        minimum and maximum encoding size can be set at the server level at deployment time.\n        Currently anonlink requires this _encoding size_ to be a multiple of 8. An example value is 128 Bytes.\n\n        Additional headers are required:\n\n          Content-Type: application/octet-stream\n          Hash-Count: \u003cnumber of CLKS\u003e\n          Hash-Size: \u003csize of one CLK in bytes\u003e\n\n        The file is a series of CLK data:\n\n            bit_packing_fmt = \"!\u003cHash-Size\u003es\"\n\n        Where:\n\n            \"!\" Use network byte order (big-endian).\n            \"\u003cHash-Size\u003es\" Store the 128 raw bytes of the bitarray. Default value is \"128s\".\n\n        https://docs.python.org/3/library/struct.html#format-strings\n\n      parameters:\n        - $ref: '#/components/parameters/project_id'\n        - $ref: '#/components/parameters/token'\n        - in: header\n          name: Hash-Count\n          required: true\n          schema:\n            type: integer\n        - in: header\n          name: Hash-Size\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: the clks in binary\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n\n      responses:\n        '201':\n          description: Data Uploaded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UploadReceipt'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/Error'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\n  '/projects/{project_id}/runs':\n    parameters:\n      - $ref: '#/components/parameters/project_id'\n      - $ref: '#/components/parameters/token'\n    get:\n      operationId: entityservice.views.run.list.get\n      summary: List runs\n      tags:\n        - Run\n      description: |\n        List of run summaries.\n        Requires project level authorization.\n\n      responses:\n        '200':\n          description: List of runs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunList'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/Error'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\n    post:\n      operationId: entityservice.views.run.list.post\n      summary: Create a new run\n      tags:\n        - Run\n      description: |\n        Queue up a computation to compare entities.\n      parameters:\n        - $ref: '#/components/parameters/project_id'\n        - $ref: '#/components/parameters/token'\n      requestBody:\n        description: shiny new run\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewRun'\n      responses:\n        '201':\n          description: Created new run\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunDescription'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/Error'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\n\n  '/projects/{project_id}/runs/{run_id}':\n    parameters:\n      - $ref: '#/components/parameters/project_id'\n      - $ref: '#/components/parameters/run_id'\n      - $ref: '#/components/parameters/token'\n    get:\n      operationId: entityservice.views.run.description.get\n      summary: Description of a particular run\n      tags:\n        - Run\n      description: |\n        This endpoint allows the caller to see what parameters a run was created with.\n        Also see the ``/status`` endpoint.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunDescription'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/Error'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\n    delete:\n      operationId: entityservice.views.run.description.delete\n      summary: Delete a run\n      tags:\n        - Run\n      description: Cancel the run and remove all associated data from the service.\n      responses:\n        '204':\n          description: Successfully deleted\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/Error'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\n  '/projects/{project_id}/runs/{run_id}/status':\n    get:\n      operationId: entityservice.views.run.status.get\n      summary: Run status\n      tags:\n        - Run\n      description: |\n        A status update on a particular record linkage run.\n\n        `'time_added'`, `'time_started'` and `'time_completed'` are represented in\n        [ISO 8601 format](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat).\n\n      parameters:\n        - $ref: '#/components/parameters/project_id'\n        - $ref: '#/components/parameters/run_id'\n        - $ref: '#/components/parameters/token'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RunStatus'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/Error'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\n  '/projects/{project_id}/runs/{run_id}/result':\n    get:\n      operationId: entityservice.views.run.results.get\n      summary: Run result\n      tags:\n        - Run\n      description: |\n\n        ## Response\n\n        The response schema depends on the mapping's `result_type`. OpenAPI doesn't\n        allow different schemas (in v2) so these are documented here:\n\n        Note if the result isn't ready, a `404` will be returned.\n\n\n        ### result_type = \"similarity_scores\"\n\n        Similarity scores can be retrieved as `JSON` (the default), or a direct link\n        to the binary file stored in an object store.\n\n        #### JSON\n\n        The list of the pairwise similarity scores where the score\n        is greater than the similarity threshold.\n        Data is returned as `json` object e.g.,\n\n            {\n                \"similarity_scores\":\n                    [\n                        [[0, 5], [1, 27], 1.0],\n                        [[1, 10], [0, 14], 1.0]\n                    ]\n            }\n\n\n        The element in the list is a list of three elements of the following format\n        `[[party_id_0, row_index_0], [party_id_1, row_index_1], score]`, where `[party_id_0, row_index_0]`\n        refers to the record at the index `row_index_0` from the dataset `party_id_0`, similarly for\n        `[party_id_1, row_index_1]`, and `score` is the similarity score representing the likelihood\n        that this pair or records is a match.\n\n        `ds_index_0`, `rec_index_0, `ds_index_1` and `rec_index_1` start from 0, and `party_id_0 != party_id_1` but\n        are not necessarilly ordered.\n\n        The value of `score` is between 0.0 and 1.0. The higher the score, the higher the similarity between\n        the compared CLKs.\n\n        #### Object Store Binary\n\n        If the request includes the header `RETURN-OBJECT-STORE-ADDRESS`, the response will be a small json\n        payload with temporary download credentials to pull the _binary_ similarity scores directly from the object\n        store. The json object has `credentials` and `object` keys:\n\n        ```json\n        {\n          \"credentials\": {\n            \"AccessKeyId\": \"\",\n            \"SecretAccessKey\": \"\",\n            \"SessionToken\": \"\",\n            \"Expiration\": \"\u003cISO 8601 datetime string\u003e\"\n          }\n          \"object\": {\n              \"endpoint\": \"\u003cconfig.DOWNLOAD_OBJECT_STORE_SERVER\u003e\",\n              \"secure\": \"\u003cconfig.DOWNLOAD_OBJECT_STORE_SECURE\u003e\",\n              \"bucket\": \"bucket_name\",\n              \"path\": \"path\"\n          }\n        }\n        ```\n\n        The file itself is serialized using `anonlink.serialization`, you can convert the stream into Python types\n        with:\n\n        ```python\n        mc = Minio(file_info['endpoint'], ...)\n        candidate_pair_stream = mc.get_object(file_info['bucket'], file_info['path'])\n        sims, (dset_is0, dset_is1), (rec_is0, rec_is1) = anonlink.serialization.load_candidate_pairs(candidate_pair_stream)\n        ```\n\n        ### result_type = \"permutations\"\n\n        The data providers will receive their respective permutation:\n\n\n            {\n                \"permutation\": [3,0,4,1,2],\n                \"rows\": 5\n            }\n\n\n        The creator of the mapping gets access to the mask:\n\n            {\n                \"mask\": [0,1,0,1,1]\n            }\n\n\n        In this example the first three elements in the original dataset are included,\n        but have been reordered to the second, fourth and fifth positions. The other elements\n        have been excluded with the mask. Note the permutation is specific to\n        the caller. Also any data after row 5 is to be discarded after the reordering has\n        been applied.\n        The mask is an array of 0/1 numbers.\n\n        ### result_type = \"groups\"\n\n        A list of groups of records, where each group represents one entity. A record is a\n        2-tuple of the dataset index and record index within that dataset.\n\n        For example:\n        {\"groups\": [[[0, 6], [1, 3], [3, 1]],\n                    [[0, 8], [2, 6]],\n                    [[0, 3], [3, 4]]]}\n\n        Here, we have three groups. The first group contains three records and the other two\n        groups each contain two records.\n\n        In the first group, [0, 6] is the 7th record of the 1st dataset (because we're using)\n        0-indexing. A particular record will appear in at most one group.\n\n        In this example, there are many records that are not matched to any other records (for\n        example [0, 5]). These trivial groups are omitted.\n\n\n      parameters:\n        - $ref: '#/components/parameters/project_id'\n        - $ref: '#/components/parameters/run_id'\n        - $ref: '#/components/parameters/token'\n      responses:\n        '200':\n          description: Successful response\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '403':\n          $ref: '#/components/responses/Unauthorized'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/Error'\n        '503':\n          $ref: '#/components/responses/RateLimited'\n\ncomponents:\n  parameters:\n    token:\n      in: header\n      description: |\n        Authorization token required for each endpoint. This may be an upload token or a result token,\n        both are provided by the `POST /projects` endpoint.\n      required: true\n      schema:\n        type: string\n      name: Authorization\n\n    project_id:\n      in: path\n      name: \"project_id\"\n      description: Resource identifier of the record linkage project\n      required: true\n      schema:\n        type: string\n    run_id:\n      in: path\n      name: \"run_id\"\n      description: Resource identifier of a particular run in a record linkage project\n      required: true\n      schema:\n        type: string\n\n  # Descriptions of common responses\n  responses:\n    Error:\n      description: An unspecified error occured\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Problem'\n    NotFound:\n      description: The specified resource was not found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Problem\"\n    BadRequest:\n      description: Client's request could not be processed.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Problem\"\n    Unauthorized:\n      description: Authentication token could be missing, or invalid.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Problem\"\n    RateLimited:\n      description: Client is rate limited. Try requesting less frequently.\n\n\n  schemas:\n\n    Problem:\n      type: object\n      properties:\n        type:\n          type: string\n          format: uri\n          description: |\n            An absolute URI that identifies the problem type.  When dereferenced,\n            it SHOULD provide human-readable documentation for the problem type\n            (e.g., using HTML).\n          default: 'about:blank'\n          example: 'http://anonlink.readthedocs.io/en/latest/problems.html#ratelimited'\n        title:\n          type: string\n          description: |\n            A short, summary of the problem type. Written in english and readable\n            for engineers; example: Service Unavailable\n        status:\n          type: integer\n          format: int32\n          description: |\n            The HTTP status code generated by the origin server for this occurrence\n            of the problem.\n          minimum: 100\n          maximum: 600\n          exclusiveMaximum: true\n          example: 503\n        detail:\n          type: string\n          description: |\n            A human readable explanation specific to this occurrence of the\n            problem.\n          example: Connection to database timed out\n        instance:\n          type: string\n          format: uri\n          description: |\n            An absolute URI that identifies the specific occurrence of the problem.\n            It may or may not yield further information if dereferenced.\n\n    ProjectList:\n      type: array\n      items:\n        type: object\n        description: Listing of projects.\n        properties:\n          project_id:\n            type: string\n          time_added:\n            type: string\n            description: ISO8601 formated datetime\n            format: 'date-time'\n\n    Schema:\n      type: object\n      description: |\n        The `schema` is described in the [clkhash](http://clkhash.readthedocs.io/en/latest/schema.html)\n        documentation.\n\n        A json-schema definition can be found [here](http://clkhash.readthedocs.io/en/latest/_static/schema.json#hashing-schema)\n\n    ResultType:\n      type: string\n      description: |\n        Defines the output type of the mapping. Multi-party linkage requires `\"groups\"` to be used.\n      enum:\n        - groups\n        - permutations\n        - similarity_scores\n\n    RunState:\n      type: string\n      description: What state is the run in\n      enum:\n        - created\n        - queued\n        - running\n        - completed\n        - error\n\n    RunProgress:\n      description: Details how far completed the run is.\n      type: object\n      properties:\n        absolute:\n          description: The progress of this stage in absolute terms\n          type: number\n          format: int\n          minimum: 0\n        description:\n          type: string\n          description: opportunity to give those numbers some context, what are we counting here?\n        relative:\n          type: number\n          format: double\n          minimum: 0.0\n          maximum: 1.0\n          description: |\n            Decimal between 0.0 and 1.0 indicating the relative progress of this stage.\n      required:\n        - absolute\n        - relative\n\n    NewProject:\n      description: Configuration for a new linkage project.\n      type: object\n      x-body-name: project\n      properties:\n        schema:\n          $ref: '#/components/schemas/Schema'\n        result_type:\n          $ref: '#/components/schemas/ResultType'\n        number_parties:\n          description: |\n            How many data providers will participate in this project. Default value is 2.\n            If there are more than two data providers, then `result_type` must be\n            `\"groups\"`.\n          type: integer\n          minimum: 2\n        name:\n          description: Any free text name for this project.\n          type: string\n        notes:\n          description: Any free text to store with this project.\n          type: string\n      required:\n        - schema\n        - result_type\n\n    ProjectDescription:\n      allOf:\n        - $ref: '#/components/schemas/NewProject'\n        - type: object\n          properties:\n            project_id:\n              type: string\n            parties_contributed:\n              type: number\n            error:\n              type: boolean\n\n    NewProjectResponse:\n      properties:\n        project_id:\n          type: string\n        update_tokens:\n          type: array\n          description: Array of unique tokens authorizing the upload of CLKs.\n          items:\n            type: string\n        result_token:\n          description: A token required to access mapping results.\n          type: string\n\n    NewRun:\n      description: Configuration for a new run doing the linkage calculation\n      x-body-name: run\n      type: object\n      properties:\n        threshold:\n          type: number\n          format: double\n          description: |\n            The similarity threshold (a number between 0 and 1) above which two entites will be considered a match.\n        notes:\n          type: string\n          description: |\n            Some optional text that we store along with the run.\n        name:\n          type: string\n          description: |\n            Some short human readable name that we store along with the run.\n\n      required:\n        - threshold\n\n    RunDescription:\n      allOf:\n        - $ref: '#/components/schemas/NewRun'\n        - type: object\n          properties:\n            run_id:\n              type: string\n\n    RunList:\n      type: array\n      items:\n        type: object\n        description: Listing of runs.\n        properties:\n          run_id:\n            type: string\n          time_added:\n            type: string\n            description: ISO8601 formated datetime\n            format: 'date-time'\n          state:\n            $ref: '#/components/schemas/RunState'\n\n    RunStatus:\n      type: object\n      discriminator:\n        propertyName: state\n      properties:\n        time_added:\n          type: string\n          format: 'date-time'\n        state:\n          type: string\n          description: What state is the run in\n          enum:\n            - created\n            - queued\n            - running\n            - completed\n            - error\n        stages:\n          type: number\n          format: int\n          minimum: 1\n          description: total number of stages for this run\n        current_stage:\n          $ref: '#/components/schemas/RunStage'\n      required:\n        - time_added\n        - state\n        - stages\n        - current_stage\n\n    completed:\n      allOf:\n        - $ref: '#/components/schemas/RunStatus'\n        - type: object\n          properties:\n            time_started:\n              type: string\n              format: 'date-time'\n            time_completed:\n              type: string\n              format: 'date-time'\n          required:\n            - time_started\n            - time_completed\n\n    error:\n      description: Describes the errored Run. Must contain a 'message', can provide more detail in 'detail'.\n      allOf:\n        - $ref: '#/components/schemas/RunStatus'\n        - type: object\n          properties:\n            message:\n              type: string\n              description: short error message\n            detail:\n              type: string\n              description: detailed error message\n          required:\n            - message\n\n    queued:\n      allOf:\n        - $ref: '#/components/schemas/RunStatus'\n        - type: object\n          properties:\n            time_started:\n              type: string\n              format: 'date-time'\n\n    started:\n      allOf:\n        - $ref: '#/components/schemas/queued'\n\n    running:\n      allOf:\n        - $ref: '#/components/schemas/RunStatus'\n        - type: object\n          properties:\n            time_started:\n              type: string\n              format: 'date-time'\n          required:\n            - time_started\n\n    RunStage:\n      description: describes the current stage of a run\n      type: object\n      properties:\n        number:\n          type: number\n          minimum: 1\n          description: the number of the current stage, first stage has number 1\n        description:\n          type: string\n          description: describes the current stage in human readable form\n        progress:\n          $ref: '#/components/schemas/RunProgress'\n      required:\n        - number\n\n    EncodingUpload:\n      description: Object that contains one data provider's encodings\n      type: object\n      required: [encodings]\n      properties:\n        encodings:\n          oneOf:\n            - $ref: '#/components/schemas/EncodingArray'\n            - $ref: '#/components/schemas/ExternalData'\n        blocks:\n          oneOf:\n            - $ref: '#/components/schemas/BlockMap'\n            - $ref: '#/components/schemas/ExternalData'\n    EncodingArray:\n      description: Array of encodings, base64 encoded.\n      type: array\n      items:\n          type: string\n          format: byte\n          description: Base64 encoded CLK data\n\n\n    BlockMap:\n      description: Blocking information for encodings. A mapping from encoding id (a string) to a list of block ids\n      type: object\n      additionalProperties:\n        type: array\n        items:\n            type: string\n            description: Block ID\n      example:\n        \"1\": [\"block1\", \"block2\"]\n        \"2\": []\n        \"3\": [\"block1\"]\n\n    ExternalData:\n      description: A file in an object store.\n      type: object\n      required: [file]\n      properties:\n        credentials:\n          type: object\n          required: [AccessKeyId, SecretAccessKey]\n          description: |\n            Optional credentials to pull the file from the object store.\n\n            Not required if using the Anonlink Entity Service's own object store.\n          properties:\n            AccessKeyId:\n              type: string\n            SecretAccessKey:\n              type: string\n            SessionToken:\n              type: string\n        file:\n          type: object\n          required: [bucket, path]\n          properties:\n            bucket:\n              type: string\n              example: anonlink-uploads\n            path:\n              type: string\n              description: The object name in the bucket.\n              example: project-foo/encodings.bin\n            endpoint:\n              type: string\n              description: |\n                Object store endpoint - usually a public endpoint for a MinIO as part of an Anonlink deployment e.g.\n                `minio.anonlink.easd.data61.xyz`, or a public (region specific) endpoint for AWS S3:\n                `s3.ap-southeast-2.amazonaws.com`.\n\n                If not given the Anonlink Entity Service's own object store will be assumed.\n              example: s3.ap-southeast-2.amazonaws.com\n            secure:\n              type: boolean\n              default: true\n              description: If this object store should be connected to only over a secure connection.\n\n    CLKUpload:\n      description: Object that contains this party's Bloom Filters\n      type: object\n      required: [clks]\n      properties:\n        clks:\n          $ref: '#/components/schemas/EncodingArray'\n\n    CLKnBlockUpload:\n      description: Object that contains this party's Bloom Filters including blocking information\n      type: object\n      required: [clknblocks]\n      properties:\n        clknblocks:\n          type: array\n          items:\n            type: array\n            items:\n              anyOf:\n                - type: string\n                  format: byte\n                  description: Base64 encoded CLK data\n                - type: string\n                - type: integer\n\n    UploadReceipt:\n      properties:\n        receipt_token:\n          type: string\n        message:\n          type: string\n\n    ObjectStoreCredentials:\n      description: Temporary credentials allowing client to upload a file to an object store.\n      type: object\n      properties:\n        upload:\n          description: |\n            Configuration of object store to upload file/s to. Specifies the server, bucket and\n            the approved path. The attached credentials are restricted to only allow uploads to\n            this path.\n          type: object\n          properties:\n            endpoint:\n              type: string\n              description: Hostname, and port of object store. E.g. minio.anonlink.example.com:9000\n            secure:\n              type: boolean\n              description: A secure connection to the object store is required.\n              default: true\n            bucket:\n              type: string\n              description: Target bucket\n            path:\n              type: string\n              description: Target path\n\n        credentials:\n          description: Object Store credentials (compatible with both AWS \u0026 MinIO)\n          type: object\n          properties:\n            AccessKeyId:\n              type: string\n            SecretAccessKey:\n              type: string\n            Expiration:\n              type: string\n            SessionToken:\n              type: string\n"
		}
	},
	"Error": "schemas: failed to write file oas_schemas_gen.go: 109:3: expected '}', found '[' (and 10 more errors)"
}