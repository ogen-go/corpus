{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/duo-labs/sharedsignals"
		},
		"file": {
			"name": "swagger.yaml",
			"path": "examples/transmitter/swagger_server/swagger/swagger.yaml",
			"content": "openapi: 3.0.3\ninfo:\n  title: Stream Management API for OpenID Shared Security Events\n  description: \"[OpenID Spec](https://openid.net/specs/openid-sse-framework-1_0.html#management)\\n\\\n    \\nHTTP API to be implemented by Event Transmitters. This API can be used by\\n\\\n    Event Receivers to query and update the Event Stream configuration and\\nstatus,\\\n    \\ to add and remove subjects, and to trigger verification.\\n\"\n  license:\n    name: MIT\n  version: 1.0.0\nservers:\n- url: /\ntags:\n- name: StreamManagement\n  description: \"[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#management)\\n\\\n    Stream Management endpoints provided by an Event Transmitter so that Event Transmitters\\\n    \\ may configure Event Streams.\"\n- name: Transmitter\n  description: \"Additional endpoints provided by an Event Transmitter. These are not\\\n    \\ needed during Stream Managment, but are used\\nby Event Receivers for event processing.\"\n- name: OutOfBand\n  description: \"Endpoints that are NOT a part of the [Open ID Spec](https://openid.net/specs/openid-sse-framework-1_0.html),\\\n    \\ but\\nthat exist for convenience within this demo.\"\npaths:\n  /.well-known/sse-configuration:\n    get:\n      tags:\n      - StreamManagement\n      summary: Transmitter Configuration Request (without path)\n      description: Return Transmitter Configuration information.\n      operationId: _well_known_sse_configuration_get\n      responses:\n        \"200\":\n          description: \"A set of Claims about the Transmitter's configuration,\\nincluding\\\n            \\ all necessary endpoints and public key location information\\n\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransmitterConfiguration'\n      x-openapi-router-controller: swagger_server.controllers.stream_management_controller\n  /.well-known/sse-configuration/{issuer}:\n    get:\n      tags:\n      - StreamManagement\n      summary: Transmitter Configuration Request (with path)\n      description: Return Transmitter Configuration information (with support for\n        specifying an issuer).\n      operationId: _well_known_sse_configuration_issuer_get\n      parameters:\n      - name: issuer\n        in: path\n        description: \"Using path components enables supporting multiple issuers per\\\n          \\ host.\\nThis is required in some multi-tenant hosting configurations.\\n\\\n          This use of .well-known is for supporting multiple issuers per host;\\nunlike\\\n          \\ its use in [RFC5785](https://openid.net/specs/openid-sse-framework-1_0.html#RFC5785),\\n\\\n          it does not provide general information about the host.\\n\"\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: tenant-a\n      responses:\n        \"200\":\n          description: \"A set of Claims about the Transmitter's configuration,\\nincluding\\\n            \\ all necessary endpoints and public key location information.\\n\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TransmitterConfiguration'\n      x-openapi-router-controller: swagger_server.controllers.stream_management_controller\n  /stream:\n    get:\n      tags:\n      - StreamManagement\n      summary: Request to retrieve the configuration of an event stream\n      description: \"[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#reading-a-streams-configuration)\\n\\\n        \\nAn Event Receiver gets the current configuration of a stream by making an\\\n        \\ HTTP GET request to the Configuration\\nEndpoint. On receiving a valid request\\\n        \\ the Event Transmitter responds with a 200 OK response containing a JSON\\n\\\n        representation of the streamâ€™s configuration in the body.\"\n      operationId: stream_get\n      responses:\n        \"200\":\n          description: The Event Stream's configuration\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamConfiguration'\n        \"401\":\n          description: Request body cannot be parsed or the request is otherwise invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: The Event Receiver is not allowed to read the stream configuration.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: There is no Event Stream configured for this Event Receiver.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - BearerAuth: []\n      x-openapi-router-controller: swagger_server.controllers.stream_management_controller\n    post:\n      tags:\n      - StreamManagement\n      summary: Request to update the configuration of an event stream\n      description: \"[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#updating-a-streams-configuration)\\n\\\n        \\nAn Event Receiver updates the current configuration of a stream by making\\\n        \\ an HTTP POST request to the Configuration\\nEndpoint. The POST body contains\\\n        \\ a JSON representation of the updated configuration. On receiving a valid\\\n        \\ request\\nthe Event Transmitter responds with a 200 OK response containing\\\n        \\ a JSON representation of the updated stream\\nconfiguration in the body.\\n\\\n        \\nThe full set of editable properties must be present in the POST body, not\\\n        \\ only the ones that are specifically\\nintended to be changed. Missing properties\\\n        \\ SHOULD be interpreted as requested to be deleted. Event Receivers should\\n\\\n        read the configuration first, modify the JSON representation, then make an\\\n        \\ update request.\\n\\nProperties that cannot be updated MAY be present, but\\\n        \\ they MUST match the expected value.\"\n      operationId: stream_post\n      requestBody:\n        description: Request parameters\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StreamConfiguration'\n        required: true\n      responses:\n        \"200\":\n          description: The Event Stream's updated configuration\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamConfiguration'\n        \"202\":\n          description: \"The update request has been accepted, but not processed.\\n\\\n            Receiver MAY try the same request later in order to get processing result.\\n\\\n            \\nIf a Receiver makes a request to update the stream to enable it for\\\n            \\ a specific Subject, and the Transmitter is\\nunable to decide whether\\\n            \\ or not to complete the request, then the Transmitter MUST respond with\\\n            \\ a 202 status\\ncode.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"400\":\n          description: Request body cannot be parsed or the request is otherwise invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: Authorization failed or is missing\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: The Event Receiver is not allowed to update the stream configuration.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: There is no Event Stream configured for this Event Receiver.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - BearerAuth: []\n      x-openapi-router-controller: swagger_server.controllers.stream_management_controller\n    delete:\n      tags:\n      - StreamManagement\n      summary: Request to remove the configuration of an event stream\n      description: |-\n        An Event Receiver removes the configuration of a stream by making an HTTP DELETE request to the Configuration\n        Endpoint. On receiving a request the Event Transmitter responds with a 200 OK response if the configuration was\n        successfully removed.\n      operationId: stream_delete\n      responses:\n        \"200\":\n          description: |-\n            On receiving a request the Event Transmitter responds with a 200 OK response if the configuration was\n            successfully removed.\n        \"401\":\n          description: Authorization failed or is missing\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: The Event Receiver is not allowed to update the stream configuration.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - BearerAuth: []\n      x-openapi-router-controller: swagger_server.controllers.stream_management_controller\n  /status:\n    get:\n      tags:\n      - StreamManagement\n      summary: Request to get the status of an Event Stream\n      description: \"[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#reading-a-streams-status)\\n\\\n        \\nAn Event Receiver checks the current status of an event stream by making\\\n        \\ an\\nHTTP GET request to the streamâ€™s Status Endpoint.\"\n      operationId: get_status\n      parameters:\n      - name: subject\n        in: query\n        description: |-\n          OPTIONAL. The subject for which the stream status is requested.\n          Content is a string-encoded json representation of a Subject\n          (see Subject schema)\n        required: false\n        style: form\n        explode: true\n        schema:\n          type: string\n          example: \"{\\\"user\\\":{\\\"format\\\":\\\"email\\\",\\\"email\\\":\\\"reginold@popular-app.com\\\"\\\n            }}\"\n      responses:\n        \"200\":\n          description: |-\n            On receiving a valid request the Event Transmitter responds with a 200\n            OK response containing a JSON object with an attribute status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamStatus'\n        \"401\":\n          description: Authorization failed or is missing\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: The Event Receiver is not allowed to read this stream's status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"There is no Event Stream configured for this Event Receiver,\\n\\\n            or the Subject specified is invalid or\\nthe Receiver is not authorized\\\n            \\ to get status for the specified Subject.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - BearerAuth: []\n      x-openapi-router-controller: swagger_server.controllers.stream_management_controller\n    post:\n      tags:\n      - StreamManagement\n      summary: Request to update an Event Stream's status\n      description: \"[Spec](https://openid.net/specs/openid-sse-framework-1_0-ID1.html#updating-a-streams-status)\\n\\\n        \\nAn Event Receiver updates the current status of a stream by making an HTTP\\n\\\n        POST request to the Status Endpoint.\"\n      operationId: update_status\n      requestBody:\n        description: Request parameters\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateStreamStatus'\n        required: true\n      responses:\n        \"200\":\n          description: Event Stream status successfully updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdateStreamStatus'\n        \"202\":\n          description: \"The update request has been accepted, but not processed.\\n\\\n            Receiver MAY try the same request later in order to get processing result.\"\n        \"400\":\n          description: Request body cannot be parsed or the request is otherwise invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: Authorization failed or is missing\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: The Event Receiver is not allowed to update the stream status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"There is no Event Stream configured for this Event Receiver,\\n\\\n            or an invalid Subject is specified.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - BearerAuth: []\n      x-openapi-router-controller: swagger_server.controllers.stream_management_controller\n  /add-subject:\n    post:\n      tags:\n      - StreamManagement\n      summary: Request to add a subject to an Event Stream\n      description: \"[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#adding-a-subject-to-a-stream)\\n\\\n        \\nEvent Receivers can send requests to an Event Transmitter's Add Subject\\\n        \\ endpoint to add a subject to an Event Stream.\"\n      operationId: add_subject\n      requestBody:\n        description: Request parameters\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddSubjectParameters'\n        required: true\n      responses:\n        \"200\":\n          description: \"On a successful response, the Event Transmitter responds with\\\n            \\ an empty 200 OK response.\\nThe Event Transmitter MAY choose to silently\\\n            \\ ignore the request, for example if the subject has previously\\nindicated\\\n            \\ to the transmitter that they do not want events to be transmitted to\\\n            \\ the Event Receiver.\\nIn this case, the transmitter MAY return an empty\\\n            \\ 200 OK response or an appropriate error code.\\nSee [Security Considerations](https://openid.net/specs/openid-sse-framework-1_0.html#management-sec).\"\n        \"400\":\n          description: Request body cannot be parsed or the request is otherwise invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: Authorization failed or is missing\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"The Event Receiver is not allowed to add this particular subject,\\\n            \\ or not allowed to add in general.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"The subject is not recognized by the Event Transmitter,\\n\\\n            the Event Transmitter may chose to stay silent in this case and respond\\\n            \\ with 200.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"429\":\n          description: Event Receiver is sending too many requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - BearerAuth: []\n      x-openapi-router-controller: swagger_server.controllers.stream_management_controller\n  /remove-subject:\n    post:\n      tags:\n      - StreamManagement\n      summary: Request to add a subject to an Event Stream\n      description: \"[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#removing-a-subject)\\n\\\n        \\nEvent Receivers can send requests to an Event Transmitter's Remove Subject\\\n        \\ endpoint to remove a subject from an Event Stream.\"\n      operationId: remove_subject\n      requestBody:\n        description: Request parameters\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RemoveSubjectParameters'\n        required: true\n      responses:\n        \"204\":\n          description: \"On a successful response, the Event Transmitter responds with\\\n            \\ a 204 No Content response.\"\n        \"400\":\n          description: Request body cannot be parsed or the request is otherwise invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: Authorization failed or is missing\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"403\":\n          description: \"The Event Receiver is not allowed to remove this particular\\\n            \\ subject, or not allowed to remove in general.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"404\":\n          description: \"The subject is not recognized by the Event Transmitter,\\n\\\n            the Event Transmitter may chose to stay silent in this case and respond\\\n            \\ with 204.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"429\":\n          description: Event Receiver is sending too many requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - BearerAuth: []\n      x-openapi-router-controller: swagger_server.controllers.stream_management_controller\n  /verification:\n    post:\n      tags:\n      - StreamManagement\n      summary: Request that a verification event be sent over an Event Stream\n      operationId: verification_request\n      requestBody:\n        description: Optional request parameters\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VerificationParameters'\n        required: false\n      responses:\n        \"204\":\n          description: \"Request for verification event was successfully received.\\\n            \\ A\\nsuccessful response from a POST to the Verification Endpoint does\\n\\\n            not indicate that the verification event was transmitted\\nsuccessfully,\\\n            \\ only that the Event Transmitter has transmitted the\\nevent or will do\\\n            \\ so at some point in the future.\\n\"\n        \"400\":\n          description: Request body cannot be parsed or the request is otherwise invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"401\":\n          description: Authorization failed or is missing\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"429\":\n          description: Event Receiver is sending too many requests\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      security:\n      - BearerAuth: []\n      x-openapi-router-controller: swagger_server.controllers.stream_management_controller\n  /jwks.json:\n    get:\n      tags:\n      - Transmitter\n      summary: The JSON Web Key Set of the Event Transmitter.\n      description: \"[Spec](https://datatracker.ietf.org/doc/html/rfc7517)\"\n      operationId: jwks_json\n      responses:\n        \"200\":\n          description: \"[Spec](https://www.rfc-editor.org/rfc/rfc8936.html#name-polling-http-response)\"\n          content:\n            application/json:\n              schema:\n                type: object\n                example:\n                  keys:\n                  - alg: ES256\n                    crv: P-256\n                    kid: transmitter-ES256-001\n                    kty: EC\n                    x: Js-Hzhls17UL1JI2EL0AB6Ta2B282me2niBGc0s1-Lo\n                    \"y\": PCsSWYCixwZgEyYKbGDFpzaooP6_Z-4CEfV62cbNBQw\n                x-content-type: application/json\n      x-openapi-router-controller: swagger_server.controllers.transmitter_controller\n  /poll:\n    post:\n      tags:\n      - Transmitter\n      summary: Request for queued events to be returned.\n      description: \"[Spec](https://www.rfc-editor.org/rfc/rfc8936.html#name-polling-http-request)\"\n      operationId: poll_events\n      requestBody:\n        description: Optional request parameters\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PollParameters'\n        required: false\n      responses:\n        \"200\":\n          description: \"[Spec](https://www.rfc-editor.org/rfc/rfc8936.html#name-polling-http-response)\"\n          content:\n            application/json:\n              schema:\n                type: object\n                x-content-type: application/json\n      security:\n      - BearerAuth: []\n      x-openapi-router-controller: swagger_server.controllers.transmitter_controller\n  /register:\n    post:\n      tags:\n      - OutOfBand\n      summary: Request the transmitter to setup a stream for a given receiver.\n      description: \"This endpoint is not part of the spec, but rather a quick-and-dirty\\\n        \\ way to allow a receiver to pass along its\\naudience claim in exchange for\\\n        \\ a bearer token.\"\n      operationId: register\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterParameters'\n        required: true\n      responses:\n        \"200\":\n          description: \"On successful creation of a stream, returns a bearer token\\\n            \\ that will be used for subsequent requests.\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RegisterResponse'\n      x-openapi-router-controller: swagger_server.controllers.out_of_band_controller\ncomponents:\n  schemas:\n    StreamStatus:\n      required:\n      - status\n      type: object\n      properties:\n        status:\n          type: string\n          description: \"REQUIRED. The status of the stream. Values can be one of:\\n\\\n            \\nenabled:\\n  The Transmitter MUST transmit events over the stream,\\n\\\n            \\  according to the streamâ€™s configured delivery method.\\n\\npaused:\\n\\\n            \\  The Transmitter MUST NOT transmit events over the stream.\\n  The transmitter\\\n            \\ will hold any events it would have transmitted while paused,\\n  and\\\n            \\ SHOULD transmit them when the streamâ€™s status becomes enabled.\\n  If\\\n            \\ a Transmitter holds successive events that affect the same Subject Principal,\\n\\\n            \\  then the Transmitter MUST make sure that those events are transmitted\\\n            \\ in\\n  the order of time that they were generated OR the Transmitter\\\n            \\ MUST send\\n  only the last events that do not require the previous events\\\n            \\ affecting\\n  the same Subject Principal to be processed by the Receiver,\\n\\\n            \\  because the previous events are either cancelled by the later events\\\n            \\ or\\n  the previous events are outdated.\\n\\ndisabled:\\n  The Transmitter\\\n            \\ MUST NOT transmit events over the stream,\\n  and will not hold any events\\\n            \\ for later transmission.\"\n          example: disabled\n          enum:\n          - enabled\n          - paused\n          - disabled\n        subject:\n          description: OPTIONAL. The Subject to which the status applies.\n          example:\n            format: email\n            email: reginold@popular-app.com\n          allOf:\n          - $ref: '#/components/schemas/Subject'\n      example:\n        subject:\n          format: email\n          email: reginold@popular-app.com\n        status: disabled\n    TransmitterConfiguration:\n      title: Transmitter Configuration Response\n      required:\n      - issuer\n      - jwks_uri\n      type: object\n      properties:\n        issuer:\n          type: string\n          description: |\n            URL using the https scheme with no query or fragment component that the Transmitter asserts as its\n            Issuer Identifier.\n            This MUST be identical to the iss claim value in Security Event Tokens issued from this Transmitter.\n          format: uri\n          example: https://most-secure.com\n        jwks_uri:\n          type: string\n          description: \"URL of the Transmitter's [JSON Web Key Set](https://openid.net/specs/openid-sse-framework-1_0.html#RFC7517)\\n\\\n            document. This contains the signing key(s) the Receiver uses to validate\\\n            \\ signatures from the Transmitter.\\n\"\n          format: uri\n          example: https://transmitter.most-secure.com/jwks.json\n        delivery_methods_supported:\n          type: array\n          description: List of supported delivery method URIs. Recommended.\n          example:\n          - https://schemas.openid.net/secevent/risc/delivery-method/push\n          - https://schemas.openid.net/secevent/risc/delivery-method/poll\n          items:\n            type: string\n            format: uri\n        configuration_endpoint:\n          type: string\n          description: The URL of the Configuration Endpoint.\n          format: uri\n          example: https://transmitter.most-secure.com/stream\n        status_endpoint:\n          type: string\n          description: The URL of the Status Endpoint.\n          format: uri\n          example: https://transmitter.most-secure.com/status\n        add_subject_endpoint:\n          type: string\n          description: The URL of the Add Subject Endpoint.\n          format: uri\n          example: https://transmitter.most-secure.com/add-subject\n        remove_subject_endpoint:\n          type: string\n          description: The URL of the Remove Subject Endpoint.\n          format: uri\n          example: https://transmitter.most-secure.com/remove-subject\n        verification_endpoint:\n          type: string\n          description: The URL of the Verification Endpoint.\n          format: uri\n          example: https://transmitter.most-secure.com/verification\n        critical_subject_members:\n          type: array\n          description: \"List of member names in a Complex Subject which, if present\\\n            \\ in a Subject Member in an event,\\nMUST be interpreted by a Receiver.\\n\"\n          example:\n          - tenant\n          - user\n          items:\n            type: string\n      description: \"Transmitters have metadata describing their configuration.\\n[OpenID\\\n        \\ Spec](https://openid.net/specs/openid-sse-framework-1_0.html#discovery-meta)\\n\"\n      example:\n        delivery_methods_supported:\n        - https://schemas.openid.net/secevent/risc/delivery-method/push\n        - https://schemas.openid.net/secevent/risc/delivery-method/poll\n        configuration_endpoint: https://transmitter.most-secure.com/stream\n        critical_subject_members:\n        - tenant\n        - user\n        add_subject_endpoint: https://transmitter.most-secure.com/add-subject\n        remove_subject_endpoint: https://transmitter.most-secure.com/remove-subject\n        status_endpoint: https://transmitter.most-secure.com/status\n        jwks_uri: https://transmitter.most-secure.com/jwks.json\n        issuer: https://most-secure.com\n        verification_endpoint: https://transmitter.most-secure.com/verification\n    StreamConfiguration:\n      title: Event Stream Configuration\n      required:\n      - delivery\n      - events_requested\n      type: object\n      properties:\n        iss:\n          type: string\n          description: |-\n            Read-Only.\n            A URL using the https scheme with no query or fragment component that the Transmitter asserts as its Issuer\n            Identifier. This MUST be identical to the iss Claim value in Security Event Tokens issued from this Transmitter.\n          format: uri\n          example: https://most-secure.com\n        aud:\n          description: \"Read-Only.\\nA string or an array of strings containing an\\\n            \\ audience claim as defined in\\n[JSON Web Token (JWT)](https://openid.net/specs/openid-sse-framework-1_0.html#RFC7519)\\\n            \\ that identifies\\nthe Event Receiver(s) for the Event Stream. This property\\\n            \\ cannot be updated. If multiple Receivers are specified\\nthen the Transmitter\\\n            \\ SHOULD know that these Receivers are the same entity.\"\n          example: https://popular-app.com\n          oneOf:\n          - type: string\n            format: uri\n          - type: array\n            items:\n              type: string\n              format: uri\n        events_supported:\n          type: array\n          description: \"Read-Only.\\nAn array of URIs identifying the set of events\\\n            \\ supported by the Transmitter for this Receiver.\\nIf omitted, Event Transmitters\\\n            \\ SHOULD make this set available to the Event Receiver via some other\\\n            \\ means\\n(e.g. publishing it in online documentation).\"\n          example:\n          - https://schemas.openid.net/secevent/caep/event-type/session-revoked\n          - https://schemas.openid.net/secevent/risc/event-type/credential-compromise\n          items:\n            type: string\n            format: uri\n        events_requested:\n          type: array\n          description: |-\n            Read-Write.\n            An array of URIs identifying the set of events that the Receiver requested.\n            A Receiver SHOULD request only the events that it understands and it can act on.\n            This is configurable by the Receiver.\n          example:\n          - https://schemas.openid.net/secevent/risc/event-type/credential-compromise\n          items:\n            type: string\n            format: uri\n        events_delivered:\n          type: array\n          description: |-\n            Read-Only.\n            An array of URIs which is the intersection of events_supported and events_requested.\n            These events MAY be delivered over the Event Stream.\n          example:\n          - https://schemas.openid.net/secevent/risc/event-type/credential-compromise\n          items:\n            type: string\n            format: uri\n        delivery:\n          description: \"Read-Write.\\nA JSON object containing a set of name/value\\\n            \\ pairs specifying configuration parameters for the SET delivery\\nmethod.\\\n            \\ The actual delivery method is identified by the special key method with\\\n            \\ the value being a URI as defined\\nin [Section 11.2.1](https://openid.net/specs/openid-sse-framework-1_0.html#delivery-meta).\"\n          example:\n            method: https://schemas.openid.net/secevent/risc/delivery-method/poll\n            endpoint_url: null\n          discriminator:\n            propertyName: method\n          oneOf:\n          - $ref: '#/components/schemas/PushDeliveryMethod'\n          - $ref: '#/components/schemas/PollDeliveryMethod'\n        min_verification_interval:\n          type: integer\n          description: \"Read-Only.\\nAn integer indicating the minimum amount of time\\\n            \\ in seconds that must pass in between verification requests.\\nIf an Event\\\n            \\ Receiver submits verification requests more frequently than this, the\\\n            \\ Event Transmitter MAY respond\\nwith a 429 status code. An Event Transmitter\\\n            \\ SHOULD NOT respond with a 429 status code if an Event Receiver is not\\n\\\n            exceeding this frequency.\"\n        format:\n          type: string\n          description: |-\n            Read-Write.\n            The Subject Identifier Format that the Receiver wants for the events.\n            If not set then the Transmitter might decide to use a type that discloses more information than necessary.\n      description: \"JSON Object describing and Event Stream's configuration\\n[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#stream-config)\\\"\\\n        \\n\"\n      example:\n        aud: https://popular-app.com\n        delivery:\n          method: https://schemas.openid.net/secevent/risc/delivery-method/poll\n          endpoint_url: null\n        events_supported:\n        - https://schemas.openid.net/secevent/caep/event-type/session-revoked\n        - https://schemas.openid.net/secevent/risc/event-type/credential-compromise\n        iss: https://most-secure.com\n        format: format\n        events_delivered:\n        - https://schemas.openid.net/secevent/risc/event-type/credential-compromise\n        events_requested:\n        - https://schemas.openid.net/secevent/risc/event-type/credential-compromise\n        min_verification_interval: 0\n    UpdateStreamStatus:\n      type: object\n      properties:\n        reason:\n          type: string\n          description: OPTIONAL. A short text description that explains the reason\n            for the change.\n          example: Disabled by administrator action.\n      example:\n        reason: Disabled by administrator action.\n      allOf:\n      - $ref: '#/components/schemas/StreamStatus'\n    PollDeliveryMethod:\n      required:\n      - method\n      type: object\n      properties:\n        method:\n          type: string\n          default: https://schemas.openid.net/secevent/risc/delivery-method/poll\n          enum:\n          - https://schemas.openid.net/secevent/risc/delivery-method/poll\n        endpoint_url:\n          type: string\n          description: The URL where events can be retrieved from. This is specified\n            by the Transmitter.\n          format: uri\n          nullable: true\n      example:\n        method: https://schemas.openid.net/secevent/risc/delivery-method/poll\n        endpoint_url: https://transmitter.most-secure.com/poll\n    PushDeliveryMethod:\n      required:\n      - endpoint_url\n      - method\n      type: object\n      properties:\n        method:\n          type: string\n          default: https://schemas.openid.net/secevent/risc/delivery-method/push\n          enum:\n          - https://schemas.openid.net/secevent/risc/delivery-method/push\n        endpoint_url:\n          type: string\n          description: The URL where events are pushed through HTTP POST. This is\n            set by the Receiver.\n          format: uri\n        authorization_header:\n          type: string\n          description: \"The HTTP Authorization header that the Transmitter MUST set\\\n            \\ with each event delivery,\\nif the configuration is present. The value\\\n            \\ is optional and it is set by the Receiver.\"\n      example:\n        method: https://schemas.openid.net/secevent/risc/delivery-method/push\n        endpoint_url: https://receiver.example.com/push\n    RegisterResponse:\n      required:\n      - token\n      type: object\n      properties:\n        token:\n          type: string\n          description: The Bearer Token that the receiver will need to use for all\n            Stream Management API calls that require authorization.\n      example:\n        token: 49e5e7785e4e4f688aa49e2585970370\n    AddSubjectParameters:\n      required:\n      - subject\n      type: object\n      properties:\n        subject:\n          allOf:\n          - $ref: '#/components/schemas/Subject'\n          - description: REQUIRED. A Subject claim identifying the subject to be added.\n        verified:\n          type: boolean\n          description: \"OPTIONAL. A boolean value; when true, it indicates that the\\\n            \\ Event Receiver has verified the Subject claim.\\nWhen false, it indicates\\\n            \\ that the Event Receiver has not verified the Subject claim.\\nIf omitted,\\\n            \\ Event Transmitters SHOULD assume that the subject has been verified.\"\n      example:\n        subject:\n          format: email\n          email: reginold@popular-app.com\n        verified: true\n    PollParameters:\n      type: object\n      properties:\n        maxEvents:\n          type: integer\n          description: \"An OPTIONAL integer value indicating the maximum number of\\\n            \\ unacknowledged SETs to be returned.\\nThe SET Transmitter SHOULD NOT\\\n            \\ send more SETs than the specified maximum.\\nIf more than the maximum\\\n            \\ number of SETs are available, the SET Transmitter determines which to\\\n            \\ return first;\\nthe oldest SETs available MAY be returned first, or another\\\n            \\ selection algorithm MAY be used,\\nsuch as prioritizing SETs in some\\\n            \\ manner that makes sense for the use case.\\nA value of 0 MAY be used\\\n            \\ by SET Recipients that would like to perform an acknowledge-only request.\\n\\\n            This enables the Recipient to use separate HTTP requests for acknowledgement\\\n            \\ and reception of SETs.\\nIf this parameter is omitted, no limit is placed\\\n            \\ on the number of SETs to be returned.\"\n        returnImmediately:\n          type: boolean\n          description: \"An OPTIONAL JSON boolean value that indicates the SET Transmitter\\\n            \\ SHOULD return an immediate response even if no\\nresults are available\\\n            \\ (short polling). The default value is false, which indicates the request\\\n            \\ is to be treated\\nas an HTTP long poll, per [Section 2](https://www.rfc-editor.org/rfc/rfc6202#section-2)\\\n            \\ of\\n[RFC6202](https://www.rfc-editor.org/rfc/rfc8936.html#RFC6202).\\n\\\n            The timeout for the request is part of the configuration between the participants,\\\n            \\ which is out of scope of this specification.\"\n        acks:\n          type: array\n          description: List of event JTIs that the receiver is acknowledging. The\n            Transmitter can stop keeping track of these.\n          items:\n            type: string\n    RegisterParameters:\n      type: object\n      properties:\n        audience:\n          type: string\n          description: The audience claim to be used for all events on this stream.\n          format: uri\n          example: https://popular-app.com\n    RemoveSubjectParameters:\n      required:\n      - subject\n      type: object\n      properties:\n        subject:\n          allOf:\n          - $ref: '#/components/schemas/Subject'\n          - description: REQUIRED. A Subject claim identifying the subject to be removed.\n      example:\n        subject:\n          format: email\n          email: reginold@popular-app.com\n    VerificationParameters:\n      type: object\n      properties:\n        state:\n          type: string\n          description: |\n            OPTIONAL. An arbitrary string that the Event Transmitter\n            MUST echo back to the Event Receiver in the verification\n            eventâ€™s payload. Event Receivers MAY use the value of this\n            parameter to correlate a verification event with a\n            verification request. If the verification event is\n            initiated by the transmitter then this parameter MUST not\n            be set.\n    Account:\n      title: Account\n      required:\n      - format\n      - uri\n      type: object\n      properties:\n        format:\n          title: Format\n          type: string\n          default: account\n          enum:\n          - account\n        uri:\n          title: Uri\n          pattern: \"^acct:[^\\\\s]+$\"\n          type: string\n          example: acct:reginold@popular-app.com\n      description: \"[Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.1)\\n\\\n        \\nThe Account Identifier Format identifies a subject using an account\\nat\\\n        \\ a service provider, identified with an \\\"acct\\\" URI as defined in\\n[RFC7565](https://datatracker.ietf.org/doc/html/rfc7565).\\n\\\n        Subject Identifiers in this format MUST contain a \\\"uri\\\"\\nmember whose value\\\n        \\ is the \\\"acct\\\" URI for the subject.  The \\\"uri\\\"\\nmember is REQUIRED and\\\n        \\ MUST NOT be null or empty.  The Account\\nIdentifier Format is identified\\\n        \\ by the name \\\"account\\\".\"\n    DID:\n      title: DID\n      required:\n      - format\n      - url\n      type: object\n      properties:\n        format:\n          title: Format\n          type: string\n          default: did\n          enum:\n          - did\n        url:\n          title: Url\n          pattern: \"^did:[^\\\\s]+$\"\n          type: string\n          example: did:example:123456/did/url/path?versionId=1\n      description: \"[Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.3)\\n\\\n        \\nThe Decentralized Identifier Format identifies a subject using a\\nDecentralized\\\n        \\ Identifier (DID) URL as defined in [DID](https://www.w3.org/TR/did-core/).\\n\\\n        Subject Identifiers in this format MUST contain a \\\"url\\\" member whose value\\\n        \\ is\\na DID URL for the DID Subject being identified.  The value of the\\n\\\"\\\n        url\\\" member MUST be a valid DID URL and MAY be a bare DID.  The\\n\\\"url\\\"\\\n        \\ member is REQUIRED and MUST NOT be null or empty.  The\\nDecentralized Identifier\\\n        \\ Format is identified by the name \\\"did\\\".\"\n    Email:\n      title: Email\n      required:\n      - email\n      - format\n      type: object\n      properties:\n        format:\n          title: Format\n          type: string\n          default: email\n          enum:\n          - email\n        email:\n          title: Email\n          pattern: \"(?:[a-z0-9!#$%\u0026'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%\u0026'*+/=?^_`{|}~-]+)*|\\\"\\\n            (?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21\\\\x23-\\\\x5b\\\\x5d-\\\\x7f]|\\\\\\\\\\\n            [\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])*\\\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\\\\n            .)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\\\\\\n            .){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\\\\\\n            x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21-\\\\x5a\\\\x53-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\\\\n            x0b\\\\x0c\\\\x0e-\\\\x7f])+)\\\\])\"\n          type: string\n          example: reginold@popular-app.com\n      description: \"[Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.4)\\n\\\n        \\nThe Email Identifier Format identifies a subject using an email\\naddress.\\\n        \\  Subject Identifiers in this format MUST contain an \\\"email\\\"\\nmember whose\\\n        \\ value is a string containing the email address of the\\nsubject, formatted\\\n        \\ as an \\\"addr-spec\\\" as defined in Section 3.4.1 of\\n[RFC5322](https://datatracker.ietf.org/doc/html/rfc5322).\\n\\\n        The \\\"email\\\" member is REQUIRED and MUST NOT be null or\\nempty.  The value\\\n        \\ of the \\\"email\\\" member SHOULD identify a mailbox to\\nwhich email may be\\\n        \\ delivered, in accordance with [RFC5321](https://datatracker.ietf.org/doc/html/rfc5321).\\n\\\n        The Email Identifier Format is identified by the name \\\"email\\\".\"\n    IssSub:\n      title: IssSub\n      required:\n      - format\n      - iss\n      - sub\n      type: object\n      properties:\n        format:\n          title: Format\n          type: string\n          default: iss_sub\n          enum:\n          - iss_sub\n        iss:\n          title: iss\n          type: string\n          example: https://most-secure.com\n        sub:\n          title: sub\n          type: string\n          example: \"145234573\"\n      description: \"[Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.5)\\n\\\n        \\nThe Issuer and Subject Identifier Format identifies a subject using a\\n\\\n        pair of \\\"iss\\\" and \\\"sub\\\" members, analagous to how subjects are\\nidentified\\\n        \\ using the \\\"iss\\\" and \\\"sub\\\" claims in OpenID Connect\\n[OpenID.Core](http://openid.net/specs/openid-connect-core-1_0.html)\\\n        \\ ID Tokens.\\nThese members MUST follow the formats of the \\\"iss\\\" member\\\n        \\ and \\\"sub\\\" member\\ndefined by [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519),\\\n        \\ respectively.\\nBoth the \\\"iss\\\" member and the \\\"sub\\\" member are REQUIRED\\\n        \\ and MUST NOT\\nbe null or empty.  The Issuer and Subject Identifier Format\\\n        \\ is\\nidentified by the name \\\"iss_sub\\\".\"\n    JwtID:\n      title: JwtID\n      required:\n      - format\n      - iss\n      - jti\n      type: object\n      properties:\n        format:\n          title: Format\n          type: string\n          default: jwt_id\n          enum:\n          - jwt_id\n        iss:\n          title: iss\n          type: string\n          description: \"The \\\"iss\\\" (issuer) claim of the JWT being identified, defined\\\n            \\ in\\n[RFC7519](https://datatracker.ietf.org/doc/html/rfc7519)\"\n          example: https://most-secure.com\n        jti:\n          title: jti\n          type: string\n          description: \"The \\\"jti\\\" (JWT token ID) claim of the JWT being identified,\\\n            \\ defined in\\n[RFC7519](https://datatracker.ietf.org/doc/html/rfc7519)\"\n          example: B70BA622-9515-4353-A866-823539EECBC8\n      description: \"[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#rfc.section.3.4.1)\\n\\\n        \\nThe \\\"JWT ID\\\" Subject Identifier Format specifies a JSON Web Token (JWT)\\n\\\n        identifier, defined in [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519).\"\n    Opaque:\n      title: Opaque\n      required:\n      - format\n      - id\n      type: object\n      properties:\n        format:\n          title: Format\n          type: string\n          default: opaque\n          enum:\n          - opaque\n        id:\n          title: Id\n          type: string\n          example: \"11112222333344445555\"\n      description: \"[Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.6)\\n\\\n        \\nThe Opaque Identifier Format describes a subject that is identified\\nwith\\\n        \\ a string with no semantics asserted beyond its usage as an\\nidentifier for\\\n        \\ the subject, such as a UUID or hash used as a\\nsurrogate identifier for\\\n        \\ a record in a database.  Subject Identifiers\\nin this format MUST contain\\\n        \\ an \\\"id\\\" member whose value is a JSON\\nstring containing the opaque string\\\n        \\ identifier for the subject.  The\\n\\\"id\\\" member is REQUIRED and MUST NOT\\\n        \\ be null or empty.  The Opaque\\nIdentifier Format is identified by the name\\\n        \\ \\\"opaque\\\".\"\n    PhoneNumber:\n      title: PhoneNumber\n      required:\n      - format\n      - phone_number\n      type: object\n      properties:\n        format:\n          title: Format\n          type: string\n          default: phone_number\n          enum:\n          - phone_number\n        phone_number:\n          title: Phone Number\n          type: string\n          example: +12065550100\n      description: \"[Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.7)\\n\\\n        \\nThe Phone Number Identifier Format identifies a subject using a\\ntelephone\\\n        \\ number.  Subject Identifiers in this format MUST contain a\\n\\\"phone_number\\\"\\\n        \\ member whose value is a string containing the full\\ntelephone number of\\\n        \\ the subject, including international dialing\\nprefix, formatted according\\\n        \\ to E.164\\n[E164](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#ref-E164).\\n\\\n        The \\\"phone_number\\\" member is REQUIRED and MUST NOT be null or empty.\\nThe\\\n        \\ Phone Number Identifier Format is identified by the name \\\"phone_number\\\"\\\n        .\"\n    SamlAssertionID:\n      title: SamlAssertionID\n      required:\n      - assertion_id\n      - format\n      - issuer\n      type: object\n      properties:\n        format:\n          title: Format\n          type: string\n          default: saml_assertion_id\n          enum:\n          - saml_assertion_id\n        issuer:\n          title: Issuer\n          type: string\n          description: \"The \\\"Issuer\\\" value of the SAML assertion being identified,\\\n            \\ defined in\\n[OASIS.saml-core-2.0-os](https://openid.net/specs/openid-sse-framework-1_0.html#OASIS.saml-core-2.0-os)\"\n          example: https://most-secure.com\n        assertion_id:\n          title: Assertion ID\n          type: string\n          description: \"The \\\"ID\\\" value of the SAML assertion being identified, defined\\\n            \\ in\\n[OASIS.saml-core-2.0-os](https://openid.net/specs/openid-sse-framework-1_0.html#OASIS.saml-core-2.0-os)\"\n          example: _8e8dc5f69a98cc4c1ff3427e5ce34606fd672f91e6\n      description: \"[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#rfc.section.3.4.2)\\n\\\n        \\nThe \\\"SAML Assertion ID\\\" Subject Identifier Format specifies a SAML 2.0\\n\\\n        [OASIS.saml-core-2.0-os](https://openid.net/specs/openid-sse-framework-1_0.html#OASIS.saml-core-2.0-os)\\n\\\n        assertion identifier.\"\n    SimpleSubject:\n      title: Simple Subject\n      discriminator:\n        propertyName: format\n      oneOf:\n      - $ref: '#/components/schemas/Account'\n      - $ref: '#/components/schemas/DID'\n      - $ref: '#/components/schemas/Email'\n      - $ref: '#/components/schemas/IssSub'\n      - $ref: '#/components/schemas/JwtID'\n      - $ref: '#/components/schemas/Opaque'\n      - $ref: '#/components/schemas/PhoneNumber'\n      - $ref: '#/components/schemas/SamlAssertionID'\n    Aliases:\n      title: Aliases\n      required:\n      - format\n      - identifiers\n      type: object\n      properties:\n        format:\n          title: Format\n          type: string\n          default: aliases\n          enum:\n          - aliases\n        identifiers:\n          minItems: 1\n          type: array\n          items:\n            $ref: '#/components/schemas/SimpleSubject'\n      description: \"[Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3.2.2)\\n\\\n        \\nThe Aliases Identifier Format describes a subject that is identified\\nwith\\\n        \\ a list of different Subject Identifiers.  It is intended for use\\nwhen a\\\n        \\ variety of identifiers have been shared with the party that\\nwill be interpreting\\\n        \\ the Subject Identifier, and it is unknown which\\nof those identifiers they\\\n        \\ will recognize or support.  Subject\\nIdentifiers in this format MUST contain\\\n        \\ an \\\"identifiers\\\" member whose\\nvalue is a JSON array containing one or\\\n        \\ more Subject Identifiers.\\nEach Subject Identifier in the array MUST identify\\\n        \\ the same entity.\\nThe \\\"identifiers\\\" member is REQUIRED and MUST NOT be\\\n        \\ null or empty.\\nIt MAY contain multiple instances of the same Identifier\\\n        \\ Format\\n(e.g., multiple Email Subject Identifiers), but SHOULD NOT contain\\n\\\n        exact duplicates.  This format is identified by the name \\\"aliases\\\".\\n\\n\\\"\\\n        alias\\\" Subject Identifiers MUST NOT be nested; i.e., the\\n\\\"identifiers\\\"\\\n        \\ member of an \\\"alias\\\" Subject Identifier MUST NOT\\ncontain a Subject Identifier\\\n        \\ in the \\\"aliases\\\" format.'\"\n    ComplexSubject:\n      title: ComplexSubject\n      minProperties: 1\n      type: object\n      properties:\n        application:\n          allOf:\n          - $ref: '#/components/schemas/SimpleSubject'\n          - description: A Subject Identifier that identifies an application.\n        device:\n          allOf:\n          - $ref: '#/components/schemas/SimpleSubject'\n          - description: A Subject Identifier that identifies a device.\n        group:\n          allOf:\n          - $ref: '#/components/schemas/SimpleSubject'\n          - description: A Subject Identifier that identifies a group.\n        org_unit:\n          allOf:\n          - $ref: '#/components/schemas/SimpleSubject'\n          - description: A Subject Identifier that identifies an organizational unit.\n        session:\n          allOf:\n          - $ref: '#/components/schemas/SimpleSubject'\n          - description: A Subject Identifier that identifies a session.\n        tenant:\n          allOf:\n          - $ref: '#/components/schemas/SimpleSubject'\n          - description: A Subject Identifier that identifies a tenant.\n        user:\n          allOf:\n          - $ref: '#/components/schemas/SimpleSubject'\n          - description: A Subject Identifier that identifies a user.\n      additionalProperties: false\n      description: \"[Spec](https://openid.net/specs/openid-sse-framework-1_0.html#rfc.section.3.2)\\n\\\n        \\nA Complex Subject Member has a name and a value that is a JSON object that\\n\\\n        has one or more Simple Subject Members. All members within a Complex Subject\\n\\\n        MUST represent attributes of the same Subject Principal.\\nAs a whole, the\\\n        \\ Complex Subject MUST refer to exactly one Subject Principal.\"\n    Subject:\n      type: object\n      description: \"[Spec](https://datatracker.ietf.org/doc/html/draft-ietf-secevent-subject-identifiers#section-3)\\n\\\n        \\nAs described in Section 1.2 of SET [RFC8417](https://datatracker.ietf.org/doc/html/rfc8417),\\n\\\n        subjects related to security events may take a variety of forms,\\nincluding\\\n        \\ but not limited to a JWT [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519)\\n\\\n        principal, an IP address, a URL, etc. Different types of subjects may need\\n\\\n        to be identified in different ways. (e.g., a host might be identified by an\\n\\\n        IP or MAC address, while a user might be identified by an email address)\\n\\\n        Furthermore, even in the case where the type of the subject is known,\\nthere\\\n        \\ may be multiple ways by which a given subject may be identified.\\nFor example,\\\n        \\ an account may be identified by an opaque identifier, an\\nemail address,\\\n        \\ a phone number, a JWT \\\"iss\\\" claim and \\\"sub\\\" claim,\\netc., depending\\\n        \\ on the nature and needs of the transmitter and\\nreceiver.  Even within the\\\n        \\ context of a given transmitter and\\nreceiver relationship, it may be appropriate\\\n        \\ to identify different\\naccounts in different ways, for example if some accounts\\\n        \\ only have\\nemail addresses associated with them while others only have phone\\n\\\n        numbers.  Therefore it can be necessary to indicate within a SET the\\nmechanism\\\n        \\ by which a subject is being identified.\\n\\nTo address this problem, this\\\n        \\ specification defines Subject\\nIdentifiers - JSON [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519)\\n\\\n        objects containing information identifying a subject - and Identifier Formats\\\n        \\ -\\nnamed sets of rules describing how to encode different kinds of subject\\n\\\n        identifying information (e.g., an email address, or an issuer and subject\\\n        \\ pair)\\nas a Subject Identifier.\"\n      discriminator:\n        propertyName: format\n      oneOf:\n      - $ref: '#/components/schemas/SimpleSubject'\n      - $ref: '#/components/schemas/Aliases'\n      - $ref: '#/components/schemas/ComplexSubject'\n    Error:\n      required:\n      - code\n      - message\n      type: object\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n  responses:\n    BadRequest:\n      description: Request body cannot be parsed or the request is otherwise invalid\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Unauthorized:\n      description: Authorization failed or is missing\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Forbidden:\n      description: User not authorized to access resource\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotFound:\n      description: Resource not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    TooManyRequests:\n      description: Event Receiver is sending too many requests\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  parameters:\n    issuer:\n      name: issuer\n      in: path\n      description: \"Using path components enables supporting multiple issuers per\\\n        \\ host.\\nThis is required in some multi-tenant hosting configurations.\\nThis\\\n        \\ use of .well-known is for supporting multiple issuers per host;\\nunlike\\\n        \\ its use in [RFC5785](https://openid.net/specs/openid-sse-framework-1_0.html#RFC5785),\\n\\\n        it does not provide general information about the host.\\n\"\n      required: true\n      style: simple\n      explode: false\n      schema:\n        type: string\n      example: tenant-a\n    subject:\n      name: subject\n      in: query\n      description: |-\n        OPTIONAL. The subject for which the stream status is requested.\n        Content is a string-encoded json representation of a Subject\n        (see Subject schema)\n      required: false\n      style: form\n      explode: true\n      schema:\n        type: string\n        example: \"{\\\"user\\\":{\\\"format\\\":\\\"email\\\",\\\"email\\\":\\\"reginold@popular-app.com\\\"\\\n          }}\"\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      x-bearerInfoFunc: swagger_server.controllers.authorization_controller.check_BearerAuth\n\n"
		}
	},
	"Error": "schemas: failed to write file oas_schemas_gen.go: 694:11: expected ';', found url (and 10 more errors)"
}