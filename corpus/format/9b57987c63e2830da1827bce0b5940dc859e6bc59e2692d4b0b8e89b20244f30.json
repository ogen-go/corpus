{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Veridax/privapi"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/tomtom.com/routing/1.0.0/openapi.yaml",
			"byteSize": 36595,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://api.tomtom.com'\ninfo:\n  contact:\n    name: Contact Us\n    url: 'https://developer.tomtom.com/contact-us'\n    x-twitter: TomTom\n  description: |-\n    Routing consists of the following service:\n    \u003cb\u003eCalculate Route\u003c/b\u003e\n    Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account.\n    \u003cb\u003eCalculate Reachable Range\u003c/b\u003e\n    Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.\n  title: Routing\n  version: 1.0.0\n  x-apisguru-categories:\n    - location\n  x-logo:\n    url: 'https://twitter.com/TomTom/profile_image?size=original'\n  x-origin:\n    - converter:\n        url: 'https://github.com/lucybot/api-spec-converter'\n        version: 2.7.18\n      format: openapi\n      url: 'https://developer.tomtom.com/system/files/swagger_models/routing_api.yaml'\n      version: '3.0'\n  x-providerName: tomtom.com\n  x-serviceName: routing\nsecurity:\n  - api_key: []\npaths:\n  '/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}':\n    get:\n      description: Calculates a set of locations that can be reached from the origin point.\n      parameters:\n        - $ref: '#/components/parameters/versionNumber'\n        - $ref: '#/components/parameters/origin'\n        - $ref: '#/components/parameters/contentType'\n        - $ref: '#/components/parameters/fuelBudgetInLiters'\n        - $ref: '#/components/parameters/energyBudgetInkWh'\n        - $ref: '#/components/parameters/timeBudgetInSec'\n        - $ref: '#/components/parameters/callback'\n        - $ref: '#/components/parameters/report'\n        - $ref: '#/components/parameters/departAt'\n        - $ref: '#/components/parameters/arriveAt'\n        - $ref: '#/components/parameters/routeType'\n        - $ref: '#/components/parameters/traffic'\n        - $ref: '#/components/parameters/avoidInCalculateReachableRange'\n        - $ref: '#/components/parameters/travelMode'\n        - $ref: '#/components/parameters/hilliness'\n        - $ref: '#/components/parameters/windingness'\n        - $ref: '#/components/parameters/vehicleMaxSpeed'\n        - $ref: '#/components/parameters/vehicleWeight'\n        - $ref: '#/components/parameters/vehicleAxleWeight'\n        - $ref: '#/components/parameters/vehicleLength'\n        - $ref: '#/components/parameters/vehicleWidth'\n        - $ref: '#/components/parameters/vehicleHeight'\n        - $ref: '#/components/parameters/vehicleCommercial'\n        - $ref: '#/components/parameters/vehicleLoadType'\n        - $ref: '#/components/parameters/constantSpeedConsumptionInLitersPerHundredkm'\n        - $ref: '#/components/parameters/currentFuelInLiters'\n        - $ref: '#/components/parameters/auxiliaryPowerInLitersPerHour'\n        - $ref: '#/components/parameters/fuelEnergyDensityInMJoulesPerLiter'\n        - $ref: '#/components/parameters/accelerationEfficiency'\n        - $ref: '#/components/parameters/decelerationEfficiency'\n        - $ref: '#/components/parameters/uphillEfficiency'\n        - $ref: '#/components/parameters/downhillEfficiency'\n        - description: Engine type of the vehicle.\n          example: electric\n          in: query\n          name: vehicleEngineType\n          schema:\n            default: combustion\n            enum:\n              - combustion\n              - electric\n            type: string\n        - description: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.\n          example: '50,8.2:130,21.3'\n          in: query\n          name: constantSpeedConsumptionInkWhPerHundredkm\n          schema:\n            pattern: '^((\\d+\\.?\\d*,\\d+\\.?\\d*):?)+$'\n            type: string\n      responses:\n        '200':\n          description: 'OK: a range was calculated and the body of the response contains the polygon description and further data.'\n        '400':\n          description: 'Bad request: one or more parameters were incorrectly specified or are mutually exclusive, or the origin point specified in the request is not near enough to a road.'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '408':\n          $ref: '#/components/responses/408'\n        '414':\n          $ref: '#/components/responses/414'\n        '500':\n          $ref: '#/components/responses/500'\n        '502':\n          $ref: '#/components/responses/502'\n        '503':\n          $ref: '#/components/responses/503'\n        '504':\n          $ref: '#/components/responses/504'\n        '596':\n          $ref: '#/components/responses/596'\n      summary: Reachable Range\n      tags:\n        - Routing\n    post:\n      description: 'Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: \u003cem\u003esupportingPoints\u003c/em\u003e, \u003cem\u003eallowVignette\u003c/em\u003e, \u003cem\u003eavoidVignette\u003c/em\u003e, \u003cem\u003eavoidAreas\u003c/em\u003e.'\n      parameters:\n        - $ref: '#/components/parameters/versionNumber'\n        - $ref: '#/components/parameters/origin'\n        - $ref: '#/components/parameters/contentType'\n        - $ref: '#/components/parameters/fuelBudgetInLiters'\n        - $ref: '#/components/parameters/energyBudgetInkWh'\n        - $ref: '#/components/parameters/timeBudgetInSec'\n        - $ref: '#/components/parameters/callback'\n        - $ref: '#/components/parameters/report'\n        - $ref: '#/components/parameters/departAt'\n        - $ref: '#/components/parameters/arriveAt'\n        - $ref: '#/components/parameters/routeType'\n        - $ref: '#/components/parameters/traffic'\n        - $ref: '#/components/parameters/avoidInCalculateReachableRange'\n        - $ref: '#/components/parameters/travelMode'\n        - $ref: '#/components/parameters/hilliness'\n        - $ref: '#/components/parameters/windingness'\n        - $ref: '#/components/parameters/vehicleMaxSpeed'\n        - $ref: '#/components/parameters/vehicleWeight'\n        - $ref: '#/components/parameters/vehicleAxleWeight'\n        - $ref: '#/components/parameters/vehicleLength'\n        - $ref: '#/components/parameters/vehicleWidth'\n        - $ref: '#/components/parameters/vehicleHeight'\n        - $ref: '#/components/parameters/vehicleCommercial'\n        - $ref: '#/components/parameters/vehicleLoadType'\n        - $ref: '#/components/parameters/constantSpeedConsumptionInLitersPerHundredkm'\n        - $ref: '#/components/parameters/currentFuelInLiters'\n        - $ref: '#/components/parameters/auxiliaryPowerInLitersPerHour'\n        - $ref: '#/components/parameters/fuelEnergyDensityInMJoulesPerLiter'\n        - $ref: '#/components/parameters/accelerationEfficiency'\n        - $ref: '#/components/parameters/decelerationEfficiency'\n        - $ref: '#/components/parameters/uphillEfficiency'\n        - $ref: '#/components/parameters/downhillEfficiency'\n        - description: Engine type of the vehicle.\n          example: electric\n          in: query\n          name: vehicleEngineType\n          schema:\n            default: combustion\n            enum:\n              - combustion\n              - electric\n            type: string\n        - description: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.\n          example: '50,8.2:130,21.3'\n          in: query\n          name: constantSpeedConsumptionInkWhPerHundredkm\n          schema:\n            pattern: '^((\\d+\\.?\\d*,\\d+\\.?\\d*):?)+$'\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/calculateReachableRangePostDataParameters'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/calculateReachableRangePostDataParameters'\n      responses:\n        '200':\n          description: 'OK: a range was calculated and the body of the response contains the polygon description and further data.'\n        '400':\n          description: 'Bad request: one or more parameters were incorrectly specified or are mutually exclusive, or the origin point specified in the request is not near enough to a road.'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '408':\n          $ref: '#/components/responses/408'\n        '414':\n          $ref: '#/components/responses/414'\n        '500':\n          $ref: '#/components/responses/500'\n        '502':\n          $ref: '#/components/responses/502'\n        '503':\n          $ref: '#/components/responses/503'\n        '504':\n          $ref: '#/components/responses/504'\n        '596':\n          $ref: '#/components/responses/596'\n      summary: Reachable Range\n      tags:\n        - Routing\n  '/routing/{versionNumber}/calculateRoute/{locations}/{contentType}':\n    get:\n      description: Calculates a route between an origin and a destination.\n      parameters:\n        - $ref: '#/components/parameters/versionNumber'\n        - $ref: '#/components/parameters/locations'\n        - $ref: '#/components/parameters/contentType'\n        - $ref: '#/components/parameters/maxAlternatives'\n        - $ref: '#/components/parameters/alternativeType'\n        - $ref: '#/components/parameters/minDeviationDistance'\n        - $ref: '#/components/parameters/minDeviationTime'\n        - $ref: '#/components/parameters/instructionsType'\n        - $ref: '#/components/parameters/language'\n        - $ref: '#/components/parameters/computeBestOrder'\n        - $ref: '#/components/parameters/routeRepresentation'\n        - $ref: '#/components/parameters/computeTravelTimeFor'\n        - $ref: '#/components/parameters/vehicleHeading'\n        - $ref: '#/components/parameters/sectionType'\n        - $ref: '#/components/parameters/callback'\n        - $ref: '#/components/parameters/report'\n        - $ref: '#/components/parameters/departAt'\n        - $ref: '#/components/parameters/arriveAt'\n        - $ref: '#/components/parameters/routeType'\n        - $ref: '#/components/parameters/traffic'\n        - $ref: '#/components/parameters/avoid'\n        - $ref: '#/components/parameters/travelMode'\n        - $ref: '#/components/parameters/hilliness'\n        - $ref: '#/components/parameters/windingness'\n        - $ref: '#/components/parameters/vehicleMaxSpeed'\n        - $ref: '#/components/parameters/vehicleWeight'\n        - $ref: '#/components/parameters/vehicleAxleWeight'\n        - $ref: '#/components/parameters/vehicleLength'\n        - $ref: '#/components/parameters/vehicleWidth'\n        - $ref: '#/components/parameters/vehicleHeight'\n        - $ref: '#/components/parameters/vehicleCommercial'\n        - $ref: '#/components/parameters/vehicleLoadType'\n        - $ref: '#/components/parameters/vehicleEngineType'\n        - $ref: '#/components/parameters/constantSpeedConsumptionInLitersPerHundredkm'\n        - $ref: '#/components/parameters/currentFuelInLiters'\n        - $ref: '#/components/parameters/auxiliaryPowerInLitersPerHour'\n        - $ref: '#/components/parameters/fuelEnergyDensityInMJoulesPerLiter'\n        - $ref: '#/components/parameters/accelerationEfficiency'\n        - $ref: '#/components/parameters/decelerationEfficiency'\n        - $ref: '#/components/parameters/uphillEfficiency'\n        - $ref: '#/components/parameters/downhillEfficiency'\n        - $ref: '#/components/parameters/constantSpeedConsumptionInkWhPerHundredkm'\n      responses:\n        '200':\n          description: 'OK: a route was calculated and the body of the response contains the route description and any other requested data.'\n        '400':\n          description: 'Bad request: one or more parameters were incorrectly specified, are mutually exclusive, the points in the request are not connected by the road network or the points in the request are not near enough to a road.'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '408':\n          $ref: '#/components/responses/408'\n        '414':\n          $ref: '#/components/responses/414'\n        '500':\n          $ref: '#/components/responses/500'\n        '502':\n          $ref: '#/components/responses/502'\n        '503':\n          $ref: '#/components/responses/503'\n        '504':\n          $ref: '#/components/responses/504'\n        '596':\n          $ref: '#/components/responses/596'\n      summary: Calculate Route\n      tags:\n        - Routing\n    post:\n      description: 'Calculates a route between an origin and a destination. POST method handles additionally parameters: \u003cem\u003esupportingPoints\u003c/em\u003e, \u003cem\u003eallowVignette\u003c/em\u003e, \u003cem\u003eavoidVignette\u003c/em\u003e, \u003cem\u003eavoidAreas\u003c/em\u003e.'\n      parameters:\n        - $ref: '#/components/parameters/versionNumber'\n        - $ref: '#/components/parameters/locations'\n        - $ref: '#/components/parameters/contentType'\n        - $ref: '#/components/parameters/maxAlternatives'\n        - $ref: '#/components/parameters/alternativeType'\n        - $ref: '#/components/parameters/minDeviationDistance'\n        - $ref: '#/components/parameters/minDeviationTime'\n        - $ref: '#/components/parameters/instructionsType'\n        - $ref: '#/components/parameters/language'\n        - $ref: '#/components/parameters/computeBestOrder'\n        - $ref: '#/components/parameters/routeRepresentation'\n        - $ref: '#/components/parameters/computeTravelTimeFor'\n        - $ref: '#/components/parameters/vehicleHeading'\n        - $ref: '#/components/parameters/sectionType'\n        - $ref: '#/components/parameters/callback'\n        - $ref: '#/components/parameters/report'\n        - $ref: '#/components/parameters/departAt'\n        - $ref: '#/components/parameters/arriveAt'\n        - $ref: '#/components/parameters/routeType'\n        - $ref: '#/components/parameters/traffic'\n        - $ref: '#/components/parameters/avoid'\n        - $ref: '#/components/parameters/travelMode'\n        - $ref: '#/components/parameters/hilliness'\n        - $ref: '#/components/parameters/windingness'\n        - $ref: '#/components/parameters/vehicleMaxSpeed'\n        - $ref: '#/components/parameters/vehicleWeight'\n        - $ref: '#/components/parameters/vehicleAxleWeight'\n        - $ref: '#/components/parameters/vehicleLength'\n        - $ref: '#/components/parameters/vehicleWidth'\n        - $ref: '#/components/parameters/vehicleHeight'\n        - $ref: '#/components/parameters/vehicleCommercial'\n        - $ref: '#/components/parameters/vehicleLoadType'\n        - $ref: '#/components/parameters/vehicleEngineType'\n        - $ref: '#/components/parameters/constantSpeedConsumptionInLitersPerHundredkm'\n        - $ref: '#/components/parameters/currentFuelInLiters'\n        - $ref: '#/components/parameters/auxiliaryPowerInLitersPerHour'\n        - $ref: '#/components/parameters/fuelEnergyDensityInMJoulesPerLiter'\n        - $ref: '#/components/parameters/accelerationEfficiency'\n        - $ref: '#/components/parameters/decelerationEfficiency'\n        - $ref: '#/components/parameters/uphillEfficiency'\n        - $ref: '#/components/parameters/downhillEfficiency'\n        - $ref: '#/components/parameters/constantSpeedConsumptionInkWhPerHundredkm'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/calculateRoutePostDataParameters'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/calculateRoutePostDataParameters'\n      responses:\n        '200':\n          description: 'OK: a route was calculated and the body of the response contains the route description and any other requested data.'\n        '400':\n          description: 'Bad request: one or more parameters were incorrectly specified, are mutually exclusive, the points in the request are not connected by the road network or the points in the request are not near enough to a road.'\n        '403':\n          $ref: '#/components/responses/403'\n        '404':\n          $ref: '#/components/responses/404'\n        '405':\n          $ref: '#/components/responses/405'\n        '408':\n          $ref: '#/components/responses/408'\n        '414':\n          $ref: '#/components/responses/414'\n        '500':\n          $ref: '#/components/responses/500'\n        '502':\n          $ref: '#/components/responses/502'\n        '503':\n          $ref: '#/components/responses/503'\n        '504':\n          $ref: '#/components/responses/504'\n        '596':\n          $ref: '#/components/responses/596'\n      summary: Calculate Route\n      tags:\n        - Routing\ncomponents:\n  parameters:\n    accelerationEfficiency:\n      description: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).\n      in: query\n      name: accelerationEfficiency\n      schema:\n        format: float\n        type: number\n    alternativeType:\n      description: Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.\n      in: query\n      name: alternativeType\n      schema:\n        default: anyRoute\n        enum:\n          - anyRoute\n          - betterRoute\n        type: string\n    arriveAt:\n      description: The date and time of arrival at the destination point. It must be specified as a dateTime.\n      in: query\n      name: arriveAt\n      schema:\n        format: dateTime\n        type: string\n    auxiliaryPowerInLitersPerHour:\n      description: 'Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.'\n      in: query\n      name: auxiliaryPowerInLitersPerHour\n      schema:\n        format: float\n        type: number\n    auxiliaryPowerInkW:\n      description: 'Specifies the amount of power consumed by auxiliary systems, in kilowatts (kW).'\n      in: query\n      name: auxiliaryPowerInkW\n      schema:\n        format: float\n        type: number\n    avoid:\n      description: |-\n        Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times.\n        Possible values:\n          - tollRoads\n          - motorways\n          - ferries\n          - unpavedRoads\n          - carpools\n          - alreadyUsedRoads\n      example: unpavedRoads\n      in: query\n      name: avoid\n      schema:\n        type: string\n    avoidInCalculateReachableRange:\n      description: |-\n        Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times.\n        Possible values:\n          - tollRoads\n          - motorways\n          - ferries\n          - unpavedRoads\n          - carpools\n      example: unpavedRoads\n      in: query\n      name: avoid\n      schema:\n        type: string\n    callback:\n      description: Specifies the jsonp callback method.\n      in: query\n      name: callback\n      schema:\n        default: callback\n        type: string\n    computeBestOrder:\n      description: Re-order the route waypoints to reduce the route length.\n      in: query\n      name: computeBestOrder\n      schema:\n        default: false\n        type: boolean\n    computeTravelTimeFor:\n      description: 'Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.'\n      in: query\n      name: computeTravelTimeFor\n      schema:\n        default: none\n        enum:\n          - none\n          - all\n        type: string\n    constantSpeedConsumptionInLitersPerHundredkm:\n      description: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.\n      in: query\n      name: constantSpeedConsumptionInLitersPerHundredkm\n      schema:\n        pattern: '^((\\d+\\.?\\d*,\\d+\\.?\\d*):?)+$'\n        type: string\n    constantSpeedConsumptionInkWhPerHundredkm:\n      description: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.\n      in: query\n      name: constantSpeedConsumptionInkWhPerHundredkm\n      schema:\n        pattern: '^((\\d+\\.?\\d*,\\d+\\.?\\d*):?)+$'\n        type: string\n    contentType:\n      description: 'The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.'\n      in: path\n      name: contentType\n      required: true\n      schema:\n        default: xml\n        enum:\n          - xml\n          - json\n          - jsonp\n        type: string\n    currentChargeInkWh:\n      description: Specifies the current electric energy supply in kilowatt hours (kWh).\n      in: query\n      name: currentChargeInkWh\n      schema:\n        format: float\n        minimum: 0\n        type: number\n    currentFuelInLiters:\n      description: Specifies the current supply of fuel in liters.\n      in: query\n      name: currentFuelInLiters\n      schema:\n        format: float\n        type: number\n    decelerationEfficiency:\n      description: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).\n      in: query\n      name: decelerationEfficiency\n      schema:\n        format: float\n        type: number\n    departAt:\n      description: The date and time of departure from the origin point. Departure times apart from \u003ci\u003enow\u003c/i\u003e must be specified as a dateTime.\n      in: query\n      name: departAt\n      schema:\n        default: now\n        type: string\n    downhillEfficiency:\n      description: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).\n      in: query\n      name: downhillEfficiency\n      schema:\n        format: float\n        type: number\n    energyBudgetInkWh:\n      description: Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.\n      example: 43\n      in: query\n      name: energyBudgetInkWh\n      schema:\n        format: float\n        minimum: 0\n        type: number\n    fuelBudgetInLiters:\n      description: Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.\n      in: query\n      name: fuelBudgetInLiters\n      schema:\n        format: float\n        minimum: 0\n        type: number\n    fuelEnergyDensityInMJoulesPerLiter:\n      description: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).\n      in: query\n      name: fuelEnergyDensityInMJoulesPerLiter\n      schema:\n        format: float\n        type: number\n    hilliness:\n      description: Degree of hilliness for calculating a thrilling route.\n      in: query\n      name: hilliness\n      schema:\n        default: normal\n        enum:\n          - low\n          - normal\n          - high\n        type: string\n    instructionsType:\n      description: 'If specified, guidance instructions will be returned (if available).'\n      in: query\n      name: instructionsType\n      schema:\n        enum:\n          - coded\n          - text\n          - tagged\n        type: string\n    language:\n      description: The language parameter determines the language of the guidance messages.\n      in: query\n      name: language\n      schema:\n        default: en-GB\n        type: string\n    locations:\n      description: Locations through which the calculated route must pass.\n      example: '52.50931,13.42936:52.50274,13.43872'\n      in: path\n      name: locations\n      required: true\n      schema:\n        type: string\n    maxAlternatives:\n      description: Number of alternative routes to be calculated.\n      in: query\n      name: maxAlternatives\n      schema:\n        default: 0\n        maximum: 5\n        minimum: 0\n        type: integer\n    maxChargeInkWh:\n      description: Specifies the maximum electric energy supply in kilowatt hours (kWh) that may be stored in the vehicle's battery.\n      in: query\n      name: maxChargeInkWh\n      schema:\n        format: float\n        type: number\n    minDeviationDistance:\n      description: All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.\n      in: query\n      name: minDeviationDistance\n      schema:\n        default: 0\n        type: integer\n    minDeviationTime:\n      description: All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.\n      in: query\n      name: minDeviationTime\n      schema:\n        default: 0\n        type: integer\n    origin:\n      description: Point from which the range calculation should start.\n      example: '52.50931,13.42936'\n      in: path\n      name: origin\n      required: true\n      schema:\n        type: string\n    report:\n      description: Specifies which data should be reported for diagnosis purposes.\n      in: query\n      name: report\n      schema:\n        enum:\n          - effectiveSettings\n        type: string\n    routeRepresentation:\n      description: Specifies the representation of the set of routes provided as a response.\n      in: query\n      name: routeRepresentation\n      schema:\n        default: polyline\n        enum:\n          - polyline\n          - none\n        type: string\n    routeType:\n      description: The type of route requested.\n      in: query\n      name: routeType\n      schema:\n        default: fastest\n        enum:\n          - fastest\n          - shortest\n          - eco\n          - thrilling\n        type: string\n    sectionType:\n      description: |-\n        Specifies which section types are explicitly reported in the route response. Can be specified multiple times.\n          - carTrain, ferry, tunnel or motorway\n          - pedestrian\n          - tollRoad\n          - tollVignette\n          - country\n          - travelMode\n          - traffic\n      in: query\n      name: sectionType\n      schema:\n        default: travelMode\n        type: string\n    timeBudgetInSec:\n      description: 'Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.'\n      in: query\n      name: timeBudgetInSec\n      schema:\n        format: float\n        minimum: 0\n        type: number\n    traffic:\n      description: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.\n      in: query\n      name: traffic\n      schema:\n        default: true\n        type: boolean\n    travelMode:\n      description: The mode of travel for the requested route.\n      in: query\n      name: travelMode\n      schema:\n        default: car\n        enum:\n          - car\n          - truck\n          - taxi\n          - bus\n          - van\n          - motorcycle\n          - bicycle\n          - pedestrian\n        type: string\n    uphillEfficiency:\n      description: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).\n      in: query\n      name: uphillEfficiency\n      schema:\n        format: float\n        type: number\n    vehicleAxleWeight:\n      description: Weight per axle of the vehicle in kg.\n      in: query\n      name: vehicleAxleWeight\n      schema:\n        default: 0\n        type: integer\n    vehicleCommercial:\n      description: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.\n      in: query\n      name: vehicleCommercial\n      schema:\n        default: false\n        type: boolean\n    vehicleEngineType:\n      description: Engine type of the vehicle.\n      in: query\n      name: vehicleEngineType\n      schema:\n        default: combustion\n        enum:\n          - combustion\n          - electric\n        type: string\n    vehicleHeading:\n      description: 'The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).'\n      in: query\n      name: vehicleHeading\n      schema:\n        maximum: 359\n        minimum: 0\n        type: integer\n    vehicleHeight:\n      description: Height of the vehicle in meters.\n      in: query\n      name: vehicleHeight\n      schema:\n        default: 0\n        format: float\n        type: number\n    vehicleLength:\n      description: Length of the vehicle in meters.\n      in: query\n      name: vehicleLength\n      schema:\n        default: 0\n        format: float\n        type: number\n    vehicleLoadType:\n      description: |-\n        Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads.\n        Use these for routing in the US:\n\n          - \u003ci\u003eUSHazmatClass1\u003c/i\u003e Explosives\n          - \u003ci\u003eUSHazmatClass2\u003c/i\u003e Compressed gas\n          - \u003ci\u003eUSHazmatClass3\u003c/i\u003e Flammable liquids\n          - \u003ci\u003eUSHazmatClass4\u003c/i\u003e Flammable solids\n          - \u003ci\u003eUSHazmatClass5\u003c/i\u003e Oxidizers\n          - \u003ci\u003eUSHazmatClass6\u003c/i\u003e Poisons\n          - \u003ci\u003eUSHazmatClass7\u003c/i\u003e Radioactive\n          - \u003ci\u003eUSHazmatClass8\u003c/i\u003e Corrosives\n          - \u003ci\u003eUSHazmatClass9\u003c/i\u003e Miscellaneous\n\n        Use these for routing in all other countries:\n\n          - \u003ci\u003eotherHazmatExplosive\u003c/i\u003e Explosives\n          - \u003ci\u003eotherHazmatGeneral\u003c/i\u003e Miscellaneous\n          - \u003ci\u003eotherHazmatHarmfulToWater\u003c/i\u003e Harmful to water\n\n        vehicleLoadType can be specified multiple times. This parameter is currently only considered for \u003cb\u003etravelMode\u003c/b\u003e=\u003ci\u003etruck\u003c/i\u003e.\n      in: query\n      name: vehicleLoadType\n      schema:\n        type: string\n    vehicleMaxSpeed:\n      description: Maximum speed of the vehicle in km/hour.\n      in: query\n      name: vehicleMaxSpeed\n      schema:\n        default: 0\n        type: integer\n    vehicleWeight:\n      description: Weight of the vehicle in kilograms.\n      in: query\n      name: vehicleWeight\n      schema:\n        default: 0\n        type: integer\n    vehicleWidth:\n      description: Width of the vehicle in meters.\n      in: query\n      name: vehicleWidth\n      schema:\n        default: 0\n        format: float\n        type: number\n    versionNumber:\n      description: Service version number. The current value is 1.\n      in: path\n      name: versionNumber\n      required: true\n      schema:\n        enum:\n          - 1\n        type: integer\n    windingness:\n      description: Amount that a thrilling route should wind.\n      in: query\n      name: windingness\n      schema:\n        default: normal\n        enum:\n          - low\n          - normal\n          - high\n        type: string\n  responses:\n    '403':\n      description: |-\n        Permission, capacity, or authentication issues:\n          - Forbidden\n          - Not authorized\n          - Account inactive\n          - Account over queries per second limit\n          - Account over rate limit\n          - Rate limit exceeded\n    '404':\n      description: 'Not Found: the requested resource could not be found, but it may be available again in the future.'\n    '405':\n      description: 'Method Not Allowed: the client used a HTTP method other than GET or POST.'\n    '408':\n      description: Request timeout.\n    '414':\n      description: Requested uri is too long.\n    '500':\n      description: An error occurred while processing the request. Please try again later.\n    '502':\n      description: Internal network connectivity issue.\n    '503':\n      description: Service currently unavailable.\n    '504':\n      description: Internal network connectivity issue or a request that has taken too long to complete.\n    '596':\n      description: Service not found.\n  schemas:\n    calculateReachableRangePostDataParameters:\n      example:\n        avoidAreas:\n          rectangles:\n            - northEastCorner:\n                latitude: 48.90309\n                longitude: 2.41115\n              southWestCorner:\n                latitude: 48.81851\n                longitude: 2.26593\n        avoidVignette:\n          - AUS\n          - CHE\n        supportingPoints:\n          - latitude: 52.5093\n            longitude: 13.42936\n          - latitude: 52.50844\n            longitude: 13.42859\n      properties:\n        allowVignette:\n          items:\n            type: string\n          type: array\n          xml:\n            name: allowVignette\n        avoidAreas:\n          properties:\n            rectangles:\n              items:\n                properties:\n                  northEastCorner:\n                    properties:\n                      latitude:\n                        type: string\n                        xml:\n                          attribute: true\n                      longitude:\n                        type: string\n                        xml:\n                          attribute: true\n                    type: object\n                  southWestCorner:\n                    properties:\n                      latitude:\n                        type: string\n                        xml:\n                          attribute: true\n                      longitude:\n                        type: string\n                        xml:\n                          attribute: true\n                    type: object\n                type: object\n                xml:\n                  name: rectangle\n              type: array\n              xml:\n                name: rectangles\n                wrapped: true\n          type: object\n        avoidVignette:\n          items:\n            type: string\n          type: array\n          xml:\n            name: avoidVignette\n      type: object\n      xml:\n        name: postData\n    calculateRoutePostDataParameters:\n      example:\n        avoidAreas:\n          rectangles:\n            - northEastCorner:\n                latitude: 48.90309\n                longitude: 2.41115\n              southWestCorner:\n                latitude: 48.81851\n                longitude: 2.26593\n        avoidVignette:\n          - AUS\n          - CHE\n        supportingPoints:\n          - latitude: 52.5093\n            longitude: 13.42936\n          - latitude: 52.50844\n            longitude: 13.42859\n      properties:\n        allowVignette:\n          items:\n            type: string\n          type: array\n          xml:\n            name: allowVignette\n        avoidAreas:\n          properties:\n            rectangles:\n              items:\n                properties:\n                  northEastCorner:\n                    properties:\n                      latitude:\n                        type: string\n                        xml:\n                          attribute: true\n                      longitude:\n                        type: string\n                        xml:\n                          attribute: true\n                    type: object\n                  southWestCorner:\n                    properties:\n                      latitude:\n                        type: string\n                        xml:\n                          attribute: true\n                      longitude:\n                        type: string\n                        xml:\n                          attribute: true\n                    type: object\n                type: object\n                xml:\n                  name: rectangle\n              type: array\n              xml:\n                name: rectangles\n                wrapped: true\n          type: object\n        avoidVignette:\n          items:\n            type: string\n          type: array\n          xml:\n            name: avoidVignette\n        supportingPoints:\n          items:\n            properties:\n              latitude:\n                type: string\n                xml:\n                  attribute: true\n              longitude:\n                type: string\n                xml:\n                  attribute: true\n            xml:\n              name: supportingPoint\n          type: array\n          xml:\n            name: supportingPoints\n            wrapped: true\n      type: object\n      xml:\n        name: postData\n  securitySchemes:\n    api_key:\n      in: query\n      name: key\n      type: apiKey\n"
		}
	},
	"Error": "security: failed to write file oas_security_gen.go: format: 103:3: expected 1 expression"
}