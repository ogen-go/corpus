{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "amazonaws.com-textract-2018-06-27-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/amazonaws.com-textract-2018-06-27-swagger.yaml",
			"byteSize": 47715,
			"content": "openapi: 3.0.0\ninfo:\n  version: 2018-06-27\n  x-release: v4\n  title: Amazon Textract\n  description: Amazon Textract detects and analyzes text in documents and converts it into\n    machine-readable text. This is the API reference documentation for Amazon\n    Textract.\n  x-logo:\n    url: https://twitter.com/awscloud/profile_image?size=original\n    backgroundColor: \"#FFFFFF\"\n  termsOfService: https://aws.amazon.com/service-terms/\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: https://github.com/mermade/aws2openapi\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: http://www.apache.org/licenses/\n  x-providerName: amazonaws.com\n  x-serviceName: textract\n  x-origin:\n    - contentType: application/json\n      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/textract-2018-06-27.normal.json\n      converter:\n        url: https://github.com/mermade/aws2openapi\n        version: 1.0.0\n      x-apisguru-direct: true\n  x-apiClientRegistration:\n    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: https://docs.aws.amazon.com/textract/\nx-hasEquivalentPaths: true\nsecurity:\n  - hmac: []\npaths:\n  /#X-Amz-Target=Textract.AnalyzeDocument:\n    post:\n      operationId: AnalyzeDocument\n      description: '\u003cp\u003eAnalyzes an input document for relationships between detected items.\n        \u003c/p\u003e \u003cp\u003eThe types of information returned are as follows: \u003c/p\u003e \u003cul\u003e \u003cli\u003e\n        \u003cp\u003eWords and lines that are related to nearby lines and words. The\n        related information is returned in two \u003ca\u003eBlock\u003c/a\u003e objects each of type\n        \u003ccode\u003eKEY_VALUE_SET\u003c/code\u003e: a KEY Block object and a VALUE Block object.\n        For example, \u003ci\u003eName: Ana Silva Carolina\u003c/i\u003e contains a key and value.\n        \u003ci\u003eName:\u003c/i\u003e is the key. \u003ci\u003eAna Silva Carolina\u003c/i\u003e is the value.\u003c/p\u003e\n        \u003c/li\u003e \u003cli\u003e \u003cp\u003eTable and table cell data. A TABLE Block object contains\n        information about a detected table. A CELL Block object is returned for\n        each cell in a table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eSelectable elements such as\n        checkboxes and radio buttons. A SELECTION_ELEMENT Block object contains\n        information about a selectable element.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eLines and\n        words of text. A LINE Block object contains one or more WORD Block\n        objects.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou can choose which type of analysis to\n        perform by specifying the \u003ccode\u003eFeatureTypes\u003c/code\u003e list. \u003c/p\u003e \u003cp\u003eThe\n        output is returned in a list of \u003ccode\u003eBLOCK\u003c/code\u003e objects.\u003c/p\u003e \u003cp\u003e\n        \u003ccode\u003eAnalyzeDocument\u003c/code\u003e is a synchronous operation. To analyze\n        documents asynchronously, use \u003ca\u003eStartDocumentAnalysis\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor\n        more information, see \u003ca\n        href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\"\u003eDocument\n        Text Analysis\u003c/a\u003e.\u003c/p\u003e'\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnalyzeDocumentResponse\"\n        \"480\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"481\":\n          description: InvalidS3ObjectException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidS3ObjectException\"\n        \"482\":\n          description: UnsupportedDocumentException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnsupportedDocumentException\"\n        \"483\":\n          description: DocumentTooLargeException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DocumentTooLargeException\"\n        \"484\":\n          description: BadDocumentException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadDocumentException\"\n        \"485\":\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessDeniedException\"\n        \"486\":\n          description: ProvisionedThroughputExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProvisionedThroughputExceededException\"\n        \"487\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalServerError\"\n        \"488\":\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ThrottlingException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - Textract.AnalyzeDocument\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AnalyzeDocumentRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=Textract.DetectDocumentText:\n    post:\n      operationId: DetectDocumentText\n      description: \u003cp\u003eDetects text in the input document. Amazon Textract can detect lines\n        of text and the words that make up a line of text. The input document\n        must be an image in JPG or PNG format. \u003ccode\u003eDetectDocumentText\u003c/code\u003e\n        returns the detected text in an array of \u003ca\u003eBlock\u003c/a\u003e objects. \u003c/p\u003e\n        \u003cp\u003eEach document page has as an associated \u003ccode\u003eBlock\u003c/code\u003e of type\n        PAGE. Each PAGE \u003ccode\u003eBlock\u003c/code\u003e object is the parent of LINE\n        \u003ccode\u003eBlock\u003c/code\u003e objects that represent the lines of detected text on\n        a page. A LINE \u003ccode\u003eBlock\u003c/code\u003e object is a parent for each word that\n        makes up the line. Words are represented by \u003ccode\u003eBlock\u003c/code\u003e objects\n        of type WORD.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eDetectDocumentText\u003c/code\u003e is a synchronous\n        operation. To analyze documents asynchronously, use\n        \u003ca\u003eStartDocumentTextDetection\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca\n        href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\"\u003eDocument\n        Text Detection\u003c/a\u003e.\u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DetectDocumentTextResponse\"\n        \"480\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"481\":\n          description: InvalidS3ObjectException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidS3ObjectException\"\n        \"482\":\n          description: UnsupportedDocumentException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnsupportedDocumentException\"\n        \"483\":\n          description: DocumentTooLargeException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DocumentTooLargeException\"\n        \"484\":\n          description: BadDocumentException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadDocumentException\"\n        \"485\":\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessDeniedException\"\n        \"486\":\n          description: ProvisionedThroughputExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProvisionedThroughputExceededException\"\n        \"487\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalServerError\"\n        \"488\":\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ThrottlingException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - Textract.DetectDocumentText\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/DetectDocumentTextRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=Textract.GetDocumentAnalysis:\n    post:\n      operationId: GetDocumentAnalysis\n      description: \"\u003cp\u003eGets the results for an Amazon Textract asynchronous operation that\n        analyzes text in a document.\u003c/p\u003e \u003cp\u003eYou start asynchronous text analysis\n        by calling \u003ca\u003eStartDocumentAnalysis\u003c/a\u003e, which returns a job identifier\n        (\u003ccode\u003eJobId\u003c/code\u003e). When the text analysis operation finishes, Amazon\n        Textract publishes a completion status to the Amazon Simple Notification\n        Service (Amazon SNS) topic that's registered in the initial call to\n        \u003ccode\u003eStartDocumentAnalysis\u003c/code\u003e. To get the results of the\n        text-detection operation, first check that the status value published to\n        the Amazon SNS topic is \u003ccode\u003eSUCCEEDED\u003c/code\u003e. If so, call\n        \u003ccode\u003eGetDocumentAnalysis\u003c/code\u003e, and pass the job identifier\n        (\u003ccode\u003eJobId\u003c/code\u003e) from the initial call to\n        \u003ccode\u003eStartDocumentAnalysis\u003c/code\u003e.\u003c/p\u003e \u003cp\u003e\n        \u003ccode\u003eGetDocumentAnalysis\u003c/code\u003e returns an array of \u003ca\u003eBlock\u003c/a\u003e\n        objects. The following types of information are returned: \u003c/p\u003e \u003cul\u003e \u003cli\u003e\n        \u003cp\u003eWords and lines that are related to nearby lines and words. The\n        related information is returned in two \u003ca\u003eBlock\u003c/a\u003e objects each of type\n        \u003ccode\u003eKEY_VALUE_SET\u003c/code\u003e: a KEY Block object and a VALUE Block object.\n        For example, \u003ci\u003eName: Ana Silva Carolina\u003c/i\u003e contains a key and value.\n        \u003ci\u003eName:\u003c/i\u003e is the key. \u003ci\u003eAna Silva Carolina\u003c/i\u003e is the value.\u003c/p\u003e\n        \u003c/li\u003e \u003cli\u003e \u003cp\u003eTable and table cell data. A TABLE Block object contains\n        information about a detected table. A CELL Block object is returned for\n        each cell in a table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eSelectable elements such as\n        checkboxes and radio buttons. A SELECTION_ELEMENT Block object contains\n        information about a selectable element.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eLines and\n        words of text. A LINE Block object contains one or more WORD Block\n        objects.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003ccode\u003eMaxResults\u003c/code\u003e parameter to\n        limit the number of blocks returned. If there are more results than\n        specified in \u003ccode\u003eMaxResults\u003c/code\u003e, the value of\n        \u003ccode\u003eNextToken\u003c/code\u003e in the operation response contains a pagination\n        token for getting the next set of results. To get the next page of\n        results, call \u003ccode\u003eGetDocumentAnalysis\u003c/code\u003e, and populate the\n        \u003ccode\u003eNextToken\u003c/code\u003e request parameter with the token value that's\n        returned from the previous call to \u003ccode\u003eGetDocumentAnalysis\u003c/code\u003e.\u003c/p\u003e\n        \u003cp\u003eFor more information, see \u003ca\n        href=\\\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-anal\\\n        yzing.html\\\"\u003eDocument Text Analysis\u003c/a\u003e.\u003c/p\u003e\"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetDocumentAnalysisResponse\"\n        \"480\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"481\":\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessDeniedException\"\n        \"482\":\n          description: ProvisionedThroughputExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProvisionedThroughputExceededException\"\n        \"483\":\n          description: InvalidJobIdException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidJobIdException\"\n        \"484\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalServerError\"\n        \"485\":\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ThrottlingException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - Textract.GetDocumentAnalysis\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetDocumentAnalysisRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=Textract.GetDocumentTextDetection:\n    post:\n      operationId: GetDocumentTextDetection\n      description: \u003cp\u003eGets the results for an Amazon Textract asynchronous operation that\n        detects text in a document. Amazon Textract can detect lines of text and\n        the words that make up a line of text.\u003c/p\u003e \u003cp\u003eYou start asynchronous\n        text detection by calling \u003ca\u003eStartDocumentTextDetection\u003c/a\u003e, which\n        returns a job identifier (\u003ccode\u003eJobId\u003c/code\u003e). When the text detection\n        operation finishes, Amazon Textract publishes a completion status to the\n        Amazon Simple Notification Service (Amazon SNS) topic that's registered\n        in the initial call to \u003ccode\u003eStartDocumentTextDetection\u003c/code\u003e. To get\n        the results of the text-detection operation, first check that the status\n        value published to the Amazon SNS topic is \u003ccode\u003eSUCCEEDED\u003c/code\u003e. If\n        so, call \u003ccode\u003eGetDocumentTextDetection\u003c/code\u003e, and pass the job\n        identifier (\u003ccode\u003eJobId\u003c/code\u003e) from the initial call to\n        \u003ccode\u003eStartDocumentTextDetection\u003c/code\u003e.\u003c/p\u003e \u003cp\u003e\n        \u003ccode\u003eGetDocumentTextDetection\u003c/code\u003e returns an array of \u003ca\u003eBlock\u003c/a\u003e\n        objects. \u003c/p\u003e \u003cp\u003eEach document page has as an associated\n        \u003ccode\u003eBlock\u003c/code\u003e of type PAGE. Each PAGE \u003ccode\u003eBlock\u003c/code\u003e object is\n        the parent of LINE \u003ccode\u003eBlock\u003c/code\u003e objects that represent the lines\n        of detected text on a page. A LINE \u003ccode\u003eBlock\u003c/code\u003e object is a parent\n        for each word that makes up the line. Words are represented by\n        \u003ccode\u003eBlock\u003c/code\u003e objects of type WORD.\u003c/p\u003e \u003cp\u003eUse the MaxResults\n        parameter to limit the number of blocks that are returned. If there are\n        more results than specified in \u003ccode\u003eMaxResults\u003c/code\u003e, the value of\n        \u003ccode\u003eNextToken\u003c/code\u003e in the operation response contains a pagination\n        token for getting the next set of results. To get the next page of\n        results, call \u003ccode\u003eGetDocumentTextDetection\u003c/code\u003e, and populate the\n        \u003ccode\u003eNextToken\u003c/code\u003e request parameter with the token value that's\n        returned from the previous call to\n        \u003ccode\u003eGetDocumentTextDetection\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor more information, see\n        \u003ca\n        href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\"\u003eDocument\n        Text Detection\u003c/a\u003e.\u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetDocumentTextDetectionResponse\"\n        \"480\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"481\":\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessDeniedException\"\n        \"482\":\n          description: ProvisionedThroughputExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProvisionedThroughputExceededException\"\n        \"483\":\n          description: InvalidJobIdException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidJobIdException\"\n        \"484\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalServerError\"\n        \"485\":\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ThrottlingException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - Textract.GetDocumentTextDetection\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/GetDocumentTextDetectionRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=Textract.StartDocumentAnalysis:\n    post:\n      operationId: StartDocumentAnalysis\n      description: \u003cp\u003eStarts asynchronous analysis of an input document for relationships\n        between detected items such as key and value pairs, tables, and\n        selection elements.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eStartDocumentAnalysis\u003c/code\u003e can\n        analyze text in documents that are in JPG, PNG, and PDF format. The\n        documents are stored in an Amazon S3 bucket. Use \u003ca\u003eDocumentLocation\u003c/a\u003e\n        to specify the bucket name and file name of the document. \u003c/p\u003e \u003cp\u003e\n        \u003ccode\u003eStartDocumentAnalysis\u003c/code\u003e returns a job identifier\n        (\u003ccode\u003eJobId\u003c/code\u003e) that you use to get the results of the operation.\n        When text analysis is finished, Amazon Textract publishes a completion\n        status to the Amazon Simple Notification Service (Amazon SNS) topic that\n        you specify in \u003ccode\u003eNotificationChannel\u003c/code\u003e. To get the results of\n        the text analysis operation, first check that the status value published\n        to the Amazon SNS topic is \u003ccode\u003eSUCCEEDED\u003c/code\u003e. If so, call\n        \u003ca\u003eGetDocumentAnalysis\u003c/a\u003e, and pass the job identifier\n        (\u003ccode\u003eJobId\u003c/code\u003e) from the initial call to\n        \u003ccode\u003eStartDocumentAnalysis\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca\n        href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\"\u003eDocument\n        Text Analysis\u003c/a\u003e.\u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StartDocumentAnalysisResponse\"\n        \"480\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"481\":\n          description: InvalidS3ObjectException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidS3ObjectException\"\n        \"482\":\n          description: UnsupportedDocumentException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnsupportedDocumentException\"\n        \"483\":\n          description: DocumentTooLargeException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DocumentTooLargeException\"\n        \"484\":\n          description: BadDocumentException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadDocumentException\"\n        \"485\":\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessDeniedException\"\n        \"486\":\n          description: ProvisionedThroughputExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProvisionedThroughputExceededException\"\n        \"487\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalServerError\"\n        \"488\":\n          description: IdempotentParameterMismatchException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IdempotentParameterMismatchException\"\n        \"489\":\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ThrottlingException\"\n        \"490\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - Textract.StartDocumentAnalysis\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StartDocumentAnalysisRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  /#X-Amz-Target=Textract.StartDocumentTextDetection:\n    post:\n      operationId: StartDocumentTextDetection\n      description: \u003cp\u003eStarts the asynchronous detection of text in a document. Amazon\n        Textract can detect lines of text and the words that make up a line of\n        text.\u003c/p\u003e \u003cp\u003e \u003ccode\u003eStartDocumentTextDetection\u003c/code\u003e can analyze text\n        in documents that are in JPG, PNG, and PDF format. The documents are\n        stored in an Amazon S3 bucket. Use \u003ca\u003eDocumentLocation\u003c/a\u003e to specify\n        the bucket name and file name of the document. \u003c/p\u003e \u003cp\u003e\n        \u003ccode\u003eStartTextDetection\u003c/code\u003e returns a job identifier\n        (\u003ccode\u003eJobId\u003c/code\u003e) that you use to get the results of the operation.\n        When text detection is finished, Amazon Textract publishes a completion\n        status to the Amazon Simple Notification Service (Amazon SNS) topic that\n        you specify in \u003ccode\u003eNotificationChannel\u003c/code\u003e. To get the results of\n        the text detection operation, first check that the status value\n        published to the Amazon SNS topic is \u003ccode\u003eSUCCEEDED\u003c/code\u003e. If so, call\n        \u003ca\u003eGetDocumentTextDetection\u003c/a\u003e, and pass the job identifier\n        (\u003ccode\u003eJobId\u003c/code\u003e) from the initial call to\n        \u003ccode\u003eStartDocumentTextDetection\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor more information,\n        see \u003ca\n        href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\"\u003eDocument\n        Text Detection\u003c/a\u003e.\u003c/p\u003e\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StartDocumentTextDetectionResponse\"\n        \"480\":\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidParameterException\"\n        \"481\":\n          description: InvalidS3ObjectException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidS3ObjectException\"\n        \"482\":\n          description: UnsupportedDocumentException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnsupportedDocumentException\"\n        \"483\":\n          description: DocumentTooLargeException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DocumentTooLargeException\"\n        \"484\":\n          description: BadDocumentException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadDocumentException\"\n        \"485\":\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccessDeniedException\"\n        \"486\":\n          description: ProvisionedThroughputExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProvisionedThroughputExceededException\"\n        \"487\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalServerError\"\n        \"488\":\n          description: IdempotentParameterMismatchException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IdempotentParameterMismatchException\"\n        \"489\":\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ThrottlingException\"\n        \"490\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - Textract.StartDocumentTextDetection\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/StartDocumentTextDetectionRequest\"\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\nservers:\n  - url: http://textract.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-1\n    description: The Amazon Textract multi-region endpoint\n  - url: https://textract.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-1\n    description: The Amazon Textract multi-region endpoint\n  - url: http://textract.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon Textract endpoint for China (Beijing) and China (Ningxia)\n  - url: https://textract.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon Textract endpoint for China (Beijing) and China (Ningxia)\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      required: false\n      schema:\n        type: string\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    AnalyzeDocumentResponse:\n      type: object\n      properties:\n        DocumentMetadata:\n          $ref: \"#/components/schemas/DocumentMetadata\"\n        Blocks:\n          $ref: \"#/components/schemas/BlockList\"\n    AnalyzeDocumentRequest:\n      type: object\n      required:\n        - Document\n        - FeatureTypes\n      properties:\n        Document:\n          $ref: \"#/components/schemas/Document\"\n        FeatureTypes:\n          $ref: \"#/components/schemas/FeatureTypes\"\n    InvalidParameterException: {}\n    InvalidS3ObjectException: {}\n    UnsupportedDocumentException: {}\n    DocumentTooLargeException: {}\n    BadDocumentException: {}\n    AccessDeniedException: {}\n    ProvisionedThroughputExceededException: {}\n    InternalServerError: {}\n    ThrottlingException: {}\n    DetectDocumentTextResponse:\n      type: object\n      properties:\n        DocumentMetadata:\n          $ref: \"#/components/schemas/DocumentMetadata\"\n        Blocks:\n          $ref: \"#/components/schemas/BlockList\"\n    DetectDocumentTextRequest:\n      type: object\n      required:\n        - Document\n      properties:\n        Document:\n          $ref: \"#/components/schemas/Document\"\n    GetDocumentAnalysisResponse:\n      type: object\n      properties:\n        DocumentMetadata:\n          $ref: \"#/components/schemas/DocumentMetadata\"\n        JobStatus:\n          $ref: \"#/components/schemas/JobStatus\"\n        NextToken:\n          $ref: \"#/components/schemas/PaginationToken\"\n        Blocks:\n          $ref: \"#/components/schemas/BlockList\"\n        Warnings:\n          $ref: \"#/components/schemas/Warnings\"\n        StatusMessage:\n          $ref: \"#/components/schemas/StatusMessage\"\n    GetDocumentAnalysisRequest:\n      type: object\n      required:\n        - JobId\n      properties:\n        JobId:\n          $ref: \"#/components/schemas/JobId\"\n        MaxResults:\n          $ref: \"#/components/schemas/MaxResults\"\n        NextToken:\n          $ref: \"#/components/schemas/PaginationToken\"\n    InvalidJobIdException: {}\n    GetDocumentTextDetectionResponse:\n      type: object\n      properties:\n        DocumentMetadata:\n          $ref: \"#/components/schemas/DocumentMetadata\"\n        JobStatus:\n          $ref: \"#/components/schemas/JobStatus\"\n        NextToken:\n          $ref: \"#/components/schemas/PaginationToken\"\n        Blocks:\n          $ref: \"#/components/schemas/BlockList\"\n        Warnings:\n          $ref: \"#/components/schemas/Warnings\"\n        StatusMessage:\n          $ref: \"#/components/schemas/StatusMessage\"\n    GetDocumentTextDetectionRequest:\n      type: object\n      required:\n        - JobId\n      properties:\n        JobId:\n          $ref: \"#/components/schemas/JobId\"\n        MaxResults:\n          $ref: \"#/components/schemas/MaxResults\"\n        NextToken:\n          $ref: \"#/components/schemas/PaginationToken\"\n    StartDocumentAnalysisResponse:\n      type: object\n      properties:\n        JobId:\n          $ref: \"#/components/schemas/JobId\"\n    StartDocumentAnalysisRequest:\n      type: object\n      required:\n        - DocumentLocation\n        - FeatureTypes\n      properties:\n        DocumentLocation:\n          $ref: \"#/components/schemas/DocumentLocation\"\n        FeatureTypes:\n          $ref: \"#/components/schemas/FeatureTypes\"\n        ClientRequestToken:\n          $ref: \"#/components/schemas/ClientRequestToken\"\n        JobTag:\n          $ref: \"#/components/schemas/JobTag\"\n        NotificationChannel:\n          $ref: \"#/components/schemas/NotificationChannel\"\n    IdempotentParameterMismatchException: {}\n    LimitExceededException: {}\n    StartDocumentTextDetectionResponse:\n      type: object\n      properties:\n        JobId:\n          $ref: \"#/components/schemas/JobId\"\n    StartDocumentTextDetectionRequest:\n      type: object\n      required:\n        - DocumentLocation\n      properties:\n        DocumentLocation:\n          $ref: \"#/components/schemas/DocumentLocation\"\n        ClientRequestToken:\n          $ref: \"#/components/schemas/ClientRequestToken\"\n        JobTag:\n          $ref: \"#/components/schemas/JobTag\"\n        NotificationChannel:\n          $ref: \"#/components/schemas/NotificationChannel\"\n    Document:\n      type: object\n      properties:\n        Bytes:\n          $ref: \"#/components/schemas/ImageBlob\"\n        S3Object:\n          $ref: \"#/components/schemas/S3Object\"\n      description: \u003cp\u003eThe input document, either as bytes or as an S3 object.\u003c/p\u003e \u003cp\u003eYou\n        pass image bytes to an Amazon Textract API operation by using the\n        \u003ccode\u003eBytes\u003c/code\u003e property. For example, you would use the\n        \u003ccode\u003eBytes\u003c/code\u003e property to pass a document loaded from a local file\n        system. Image bytes passed by using the \u003ccode\u003eBytes\u003c/code\u003e property must\n        be base64 encoded. Your code might not need to encode document file\n        bytes if you're using an AWS SDK to call Amazon Textract API operations.\n        \u003c/p\u003e \u003cp\u003eYou pass images stored in an S3 bucket to an Amazon Textract API\n        operation by using the \u003ccode\u003eS3Object\u003c/code\u003e property. Documents stored\n        in an S3 bucket don't need to be base64 encoded.\u003c/p\u003e \u003cp\u003eThe AWS Region\n        for the S3 bucket that contains the S3 object must match the AWS Region\n        that you use for Amazon Textract operations.\u003c/p\u003e \u003cp\u003eIf you use the AWS\n        CLI to call Amazon Textract operations, passing image bytes using the\n        Bytes property isn't supported. You must first upload the document to an\n        Amazon S3 bucket, and then call the operation using the S3Object\n        property.\u003c/p\u003e \u003cp\u003eFor Amazon Textract to process an S3 object, the user\n        must have permission to access the S3 object. \u003c/p\u003e\n    FeatureTypes:\n      type: array\n      items:\n        $ref: \"#/components/schemas/FeatureType\"\n    DocumentMetadata:\n      type: object\n      properties:\n        Pages:\n          $ref: \"#/components/schemas/UInteger\"\n      description: Information about the input document.\n    BlockList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Block\"\n    BlockType:\n      type: string\n      enum:\n        - KEY_VALUE_SET\n        - PAGE\n        - LINE\n        - WORD\n        - TABLE\n        - CELL\n        - SELECTION_ELEMENT\n    Percent:\n      type: number\n      format: float\n      minimum: 0\n      maximum: 100\n    String:\n      type: string\n    UInteger:\n      type: integer\n      minimum: 0\n    Geometry:\n      type: object\n      properties:\n        BoundingBox:\n          $ref: \"#/components/schemas/BoundingBox\"\n        Polygon:\n          $ref: \"#/components/schemas/Polygon\"\n      description: Information about where a recognized text, key, value, table, or table\n        cell is located on a document page.\n    NonEmptyString:\n      type: string\n      pattern: .*\\S.*\n    RelationshipList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Relationship\"\n    EntityTypes:\n      type: array\n      items:\n        $ref: \"#/components/schemas/EntityType\"\n    SelectionStatus:\n      type: string\n      enum:\n        - SELECTED\n        - NOT_SELECTED\n    Block:\n      type: object\n      properties:\n        BlockType:\n          $ref: \"#/components/schemas/BlockType\"\n        Confidence:\n          $ref: \"#/components/schemas/Percent\"\n        Text:\n          $ref: \"#/components/schemas/String\"\n        RowIndex:\n          $ref: \"#/components/schemas/UInteger\"\n        ColumnIndex:\n          $ref: \"#/components/schemas/UInteger\"\n        RowSpan:\n          $ref: \"#/components/schemas/UInteger\"\n        ColumnSpan:\n          $ref: \"#/components/schemas/UInteger\"\n        Geometry:\n          $ref: \"#/components/schemas/Geometry\"\n        Id:\n          $ref: \"#/components/schemas/NonEmptyString\"\n        Relationships:\n          $ref: \"#/components/schemas/RelationshipList\"\n        EntityTypes:\n          $ref: \"#/components/schemas/EntityTypes\"\n        SelectionStatus:\n          $ref: \"#/components/schemas/SelectionStatus\"\n        Page:\n          $ref: \"#/components/schemas/UInteger\"\n      description: \u003cp\u003eA \u003ccode\u003eBlock\u003c/code\u003e represents items that are recognized in a\n        document within a group of pixels close to each other. The information\n        returned in a \u003ccode\u003eBlock\u003c/code\u003e depends on the type of operation. In\n        document-text detection (for example \u003ca\u003eDetectDocumentText\u003c/a\u003e), you get\n        information about the detected words and lines of text. In text analysis\n        (for example \u003ca\u003eAnalyzeDocument\u003c/a\u003e), you can also get information about\n        the fields, tables and selection elements that are detected in the\n        document.\u003c/p\u003e \u003cp\u003eAn array of \u003ccode\u003eBlock\u003c/code\u003e objects is returned by\n        both synchronous and asynchronous operations. In synchronous operations,\n        such as \u003ca\u003eDetectDocumentText\u003c/a\u003e, the array of \u003ccode\u003eBlock\u003c/code\u003e\n        objects is the entire set of results. In asynchronous operations, such\n        as \u003ca\u003eGetDocumentAnalysis\u003c/a\u003e, the array is returned over one or more\n        responses.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca\n        href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html\"\u003eHow\n        Amazon Textract Works\u003c/a\u003e.\u003c/p\u003e\n    Float:\n      type: number\n      format: float\n    BoundingBox:\n      type: object\n      properties:\n        Width:\n          $ref: \"#/components/schemas/Float\"\n        Height:\n          $ref: \"#/components/schemas/Float\"\n        Left:\n          $ref: \"#/components/schemas/Float\"\n        Top:\n          $ref: \"#/components/schemas/Float\"\n      description: \u003cp\u003eThe bounding box around the recognized text, key, value, table or\n        table cell on a document page. The \u003ccode\u003eleft\u003c/code\u003e (x-coordinate) and\n        \u003ccode\u003etop\u003c/code\u003e (y-coordinate) are coordinates that represent the top\n        and left sides of the bounding box. Note that the upper-left corner of\n        the image is the origin (0,0). \u003c/p\u003e \u003cp\u003eThe \u003ccode\u003etop\u003c/code\u003e and\n        \u003ccode\u003eleft\u003c/code\u003e values returned are ratios of the overall document\n        page size. For example, if the input image is 700 x 200 pixels, and the\n        top-left coordinate of the bounding box is 350 x 50 pixels, the API\n        returns a \u003ccode\u003eleft\u003c/code\u003e value of 0.5 (350/700) and a\n        \u003ccode\u003etop\u003c/code\u003e value of 0.25 (50/200).\u003c/p\u003e \u003cp\u003eThe \u003ccode\u003ewidth\u003c/code\u003e\n        and \u003ccode\u003eheight\u003c/code\u003e values represent the dimensions of the bounding\n        box as a ratio of the overall document page dimension. For example, if\n        the document page size is 700 x 200 pixels, and the bounding box width\n        is 70 pixels, the width returned is 0.1. \u003c/p\u003e\n    ClientRequestToken:\n      type: string\n      pattern: ^[a-zA-Z0-9-_]+$\n      minLength: 1\n      maxLength: 64\n    ImageBlob:\n      type: string\n      minLength: 1\n      maxLength: 5242880\n    S3Object:\n      type: object\n      properties:\n        Bucket:\n          $ref: \"#/components/schemas/S3Bucket\"\n        Name:\n          $ref: \"#/components/schemas/S3ObjectName\"\n        Version:\n          $ref: \"#/components/schemas/S3ObjectVersion\"\n      description: \u003cp\u003eThe S3 bucket name and file name that identifies the document.\u003c/p\u003e\n        \u003cp\u003eThe AWS Region for the S3 bucket that contains the document must\n        match the Region that you use for Amazon Textract operations.\u003c/p\u003e \u003cp\u003eFor\n        Amazon Textract to process a file in an S3 bucket, the user must have\n        permission to access the S3 bucket and file. \u003c/p\u003e\n    DocumentLocation:\n      type: object\n      properties:\n        S3Object:\n          $ref: \"#/components/schemas/S3Object\"\n      description: \u003cp\u003eThe Amazon S3 bucket that contains the document to be processed. It's\n        used by asynchronous operations such as\n        \u003ca\u003eStartDocumentTextDetection\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eThe input document can be an\n        image file in JPG or PNG format. It can also be a file in PDF\n        format.\u003c/p\u003e\n    EntityType:\n      type: string\n      enum:\n        - KEY\n        - VALUE\n    ErrorCode:\n      type: string\n    FeatureType:\n      type: string\n      enum:\n        - TABLES\n        - FORMS\n    Polygon:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Point\"\n    JobId:\n      type: string\n      pattern: ^[a-zA-Z0-9-_]+$\n      minLength: 1\n      maxLength: 64\n    MaxResults:\n      type: integer\n      minimum: 1\n    PaginationToken:\n      type: string\n      pattern: .*\\S.*\n      minLength: 1\n      maxLength: 255\n    JobStatus:\n      type: string\n      enum:\n        - IN_PROGRESS\n        - SUCCEEDED\n        - FAILED\n        - PARTIAL_SUCCESS\n    Warnings:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Warning\"\n    StatusMessage:\n      type: string\n    IdList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/NonEmptyString\"\n    JobTag:\n      type: string\n      pattern: \"[a-zA-Z0-9_.\\\\-:]+\"\n      minLength: 1\n      maxLength: 64\n    SNSTopicArn:\n      type: string\n      pattern: (^arn:([a-z\\d-]+):sns:[a-zA-Z\\d-]{1,20}:\\w{12}:.+$)\n      minLength: 20\n      maxLength: 1024\n    RoleArn:\n      type: string\n      pattern: arn:([a-z\\d-]+):iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+\n      minLength: 20\n      maxLength: 2048\n    NotificationChannel:\n      type: object\n      required:\n        - SNSTopicArn\n        - RoleArn\n      properties:\n        SNSTopicArn:\n          $ref: \"#/components/schemas/SNSTopicArn\"\n        RoleArn:\n          $ref: \"#/components/schemas/RoleArn\"\n      description: \"The Amazon Simple Notification Service (Amazon SNS) topic to which\n        Amazon Textract publishes the completion status of an asynchronous\n        document operation, such as \u003ca\u003eStartDocumentTextDetection\u003c/a\u003e. \"\n    Pages:\n      type: array\n      items:\n        $ref: \"#/components/schemas/UInteger\"\n    Point:\n      type: object\n      properties:\n        X:\n          $ref: \"#/components/schemas/Float\"\n        Y:\n          $ref: \"#/components/schemas/Float\"\n      description: \u003cp\u003eThe X and Y coordinates of a point on a document page. The X and Y\n        values returned are ratios of the overall document page size. For\n        example, if the input document is 700 x 200 and the operation returns\n        X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on\n        the document page.\u003c/p\u003e \u003cp\u003eAn array of \u003ccode\u003ePoint\u003c/code\u003e objects,\n        \u003ccode\u003ePolygon\u003c/code\u003e, is returned by \u003ca\u003eDetectDocumentText\u003c/a\u003e.\n        \u003ccode\u003ePolygon\u003c/code\u003e represents a fine-grained polygon around detected\n        text. For more information, see Geometry in the Amazon Textract\n        Developer Guide. \u003c/p\u003e\n    RelationshipType:\n      type: string\n      enum:\n        - VALUE\n        - CHILD\n    Relationship:\n      type: object\n      properties:\n        Type:\n          $ref: \"#/components/schemas/RelationshipType\"\n        Ids:\n          $ref: \"#/components/schemas/IdList\"\n      description: \u003cp\u003eInformation about how blocks are related to each other. A\n        \u003ccode\u003eBlock\u003c/code\u003e object contains 0 or more \u003ccode\u003eRelation\u003c/code\u003e\n        objects in a list, \u003ccode\u003eRelationships\u003c/code\u003e. For more information, see\n        \u003ca\u003eBlock\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eThe \u003ccode\u003eType\u003c/code\u003e element provides the type of\n        the relationship for all blocks in the \u003ccode\u003eIDs\u003c/code\u003e array. \u003c/p\u003e\n    S3Bucket:\n      type: string\n      pattern: \"[0-9A-Za-z\\\\.\\\\-_]*\"\n      minLength: 3\n      maxLength: 255\n    S3ObjectName:\n      type: string\n      pattern: .*\\S.*\n      minLength: 1\n      maxLength: 1024\n    S3ObjectVersion:\n      type: string\n      pattern: .*\\S.*\n      minLength: 1\n      maxLength: 1024\n    Warning:\n      type: object\n      properties:\n        ErrorCode:\n          $ref: \"#/components/schemas/ErrorCode\"\n        Pages:\n          $ref: \"#/components/schemas/Pages\"\n      description: \"A warning about an issue that occurred during asynchronous text\n        analysis (\u003ca\u003eStartDocumentAnalysis\u003c/a\u003e) or asynchronous document-text\n        detection (\u003ca\u003eStartDocumentTextDetection\u003c/a\u003e). \"\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/amazonaws.com-textract-2018-06-27-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/amazonaws.com-textract-2018-06-27-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "buildRouter: build router: add route \"/\" (op \"DetectDocumentText\"): duplicate method \"POST\""
}