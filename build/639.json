{"File":{"__typename":"FileMatch","repository":{"name":"github.com/ccouzens/keycloak-openapi"},"file":{"name":"13.0-patched.json","path":"keycloak/13.0-patched.json","content":"{\n  \"openapi\": \"3.0.2\",\n  \"info\": {\n    \"title\": \"Keycloak Admin REST API\",\n    \"description\": \"This is a REST API reference for the Keycloak Admin\",\n    \"version\": \"1\"\n  },\n  \"paths\": {\n    \"/\": {\n      \"get\": {\n        \"tags\": [\n          \"Root\"\n        ],\n        \"summary\": \"Get themes, social providers, auth providers, and event listeners available on this server\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ServerInfoRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Import a realm   Imports a realm from a full representation of that realm.\",\n        \"requestBody\": {\n          \"description\": \"JSON representation of the realm\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RealmRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      }\n    },\n    \"/{id}/name\": {\n      \"get\": {\n        \"tags\": [\n          \"User Storage Provider\"\n        ],\n        \"summary\": \"Need this for admin console to display simple name of provider when displaying client detail   KEYCLOAK-4328\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Get the top-level representation of the realm   It will not include nested information like User and Client representations.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RealmRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RealmRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Delete the realm\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/admin-events\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Get admin events   Returns all admin events, or filters events based on URL query parameters listed here\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"authClient\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"authIpAddress\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"authRealm\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"authUser\",\n            \"description\": \"user id\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"dateFrom\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"dateTo\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"description\": \"Maximum results size (defaults to 100)\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"operationTypes\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"resourcePath\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"resourceTypes\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/AdminEventRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Delete all admin events\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/attack-detection/brute-force/users\": {\n      \"delete\": {\n        \"tags\": [\n          \"Attack Detection\"\n        ],\n        \"summary\": \"Clear any user login failures for all users   This can release temporary disabled users\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/attack-detection/brute-force/users/{userId}\": {\n      \"get\": {\n        \"tags\": [\n          \"Attack Detection\"\n        ],\n        \"summary\": \"Get status of a username in brute force detection\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Attack Detection\"\n        ],\n        \"summary\": \"Clear any user login failures for the user   This can release temporary disabled user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"userId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/authenticator-providers\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get authenticator providers   Returns a stream of authenticator providers.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": true\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/client-authenticator-providers\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get client authenticator providers   Returns a stream of client authenticator providers.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": true\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/config-description/{providerId}\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get authenticator provider’s configuration description\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AuthenticatorConfigInfoRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"providerId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/config/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get authenticator configuration\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AuthenticatorConfigRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Update authenticator configuration\",\n        \"requestBody\": {\n          \"description\": \"JSON describing new state of authenticator configuration\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/AuthenticatorConfigRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Delete authenticator configuration\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"Configuration id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/executions\": {\n      \"post\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Add new authentication execution\",\n        \"requestBody\": {\n          \"description\": \"JSON model describing authentication execution\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/AuthenticationExecutionRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/executions/{executionId}\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get Single Execution\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Delete execution\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"executionId\",\n          \"description\": \"Execution id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/executions/{executionId}/config\": {\n      \"post\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Update execution with new configuration\",\n        \"requestBody\": {\n          \"description\": \"JSON with new configuration\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/AuthenticatorConfigRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"executionId\",\n          \"description\": \"Execution id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/executions/{executionId}/lower-priority\": {\n      \"post\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Lower execution’s priority\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"executionId\",\n          \"description\": \"Execution id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/executions/{executionId}/raise-priority\": {\n      \"post\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Raise execution’s priority\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"executionId\",\n          \"description\": \"Execution id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/flows\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get authentication flows   Returns a stream of authentication flows.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/AuthenticationFlowRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Create a new authentication flow\",\n        \"requestBody\": {\n          \"description\": \"Authentication flow representation\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/AuthenticationFlowRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/flows/{flowAlias}/copy\": {\n      \"post\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Copy existing authentication flow under a new name   The new name is given as 'newName' attribute of the passed JSON object\",\n        \"requestBody\": {\n          \"description\": \"JSON containing 'newName' attribute\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"additionalProperties\": true\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"flowAlias\",\n          \"description\": \"Name of the existing authentication flow\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/flows/{flowAlias}/executions\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get authentication executions for a flow\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Update authentication executions of a Flow\",\n        \"requestBody\": {\n          \"description\": \"AuthenticationExecutionInfoRepresentation\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/AuthenticationExecutionInfoRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"flowAlias\",\n          \"description\": \"Flow alias\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/flows/{flowAlias}/executions/execution\": {\n      \"post\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Add new authentication execution to a flow\",\n        \"requestBody\": {\n          \"description\": \"New execution JSON data containing 'provider' attribute\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"additionalProperties\": true\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"flowAlias\",\n          \"description\": \"Alias of parent flow\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/flows/{flowAlias}/executions/flow\": {\n      \"post\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Add new flow with new execution to existing flow\",\n        \"requestBody\": {\n          \"description\": \"New authentication flow / execution JSON data containing 'alias', 'type', 'provider', and 'description' attributes\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"additionalProperties\": true\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"flowAlias\",\n          \"description\": \"Alias of parent authentication flow\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/flows/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get authentication flow for id\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AuthenticationFlowRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Update an authentication flow\",\n        \"requestBody\": {\n          \"description\": \"Authentication flow representation\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/AuthenticationFlowRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Delete an authentication flow\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"Flow id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/form-action-providers\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get form action providers   Returns a stream of form action providers.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": true\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/form-providers\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get form providers   Returns a stream of form providers.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": true\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/per-client-config-description\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get configuration descriptions for all clients\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/register-required-action\": {\n      \"post\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Register a new required actions\",\n        \"requestBody\": {\n          \"description\": \"JSON containing 'providerId', and 'name' attributes.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"additionalProperties\": true\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/required-actions\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get required actions   Returns a stream of required actions.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RequiredActionProviderRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/required-actions/{alias}\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get required action for alias\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RequiredActionProviderRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Update required action\",\n        \"requestBody\": {\n          \"description\": \"JSON describing new state of required action\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RequiredActionProviderRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Delete required action\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"alias\",\n          \"description\": \"Alias of required action\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/required-actions/{alias}/lower-priority\": {\n      \"post\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Lower required action’s priority\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"alias\",\n          \"description\": \"Alias of required action\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/required-actions/{alias}/raise-priority\": {\n      \"post\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Raise required action’s priority\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"alias\",\n          \"description\": \"Alias of required action\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/authentication/unregistered-required-actions\": {\n      \"get\": {\n        \"tags\": [\n          \"Authentication Management\"\n        ],\n        \"summary\": \"Get unregistered required actions   Returns a stream of unregistered required actions.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": true\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clear-keys-cache\": {\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Clear cache of external public keys (Public keys of clients or Identity providers)\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clear-realm-cache\": {\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Clear realm cache\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clear-user-cache\": {\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Clear user cache\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-description-converter\": {\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Base path for importing clients under this realm.\",\n        \"requestBody\": {\n          \"content\": {\n            \"text/plain\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ClientRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-policies/policies\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-policies/profiles\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-registration-policy/providers\": {\n      \"get\": {\n        \"tags\": [\n          \"Client Registration Policy\"\n        ],\n        \"summary\": \"Base path for retrieve providers with the configProperties properly filled\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ComponentTypeRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes\": {\n      \"get\": {\n        \"tags\": [\n          \"Client Scopes\"\n        ],\n        \"summary\": \"Get client scopes belonging to the realm   Returns a list of client scopes belonging to the realm\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ClientScopeRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Client Scopes\"\n        ],\n        \"summary\": \"Create a new client scope   Client Scope’s name must be unique!\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ClientScopeRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}\": {\n      \"get\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Get mapper by id\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Update the mapper\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Delete the mapper\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id1\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id2\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"Client Scopes\"\n        ],\n        \"summary\": \"Get representation of the client scope\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ClientScopeRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Client Scopes\"\n        ],\n        \"summary\": \"Update the client scope\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ClientScopeRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Client Scopes\"\n        ],\n        \"summary\": \"Delete the client scope\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client scope (not name)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id}/protocol-mappers/add-models\": {\n      \"post\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Create multiple mappers\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client scope (not name)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id}/protocol-mappers/models\": {\n      \"get\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Get mappers\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Create a mapper\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client scope (not name)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}\": {\n      \"get\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Get mappers by name for a specific protocol\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client scope (not name)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"protocol\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id}/scope-mappings\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get all scope mappings for the client\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/MappingsRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client scope (not name)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id}/scope-mappings/clients/{client}\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get the roles associated with a client’s scope   Returns roles for the client.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Add client-level roles to the client’s scope\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Remove client-level roles from the client’s scope.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client scope (not name)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"The available client-level roles   Returns the roles for the client that can be associated with the client’s scope\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client scope (not name)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get effective client roles   Returns the roles for the client that are associated with the client’s scope.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"if false, return roles with their attributes\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client scope (not name)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id}/scope-mappings/realm\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get realm-level roles associated with the client’s scope\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Add a set of realm-level roles to the client’s scope\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Remove a set of realm-level roles from the client’s scope\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client scope (not name)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id}/scope-mappings/realm/available\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get realm-level roles that are available to attach to this client’s scope\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client scope (not name)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-scopes/{id}/scope-mappings/realm/composite\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"if false, return roles with their attributes\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client scope (not name)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/client-session-stats\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Get client session stats   Returns a JSON map.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": true\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get clients belonging to the realm   Returns a list of clients belonging to the realm\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"clientId\",\n            \"description\": \"filter by clientId\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"description\": \"the first result\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"description\": \"the max results to return\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"search\",\n            \"description\": \"whether this is a search query or a getClientById query\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"viewableOnly\",\n            \"description\": \"filter clients that cannot be viewed in full by admin\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ClientRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Create a new client   Client’s client_id must be unique!\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ClientRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients-initial-access\": {\n      \"get\": {\n        \"tags\": [\n          \"Client Initial Access\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ClientInitialAccessPresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Client Initial Access\"\n        ],\n        \"summary\": \"Create a new initial access token.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ClientInitialAccessCreatePresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ClientInitialAccessPresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients-initial-access/{id}\": {\n      \"delete\": {\n        \"tags\": [\n          \"Client Initial Access\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id1}/protocol-mappers/models/{id2}\": {\n      \"get\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Get mapper by id\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Update the mapper\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Delete the mapper\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id1\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id2\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get representation of the client\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ClientRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Update the client\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ClientRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Delete the client\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/certificates/{attr}\": {\n      \"get\": {\n        \"tags\": [\n          \"Client Attribute Certificate\"\n        ],\n        \"summary\": \"Get key info\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CertificateRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"attr\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/certificates/{attr}/download\": {\n      \"post\": {\n        \"tags\": [\n          \"Client Attribute Certificate\"\n        ],\n        \"summary\": \"Get a keystore file for the client, containing private key and public certificate\",\n        \"requestBody\": {\n          \"description\": \"Keystore configuration as JSON\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/KeyStoreConfig\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/octet-stream\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"byte\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"attr\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/certificates/{attr}/generate\": {\n      \"post\": {\n        \"tags\": [\n          \"Client Attribute Certificate\"\n        ],\n        \"summary\": \"Generate a new certificate with new key pair\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CertificateRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"attr\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/certificates/{attr}/generate-and-download\": {\n      \"post\": {\n        \"tags\": [\n          \"Client Attribute Certificate\"\n        ],\n        \"summary\": \"Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.\",\n        \"requestBody\": {\n          \"description\": \"Keystore configuration as JSON\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/KeyStoreConfig\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/octet-stream\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"byte\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"attr\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/certificates/{attr}/upload\": {\n      \"post\": {\n        \"tags\": [\n          \"Client Attribute Certificate\"\n        ],\n        \"summary\": \"Upload certificate and eventually private key\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CertificateRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"attr\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/certificates/{attr}/upload-certificate\": {\n      \"post\": {\n        \"tags\": [\n          \"Client Attribute Certificate\"\n        ],\n        \"summary\": \"Upload only certificate, not private key\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CertificateRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"attr\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/client-secret\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get the client secret\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CredentialRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Generate a new secret for the client\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CredentialRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/default-client-scopes\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get default client scopes.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ClientScopeRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/default-client-scopes/{clientScopeId}\": {\n      \"put\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"clientScopeId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Create JSON with payload of example access token\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"scope\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"userId\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AccessToken\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/evaluate-scopes/generate-example-id-token\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Create JSON with payload of example id token\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"scope\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"userId\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IDToken\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Create JSON with payload of example user info\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"scope\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"userId\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/evaluate-scopes/protocol-mappers\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Return list of all protocol mappers, which will be used when generating tokens issued for particular client.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"scope\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ClientScopeEvaluateResource-ProtocolMapperEvaluationRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"scope\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"roleContainerId\",\n          \"description\": \"either realm name OR client UUID\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"scope\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"roleContainerId\",\n          \"description\": \"either realm name OR client UUID\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/installation/providers/{providerId}\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"providerId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/management/permissions\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Return object stating whether client Authorization permissions have been initialized or not and a reference\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Return object stating whether client Authorization permissions have been initialized or not and a reference\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/nodes\": {\n      \"post\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"additionalProperties\": true\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/nodes/{node}\": {\n      \"delete\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Unregister a cluster node from the client\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"node\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/offline-session-count\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get application offline session count   Returns a number of offline user sessions associated with this client   {      \\\"count\\\": number  }\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/offline-sessions\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get offline sessions for client   Returns a list of offline user sessions associated with this client\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"description\": \"Paging offset\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"description\": \"Maximum results size (defaults to 100)\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/UserSessionRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/optional-client-scopes\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get optional client scopes.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ClientScopeRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}\": {\n      \"put\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"clientScopeId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/protocol-mappers/add-models\": {\n      \"post\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Create multiple mappers\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/protocol-mappers/models\": {\n      \"get\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Get mappers\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Create a mapper\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}\": {\n      \"get\": {\n        \"tags\": [\n          \"Protocol Mappers\"\n        ],\n        \"summary\": \"Get mappers by name for a specific protocol\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"protocol\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/push-revocation\": {\n      \"post\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GlobalRequestResult\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/registration-access-token\": {\n      \"post\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Generate a new registration access token for the client\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ClientRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/roles\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Get all roles for the realm or client\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"search\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Create a new role for the realm or client\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RoleRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/roles/{role-name}\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Get a role by name\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Update a role by name\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RoleRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Delete a role by name\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"role’s name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/roles/{role-name}/composites\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Get composites of the role\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Add a composite to the role\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Remove roles from the role’s composite\",\n        \"requestBody\": {\n          \"description\": \"roles to remove\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"role’s name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Get client-level roles for the client that are in the role’s composite\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"role’s name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"clientUuid\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/roles/{role-name}/composites/realm\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Get realm-level roles of the role’s composite\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"role’s name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/roles/{role-name}/groups\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Returns a stream of groups that have the specified role name\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"if false, return a full representation of the {@code GroupRepresentation} objects.\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"description\": \"first result to return. Ignored if negative or {@code null}.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"description\": \"maximum number of results to return. Ignored if negative or {@code null}.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/GroupRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"the role name.\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/roles/{role-name}/management/permissions\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Return object stating whether role Authorization permissions have been initialized or not and a reference\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Return object stating whether role Authorization permissions have been initialized or not and a reference\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/roles/{role-name}/users\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Returns a stream of users that have the specified role name.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"description\": \"first result to return. Ignored if negative or {@code null}.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"description\": \"maximum number of results to return. Ignored if negative or {@code null}.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/UserRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"the role name.\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/scope-mappings\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get all scope mappings for the client\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/MappingsRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/scope-mappings/clients/{client}\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get the roles associated with a client’s scope   Returns roles for the client.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Add client-level roles to the client’s scope\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Remove client-level roles from the client’s scope.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/scope-mappings/clients/{client}/available\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"The available client-level roles   Returns the roles for the client that can be associated with the client’s scope\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/scope-mappings/clients/{client}/composite\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get effective client roles   Returns the roles for the client that are associated with the client’s scope.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"if false, return roles with their attributes\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/scope-mappings/realm\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get realm-level roles associated with the client’s scope\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Add a set of realm-level roles to the client’s scope\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Remove a set of realm-level roles from the client’s scope\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/scope-mappings/realm/available\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get realm-level roles that are available to attach to this client’s scope\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/scope-mappings/realm/composite\": {\n      \"get\": {\n        \"tags\": [\n          \"Scope Mappings\"\n        ],\n        \"summary\": \"Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"if false, return roles with their attributes\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/service-account-user\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get a user dedicated to the service account\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/UserRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/session-count\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get application session count   Returns a number of user sessions associated with this client   {      \\\"count\\\": number  }\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/test-nodes-available\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Test if registered cluster nodes are available   Tests availability by sending 'ping' request to all cluster nodes.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GlobalRequestResult\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/clients/{id}/user-sessions\": {\n      \"get\": {\n        \"tags\": [\n          \"Clients\"\n        ],\n        \"summary\": \"Get user sessions for client   Returns a list of user sessions associated with this client\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"description\": \"Paging offset\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"description\": \"Maximum results size (defaults to 100)\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/UserSessionRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"id of client (not client-id)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/components\": {\n      \"get\": {\n        \"tags\": [\n          \"Component\"\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"name\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"parent\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"type\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ComponentRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Component\"\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ComponentRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/components/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"Component\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ComponentRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Component\"\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ComponentRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Component\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/components/{id}/sub-component-types\": {\n      \"get\": {\n        \"tags\": [\n          \"Component\"\n        ],\n        \"summary\": \"List of subcomponent types that are available to configure for a particular parent component.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"type\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ComponentTypeRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/credential-registrators\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/default-default-client-scopes\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Get realm default client scopes.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ClientScopeRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/default-default-client-scopes/{clientScopeId}\": {\n      \"put\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"clientScopeId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/default-groups\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Get group hierarchy.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/GroupRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/default-groups/{groupId}\": {\n      \"put\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"groupId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/default-optional-client-scopes\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Get realm optional client scopes.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ClientScopeRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/default-optional-client-scopes/{clientScopeId}\": {\n      \"put\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"clientScopeId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/events\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Get events   Returns all events, or filters them based on URL query parameters listed here\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"client\",\n            \"description\": \"App or oauth client name\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"dateFrom\",\n            \"description\": \"From date\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"dateTo\",\n            \"description\": \"To date\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"description\": \"Paging offset\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"ipAddress\",\n            \"description\": \"IP address\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"description\": \"Maximum results size (defaults to 100)\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"type\",\n            \"description\": \"The types of events to return\",\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"user\",\n            \"description\": \"User id\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/EventRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Delete all events\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/events/config\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Get the events provider configuration   Returns JSON object with events provider configuration\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RealmEventsConfigRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Update the events provider   Change the events provider and/or its configuration\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RealmEventsConfigRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/group-by-path/{path}\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GroupRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"path\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups\": {\n      \"get\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Get group hierarchy.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"search\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/GroupRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"create or add a top level realm groupSet or create child.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/GroupRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/count\": {\n      \"get\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Returns the groups counts.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"search\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"top\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/GroupRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Update group, ignores subgroups.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/GroupRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/{id}/children\": {\n      \"post\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Set or create child.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/GroupRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/{id}/management/permissions\": {\n      \"get\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Return object stating whether client Authorization permissions have been initialized or not and a reference\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Return object stating whether client Authorization permissions have been initialized or not and a reference\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/{id}/members\": {\n      \"get\": {\n        \"tags\": [\n          \"Groups\"\n        ],\n        \"summary\": \"Get users   Returns a stream of users, filtered according to query parameters\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"Only return basic information (only guaranteed to return id, username, created, first and last name,\\n email, enabled state, email verification state, federation link, and access.\\n Note that it means that namely user attributes, required actions, and not before are not returned.)\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"description\": \"Pagination offset\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"description\": \"Maximum results size (defaults to 100)\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/UserRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/{id}/role-mappings\": {\n      \"get\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Get role mappings\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/MappingsRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/{id}/role-mappings/clients/{client}\": {\n      \"get\": {\n        \"tags\": [\n          \"Client Role Mappings\"\n        ],\n        \"summary\": \"Get client-level role mappings for the user, and the app\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Client Role Mappings\"\n        ],\n        \"summary\": \"Add client-level roles to the user role mapping\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Client Role Mappings\"\n        ],\n        \"summary\": \"Delete client-level roles from user role mapping\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/{id}/role-mappings/clients/{client}/available\": {\n      \"get\": {\n        \"tags\": [\n          \"Client Role Mappings\"\n        ],\n        \"summary\": \"Get available client-level roles that can be mapped to the user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/{id}/role-mappings/clients/{client}/composite\": {\n      \"get\": {\n        \"tags\": [\n          \"Client Role Mappings\"\n        ],\n        \"summary\": \"Get effective client-level role mappings   This recurses any composite roles\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"if false, return roles with their attributes\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/{id}/role-mappings/realm\": {\n      \"get\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Get realm-level role mappings\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Add realm-level role mappings to the user\",\n        \"requestBody\": {\n          \"description\": \"Roles to add\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Delete realm-level role mappings\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/{id}/role-mappings/realm/available\": {\n      \"get\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Get realm-level roles that can be mapped\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/groups/{id}/role-mappings/realm/composite\": {\n      \"get\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Get effective realm-level role mappings   This will recurse all composite roles to get the result.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"if false, return roles with their attributes\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/identity-provider/import-config\": {\n      \"post\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Import identity provider from uploaded JSON file\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/identity-provider/instances\": {\n      \"get\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Get identity providers\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/IdentityProviderRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Create a new identity provider\",\n        \"requestBody\": {\n          \"description\": \"JSON body\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IdentityProviderRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/identity-provider/instances/{alias}\": {\n      \"get\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Get the identity provider\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IdentityProviderRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Update the identity provider\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IdentityProviderRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Delete the identity provider\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"alias\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/identity-provider/instances/{alias}/export\": {\n      \"get\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Export public broker configuration for identity provider\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"format\",\n            \"description\": \"Format to use\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"alias\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/identity-provider/instances/{alias}/management/permissions\": {\n      \"get\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Return object stating whether client Authorization permissions have been initialized or not and a reference\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Return object stating whether client Authorization permissions have been initialized or not and a reference\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"alias\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/identity-provider/instances/{alias}/mapper-types\": {\n      \"get\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Get mapper types for identity provider\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"alias\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/identity-provider/instances/{alias}/mappers\": {\n      \"get\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Get mappers for identity provider\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/IdentityProviderMapperRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Add a mapper to identity provider\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IdentityProviderMapperRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"alias\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/identity-provider/instances/{alias}/mappers/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Get mapper by id for the identity provider\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IdentityProviderMapperRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Update a mapper for the identity provider\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IdentityProviderMapperRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Delete a mapper for the identity provider\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"alias\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"Mapper id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/identity-provider/providers/{provider_id}\": {\n      \"get\": {\n        \"tags\": [\n          \"Identity Providers\"\n        ],\n        \"summary\": \"Get identity providers\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"provider_id\",\n          \"description\": \"Provider id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/keys\": {\n      \"get\": {\n        \"tags\": [\n          \"Key\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/KeysMetadataRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/ldap-server-capabilities\": {\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Get LDAP supported extensions.\",\n        \"requestBody\": {\n          \"description\": \"LDAP configuration\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/TestLdapConnectionRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/localization\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/localization/{locale}\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Import localization from uploaded JSON file\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"patch\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"additionalProperties\": true\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"locale\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/localization/{locale}/{key}\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"text/plain\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"locale\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"key\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/logout-all\": {\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Removes all user sessions.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/partial-export\": {\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Partial export of existing realm into a JSON file.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"exportClients\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"exportGroupsAndRoles\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RealmRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/partialImport\": {\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Partial import from a JSON file to an existing realm.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/PartialImportRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/push-revocation\": {\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Push the realm’s revocation policy to any client that has an admin url associated with it.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Get all roles for the realm or client\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"search\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Create a new role for the realm or client\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RoleRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles-by-id/{role-id}\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles (by ID)\"\n        ],\n        \"summary\": \"Get a specific role’s representation\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Roles (by ID)\"\n        ],\n        \"summary\": \"Update the role\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RoleRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Roles (by ID)\"\n        ],\n        \"summary\": \"Delete the role\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-id\",\n          \"description\": \"id of role\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles-by-id/{role-id}/composites\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles (by ID)\"\n        ],\n        \"summary\": \"Get role’s children   Returns a set of role’s children provided the role is a composite.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Roles (by ID)\"\n        ],\n        \"summary\": \"Make the role a composite role by associating some child roles\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Roles (by ID)\"\n        ],\n        \"summary\": \"Remove a set of roles from the role’s composite\",\n        \"requestBody\": {\n          \"description\": \"A set of roles to be removed\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-id\",\n          \"description\": \"Role id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles (by ID)\"\n        ],\n        \"summary\": \"Get client-level roles for the client that are in the role’s composite\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"clientUuid\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles-by-id/{role-id}/composites/realm\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles (by ID)\"\n        ],\n        \"summary\": \"Get realm-level roles that are in the role’s composite\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles-by-id/{role-id}/management/permissions\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles (by ID)\"\n        ],\n        \"summary\": \"Return object stating whether role Authoirzation permissions have been initialized or not and a reference\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Roles (by ID)\"\n        ],\n        \"summary\": \"Return object stating whether role Authoirzation permissions have been initialized or not and a reference\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles/{role-name}\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Get a role by name\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Update a role by name\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/RoleRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Delete a role by name\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"role’s name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles/{role-name}/composites\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Get composites of the role\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Add a composite to the role\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Remove roles from the role’s composite\",\n        \"requestBody\": {\n          \"description\": \"roles to remove\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"role’s name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles/{role-name}/composites/clients/{clientUuid}\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Get client-level roles for the client that are in the role’s composite\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"role’s name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"clientUuid\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles/{role-name}/composites/realm\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Get realm-level roles of the role’s composite\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"role’s name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles/{role-name}/groups\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Returns a stream of groups that have the specified role name\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"if false, return a full representation of the {@code GroupRepresentation} objects.\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"description\": \"first result to return. Ignored if negative or {@code null}.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"description\": \"maximum number of results to return. Ignored if negative or {@code null}.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/GroupRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"the role name.\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles/{role-name}/management/permissions\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Return object stating whether role Authorization permissions have been initialized or not and a reference\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Return object stating whether role Authorization permissions have been initialized or not and a reference\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/roles/{role-name}/users\": {\n      \"get\": {\n        \"tags\": [\n          \"Roles\"\n        ],\n        \"summary\": \"Returns a stream of users that have the specified role name.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"description\": \"first result to return. Ignored if negative or {@code null}.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"description\": \"maximum number of results to return. Ignored if negative or {@code null}.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/UserRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"role-name\",\n          \"description\": \"the role name.\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/sessions/{session}\": {\n      \"delete\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Remove a specific user session.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"session\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/testLDAPConnection\": {\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"summary\": \"Test LDAP connection\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/TestLdapConnectionRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/testSMTPConnection\": {\n      \"post\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"additionalProperties\": true\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/user-storage/{id}/name\": {\n      \"get\": {\n        \"tags\": [\n          \"User Storage Provider\"\n        ],\n        \"summary\": \"Need this for admin console to display simple name of provider when displaying user detail   KEYCLOAK-4328\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/user-storage/{id}/remove-imported-users\": {\n      \"post\": {\n        \"tags\": [\n          \"User Storage Provider\"\n        ],\n        \"summary\": \"Remove imported users\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/user-storage/{id}/sync\": {\n      \"post\": {\n        \"tags\": [\n          \"User Storage Provider\"\n        ],\n        \"summary\": \"Trigger sync of users   Action can be \\\"triggerFullSync\\\" or \\\"triggerChangedUsersSync\\\"\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"action\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/SynchronizationResult\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/user-storage/{id}/unlink-users\": {\n      \"post\": {\n        \"tags\": [\n          \"User Storage Provider\"\n        ],\n        \"summary\": \"Unlink imported users from a storage provider\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/user-storage/{parentId}/mappers/{id}/sync\": {\n      \"post\": {\n        \"tags\": [\n          \"User Storage Provider\"\n        ],\n        \"summary\": \"Trigger sync of mapper data related to ldap mapper (roles, groups, …​)   direction is \\\"fedToKeycloak\\\" or \\\"keycloakToFed\\\"\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"direction\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/SynchronizationResult\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"parentId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Get users   Returns a stream of users, filtered according to query parameters\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"Boolean which defines whether brief representations are returned (default: false)\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"email\",\n            \"description\": \"A String contained in email, or the complete email, if param \\\"exact\\\" is true\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"emailVerified\",\n            \"description\": \"whether the email has been verified\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"enabled\",\n            \"description\": \"Boolean representing if user is enabled or not\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"exact\",\n            \"description\": \"Boolean which defines whether the params \\\"last\\\", \\\"first\\\", \\\"email\\\" and \\\"username\\\" must match exactly\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"description\": \"Pagination offset\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"firstName\",\n            \"description\": \"A String contained in firstName, or the complete firstName, if param \\\"exact\\\" is true\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"idpAlias\",\n            \"description\": \"The alias of an Identity Provider linked to the user\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"idpUserId\",\n            \"description\": \"The userId at an Identity Provider linked to the user\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"lastName\",\n            \"description\": \"A String contained in lastName, or the complete lastName, if param \\\"exact\\\" is true\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"description\": \"Maximum results size (defaults to 100)\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"search\",\n            \"description\": \"A String contained in username, first or last name, or email\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"username\",\n            \"description\": \"A String contained in username, or the complete username, if param \\\"exact\\\" is true\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/UserRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Create a new user   Username must be unique.\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UserRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users-management-permissions\": {\n      \"get\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Realms Admin\"\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ManagementPermissionReference\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/count\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Returns the number of users that match the given criteria.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"email\",\n            \"description\": \"email filter\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"emailVerified\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"firstName\",\n            \"description\": \"first name filter\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"lastName\",\n            \"description\": \"last name filter\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"search\",\n            \"description\": \"arbitrary search string for all the fields below\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"username\",\n            \"description\": \"username filter\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"integer\",\n                  \"format\": \"int32\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Get representation of the user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/UserRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"put\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Update the user\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/UserRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Delete the user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/configured-user-storage-credential-types\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Return credential types, which are provided by the user storage where user is stored.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/consents\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Get consents granted by the user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": true\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/consents/{client}\": {\n      \"delete\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Revoke consent and offline tokens for particular client from user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"description\": \"Client id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/credentials\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/CredentialRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/credentials/{credentialId}\": {\n      \"delete\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Remove a credential for a user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"credentialId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}\": {\n      \"post\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Move a credential to a position behind another credential\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"credentialId\",\n          \"description\": \"The credential to move\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"newPreviousCredentialId\",\n          \"description\": \"The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/credentials/{credentialId}/moveToFirst\": {\n      \"post\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Move a credential to a first position in the credentials list of the user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"credentialId\",\n          \"description\": \"The credential to move\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/credentials/{credentialId}/userLabel\": {\n      \"put\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Update a credential label for a user\",\n        \"requestBody\": {\n          \"content\": {\n            \"text/plain\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"credentialId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/disable-credential-types\": {\n      \"put\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Disable all credentials for a user of a specific type\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/execute-actions-email\": {\n      \"put\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Send a update account email to the user   An email contains a link the user can click to perform a set of required actions.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"client_id\",\n            \"description\": \"Client id\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"lifespan\",\n            \"description\": \"Number of seconds after which the generated token expires\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"redirect_uri\",\n            \"description\": \"Redirect uri\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"required actions the user needs to complete\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/federated-identity\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Get social logins associated with the user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/FederatedIdentityRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/federated-identity/{provider}\": {\n      \"post\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Add a social login provider to the user\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/FederatedIdentityRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Remove a social login provider from user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"provider\",\n          \"description\": \"Social login provider id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/groups\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"first\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"max\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"search\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/GroupRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/groups/count\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"search\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/groups/{groupId}\": {\n      \"put\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"groupId\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/impersonation\": {\n      \"post\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Impersonate the user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/logout\": {\n      \"post\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Remove all user sessions associated with the user   Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/offline-sessions/{clientUuid}\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Get offline sessions associated with the user and client\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/UserSessionRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"clientUuid\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/reset-password\": {\n      \"put\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Set up a new password for the user.\",\n        \"requestBody\": {\n          \"description\": \"The representation must contain a rawPassword with the plain-text password\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CredentialRepresentation\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/role-mappings\": {\n      \"get\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Get role mappings\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/MappingsRepresentation\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/role-mappings/clients/{client}\": {\n      \"get\": {\n        \"tags\": [\n          \"Client Role Mappings\"\n        ],\n        \"summary\": \"Get client-level role mappings for the user, and the app\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Client Role Mappings\"\n        ],\n        \"summary\": \"Add client-level roles to the user role mapping\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Client Role Mappings\"\n        ],\n        \"summary\": \"Delete client-level roles from user role mapping\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/role-mappings/clients/{client}/available\": {\n      \"get\": {\n        \"tags\": [\n          \"Client Role Mappings\"\n        ],\n        \"summary\": \"Get available client-level roles that can be mapped to the user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/role-mappings/clients/{client}/composite\": {\n      \"get\": {\n        \"tags\": [\n          \"Client Role Mappings\"\n        ],\n        \"summary\": \"Get effective client-level role mappings   This recurses any composite roles\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"if false, return roles with their attributes\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"client\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/role-mappings/realm\": {\n      \"get\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Get realm-level role mappings\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Add realm-level role mappings to the user\",\n        \"requestBody\": {\n          \"description\": \"Roles to add\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Delete realm-level role mappings\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/role-mappings/realm/available\": {\n      \"get\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Get realm-level roles that can be mapped\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/role-mappings/realm/composite\": {\n      \"get\": {\n        \"tags\": [\n          \"Role Mapper\"\n        ],\n        \"summary\": \"Get effective realm-level role mappings   This will recurse all composite roles to get the result.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"briefRepresentation\",\n            \"description\": \"if false, return roles with their attributes\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/RoleRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/send-verify-email\": {\n      \"put\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Send an email-verification email to the user   An email contains a link the user can click to verify their email address.\",\n        \"parameters\": [\n          {\n            \"in\": \"query\",\n            \"name\": \"client_id\",\n            \"description\": \"Client id\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          },\n          {\n            \"in\": \"query\",\n            \"name\": \"redirect_uri\",\n            \"description\": \"Redirect uri\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"style\": \"form\"\n          }\n        ],\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\"\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    },\n    \"/{realm}/users/{id}/sessions\": {\n      \"get\": {\n        \"tags\": [\n          \"Users\"\n        ],\n        \"summary\": \"Get sessions associated with the user\",\n        \"responses\": {\n          \"2XX\": {\n            \"description\": \"success\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/UserSessionRepresentation\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"realm\",\n          \"description\": \"realm name (not id!)\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        },\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"description\": \"User id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"style\": \"simple\"\n        }\n      ]\n    }\n  },\n  \"components\": {\n    \"securitySchemes\": {\n      \"access_token\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\",\n        \"bearerFormat\": null\n      }\n    },\n    \"schemas\": {\n      \"AccessToken\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"acr\": {\n            \"type\": \"string\"\n          },\n          \"address\": {\n            \"$ref\": \"#/components/schemas/AddressClaimSet\"\n          },\n          \"allowed-origins\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"at_hash\": {\n            \"type\": \"string\"\n          },\n          \"auth_time\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"authorization\": {\n            \"$ref\": \"#/components/schemas/AccessToken-Authorization\"\n          },\n          \"azp\": {\n            \"type\": \"string\"\n          },\n          \"birthdate\": {\n            \"type\": \"string\"\n          },\n          \"c_hash\": {\n            \"type\": \"string\"\n          },\n          \"category\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"INTERNAL\",\n              \"ACCESS\",\n              \"ID\",\n              \"ADMIN\",\n              \"USERINFO\",\n              \"LOGOUT\"\n            ]\n          },\n          \"claims_locales\": {\n            \"type\": \"string\"\n          },\n          \"cnf\": {\n            \"$ref\": \"#/components/schemas/AccessToken-CertConf\"\n          },\n          \"email\": {\n            \"type\": \"string\"\n          },\n          \"email_verified\": {\n            \"type\": \"boolean\"\n          },\n          \"exp\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"family_name\": {\n            \"type\": \"string\"\n          },\n          \"gender\": {\n            \"type\": \"string\"\n          },\n          \"given_name\": {\n            \"type\": \"string\"\n          },\n          \"iat\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"iss\": {\n            \"type\": \"string\"\n          },\n          \"jti\": {\n            \"type\": \"string\"\n          },\n          \"locale\": {\n            \"type\": \"string\"\n          },\n          \"middle_name\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"nbf\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"nickname\": {\n            \"type\": \"string\"\n          },\n          \"nonce\": {\n            \"type\": \"string\"\n          },\n          \"otherClaims\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"phone_number\": {\n            \"type\": \"string\"\n          },\n          \"phone_number_verified\": {\n            \"type\": \"boolean\"\n          },\n          \"picture\": {\n            \"type\": \"string\"\n          },\n          \"preferred_username\": {\n            \"type\": \"string\"\n          },\n          \"profile\": {\n            \"type\": \"string\"\n          },\n          \"realm_access\": {\n            \"$ref\": \"#/components/schemas/AccessToken-Access\"\n          },\n          \"s_hash\": {\n            \"type\": \"string\"\n          },\n          \"scope\": {\n            \"type\": \"string\"\n          },\n          \"session_state\": {\n            \"type\": \"string\"\n          },\n          \"sub\": {\n            \"type\": \"string\"\n          },\n          \"trusted-certs\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"typ\": {\n            \"type\": \"string\"\n          },\n          \"updated_at\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"website\": {\n            \"type\": \"string\"\n          },\n          \"zoneinfo\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"AccessToken-Access\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"roles\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"verify_caller\": {\n            \"type\": \"boolean\"\n          }\n        }\n      },\n      \"AccessToken-Authorization\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"permissions\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Permission\"\n            }\n          }\n        }\n      },\n      \"AccessToken-CertConf\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"x5t#S256\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"AddressClaimSet\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"country\": {\n            \"type\": \"string\"\n          },\n          \"formatted\": {\n            \"type\": \"string\"\n          },\n          \"locality\": {\n            \"type\": \"string\"\n          },\n          \"postal_code\": {\n            \"type\": \"string\"\n          },\n          \"region\": {\n            \"type\": \"string\"\n          },\n          \"street_address\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"AdminEventRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"authDetails\": {\n            \"$ref\": \"#/components/schemas/AuthDetailsRepresentation\"\n          },\n          \"error\": {\n            \"type\": \"string\"\n          },\n          \"operationType\": {\n            \"type\": \"string\"\n          },\n          \"realmId\": {\n            \"type\": \"string\"\n          },\n          \"representation\": {\n            \"type\": \"string\"\n          },\n          \"resourcePath\": {\n            \"type\": \"string\"\n          },\n          \"resourceType\": {\n            \"type\": \"string\"\n          },\n          \"time\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          }\n        }\n      },\n      \"AuthDetailsRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"clientId\": {\n            \"type\": \"string\"\n          },\n          \"ipAddress\": {\n            \"type\": \"string\"\n          },\n          \"realmId\": {\n            \"type\": \"string\"\n          },\n          \"userId\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"AuthenticationExecutionExportRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"authenticator\": {\n            \"type\": \"string\"\n          },\n          \"authenticatorConfig\": {\n            \"type\": \"string\"\n          },\n          \"authenticatorFlow\": {\n            \"type\": \"boolean\"\n          },\n          \"flowAlias\": {\n            \"type\": \"string\"\n          },\n          \"priority\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"requirement\": {\n            \"type\": \"string\"\n          },\n          \"userSetupAllowed\": {\n            \"type\": \"boolean\"\n          }\n        }\n      },\n      \"AuthenticationExecutionInfoRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"alias\": {\n            \"type\": \"string\"\n          },\n          \"authenticationConfig\": {\n            \"type\": \"string\"\n          },\n          \"authenticationFlow\": {\n            \"type\": \"boolean\"\n          },\n          \"configurable\": {\n            \"type\": \"boolean\"\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"displayName\": {\n            \"type\": \"string\"\n          },\n          \"flowId\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"index\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"level\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"providerId\": {\n            \"type\": \"string\"\n          },\n          \"requirement\": {\n            \"type\": \"string\"\n          },\n          \"requirementChoices\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"AuthenticationExecutionRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"authenticator\": {\n            \"type\": \"string\"\n          },\n          \"authenticatorConfig\": {\n            \"type\": \"string\"\n          },\n          \"authenticatorFlow\": {\n            \"type\": \"boolean\"\n          },\n          \"flowId\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"parentFlow\": {\n            \"type\": \"string\"\n          },\n          \"priority\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"requirement\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"AuthenticationFlowRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"alias\": {\n            \"type\": \"string\"\n          },\n          \"authenticationExecutions\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/AuthenticationExecutionExportRepresentation\"\n            }\n          },\n          \"builtIn\": {\n            \"type\": \"boolean\"\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"providerId\": {\n            \"type\": \"string\"\n          },\n          \"topLevel\": {\n            \"type\": \"boolean\"\n          }\n        }\n      },\n      \"AuthenticatorConfigInfoRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"helpText\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"properties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ConfigPropertyRepresentation\"\n            }\n          },\n          \"providerId\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"AuthenticatorConfigRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"alias\": {\n            \"type\": \"string\"\n          },\n          \"config\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"id\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"CertificateRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"certificate\": {\n            \"type\": \"string\"\n          },\n          \"kid\": {\n            \"type\": \"string\"\n          },\n          \"privateKey\": {\n            \"type\": \"string\"\n          },\n          \"publicKey\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ClientInitialAccessCreatePresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"count\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"expiration\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          }\n        }\n      },\n      \"ClientInitialAccessPresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"count\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"expiration\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"remainingCount\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"timestamp\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"token\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ClientMappingsRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"client\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"mappings\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/RoleRepresentation\"\n            }\n          }\n        }\n      },\n      \"ClientPoliciesRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"policies\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ClientPolicyRepresentation\"\n            }\n          }\n        }\n      },\n      \"ClientPolicyRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"builtin\": {\n            \"type\": \"boolean\"\n          },\n          \"conditions\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\"\n            }\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"enable\": {\n            \"type\": \"boolean\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"profiles\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"ClientProfileRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"builtin\": {\n            \"type\": \"boolean\"\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"executors\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\"\n            }\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ClientProfilesRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"profiles\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ClientProfileRepresentation\"\n            }\n          }\n        }\n      },\n      \"ClientRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"access\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"adminUrl\": {\n            \"type\": \"string\"\n          },\n          \"alwaysDisplayInConsole\": {\n            \"type\": \"boolean\"\n          },\n          \"attributes\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"authenticationFlowBindingOverrides\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"authorizationServicesEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"authorizationSettings\": {\n            \"$ref\": \"#/components/schemas/ResourceServerRepresentation\"\n          },\n          \"baseUrl\": {\n            \"type\": \"string\"\n          },\n          \"bearerOnly\": {\n            \"type\": \"boolean\"\n          },\n          \"clientAuthenticatorType\": {\n            \"type\": \"string\"\n          },\n          \"clientId\": {\n            \"type\": \"string\"\n          },\n          \"consentRequired\": {\n            \"type\": \"boolean\"\n          },\n          \"defaultClientScopes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"directAccessGrantsEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"enabled\": {\n            \"type\": \"boolean\"\n          },\n          \"frontchannelLogout\": {\n            \"type\": \"boolean\"\n          },\n          \"fullScopeAllowed\": {\n            \"type\": \"boolean\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"implicitFlowEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"nodeReRegistrationTimeout\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"notBefore\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"oauth2DeviceAuthorizationGrantEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"optionalClientScopes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"origin\": {\n            \"type\": \"string\"\n          },\n          \"protocol\": {\n            \"type\": \"string\"\n          },\n          \"protocolMappers\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n            }\n          },\n          \"publicClient\": {\n            \"type\": \"boolean\"\n          },\n          \"redirectUris\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"registeredNodes\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"registrationAccessToken\": {\n            \"type\": \"string\"\n          },\n          \"rootUrl\": {\n            \"type\": \"string\"\n          },\n          \"secret\": {\n            \"type\": \"string\"\n          },\n          \"serviceAccountsEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"standardFlowEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"surrogateAuthRequired\": {\n            \"type\": \"boolean\"\n          },\n          \"webOrigins\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"ClientScopeEvaluateResource-ProtocolMapperEvaluationRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"containerId\": {\n            \"type\": \"string\"\n          },\n          \"containerName\": {\n            \"type\": \"string\"\n          },\n          \"containerType\": {\n            \"type\": \"string\"\n          },\n          \"mapperId\": {\n            \"type\": \"string\"\n          },\n          \"mapperName\": {\n            \"type\": \"string\"\n          },\n          \"protocolMapper\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ClientScopeRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"attributes\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"protocol\": {\n            \"type\": \"string\"\n          },\n          \"protocolMappers\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n            }\n          }\n        }\n      },\n      \"ComponentExportRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"config\": {\n            \"$ref\": \"#/components/schemas/MultivaluedHashMap\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"providerId\": {\n            \"type\": \"string\"\n          },\n          \"subComponents\": {\n            \"$ref\": \"#/components/schemas/MultivaluedHashMap\"\n          },\n          \"subType\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ComponentRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"config\": {\n            \"$ref\": \"#/components/schemas/MultivaluedHashMap\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"parentId\": {\n            \"type\": \"string\"\n          },\n          \"providerId\": {\n            \"type\": \"string\"\n          },\n          \"providerType\": {\n            \"type\": \"string\"\n          },\n          \"subType\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ComponentTypeRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"helpText\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"metadata\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"properties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ConfigPropertyRepresentation\"\n            }\n          }\n        }\n      },\n      \"ConfigPropertyRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"defaultValue\": {\n            \"type\": \"object\"\n          },\n          \"helpText\": {\n            \"type\": \"string\"\n          },\n          \"label\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"options\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"secret\": {\n            \"type\": \"boolean\"\n          },\n          \"type\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"CredentialRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"createdDate\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"credentialData\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"priority\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"secretData\": {\n            \"type\": \"string\"\n          },\n          \"temporary\": {\n            \"type\": \"boolean\"\n          },\n          \"type\": {\n            \"type\": \"string\"\n          },\n          \"userLabel\": {\n            \"type\": \"string\"\n          },\n          \"value\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"EventRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"clientId\": {\n            \"type\": \"string\"\n          },\n          \"details\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"error\": {\n            \"type\": \"string\"\n          },\n          \"ipAddress\": {\n            \"type\": \"string\"\n          },\n          \"realmId\": {\n            \"type\": \"string\"\n          },\n          \"sessionId\": {\n            \"type\": \"string\"\n          },\n          \"time\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"type\": {\n            \"type\": \"string\"\n          },\n          \"userId\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"FederatedIdentityRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"identityProvider\": {\n            \"type\": \"string\"\n          },\n          \"userId\": {\n            \"type\": \"string\"\n          },\n          \"userName\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"GlobalRequestResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"failedRequests\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"successRequests\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"GroupRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"access\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"attributes\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"clientRoles\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"path\": {\n            \"type\": \"string\"\n          },\n          \"realmRoles\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"subGroups\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/GroupRepresentation\"\n            }\n          }\n        }\n      },\n      \"IDToken\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"acr\": {\n            \"type\": \"string\"\n          },\n          \"address\": {\n            \"$ref\": \"#/components/schemas/AddressClaimSet\"\n          },\n          \"at_hash\": {\n            \"type\": \"string\"\n          },\n          \"auth_time\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"azp\": {\n            \"type\": \"string\"\n          },\n          \"birthdate\": {\n            \"type\": \"string\"\n          },\n          \"c_hash\": {\n            \"type\": \"string\"\n          },\n          \"category\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"INTERNAL\",\n              \"ACCESS\",\n              \"ID\",\n              \"ADMIN\",\n              \"USERINFO\",\n              \"LOGOUT\"\n            ]\n          },\n          \"claims_locales\": {\n            \"type\": \"string\"\n          },\n          \"email\": {\n            \"type\": \"string\"\n          },\n          \"email_verified\": {\n            \"type\": \"boolean\"\n          },\n          \"exp\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"family_name\": {\n            \"type\": \"string\"\n          },\n          \"gender\": {\n            \"type\": \"string\"\n          },\n          \"given_name\": {\n            \"type\": \"string\"\n          },\n          \"iat\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"iss\": {\n            \"type\": \"string\"\n          },\n          \"jti\": {\n            \"type\": \"string\"\n          },\n          \"locale\": {\n            \"type\": \"string\"\n          },\n          \"middle_name\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"nbf\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"nickname\": {\n            \"type\": \"string\"\n          },\n          \"nonce\": {\n            \"type\": \"string\"\n          },\n          \"otherClaims\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"phone_number\": {\n            \"type\": \"string\"\n          },\n          \"phone_number_verified\": {\n            \"type\": \"boolean\"\n          },\n          \"picture\": {\n            \"type\": \"string\"\n          },\n          \"preferred_username\": {\n            \"type\": \"string\"\n          },\n          \"profile\": {\n            \"type\": \"string\"\n          },\n          \"s_hash\": {\n            \"type\": \"string\"\n          },\n          \"session_state\": {\n            \"type\": \"string\"\n          },\n          \"sub\": {\n            \"type\": \"string\"\n          },\n          \"typ\": {\n            \"type\": \"string\"\n          },\n          \"updated_at\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"website\": {\n            \"type\": \"string\"\n          },\n          \"zoneinfo\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"IdentityProviderMapperRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"config\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"identityProviderAlias\": {\n            \"type\": \"string\"\n          },\n          \"identityProviderMapper\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"IdentityProviderRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"addReadTokenRoleOnCreate\": {\n            \"type\": \"boolean\"\n          },\n          \"alias\": {\n            \"type\": \"string\"\n          },\n          \"config\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"displayName\": {\n            \"type\": \"string\"\n          },\n          \"enabled\": {\n            \"type\": \"boolean\"\n          },\n          \"firstBrokerLoginFlowAlias\": {\n            \"type\": \"string\"\n          },\n          \"internalId\": {\n            \"type\": \"string\"\n          },\n          \"linkOnly\": {\n            \"type\": \"boolean\"\n          },\n          \"postBrokerLoginFlowAlias\": {\n            \"type\": \"string\"\n          },\n          \"providerId\": {\n            \"type\": \"string\"\n          },\n          \"storeToken\": {\n            \"type\": \"boolean\"\n          },\n          \"trustEmail\": {\n            \"type\": \"boolean\"\n          }\n        }\n      },\n      \"KeyStoreConfig\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"format\": {\n            \"type\": \"string\"\n          },\n          \"keyAlias\": {\n            \"type\": \"string\"\n          },\n          \"keyPassword\": {\n            \"type\": \"string\"\n          },\n          \"realmAlias\": {\n            \"type\": \"string\"\n          },\n          \"realmCertificate\": {\n            \"type\": \"boolean\"\n          },\n          \"storePassword\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"KeysMetadataRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"active\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"keys\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/KeysMetadataRepresentation-KeyMetadataRepresentation\"\n            }\n          }\n        }\n      },\n      \"KeysMetadataRepresentation-KeyMetadataRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"algorithm\": {\n            \"type\": \"string\"\n          },\n          \"certificate\": {\n            \"type\": \"string\"\n          },\n          \"kid\": {\n            \"type\": \"string\"\n          },\n          \"providerId\": {\n            \"type\": \"string\"\n          },\n          \"providerPriority\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"publicKey\": {\n            \"type\": \"string\"\n          },\n          \"status\": {\n            \"type\": \"string\"\n          },\n          \"type\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ManagementPermissionReference\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"enabled\": {\n            \"type\": \"boolean\"\n          },\n          \"resource\": {\n            \"type\": \"string\"\n          },\n          \"scopePermissions\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          }\n        }\n      },\n      \"MappingsRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"clientMappings\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"realmMappings\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/RoleRepresentation\"\n            }\n          }\n        }\n      },\n      \"MemoryInfoRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"free\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"freeFormated\": {\n            \"type\": \"string\"\n          },\n          \"freePercentage\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"total\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"totalFormated\": {\n            \"type\": \"string\"\n          },\n          \"used\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"usedFormated\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"MultivaluedHashMap\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"empty\": {\n            \"type\": \"boolean\"\n          },\n          \"loadFactor\": {\n            \"type\": \"number\",\n            \"format\": \"float\"\n          },\n          \"threshold\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          }\n        }\n      },\n      \"PartialImportRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"clients\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ClientRepresentation\"\n            }\n          },\n          \"groups\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/GroupRepresentation\"\n            }\n          },\n          \"identityProviders\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IdentityProviderRepresentation\"\n            }\n          },\n          \"ifResourceExists\": {\n            \"type\": \"string\"\n          },\n          \"policy\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"SKIP\",\n              \"OVERWRITE\",\n              \"FAIL\"\n            ]\n          },\n          \"roles\": {\n            \"$ref\": \"#/components/schemas/RolesRepresentation\"\n          },\n          \"users\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/UserRepresentation\"\n            }\n          }\n        }\n      },\n      \"PasswordPolicyTypeRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"configType\": {\n            \"type\": \"string\"\n          },\n          \"defaultValue\": {\n            \"type\": \"string\"\n          },\n          \"displayName\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"multipleSupported\": {\n            \"type\": \"boolean\"\n          }\n        }\n      },\n      \"Permission\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"claims\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"rsid\": {\n            \"type\": \"string\"\n          },\n          \"rsname\": {\n            \"type\": \"string\"\n          },\n          \"scopes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"PolicyRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"config\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"decisionStrategy\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"AFFIRMATIVE\",\n              \"UNANIMOUS\",\n              \"CONSENSUS\"\n            ]\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"logic\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"POSITIVE\",\n              \"NEGATIVE\"\n            ]\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"owner\": {\n            \"type\": \"string\"\n          },\n          \"policies\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"resources\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"resourcesData\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ResourceRepresentation\"\n            }\n          },\n          \"scopes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"scopesData\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ScopeRepresentation\"\n            }\n          },\n          \"type\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ProfileInfoRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"disabledFeatures\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"experimentalFeatures\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"previewFeatures\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"ProtocolMapperRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"config\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"protocol\": {\n            \"type\": \"string\"\n          },\n          \"protocolMapper\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ProviderRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"operationalInfo\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"order\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          }\n        }\n      },\n      \"RealmEventsConfigRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"adminEventsDetailsEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"adminEventsEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"enabledEventTypes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"eventsEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"eventsExpiration\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"eventsListeners\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"RealmRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"accessCodeLifespan\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"accessCodeLifespanLogin\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"accessCodeLifespanUserAction\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"accessTokenLifespan\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"accessTokenLifespanForImplicitFlow\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"accountTheme\": {\n            \"type\": \"string\"\n          },\n          \"actionTokenGeneratedByAdminLifespan\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"actionTokenGeneratedByUserLifespan\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"adminEventsDetailsEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"adminEventsEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"adminTheme\": {\n            \"type\": \"string\"\n          },\n          \"attributes\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"authenticationFlows\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/AuthenticationFlowRepresentation\"\n            }\n          },\n          \"authenticatorConfig\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/AuthenticatorConfigRepresentation\"\n            }\n          },\n          \"browserFlow\": {\n            \"type\": \"string\"\n          },\n          \"browserSecurityHeaders\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"bruteForceProtected\": {\n            \"type\": \"boolean\"\n          },\n          \"clientAuthenticationFlow\": {\n            \"type\": \"string\"\n          },\n          \"clientOfflineSessionIdleTimeout\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"clientOfflineSessionMaxLifespan\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"clientPolicies\": {\n            \"$ref\": \"#/components/schemas/ClientPoliciesRepresentation\"\n          },\n          \"clientProfiles\": {\n            \"$ref\": \"#/components/schemas/ClientProfilesRepresentation\"\n          },\n          \"clientScopeMappings\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"clientScopes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ClientScopeRepresentation\"\n            }\n          },\n          \"clientSessionIdleTimeout\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"clientSessionMaxLifespan\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"clients\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ClientRepresentation\"\n            }\n          },\n          \"components\": {\n            \"$ref\": \"#/components/schemas/MultivaluedHashMap\"\n          },\n          \"defaultDefaultClientScopes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"defaultGroups\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"defaultLocale\": {\n            \"type\": \"string\"\n          },\n          \"defaultOptionalClientScopes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"defaultRole\": {\n            \"$ref\": \"#/components/schemas/RoleRepresentation\"\n          },\n          \"defaultSignatureAlgorithm\": {\n            \"type\": \"string\"\n          },\n          \"directGrantFlow\": {\n            \"type\": \"string\"\n          },\n          \"displayName\": {\n            \"type\": \"string\"\n          },\n          \"displayNameHtml\": {\n            \"type\": \"string\"\n          },\n          \"dockerAuthenticationFlow\": {\n            \"type\": \"string\"\n          },\n          \"duplicateEmailsAllowed\": {\n            \"type\": \"boolean\"\n          },\n          \"editUsernameAllowed\": {\n            \"type\": \"boolean\"\n          },\n          \"emailTheme\": {\n            \"type\": \"string\"\n          },\n          \"enabled\": {\n            \"type\": \"boolean\"\n          },\n          \"enabledEventTypes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"eventsEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"eventsExpiration\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"eventsListeners\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"failureFactor\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"federatedUsers\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/UserRepresentation\"\n            }\n          },\n          \"groups\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/GroupRepresentation\"\n            }\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"identityProviderMappers\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IdentityProviderMapperRepresentation\"\n            }\n          },\n          \"identityProviders\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IdentityProviderRepresentation\"\n            }\n          },\n          \"internationalizationEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"keycloakVersion\": {\n            \"type\": \"string\"\n          },\n          \"loginTheme\": {\n            \"type\": \"string\"\n          },\n          \"loginWithEmailAllowed\": {\n            \"type\": \"boolean\"\n          },\n          \"maxDeltaTimeSeconds\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"maxFailureWaitSeconds\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"minimumQuickLoginWaitSeconds\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"notBefore\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"oAuth2DeviceCodeLifespan\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"oAuth2DevicePollingInterval\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"oauth2DeviceCodeLifespan\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"oauth2DevicePollingInterval\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"offlineSessionIdleTimeout\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"offlineSessionMaxLifespan\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"offlineSessionMaxLifespanEnabled\": {\n            \"type\": \"boolean\"\n          },\n          \"otpPolicyAlgorithm\": {\n            \"type\": \"string\"\n          },\n          \"otpPolicyDigits\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"otpPolicyInitialCounter\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"otpPolicyLookAheadWindow\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"otpPolicyPeriod\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"otpPolicyType\": {\n            \"type\": \"string\"\n          },\n          \"otpSupportedApplications\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"passwordPolicy\": {\n            \"type\": \"string\"\n          },\n          \"permanentLockout\": {\n            \"type\": \"boolean\"\n          },\n          \"protocolMappers\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ProtocolMapperRepresentation\"\n            }\n          },\n          \"quickLoginCheckMilliSeconds\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"realm\": {\n            \"type\": \"string\"\n          },\n          \"refreshTokenMaxReuse\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"registrationAllowed\": {\n            \"type\": \"boolean\"\n          },\n          \"registrationEmailAsUsername\": {\n            \"type\": \"boolean\"\n          },\n          \"registrationFlow\": {\n            \"type\": \"string\"\n          },\n          \"rememberMe\": {\n            \"type\": \"boolean\"\n          },\n          \"requiredActions\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/RequiredActionProviderRepresentation\"\n            }\n          },\n          \"resetCredentialsFlow\": {\n            \"type\": \"string\"\n          },\n          \"resetPasswordAllowed\": {\n            \"type\": \"boolean\"\n          },\n          \"revokeRefreshToken\": {\n            \"type\": \"boolean\"\n          },\n          \"roles\": {\n            \"$ref\": \"#/components/schemas/RolesRepresentation\"\n          },\n          \"scopeMappings\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ScopeMappingRepresentation\"\n            }\n          },\n          \"smtpServer\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"sslRequired\": {\n            \"type\": \"string\"\n          },\n          \"ssoSessionIdleTimeout\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"ssoSessionIdleTimeoutRememberMe\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"ssoSessionMaxLifespan\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"ssoSessionMaxLifespanRememberMe\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"supportedLocales\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"userFederationMappers\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/UserFederationMapperRepresentation\"\n            }\n          },\n          \"userFederationProviders\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/UserFederationProviderRepresentation\"\n            }\n          },\n          \"userManagedAccessAllowed\": {\n            \"type\": \"boolean\"\n          },\n          \"users\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/UserRepresentation\"\n            }\n          },\n          \"verifyEmail\": {\n            \"type\": \"boolean\"\n          },\n          \"waitIncrementSeconds\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"webAuthnPolicyAcceptableAaguids\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"webAuthnPolicyAttestationConveyancePreference\": {\n            \"type\": \"string\"\n          },\n          \"webAuthnPolicyAuthenticatorAttachment\": {\n            \"type\": \"string\"\n          },\n          \"webAuthnPolicyAvoidSameAuthenticatorRegister\": {\n            \"type\": \"boolean\"\n          },\n          \"webAuthnPolicyCreateTimeout\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"webAuthnPolicyPasswordlessAcceptableAaguids\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"webAuthnPolicyPasswordlessAttestationConveyancePreference\": {\n            \"type\": \"string\"\n          },\n          \"webAuthnPolicyPasswordlessAuthenticatorAttachment\": {\n            \"type\": \"string\"\n          },\n          \"webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister\": {\n            \"type\": \"boolean\"\n          },\n          \"webAuthnPolicyPasswordlessCreateTimeout\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"webAuthnPolicyPasswordlessRequireResidentKey\": {\n            \"type\": \"string\"\n          },\n          \"webAuthnPolicyPasswordlessRpEntityName\": {\n            \"type\": \"string\"\n          },\n          \"webAuthnPolicyPasswordlessRpId\": {\n            \"type\": \"string\"\n          },\n          \"webAuthnPolicyPasswordlessSignatureAlgorithms\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"webAuthnPolicyPasswordlessUserVerificationRequirement\": {\n            \"type\": \"string\"\n          },\n          \"webAuthnPolicyRequireResidentKey\": {\n            \"type\": \"string\"\n          },\n          \"webAuthnPolicyRpEntityName\": {\n            \"type\": \"string\"\n          },\n          \"webAuthnPolicyRpId\": {\n            \"type\": \"string\"\n          },\n          \"webAuthnPolicySignatureAlgorithms\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"webAuthnPolicyUserVerificationRequirement\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"RequiredActionProviderRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"alias\": {\n            \"type\": \"string\"\n          },\n          \"config\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"defaultAction\": {\n            \"type\": \"boolean\"\n          },\n          \"enabled\": {\n            \"type\": \"boolean\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"priority\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"providerId\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ResourceRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"attributes\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"displayName\": {\n            \"type\": \"string\"\n          },\n          \"icon_uri\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"ownerManagedAccess\": {\n            \"type\": \"boolean\"\n          },\n          \"scopes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ScopeRepresentation\"\n            }\n          },\n          \"type\": {\n            \"type\": \"string\"\n          },\n          \"uris\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"ResourceServerRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"allowRemoteResourceManagement\": {\n            \"type\": \"boolean\"\n          },\n          \"clientId\": {\n            \"type\": \"string\"\n          },\n          \"decisionStrategy\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"AFFIRMATIVE\",\n              \"UNANIMOUS\",\n              \"CONSENSUS\"\n            ]\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"policies\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/PolicyRepresentation\"\n            }\n          },\n          \"policyEnforcementMode\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"ENFORCING\",\n              \"PERMISSIVE\",\n              \"DISABLED\"\n            ]\n          },\n          \"resources\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ResourceRepresentation\"\n            }\n          },\n          \"scopes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ScopeRepresentation\"\n            }\n          }\n        }\n      },\n      \"RoleRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"attributes\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"clientRole\": {\n            \"type\": \"boolean\"\n          },\n          \"composite\": {\n            \"type\": \"boolean\"\n          },\n          \"composites\": {\n            \"$ref\": \"#/components/schemas/RoleRepresentation-Composites\"\n          },\n          \"containerId\": {\n            \"type\": \"string\"\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"RoleRepresentation-Composites\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"client\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"realm\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      },\n      \"RolesRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"client\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"realm\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/RoleRepresentation\"\n            }\n          }\n        }\n      },\n      \"ScopeMappingRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"client\": {\n            \"type\": \"string\"\n          },\n          \"clientScope\": {\n            \"type\": \"string\"\n          },\n          \"roles\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"self\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ScopeRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"displayName\": {\n            \"type\": \"string\"\n          },\n          \"iconUri\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"policies\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/PolicyRepresentation\"\n            }\n          },\n          \"resources\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ResourceRepresentation\"\n            }\n          }\n        }\n      },\n      \"ServerInfoRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"builtinProtocolMappers\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"clientImporters\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"additionalProperties\": true\n            }\n          },\n          \"clientInstallations\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"componentTypes\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"enums\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"identityProviders\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"additionalProperties\": true\n            }\n          },\n          \"memoryInfo\": {\n            \"$ref\": \"#/components/schemas/MemoryInfoRepresentation\"\n          },\n          \"passwordPolicies\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/PasswordPolicyTypeRepresentation\"\n            }\n          },\n          \"profileInfo\": {\n            \"$ref\": \"#/components/schemas/ProfileInfoRepresentation\"\n          },\n          \"protocolMapperTypes\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"providers\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"socialProviders\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"additionalProperties\": true\n            }\n          },\n          \"systemInfo\": {\n            \"$ref\": \"#/components/schemas/SystemInfoRepresentation\"\n          },\n          \"themes\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          }\n        }\n      },\n      \"SpiInfoRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"internal\": {\n            \"type\": \"boolean\"\n          },\n          \"providers\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          }\n        }\n      },\n      \"SynchronizationResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"added\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"failed\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"ignored\": {\n            \"type\": \"boolean\"\n          },\n          \"removed\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"status\": {\n            \"type\": \"string\"\n          },\n          \"updated\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          }\n        }\n      },\n      \"SystemInfoRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"fileEncoding\": {\n            \"type\": \"string\"\n          },\n          \"javaHome\": {\n            \"type\": \"string\"\n          },\n          \"javaRuntime\": {\n            \"type\": \"string\"\n          },\n          \"javaVendor\": {\n            \"type\": \"string\"\n          },\n          \"javaVersion\": {\n            \"type\": \"string\"\n          },\n          \"javaVm\": {\n            \"type\": \"string\"\n          },\n          \"javaVmVersion\": {\n            \"type\": \"string\"\n          },\n          \"osArchitecture\": {\n            \"type\": \"string\"\n          },\n          \"osName\": {\n            \"type\": \"string\"\n          },\n          \"osVersion\": {\n            \"type\": \"string\"\n          },\n          \"serverTime\": {\n            \"type\": \"string\"\n          },\n          \"uptime\": {\n            \"type\": \"string\"\n          },\n          \"uptimeMillis\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"userDir\": {\n            \"type\": \"string\"\n          },\n          \"userLocale\": {\n            \"type\": \"string\"\n          },\n          \"userName\": {\n            \"type\": \"string\"\n          },\n          \"userTimezone\": {\n            \"type\": \"string\"\n          },\n          \"version\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"TestLdapConnectionRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"action\": {\n            \"type\": \"string\"\n          },\n          \"authType\": {\n            \"type\": \"string\"\n          },\n          \"bindCredential\": {\n            \"type\": \"string\"\n          },\n          \"bindDn\": {\n            \"type\": \"string\"\n          },\n          \"componentId\": {\n            \"type\": \"string\"\n          },\n          \"connectionTimeout\": {\n            \"type\": \"string\"\n          },\n          \"connectionUrl\": {\n            \"type\": \"string\"\n          },\n          \"startTls\": {\n            \"type\": \"string\"\n          },\n          \"useTruststoreSpi\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"UserConsentRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"clientId\": {\n            \"type\": \"string\"\n          },\n          \"createdDate\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"grantedClientScopes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"lastUpdatedDate\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          }\n        }\n      },\n      \"UserFederationMapperRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"config\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"federationMapperType\": {\n            \"type\": \"string\"\n          },\n          \"federationProviderDisplayName\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"UserFederationProviderRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"changedSyncPeriod\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"config\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"displayName\": {\n            \"type\": \"string\"\n          },\n          \"fullSyncPeriod\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"lastSync\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"priority\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"providerName\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"UserRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"access\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"attributes\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"clientConsents\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/UserConsentRepresentation\"\n            }\n          },\n          \"clientRoles\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"createdTimestamp\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"credentials\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CredentialRepresentation\"\n            }\n          },\n          \"disableableCredentialTypes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"email\": {\n            \"type\": \"string\"\n          },\n          \"emailVerified\": {\n            \"type\": \"boolean\"\n          },\n          \"enabled\": {\n            \"type\": \"boolean\"\n          },\n          \"federatedIdentities\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/FederatedIdentityRepresentation\"\n            }\n          },\n          \"federationLink\": {\n            \"type\": \"string\"\n          },\n          \"firstName\": {\n            \"type\": \"string\"\n          },\n          \"groups\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"lastName\": {\n            \"type\": \"string\"\n          },\n          \"notBefore\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"origin\": {\n            \"type\": \"string\"\n          },\n          \"realmRoles\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"requiredActions\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"self\": {\n            \"type\": \"string\"\n          },\n          \"serviceAccountClientId\": {\n            \"type\": \"string\"\n          },\n          \"username\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"UserSessionRepresentation\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"clients\": {\n            \"type\": \"object\",\n            \"additionalProperties\": true\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"ipAddress\": {\n            \"type\": \"string\"\n          },\n          \"lastAccess\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"start\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"userId\": {\n            \"type\": \"string\"\n          },\n          \"username\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"security\": [\n    {\n      \"access_token\": []\n    }\n  ],\n  \"externalDocs\": {\n    \"description\": \"Schema source code\",\n    \"url\": \"https://github.com/keycloak/keycloak/tree/6.0.1/core/src/main/java/org/keycloak/representations\"\n  }\n}\n"}},"Error":"make ir: path \"/{realm}/authentication/register-required-action\": post: responses: parse response status code: strconv.Atoi: parsing \"2XX\": invalid syntax"}