{"File":{"__typename":"FileMatch","repository":{"name":"github.com/reproto/reproto"},"file":{"name":"HttpService.json","path":"it/structures/openapi/service-json/service/HttpService.json","content":"{\n  \"openapi\": \"3.0.0\",\n  \"info\": {},\n  \"servers\": [\n    {\n      \"url\": \"http://example.com\"\n    }\n  ],\n  \"paths\": {\n    \"/simple/{id}\": {\n      \"get\": {\n        \"operationId\": \"get_simple\",\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"name\": \"id\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Entry\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/simple\": {\n      \"post\": {\n        \"operationId\": \"post_simple\",\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/ServiceEntry\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {}\n        }\n      }\n    },\n    \"/entry\": {\n      \"get\": {\n        \"operationId\": \"get_entry\",\n        \"description\": \"# Endpoint to get a really complicated entity called `Entry` for some reason.\\n\\nThe entity has a ton of optional fields.\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ServiceEntry\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/state\": {\n      \"get\": {\n        \"operationId\": \"get_state\",\n        \"description\": \"Endpoint to get the state of the service.\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/State\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/error-code\": {\n      \"get\": {\n        \"operationId\": \"get_error_code\",\n        \"description\": \"Endpoint to get the error code of the service\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ErrorCode\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/point\": {\n      \"get\": {\n        \"operationId\": \"get_point\",\n        \"description\": \"Endpoint to retrieve a single point.\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Point\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/tagged\": {\n      \"get\": {\n        \"operationId\": \"get_tagged\",\n        \"description\": \"Endpoint to retrieve a single tagged interface.\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Tagged\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/untagged\": {\n      \"get\": {\n        \"operationId\": \"get_untagged\",\n        \"description\": \"Endpoint to retrieve a single untagged interface.\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Untagged\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"Entry\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"name\"\n        ],\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"ServiceEntry\": {\n        \"type\": \"object\",\n        \"description\": \"A bizarre entry with many different optional fields.\",\n        \"properties\": {\n          \"boolean_type\": {\n            \"type\": \"boolean\"\n          },\n          \"string_type\": {\n            \"type\": \"string\"\n          },\n          \"datetime_type\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"unsigned_32\": {\n            \"type\": \"integer\",\n            \"format\": \"uint32\"\n          },\n          \"unsigned_64\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\"\n          },\n          \"signed_32\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"signed_64\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"float_type\": {\n            \"type\": \"integer\",\n            \"format\": \"float\"\n          },\n          \"double_type\": {\n            \"type\": \"integer\",\n            \"format\": \"double\"\n          },\n          \"bytes_type\": {\n            \"type\": \"string\",\n            \"format\": \"byte\"\n          },\n          \"any_type\": {\n            \"$ref\": \"#/components/schemas/Any\"\n          },\n          \"array_type\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ServiceEntry\"\n            }\n          },\n          \"array_of_array_type\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"$ref\": \"#/components/schemas/ServiceEntry\"\n              }\n            }\n          },\n          \"map_type\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"$ref\": \"#/components/schemas/ServiceEntry\"\n            }\n          }\n        }\n      },\n      \"State\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"open\",\n          \"closed\"\n        ]\n      },\n      \"ErrorCode\": {\n        \"type\": \"integer\",\n        \"format\": \"uint32\",\n        \"enum\": [\n          400,\n          500\n        ]\n      },\n      \"Point\": {\n        \"type\": \"array\",\n        \"format\": \"tuple\",\n        \"required\": [\n          0,\n          1\n        ],\n        \"properties\": {\n          \"0\": {\n            \"type\": \"integer\",\n            \"format\": \"uint64\"\n          },\n          \"1\": {\n            \"type\": \"integer\",\n            \"format\": \"double\"\n          }\n        }\n      },\n      \"Tagged\": {\n        \"oneOf\": [\n          {\n            \"$ref\": \"#/components/schemas/TaggedA\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/TaggedB\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/TaggedBar\"\n          },\n          {\n            \"$ref\": \"#/components/schemas/TaggedBaz\"\n          }\n        ],\n        \"discriminator\": {\n          \"propertyName\": \"@type\",\n          \"mapping\": {\n            \"foo\": \"#/components/schemas/TaggedA\",\n            \"b\": \"#/components/schemas/TaggedB\",\n            \"Bar\": \"#/components/schemas/TaggedBar\",\n            \"Baz\": \"#/components/schemas/TaggedBaz\"\n          }\n        }\n      },\n      \"Untagged\": {\n        \"description\": \"An untagged interface.\",\n        \"oneOf\": [\n          {\n            \"type\": \"object\",\n            \"description\": \"Special case: fields shared with other sub-types.\\nNOTE: due to rust support through untagged, the types are matched in-order.\",\n            \"required\": [\n              \"shared\",\n              \"a\",\n              \"b\"\n            ],\n            \"properties\": {\n              \"shared\": {\n                \"type\": \"string\"\n              },\n              \"shared_ignore\": {\n                \"type\": \"string\"\n              },\n              \"a\": {\n                \"type\": \"string\"\n              },\n              \"b\": {\n                \"type\": \"string\"\n              },\n              \"ignore\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"shared\",\n              \"a\"\n            ],\n            \"properties\": {\n              \"shared\": {\n                \"type\": \"string\"\n              },\n              \"shared_ignore\": {\n                \"type\": \"string\"\n              },\n              \"a\": {\n                \"type\": \"string\"\n              },\n              \"ignore\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          {\n            \"type\": \"object\",\n            \"required\": [\n              \"shared\",\n              \"b\"\n            ],\n            \"properties\": {\n              \"shared\": {\n                \"type\": \"string\"\n              },\n              \"shared_ignore\": {\n                \"type\": \"string\"\n              },\n              \"b\": {\n                \"type\": \"string\"\n              },\n              \"ignore\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      },\n      \"Any\": {},\n      \"TaggedA\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"@type\",\n          \"shared\"\n        ],\n        \"properties\": {\n          \"@type\": {\n            \"type\": \"string\"\n          },\n          \"shared\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"TaggedB\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"@type\",\n          \"shared\"\n        ],\n        \"properties\": {\n          \"@type\": {\n            \"type\": \"string\"\n          },\n          \"shared\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"TaggedBar\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"@type\",\n          \"shared\"\n        ],\n        \"properties\": {\n          \"@type\": {\n            \"type\": \"string\"\n          },\n          \"shared\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"TaggedBaz\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"@type\",\n          \"shared\"\n        ],\n        \"properties\": {\n          \"@type\": {\n            \"type\": \"string\"\n          },\n          \"shared\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}"}},"Error":"json: cannot unmarshal number into Go struct field Schema.components.schemas.required of type string"}