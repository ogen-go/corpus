{"File":{"__typename":"FileMatch","repository":{"name":"github.com/180Protocol/codaptor"},"file":{"name":"ReferenceCordapp.api.json","path":"reference-cordapp/src/genericApiTest/resources/ReferenceCordapp.api.json","content":"{\n  \"components\": {\n    \"schemas\": {\n      \"ComplexFlowResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"output\": {\n            \"$ref\": \"#/components/schemas/CordaStateAndRef_SimpleLinearState\"\n          }\n        },\n        \"required\": [\n          \"output\"\n        ]\n      },\n      \"ComplexState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"amount\": {\n            \"$ref\": \"#/components/schemas/CordaAmount_Currency\"\n          },\n          \"integer\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"nestedEntries\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ComplexStateEntry\"\n            }\n          },\n          \"participant\": {\n            \"$ref\": \"#/components/schemas/CordaParty\"\n          },\n          \"string\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"amount\",\n          \"integer\",\n          \"nestedEntries\",\n          \"participant\",\n          \"string\"\n        ]\n      },\n      \"ComplexStateEntry\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"amount\": {\n            \"$ref\": \"#/components/schemas/CordaAmount_Currency\"\n          },\n          \"integer\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"string\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"amount\",\n          \"integer\",\n          \"string\"\n        ]\n      },\n      \"CompoundFlowResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"output\": {\n            \"$ref\": \"#/components/schemas/CordaStateAndRef_CompoundState\"\n          }\n        },\n        \"required\": [\n          \"output\"\n        ]\n      },\n      \"CompoundState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"amount\": {\n            \"$ref\": \"#/components/schemas/CordaAmount_Currency\"\n          },\n          \"integer\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"linearId\": {\n            \"$ref\": \"#/components/schemas/CordaUniqueIdentifier\"\n          },\n          \"participant\": {\n            \"$ref\": \"#/components/schemas/CordaParty\"\n          },\n          \"string\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"amount\",\n          \"integer\",\n          \"linearId\",\n          \"participant\",\n          \"string\"\n        ]\n      },\n      \"CordaAmount_Currency\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"quantity\": {\n            \"type\": \"number\"\n          },\n          \"of\": {\n            \"$ref\": \"#/components/schemas/ISOCurrencyCode\"\n          }\n        },\n        \"required\": [\n          \"quantity\",\n          \"of\"\n        ]\n      },\n      \"CordaAttachmentConstraint\": {\n        \"oneOf\": [\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"enum\": [\n                  \"alwaysAccept\"\n                ]\n              }\n            },\n            \"required\": [\n              \"type\"\n            ]\n          },\n          {\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/CordaHashAttachmentConstraint\"\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"type\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                      \"hash\"\n                    ]\n                  }\n                },\n                \"required\": [\n                  \"type\"\n                ]\n              }\n            ]\n          },\n          {\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/CordaSignatureAttachmentConstraint\"\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"type\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                      \"signature\"\n                    ]\n                  }\n                },\n                \"required\": [\n                  \"type\"\n                ]\n              }\n            ]\n          },\n          {\n            \"type\": \"object\",\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"enum\": [\n                  \"whitelistedByZone\"\n                ]\n              }\n            },\n            \"required\": [\n              \"type\"\n            ]\n          }\n        ],\n        \"discriminator\": {\n          \"propertyName\": \"type\"\n        }\n      },\n      \"CordaCommand_Object\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"signers\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/PublicKey\"\n            }\n          },\n          \"value\": {\n            \"type\": \"object\",\n            \"description\": \"Dynamic container for subclasses of java.lang.Object\",\n            \"additionalProperties\": \"true\"\n          }\n        },\n        \"required\": [\n          \"signers\",\n          \"value\"\n        ]\n      },\n      \"CordaCoreTransaction\": {\n        \"oneOf\": [\n          {\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/CordaWireTransaction\"\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"type\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                      \"wireTransaction\"\n                    ]\n                  }\n                },\n                \"required\": [\n                  \"type\"\n                ]\n              }\n            ]\n          }\n        ],\n        \"discriminator\": {\n          \"propertyName\": \"type\"\n        }\n      },\n      \"CordaFlowInstructionOptions\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"trackProgress\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"required\": []\n      },\n      \"CordaFlowInstruction_CreateCompoundStateFlow\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"options\": {\n            \"$ref\": \"#/components/schemas/CordaFlowInstructionOptions\"\n          },\n          \"string\": {\n            \"type\": \"string\"\n          },\n          \"integer\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          }\n        },\n        \"required\": [\n          \"string\",\n          \"integer\"\n        ]\n      },\n      \"CordaFlowInstruction_DelayedProgressFlow\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"options\": {\n            \"$ref\": \"#/components/schemas/CordaFlowInstructionOptions\"\n          },\n          \"externalId\": {\n            \"type\": \"string\"\n          },\n          \"delay\": {\n            \"type\": \"number\",\n            \"format\": \"int64\"\n          }\n        },\n        \"required\": [\n          \"externalId\",\n          \"delay\"\n        ]\n      },\n      \"CordaFlowInstruction_IssueComplexStateFlow\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"options\": {\n            \"$ref\": \"#/components/schemas/CordaFlowInstructionOptions\"\n          },\n          \"state\": {\n            \"$ref\": \"#/components/schemas/ComplexState\"\n          }\n        },\n        \"required\": [\n          \"state\"\n        ]\n      },\n      \"CordaFlowInstruction_SimpleFlow\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"options\": {\n            \"$ref\": \"#/components/schemas/CordaFlowInstructionOptions\"\n          },\n          \"externalId\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"externalId\"\n        ]\n      },\n      \"CordaFlowProgress\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"currentStepName\": {\n            \"type\": \"string\"\n          },\n          \"timestamp\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          }\n        },\n        \"required\": [\n          \"currentStepName\",\n          \"timestamp\"\n        ]\n      },\n      \"CordaFlowResult_ComplexFlowResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"error\": {\n            \"$ref\": \"#/components/schemas/Throwable\"\n          },\n          \"timestamp\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"value\": {\n            \"$ref\": \"#/components/schemas/ComplexFlowResult\"\n          }\n        },\n        \"required\": [\n          \"timestamp\"\n        ]\n      },\n      \"CordaFlowResult_CompoundFlowResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"error\": {\n            \"$ref\": \"#/components/schemas/Throwable\"\n          },\n          \"timestamp\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"value\": {\n            \"$ref\": \"#/components/schemas/CompoundFlowResult\"\n          }\n        },\n        \"required\": [\n          \"timestamp\"\n        ]\n      },\n      \"CordaFlowResult_SimpleFlowResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"error\": {\n            \"$ref\": \"#/components/schemas/Throwable\"\n          },\n          \"timestamp\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"value\": {\n            \"$ref\": \"#/components/schemas/SimpleFlowResult\"\n          }\n        },\n        \"required\": [\n          \"timestamp\"\n        ]\n      },\n      \"CordaFlowSnapshot_ComplexFlowResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"currentProgress\": {\n            \"$ref\": \"#/components/schemas/CordaFlowProgress\"\n          },\n          \"flowClass\": {\n            \"type\": \"string\"\n          },\n          \"flowRunId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"result\": {\n            \"$ref\": \"#/components/schemas/CordaFlowResult_ComplexFlowResult\"\n          },\n          \"startedAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          }\n        },\n        \"required\": [\n          \"flowClass\",\n          \"flowRunId\",\n          \"startedAt\"\n        ]\n      },\n      \"CordaFlowSnapshot_CompoundFlowResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"currentProgress\": {\n            \"$ref\": \"#/components/schemas/CordaFlowProgress\"\n          },\n          \"flowClass\": {\n            \"type\": \"string\"\n          },\n          \"flowRunId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"result\": {\n            \"$ref\": \"#/components/schemas/CordaFlowResult_CompoundFlowResult\"\n          },\n          \"startedAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          }\n        },\n        \"required\": [\n          \"flowClass\",\n          \"flowRunId\",\n          \"startedAt\"\n        ]\n      },\n      \"CordaFlowSnapshot_SimpleFlowResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"currentProgress\": {\n            \"$ref\": \"#/components/schemas/CordaFlowProgress\"\n          },\n          \"flowClass\": {\n            \"type\": \"string\"\n          },\n          \"flowRunId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"result\": {\n            \"$ref\": \"#/components/schemas/CordaFlowResult_SimpleFlowResult\"\n          },\n          \"startedAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          }\n        },\n        \"required\": [\n          \"flowClass\",\n          \"flowRunId\",\n          \"startedAt\"\n        ]\n      },\n      \"CordaHashAttachmentConstraint\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"attachmentId\": {\n            \"$ref\": \"#/components/schemas/CordaSecureHash\"\n          }\n        },\n        \"required\": [\n          \"attachmentId\"\n        ]\n      },\n      \"CordaNetworkHostAndPort\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"host\": {\n            \"type\": \"string\"\n          },\n          \"port\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          }\n        },\n        \"required\": [\n          \"host\",\n          \"port\"\n        ]\n      },\n      \"CordaNodeInfo\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"addresses\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaNetworkHostAndPort\"\n            }\n          },\n          \"legalIdentitiesAndCerts\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaPartyAndCertificate\"\n            }\n          },\n          \"platformVersion\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"serial\": {\n            \"type\": \"number\",\n            \"format\": \"int64\"\n          }\n        },\n        \"required\": [\n          \"addresses\",\n          \"legalIdentitiesAndCerts\",\n          \"platformVersion\",\n          \"serial\"\n        ]\n      },\n      \"CordaNodeVersionInfo\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"platformVersion\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"releaseVersion\": {\n            \"type\": \"string\"\n          },\n          \"revision\": {\n            \"type\": \"string\"\n          },\n          \"vendor\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"platformVersion\",\n          \"releaseVersion\",\n          \"revision\",\n          \"vendor\"\n        ]\n      },\n      \"CordaParty\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"owningKey\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n          },\n          \"name\": {\n            \"$ref\": \"#/components/schemas/CordaX500Name\"\n          }\n        },\n        \"required\": []\n      },\n      \"CordaPartyAndCertificate\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"party\": {\n            \"$ref\": \"#/components/schemas/CordaParty\"\n          }\n        },\n        \"required\": [\n          \"party\"\n        ]\n      },\n      \"CordaSecureHash\": {\n        \"type\": \"string\",\n        \"minLength\": 64,\n        \"maxLength\": 64,\n        \"pattern\": \"^[A-Z0-9]{64}\"\n      },\n      \"CordaSignatureAttachmentConstraint\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      },\n      \"CordaSignatureMetadata\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"platformVersion\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"schemeNumberID\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          }\n        },\n        \"required\": [\n          \"platformVersion\",\n          \"schemeNumberID\"\n        ]\n      },\n      \"CordaSignedTransaction\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/CordaSecureHash\"\n          },\n          \"content\": {\n            \"$ref\": \"#/components/schemas/CordaCoreTransaction\"\n          },\n          \"sigs\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaTransactionSignature\"\n            }\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"content\",\n          \"sigs\"\n        ]\n      },\n      \"CordaSortDirection\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"ASC\",\n          \"DESC\"\n        ]\n      },\n      \"CordaStateAndRef_ComplexState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"ref\": {\n            \"$ref\": \"#/components/schemas/CordaStateRef\"\n          },\n          \"state\": {\n            \"$ref\": \"#/components/schemas/CordaTransactionState_ComplexState\"\n          }\n        },\n        \"required\": [\n          \"ref\",\n          \"state\"\n        ]\n      },\n      \"CordaStateAndRef_CompoundState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"ref\": {\n            \"$ref\": \"#/components/schemas/CordaStateRef\"\n          },\n          \"state\": {\n            \"$ref\": \"#/components/schemas/CordaTransactionState_CompoundState\"\n          }\n        },\n        \"required\": [\n          \"ref\",\n          \"state\"\n        ]\n      },\n      \"CordaStateAndRef_SimpleLinearState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"ref\": {\n            \"$ref\": \"#/components/schemas/CordaStateRef\"\n          },\n          \"state\": {\n            \"$ref\": \"#/components/schemas/CordaTransactionState_SimpleLinearState\"\n          }\n        },\n        \"required\": [\n          \"ref\",\n          \"state\"\n        ]\n      },\n      \"CordaStateRef\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"index\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"txhash\": {\n            \"$ref\": \"#/components/schemas/CordaSecureHash\"\n          }\n        },\n        \"required\": [\n          \"index\",\n          \"txhash\"\n        ]\n      },\n      \"CordaTimeWindow\": {\n        \"oneOf\": [\n          {\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/CordaTimeWindowFrom\"\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"type\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                      \"from\"\n                    ]\n                  }\n                },\n                \"required\": [\n                  \"type\"\n                ]\n              }\n            ]\n          },\n          {\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/CordaTimeWindowUntil\"\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"type\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                      \"until\"\n                    ]\n                  }\n                },\n                \"required\": [\n                  \"type\"\n                ]\n              }\n            ]\n          },\n          {\n            \"allOf\": [\n              {\n                \"$ref\": \"#/components/schemas/CordaTimeWindowBetween\"\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"type\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                      \"between\"\n                    ]\n                  }\n                },\n                \"required\": [\n                  \"type\"\n                ]\n              }\n            ]\n          }\n        ],\n        \"discriminator\": {\n          \"propertyName\": \"type\"\n        }\n      },\n      \"CordaTimeWindowBetween\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"fromTime\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"untilTime\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          }\n        },\n        \"required\": []\n      },\n      \"CordaTimeWindowFrom\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"fromTime\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          }\n        },\n        \"required\": []\n      },\n      \"CordaTimeWindowUntil\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"untilTime\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          }\n        },\n        \"required\": []\n      },\n      \"CordaTransactionSignature\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"by\": {\n            \"$ref\": \"#/components/schemas/PublicKey\"\n          },\n          \"metadata\": {\n            \"$ref\": \"#/components/schemas/CordaSignatureMetadata\",\n            \"readOnly\": true\n          }\n        },\n        \"required\": [\n          \"by\",\n          \"metadata\"\n        ]\n      },\n      \"CordaTransactionState_ComplexState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"constraint\": {\n            \"$ref\": \"#/components/schemas/CordaAttachmentConstraint\"\n          },\n          \"contract\": {\n            \"type\": \"string\"\n          },\n          \"data\": {\n            \"$ref\": \"#/components/schemas/ComplexState\"\n          },\n          \"encumbrance\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"notary\": {\n            \"$ref\": \"#/components/schemas/CordaParty\"\n          }\n        },\n        \"required\": [\n          \"constraint\",\n          \"contract\",\n          \"data\",\n          \"notary\"\n        ]\n      },\n      \"CordaTransactionState_CompoundState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"constraint\": {\n            \"$ref\": \"#/components/schemas/CordaAttachmentConstraint\"\n          },\n          \"contract\": {\n            \"type\": \"string\"\n          },\n          \"data\": {\n            \"$ref\": \"#/components/schemas/CompoundState\"\n          },\n          \"encumbrance\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"notary\": {\n            \"$ref\": \"#/components/schemas/CordaParty\"\n          }\n        },\n        \"required\": [\n          \"constraint\",\n          \"contract\",\n          \"data\",\n          \"notary\"\n        ]\n      },\n      \"CordaTransactionState_ContractState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"constraint\": {\n            \"$ref\": \"#/components/schemas/CordaAttachmentConstraint\"\n          },\n          \"contract\": {\n            \"type\": \"string\"\n          },\n          \"data\": {\n            \"type\": \"object\",\n            \"description\": \"Dynamic container for subclasses of net.corda.core.contracts.ContractState\",\n            \"additionalProperties\": \"true\"\n          },\n          \"encumbrance\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"notary\": {\n            \"$ref\": \"#/components/schemas/CordaParty\"\n          }\n        },\n        \"required\": [\n          \"constraint\",\n          \"contract\",\n          \"data\",\n          \"notary\"\n        ]\n      },\n      \"CordaTransactionState_SimpleLinearState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"constraint\": {\n            \"$ref\": \"#/components/schemas/CordaAttachmentConstraint\"\n          },\n          \"contract\": {\n            \"type\": \"string\"\n          },\n          \"data\": {\n            \"$ref\": \"#/components/schemas/SimpleLinearState\"\n          },\n          \"encumbrance\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"notary\": {\n            \"$ref\": \"#/components/schemas/CordaParty\"\n          }\n        },\n        \"required\": [\n          \"constraint\",\n          \"contract\",\n          \"data\",\n          \"notary\"\n        ]\n      },\n      \"CordaUniqueIdentifier\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"externalId\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          }\n        },\n        \"required\": [\n          \"id\"\n        ]\n      },\n      \"CordaVaultConstraintInfo\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"constraint\": {\n            \"$ref\": \"#/components/schemas/CordaAttachmentConstraint\"\n          }\n        },\n        \"required\": [\n          \"constraint\"\n        ]\n      },\n      \"CordaVaultPage_ComplexState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"stateTypes\": {\n            \"$ref\": \"#/components/schemas/CordaVaultStateStatus\"\n          },\n          \"states\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaStateAndRef_ComplexState\"\n            }\n          },\n          \"statesMetadata\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaVaultStateMetadata\"\n            }\n          },\n          \"totalStatesAvailable\": {\n            \"type\": \"number\",\n            \"format\": \"int64\"\n          }\n        },\n        \"required\": [\n          \"stateTypes\",\n          \"states\",\n          \"statesMetadata\",\n          \"totalStatesAvailable\"\n        ]\n      },\n      \"CordaVaultPage_CompoundState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"stateTypes\": {\n            \"$ref\": \"#/components/schemas/CordaVaultStateStatus\"\n          },\n          \"states\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaStateAndRef_CompoundState\"\n            }\n          },\n          \"statesMetadata\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaVaultStateMetadata\"\n            }\n          },\n          \"totalStatesAvailable\": {\n            \"type\": \"number\",\n            \"format\": \"int64\"\n          }\n        },\n        \"required\": [\n          \"stateTypes\",\n          \"states\",\n          \"statesMetadata\",\n          \"totalStatesAvailable\"\n        ]\n      },\n      \"CordaVaultPage_SimpleLinearState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"stateTypes\": {\n            \"$ref\": \"#/components/schemas/CordaVaultStateStatus\"\n          },\n          \"states\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaStateAndRef_SimpleLinearState\"\n            }\n          },\n          \"statesMetadata\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaVaultStateMetadata\"\n            }\n          },\n          \"totalStatesAvailable\": {\n            \"type\": \"number\",\n            \"format\": \"int64\"\n          }\n        },\n        \"required\": [\n          \"stateTypes\",\n          \"states\",\n          \"statesMetadata\",\n          \"totalStatesAvailable\"\n        ]\n      },\n      \"CordaVaultQueryExpression\": {\n        \"type\": \"string\",\n        \"from\": \"LiteralValue\",\n        \"to\": \"LiteralValue\"\n      },\n      \"CordaVaultQuerySortColumn\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"direction\": {\n            \"$ref\": \"#/components/schemas/CordaSortDirection\"\n          },\n          \"sortAttribute\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"direction\",\n          \"sortAttribute\"\n        ]\n      },\n      \"CordaVaultQuery_ComplexState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"consumedTimeIsAfter\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"contractStateClass\": {\n            \"type\": \"string\"\n          },\n          \"expression\": {\n            \"$ref\": \"#/components/schemas/CordaVaultQueryExpression\"\n          },\n          \"linearStateExternalIds\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"linearStateUUIDs\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          },\n          \"notaryNames\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaX500Name\"\n            }\n          },\n          \"ownerNames\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaX500Name\"\n            }\n          },\n          \"pageNumber\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"pageSize\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"participantNames\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaX500Name\"\n            }\n          },\n          \"recordedTimeIsAfter\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"relevancyStatus\": {\n            \"$ref\": \"#/components/schemas/CordaVaultRelevancyStatus\"\n          },\n          \"sortCriteria\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaVaultQuerySortColumn\"\n            }\n          },\n          \"stateStatus\": {\n            \"$ref\": \"#/components/schemas/CordaVaultStateStatus\"\n          }\n        },\n        \"required\": [\n          \"contractStateClass\"\n        ]\n      },\n      \"CordaVaultQuery_CompoundState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"consumedTimeIsAfter\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"contractStateClass\": {\n            \"type\": \"string\"\n          },\n          \"expression\": {\n            \"$ref\": \"#/components/schemas/CordaVaultQueryExpression\"\n          },\n          \"linearStateExternalIds\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"linearStateUUIDs\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          },\n          \"notaryNames\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaX500Name\"\n            }\n          },\n          \"ownerNames\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaX500Name\"\n            }\n          },\n          \"pageNumber\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"pageSize\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"participantNames\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaX500Name\"\n            }\n          },\n          \"recordedTimeIsAfter\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"relevancyStatus\": {\n            \"$ref\": \"#/components/schemas/CordaVaultRelevancyStatus\"\n          },\n          \"sortCriteria\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaVaultQuerySortColumn\"\n            }\n          },\n          \"stateStatus\": {\n            \"$ref\": \"#/components/schemas/CordaVaultStateStatus\"\n          }\n        },\n        \"required\": [\n          \"contractStateClass\"\n        ]\n      },\n      \"CordaVaultQuery_SimpleLinearState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"consumedTimeIsAfter\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"contractStateClass\": {\n            \"type\": \"string\"\n          },\n          \"expression\": {\n            \"$ref\": \"#/components/schemas/CordaVaultQueryExpression\"\n          },\n          \"linearStateExternalIds\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"linearStateUUIDs\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          },\n          \"notaryNames\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaX500Name\"\n            }\n          },\n          \"ownerNames\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaX500Name\"\n            }\n          },\n          \"pageNumber\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"pageSize\": {\n            \"type\": \"number\",\n            \"format\": \"int32\"\n          },\n          \"participantNames\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaX500Name\"\n            }\n          },\n          \"recordedTimeIsAfter\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"relevancyStatus\": {\n            \"$ref\": \"#/components/schemas/CordaVaultRelevancyStatus\"\n          },\n          \"sortCriteria\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaVaultQuerySortColumn\"\n            }\n          },\n          \"stateStatus\": {\n            \"$ref\": \"#/components/schemas/CordaVaultStateStatus\"\n          }\n        },\n        \"required\": [\n          \"contractStateClass\"\n        ]\n      },\n      \"CordaVaultRelevancyStatus\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"RELEVANT\",\n          \"NOT_RELEVANT\",\n          \"ALL\"\n        ]\n      },\n      \"CordaVaultStateMetadata\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"constraintInfo\": {\n            \"$ref\": \"#/components/schemas/CordaVaultConstraintInfo\"\n          },\n          \"consumedTime\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"contractStateClassName\": {\n            \"type\": \"string\"\n          },\n          \"lockId\": {\n            \"type\": \"string\"\n          },\n          \"lockUpdateTime\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"notary\": {\n            \"$ref\": \"#/components/schemas/CordaParty\"\n          },\n          \"recordedTime\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"ref\": {\n            \"$ref\": \"#/components/schemas/CordaStateRef\"\n          },\n          \"relevancyStatus\": {\n            \"$ref\": \"#/components/schemas/CordaVaultRelevancyStatus\"\n          },\n          \"status\": {\n            \"$ref\": \"#/components/schemas/CordaVaultStateStatus\"\n          }\n        },\n        \"required\": [\n          \"contractStateClassName\",\n          \"recordedTime\",\n          \"ref\",\n          \"status\"\n        ]\n      },\n      \"CordaVaultStateStatus\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"UNCONSUMED\",\n          \"CONSUMED\",\n          \"ALL\"\n        ]\n      },\n      \"CordaWireTransaction\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/CordaSecureHash\"\n          },\n          \"inputs\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaStateRef\"\n            }\n          },\n          \"outputs\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaTransactionState_ContractState\"\n            }\n          },\n          \"commands\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaCommand_Object\"\n            }\n          },\n          \"references\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaStateRef\"\n            }\n          },\n          \"notary\": {\n            \"$ref\": \"#/components/schemas/CordaParty\"\n          },\n          \"timeWindow\": {\n            \"$ref\": \"#/components/schemas/CordaTimeWindow\"\n          },\n          \"attachments\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/CordaSecureHash\"\n            }\n          },\n          \"networkParametersHash\": {\n            \"$ref\": \"#/components/schemas/CordaSecureHash\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"inputs\",\n          \"outputs\",\n          \"commands\",\n          \"references\",\n          \"attachments\"\n        ]\n      },\n      \"CordaX500Name\": {\n        \"type\": \"string\"\n      },\n      \"ISOCurrencyCode\": {\n        \"type\": \"string\"\n      },\n      \"PublicKey\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"hash\": {\n            \"type\": \"string\",\n            \"readOnly\": true\n          }\n        },\n        \"required\": [\n          \"hash\"\n        ]\n      },\n      \"SimpleFlowResult\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"feePaid\": {\n            \"$ref\": \"#/components/schemas/CordaAmount_Currency\"\n          },\n          \"output\": {\n            \"$ref\": \"#/components/schemas/CordaStateAndRef_SimpleLinearState\"\n          }\n        },\n        \"required\": [\n          \"feePaid\",\n          \"output\"\n        ]\n      },\n      \"SimpleLinearState\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"linearId\": {\n            \"$ref\": \"#/components/schemas/CordaUniqueIdentifier\"\n          },\n          \"participant\": {\n            \"$ref\": \"#/components/schemas/CordaParty\"\n          }\n        },\n        \"required\": [\n          \"linearId\",\n          \"participant\"\n        ]\n      },\n      \"Throwable\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"class\": {\n            \"type\": \"string\"\n          },\n          \"message\": {\n            \"type\": \"string\"\n          },\n          \"cause\": {\n            \"type\": \"object\",\n            \"description\": \"Dynamic container for subclasses of java.lang.Object\",\n            \"additionalProperties\": \"true\"\n          }\n        },\n        \"required\": []\n      }\n    }\n  },\n  \"info\": {\n    \"title\": \"Cordaptor API\",\n    \"version\": \"autogenerated\"\n  },\n  \"openapi\": \"3.0.3\",\n  \"paths\": {\n    \"/node/info\": {\n      \"get\": {\n        \"operationId\": \"getNodeInfo\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaNodeInfo\"\n                }\n              }\n            },\n            \"description\": \"Successful operation\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          }\n        },\n        \"summary\": \"Returns network map entry for the underlying Corda node\",\n        \"tags\": [\n          \"nodeDiagnostic\"\n        ]\n      }\n    },\n    \"/node/reference/ComplexState/query\": {\n      \"get\": {\n        \"operationId\": \"fetchComplexStateInstances\",\n        \"parameters\": [\n          {\n            \"description\": \"One or more of X500 names of notarizing parties for a state\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"notary\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"One or more of X500 names of owning parties for ownable states\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"owner\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"One or more of X500 names of participants in a state\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"participant\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"One or more UUIDs used in unique identifiers of linear states\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"uuid\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          },\n          {\n            \"description\": \"One or more external keys used in unique identifiers of linear states\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"externalId\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"Approach to querying consumed states (ignore by default)\",\n            \"in\": \"query\",\n            \"name\": \"consumed\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"ignore\",\n                \"include\",\n                \"only\"\n              ]\n            }\n          },\n          {\n            \"description\": \"Size of the page to return (200 by default)\",\n            \"in\": \"query\",\n            \"name\": \"pageSize\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"description\": \"Zero-based index of the page to return (0 by default)\",\n            \"in\": \"query\",\n            \"name\": \"pageNumber\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\",\n              \"minimum\": 0\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaVaultPage_ComplexState\"\n                }\n              }\n            },\n            \"description\": \"Query ran successfully\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          }\n        },\n        \"summary\": \"Performs a query of the vault of the underlying Corda node with a simplified criteria\",\n        \"tags\": [\n          \"vaultQuery\"\n        ]\n      },\n      \"post\": {\n        \"operationId\": \"queryComplexStateInstances\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CordaVaultQuery_ComplexState\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaVaultPage_ComplexState\"\n                }\n              }\n            },\n            \"description\": \"Query ran successfully\"\n          }\n        },\n        \"summary\": \"Performs a query of the vault of the underlying Corda node with a complex criteria\",\n        \"tags\": [\n          \"vaultQuery\"\n        ]\n      }\n    },\n    \"/node/reference/ComplexState/{hash}({index})\": {\n      \"get\": {\n        \"operationId\": \"getComplexStateByRef\",\n        \"parameters\": [\n          {\n            \"description\": \"Transaction output index\",\n            \"in\": \"path\",\n            \"name\": \"index\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"number\",\n              \"format\": \"int32\"\n            }\n          },\n          {\n            \"description\": \"Transaction hash value\",\n            \"in\": \"path\",\n            \"name\": \"hash\",\n            \"required\": true,\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/CordaSecureHash\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/ComplexState\"\n                }\n              }\n            },\n            \"description\": \"Successfully retrieved contract state\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"404\": {\n            \"description\": \"Contract state with given hash and index was not found\"\n          }\n        },\n        \"summary\": \"Finds contract state recorded to the ledger with a given hash and index \",\n        \"tags\": [\n          \"vaultQuery\"\n        ]\n      }\n    },\n    \"/node/reference/CompoundState/query\": {\n      \"get\": {\n        \"operationId\": \"fetchCompoundStateInstances\",\n        \"parameters\": [\n          {\n            \"description\": \"One or more of X500 names of notarizing parties for a state\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"notary\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"One or more of X500 names of owning parties for ownable states\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"owner\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"One or more of X500 names of participants in a state\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"participant\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"One or more UUIDs used in unique identifiers of linear states\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"uuid\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          },\n          {\n            \"description\": \"One or more external keys used in unique identifiers of linear states\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"externalId\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"Approach to querying consumed states (ignore by default)\",\n            \"in\": \"query\",\n            \"name\": \"consumed\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"ignore\",\n                \"include\",\n                \"only\"\n              ]\n            }\n          },\n          {\n            \"description\": \"Size of the page to return (200 by default)\",\n            \"in\": \"query\",\n            \"name\": \"pageSize\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"description\": \"Zero-based index of the page to return (0 by default)\",\n            \"in\": \"query\",\n            \"name\": \"pageNumber\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\",\n              \"minimum\": 0\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaVaultPage_CompoundState\"\n                }\n              }\n            },\n            \"description\": \"Query ran successfully\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          }\n        },\n        \"summary\": \"Performs a query of the vault of the underlying Corda node with a simplified criteria\",\n        \"tags\": [\n          \"vaultQuery\"\n        ]\n      },\n      \"post\": {\n        \"operationId\": \"queryCompoundStateInstances\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CordaVaultQuery_CompoundState\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaVaultPage_CompoundState\"\n                }\n              }\n            },\n            \"description\": \"Query ran successfully\"\n          }\n        },\n        \"summary\": \"Performs a query of the vault of the underlying Corda node with a complex criteria\",\n        \"tags\": [\n          \"vaultQuery\"\n        ]\n      }\n    },\n    \"/node/reference/CompoundState/{hash}({index})\": {\n      \"get\": {\n        \"operationId\": \"getCompoundStateByRef\",\n        \"parameters\": [\n          {\n            \"description\": \"Transaction output index\",\n            \"in\": \"path\",\n            \"name\": \"index\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"number\",\n              \"format\": \"int32\"\n            }\n          },\n          {\n            \"description\": \"Transaction hash value\",\n            \"in\": \"path\",\n            \"name\": \"hash\",\n            \"required\": true,\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/CordaSecureHash\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CompoundState\"\n                }\n              }\n            },\n            \"description\": \"Successfully retrieved contract state\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"404\": {\n            \"description\": \"Contract state with given hash and index was not found\"\n          }\n        },\n        \"summary\": \"Finds contract state recorded to the ledger with a given hash and index \",\n        \"tags\": [\n          \"vaultQuery\"\n        ]\n      }\n    },\n    \"/node/reference/CreateCompoundStateFlow\": {\n      \"post\": {\n        \"operationId\": \"initiateCreateCompoundStateFlow\",\n        \"parameters\": [\n          {\n            \"description\": \"Timeout for synchronous flow execution, 0 for immediate return\",\n            \"in\": \"query\",\n            \"name\": \"wait\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\",\n              \"minimum\": 0\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CordaFlowInstruction_CreateCompoundStateFlow\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_CompoundFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution completed successfully and its result is available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          },\n          \"202\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_CompoundFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution stared and its outcome is not yet available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"500\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_CompoundFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution failed and error information is available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          }\n        },\n        \"summary\": \"Initiates and tracks execution of Corda flow CreateCompoundStateFlow with given parameters\",\n        \"tags\": [\n          \"flowInitiation\"\n        ]\n      }\n    },\n    \"/node/reference/CreateCompoundStateFlow/snapshot/{flowRunId}\": {\n      \"get\": {\n        \"operationId\": \"getLatestSnapshotForCreateCompoundStateFlow\",\n        \"parameters\": [\n          {\n            \"description\": \"Flow run id returned by a flow initiation operation\",\n            \"in\": \"path\",\n            \"name\": \"flowRunId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_CompoundFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Latest snapshot of the flow with given run id\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"404\": {\n            \"description\": \"Snapshot of a flow with given run id was not found, which may mean it was already evicted\"\n          }\n        },\n        \"summary\": \"Returns latest snapshot for a flow of type CreateCompoundStateFlow initiated with given run id\",\n        \"tags\": [\n          \"flowInitiation\"\n        ]\n      }\n    },\n    \"/node/reference/DelayedProgressFlow\": {\n      \"post\": {\n        \"operationId\": \"initiateDelayedProgressFlow\",\n        \"parameters\": [\n          {\n            \"description\": \"Timeout for synchronous flow execution, 0 for immediate return\",\n            \"in\": \"query\",\n            \"name\": \"wait\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\",\n              \"minimum\": 0\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CordaFlowInstruction_DelayedProgressFlow\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_SimpleFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution completed successfully and its result is available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          },\n          \"202\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_SimpleFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution stared and its outcome is not yet available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"500\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_SimpleFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution failed and error information is available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          }\n        },\n        \"summary\": \"Initiates and tracks execution of Corda flow DelayedProgressFlow with given parameters\",\n        \"tags\": [\n          \"flowInitiation\"\n        ]\n      }\n    },\n    \"/node/reference/DelayedProgressFlow/snapshot/{flowRunId}\": {\n      \"get\": {\n        \"operationId\": \"getLatestSnapshotForDelayedProgressFlow\",\n        \"parameters\": [\n          {\n            \"description\": \"Flow run id returned by a flow initiation operation\",\n            \"in\": \"path\",\n            \"name\": \"flowRunId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_SimpleFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Latest snapshot of the flow with given run id\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"404\": {\n            \"description\": \"Snapshot of a flow with given run id was not found, which may mean it was already evicted\"\n          }\n        },\n        \"summary\": \"Returns latest snapshot for a flow of type DelayedProgressFlow initiated with given run id\",\n        \"tags\": [\n          \"flowInitiation\"\n        ]\n      }\n    },\n    \"/node/reference/IssueComplexStateFlow\": {\n      \"post\": {\n        \"operationId\": \"initiateIssueComplexStateFlow\",\n        \"parameters\": [\n          {\n            \"description\": \"Timeout for synchronous flow execution, 0 for immediate return\",\n            \"in\": \"query\",\n            \"name\": \"wait\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\",\n              \"minimum\": 0\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CordaFlowInstruction_IssueComplexStateFlow\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_ComplexFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution completed successfully and its result is available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          },\n          \"202\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_ComplexFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution stared and its outcome is not yet available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"500\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_ComplexFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution failed and error information is available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          }\n        },\n        \"summary\": \"Initiates and tracks execution of Corda flow IssueComplexStateFlow with given parameters\",\n        \"tags\": [\n          \"flowInitiation\"\n        ]\n      }\n    },\n    \"/node/reference/IssueComplexStateFlow/snapshot/{flowRunId}\": {\n      \"get\": {\n        \"operationId\": \"getLatestSnapshotForIssueComplexStateFlow\",\n        \"parameters\": [\n          {\n            \"description\": \"Flow run id returned by a flow initiation operation\",\n            \"in\": \"path\",\n            \"name\": \"flowRunId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_ComplexFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Latest snapshot of the flow with given run id\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"404\": {\n            \"description\": \"Snapshot of a flow with given run id was not found, which may mean it was already evicted\"\n          }\n        },\n        \"summary\": \"Returns latest snapshot for a flow of type IssueComplexStateFlow initiated with given run id\",\n        \"tags\": [\n          \"flowInitiation\"\n        ]\n      }\n    },\n    \"/node/reference/SimpleFlow\": {\n      \"post\": {\n        \"operationId\": \"initiateSimpleFlow\",\n        \"parameters\": [\n          {\n            \"description\": \"Timeout for synchronous flow execution, 0 for immediate return\",\n            \"in\": \"query\",\n            \"name\": \"wait\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\",\n              \"minimum\": 0\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CordaFlowInstruction_SimpleFlow\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_SimpleFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution completed successfully and its result is available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          },\n          \"202\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_SimpleFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution stared and its outcome is not yet available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"500\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_SimpleFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Flow execution failed and error information is available\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URL from which to obtain latest snapshot of the flow\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"url\"\n                }\n              }\n            }\n          }\n        },\n        \"summary\": \"Initiates and tracks execution of Corda flow SimpleFlow with given parameters\",\n        \"tags\": [\n          \"flowInitiation\"\n        ]\n      }\n    },\n    \"/node/reference/SimpleFlow/snapshot/{flowRunId}\": {\n      \"get\": {\n        \"operationId\": \"getLatestSnapshotForSimpleFlow\",\n        \"parameters\": [\n          {\n            \"description\": \"Flow run id returned by a flow initiation operation\",\n            \"in\": \"path\",\n            \"name\": \"flowRunId\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaFlowSnapshot_SimpleFlowResult\"\n                }\n              }\n            },\n            \"description\": \"Latest snapshot of the flow with given run id\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"404\": {\n            \"description\": \"Snapshot of a flow with given run id was not found, which may mean it was already evicted\"\n          }\n        },\n        \"summary\": \"Returns latest snapshot for a flow of type SimpleFlow initiated with given run id\",\n        \"tags\": [\n          \"flowInitiation\"\n        ]\n      }\n    },\n    \"/node/reference/SimpleLinearState/query\": {\n      \"get\": {\n        \"operationId\": \"fetchSimpleLinearStateInstances\",\n        \"parameters\": [\n          {\n            \"description\": \"One or more of X500 names of notarizing parties for a state\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"notary\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"One or more of X500 names of owning parties for ownable states\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"owner\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"One or more of X500 names of participants in a state\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"participant\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"One or more UUIDs used in unique identifiers of linear states\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"uuid\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          },\n          {\n            \"description\": \"One or more external keys used in unique identifiers of linear states\",\n            \"explode\": true,\n            \"in\": \"query\",\n            \"name\": \"externalId\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"minLength\": 1\n            }\n          },\n          {\n            \"description\": \"Approach to querying consumed states (ignore by default)\",\n            \"in\": \"query\",\n            \"name\": \"consumed\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"ignore\",\n                \"include\",\n                \"only\"\n              ]\n            }\n          },\n          {\n            \"description\": \"Size of the page to return (200 by default)\",\n            \"in\": \"query\",\n            \"name\": \"pageSize\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"description\": \"Zero-based index of the page to return (0 by default)\",\n            \"in\": \"query\",\n            \"name\": \"pageNumber\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"number\",\n              \"minimum\": 0\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaVaultPage_SimpleLinearState\"\n                }\n              }\n            },\n            \"description\": \"Query ran successfully\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          }\n        },\n        \"summary\": \"Performs a query of the vault of the underlying Corda node with a simplified criteria\",\n        \"tags\": [\n          \"vaultQuery\"\n        ]\n      },\n      \"post\": {\n        \"operationId\": \"querySimpleLinearStateInstances\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/CordaVaultQuery_SimpleLinearState\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaVaultPage_SimpleLinearState\"\n                }\n              }\n            },\n            \"description\": \"Query ran successfully\"\n          }\n        },\n        \"summary\": \"Performs a query of the vault of the underlying Corda node with a complex criteria\",\n        \"tags\": [\n          \"vaultQuery\"\n        ]\n      }\n    },\n    \"/node/reference/SimpleLinearState/{hash}({index})\": {\n      \"get\": {\n        \"operationId\": \"getSimpleLinearStateByRef\",\n        \"parameters\": [\n          {\n            \"description\": \"Transaction output index\",\n            \"in\": \"path\",\n            \"name\": \"index\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"number\",\n              \"format\": \"int32\"\n            }\n          },\n          {\n            \"description\": \"Transaction hash value\",\n            \"in\": \"path\",\n            \"name\": \"hash\",\n            \"required\": true,\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/CordaSecureHash\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/SimpleLinearState\"\n                }\n              }\n            },\n            \"description\": \"Successfully retrieved contract state\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"404\": {\n            \"description\": \"Contract state with given hash and index was not found\"\n          }\n        },\n        \"summary\": \"Finds contract state recorded to the ledger with a given hash and index \",\n        \"tags\": [\n          \"vaultQuery\"\n        ]\n      }\n    },\n    \"/node/tx/{hash}\": {\n      \"get\": {\n        \"operationId\": \"findTransactionByHash\",\n        \"parameters\": [\n          {\n            \"description\": \"Transaction hash value\",\n            \"in\": \"path\",\n            \"name\": \"hash\",\n            \"required\": true,\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/CordaSecureHash\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaSignedTransaction\"\n                }\n              }\n            },\n            \"description\": \"Successfully retrieved transaction\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          },\n          \"404\": {\n            \"description\": \"Transaction with given hash value was not found\"\n          }\n        },\n        \"summary\": \"Finds a transaction recorded to the ledger with a given hash value\",\n        \"tags\": [\n          \"vaultQuery\"\n        ]\n      }\n    },\n    \"/node/uploadNodeAttachment\": {\n      \"post\": {\n        \"operationId\": \"uploadNodeAttachment\",\n        \"requestBody\": {\n          \"content\": {\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"uploader\": {\n                    \"type\": \"string\",\n                    \"minLength\": 1\n                  },\n                  \"dataType\": {\n                    \"type\": \"string\",\n                    \"minLength\": 1\n                  },\n                  \"data\": {\n                    \"type\": \"string\",\n                    \"format\": \"binary\"\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaSecureHash\"\n                }\n              }\n            },\n            \"description\": \"Attachment uploaded successfully and its result is available\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          }\n        },\n        \"summary\": \"Uploads Corda attachment with given parameters\",\n        \"tags\": [\"nodeAttachment\"]\n      }\n    },\n    \"/node/version\": {\n      \"get\": {\n        \"operationId\": \"getNodeVersion\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/CordaNodeVersionInfo\"\n                }\n              }\n            },\n            \"description\": \"Successful operation\"\n          },\n          \"403\": {\n            \"description\": \"Permission denied\"\n          }\n        },\n        \"summary\": \"Returns software version information for the underlying Corda node\",\n        \"tags\": [\n          \"nodeDiagnostic\"\n        ]\n      }\n    }\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://127.0.0.1:8500\"\n    }\n  ]\n}"}},"Error":"callback: unexpected type string"}