{"File":{"__typename":"FileMatch","repository":{"name":"github.com/hyperledger/cactus"},"file":{"name":"openapi.json","path":"packages/cactus-plugin-ledger-connector-corda/src/main/json/openapi.json","content":"{\n    \"openapi\": \"3.0.3\",\n    \"info\": {\n        \"title\": \"Hyperledger Cactus Plugin - Connector Corda\",\n        \"description\": \"Can perform basic tasks on a Corda ledger\",\n        \"version\": \"0.3.0\",\n        \"license\": {\n            \"name\": \"Apache 2.0\",\n            \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"SHA256\": {\n                \"description\": \"SHA-256 is part of the SHA-2 hash function family. Generated hash is fixed size, 256-bits (32-bytes).\",\n                \"externalDocs\": {\n                    \"description\": \"Official Corda documentation of the SHA256 class.\",\n                    \"url\": \"https://api.corda.net/api/corda-os/4.6/html/api/kotlin/corda/net.corda.core.crypto/-secure-hash/-s-h-a256/index.html\"\n                },\n                \"type\": \"object\",\n                \"required\": [\n                    \"bytes\",\n                    \"offset\",\n                    \"size\"\n                ],\n                \"properties\": {\n                    \"bytes\": {\n                        \"type\": \"string\",\n                        \"example\": \"Vf9MllnrC7vrWxrlDE94OzPMZW7At1HhTETL/XjiAmc=\"\n                    },\n                    \"offset\": {\n                        \"type\": \"integer\",\n                        \"example\": 0\n                    },\n                    \"size\": {\n                        \"type\": \"integer\",\n                        \"example\": 32\n                    }\n                }\n            },\n            \"CordappInfo\": {\n                \"type\": \"object\",\n                \"externalDocs\": {\n                    \"description\": \"Official Corda Documentation of the class CordappInfo\",\n                    \"url\": \"https://api.corda.net/api/corda-os/4.6/html/api/kotlin/corda/net.corda.core.cordapp/-cordapp-info/index.html\"\n                },\n                \"description\": \"A CordappInfo describes a single CorDapp currently installed on the node\",\n                \"required\": [\n                    \"jarHash\",\n                    \"licence\",\n                    \"minimumPlatformVersion\",\n                    \"name\",\n                    \"shortName\",\n                    \"targetPlatformVersion\",\n                    \"type\",\n                    \"vendor\",\n                    \"version\"\n                ],\n                \"properties\": {\n                    \"jarHash\": {\n                        \"type\": \"object\",\n                        \"format\": \"SHA256\",\n                        \"description\": \"The hash of the JAR file that defines this CorDapp\",\n                        \"$ref\": \"#/components/schemas/SHA256\"\n                    },\n                    \"licence\": {\n                        \"type\": \"string\",\n                        \"description\": \"The name of the licence this CorDapp is released under\"\n                    },\n                    \"minimumPlatformVersion\": {\n                        \"type\": \"integer\",\n                        \"description\": \"The minimum platform version the node must be at for the CorDapp to run\"\n                    },\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"description\": \"The name of the JAR file that defines the CorDapp\"\n                    },\n                    \"shortName\": {\n                        \"type\": \"string\",\n                        \"description\": \"The name of the CorDapp\"\n                    },\n                    \"targetPlatformVersion\": {\n                        \"type\": \"integer\",\n                        \"description\": \"The target platform version this CorDapp has been tested against\"\n                    },\n                    \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"A description of what sort of CorDapp this is - either a contract, workflow, or a combination.\"\n                    },\n                    \"vendor\": {\n                        \"type\": \"string\",\n                        \"description\": \"The vendor of this CorDapp\"\n                    },\n                    \"version\": {\n                        \"type\": \"string\",\n                        \"description\": \"The version of this CorDapp\"\n                    }\n                }\n            },\n            \"NodeDiagnosticInfo\": {\n                \"type\": \"object\",\n                \"externalDocs\": {\n                    \"description\": \"Official Corda Documentation of the class NodeDiagnosticInfo\",\n                    \"url\": \"https://api.corda.net/api/corda-os/4.6/html/api/kotlin/corda/net.corda.core.node/-node-diagnostic-info/index.html\"\n                },\n                \"description\": \"A NodeDiagnosticInfo holds information about the current node version.\",\n                \"required\": [\n                    \"cordapps\",\n                    \"platformVersion\",\n                    \"revision\",\n                    \"vendor\",\n                    \"version\"\n                ],\n                \"properties\": {\n                    \"cordapps\": {\n                        \"type\": \"array\",\n                        \"description\": \"A list of CorDapps currently installed on this node\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/CordappInfo\"\n                        },\n                        \"minItems\": 0,\n                        \"maxItems\": 4096\n                    },\n                    \"platformVersion\": {\n                        \"type\": \"integer\",\n                        \"description\": \"The platform version of this node. This number represents a released API version, and should be used to make functionality decisions (e.g. enabling an app feature only if an underlying platform feature exists)\"\n                    },\n                    \"revision\": {\n                        \"type\": \"string\",\n                        \"description\": \"The git commit hash this node was built from\"\n                    },\n                    \"vendor\": {\n                        \"type\": \"string\",\n                        \"description\": \"The vendor of this node\"\n                    },\n                    \"version\": {\n                        \"type\": \"string\",\n                        \"description\": \"The current node version string, e.g. 4.3, 4.4-SNAPSHOT. Note that this string is effectively freeform, and so should only be used for providing diagnostic information. It should not be used to make functionality decisions (the platformVersion is a better fit for this).\"\n                    }\n                }\n            },\n            \"FlowInvocationType\": {\n                \"type\": \"string\",\n                \"nullable\": false,\n                \"enum\": [\n                    \"TRACKED_FLOW_DYNAMIC\",\n                    \"FLOW_DYNAMIC\"\n                ],\n                \"description\": \"Determines which flow starting method will be used on the back-end when invoking the flow. Based on the value here the plugin back-end might invoke the rpc.startFlowDynamic() method or the rpc.startTrackedFlowDynamic() method. Streamed responses are aggregated and returned in a single response to HTTP callers who are not equipped to handle streams like WebSocket/gRPC/etc. do.\"\n            },\n            \"JarFile\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"filename\",\n                    \"contentBase64\",\n                    \"hasDbMigrations\"\n                ],\n                \"additionalProperties\": true,\n                \"properties\": {\n                    \"filename\": {\n                        \"type\": \"string\",\n                        \"nullable\": false,\n                        \"minLength\": 1,\n                        \"maxLength\": 255\n                    },\n                    \"hasDbMigrations\": {\n                        \"description\": \"Indicates whether the cordapp jar in question contains any embedded migrations that Cactus can/should execute between copying the jar into the cordapp directory and starting the node back up.\",\n                        \"type\": \"boolean\",\n                        \"nullable\": false\n                    },\n                    \"contentBase64\": {\n                        \"type\": \"string\",\n                        \"format\": \"base64\",\n                        \"nullable\": false,\n                        \"minLength\": 1,\n                        \"maxLength\": 1073741824\n                    }\n                }\n            },\n            \"JvmType\": {\n                \"type\": \"object\",\n                \"description\": \"Represents a reference to a JVM type (such as a Java class)\",\n                \"required\": [\n                    \"fqClassName\"\n                ],\n                \"properties\": {\n                    \"fqClassName\": {\n                        \"type\": \"string\",\n                        \"nullable\": false,\n                        \"minLength\": 1,\n                        \"maxLength\": 65535\n                    },\n                    \"constructorName\": {\n                        \"type\": \"string\",\n                        \"nullable\": false,\n                        \"description\": \"This parameter is used to specify that the function used to construct this JvmType is not a constructor function but instead is a factory function. Setting this parameter will cause the plugin to look up methods of the class denoted by fqClassName instead of its constructors.\",\n                        \"minLength\": 1,\n                        \"maxLength\": 65535\n                    },\n                    \"invocationTarget\": {\n                        \"$ref\": \"#/components/schemas/JvmObject\"\n                    }\n                }\n            },\n            \"JvmTypeKind\": {\n                \"type\": \"string\",\n                \"nullable\": false,\n                \"enum\": [\n                    \"PRIMITIVE\",\n                    \"REFERENCE\"\n                ]\n            },\n            \"JvmObject\": {\n                \"description\": \"Can represent JVM primitive and reference types as well. The jvmTypeKind field indicates which one is being stored. If the jvmTypeKind field is set to REFERENCE then the jvmCtorArgs array is expected to be filled, otherwise (e.g. PRIMITIVE jvmTypeKind) it is expected that the primitiveValue property is filled with a primitive data type supported by the JSON standard such as strings, booleans, numbers, etc.\",\n                \"type\": \"object\",\n                \"required\": [\n                    \"jvmType\",\n                    \"jvmTypeKind\"\n                ],\n                \"properties\": {\n                    \"jvmTypeKind\": {\n                        \"$ref\": \"#/components/schemas/JvmTypeKind\"\n                    },\n                    \"primitiveValue\": {\n                        \"type\": \"object\"\n                    },\n                    \"jvmCtorArgs\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JvmObject\",\n                            \"nullable\": false\n                        },\n                        \"minLength\": 0,\n                        \"maxLength\": 1024,\n                        \"nullable\": false,\n                        \"default\": []\n                    },\n                    \"jvmType\": {\n                        \"$ref\": \"#/components/schemas/JvmType\"\n                    }\n                }\n            },\n            \"CordappDeploymentConfig\": {\n                \"type\": \"object\",\n                \"required\": [\"sshCredentials\", \"rpcCredentials\", \"cordappDir\", \"cordaNodeStartCmd\", \"cordaJarPath\", \"nodeBaseDirPath\"],\n                \"properties\": {\n                    \"sshCredentials\": {\n                        \"$ref\": \"#/components/schemas/CordaNodeSshCredentials\"\n                    },\n                    \"rpcCredentials\": {\n                        \"$ref\": \"#/components/schemas/CordaRpcCredentials\"\n                    },\n                    \"cordaNodeStartCmd\": {\n                        \"type\": \"string\",\n                        \"description\": \"The shell command to execute in order to start back up a Corda node after having placed new jars in the cordapp directory of said node.\",\n                        \"example\": \"./build/nodes/runNodes\",\n                        \"minLength\": 1,\n                        \"maxLength\": 65535,\n                        \"nullable\": false\n                    },\n                    \"cordappDir\": {\n                        \"type\": \"string\",\n                        \"description\": \"The absolute file system path where the Corda Node is expecting deployed Cordapp jar files to be placed.\",\n                        \"minLength\": 1,\n                        \"maxLength\": 2048,\n                        \"nullable\": false\n                    },\n                    \"cordaJarPath\": {\n                        \"type\": \"string\",\n                        \"description\": \"The absolute file system path where the corda.jar file of the node can be found. This is used to execute database schema migrations where applicable (H2 database in use in development environments).\",\n                        \"minLength\": 1,\n                        \"maxLength\": 2048,\n                        \"nullable\": false\n                    },\n                    \"nodeBaseDirPath\": {\n                        \"type\": \"string\",\n                        \"description\": \"The absolute file system path where the base directory of the Corda node can be found. This is used to pass in to corda.jar when being invoked for certain tasks such as executing database schema migrations for a deployed contract.\",\n                        \"minLength\": 1,\n                        \"maxLength\": 2048,\n                        \"nullable\": false\n                    }\n                }\n            },\n            \"CordaRpcCredentials\": {\n                \"type\": \"object\",\n                \"required\": [\"hostname\", \"port\", \"username\", \"password\"],\n                \"properties\": {\n                    \"hostname\": {\n                        \"type\": \"string\",\n                        \"minLength\": 1,\n                        \"maxLength\": 65535,\n                        \"nullable\": false\n                    },\n                    \"port\": {\n                        \"type\": \"integer\",\n                        \"minimum\": 1,\n                        \"maximum\": 65535,\n                        \"nullable\": false\n                    },\n                    \"username\": {\n                        \"type\": \"string\",\n                        \"minLength\": 1,\n                        \"maxLength\": 1024,\n                        \"nullable\": false\n                    },\n                    \"password\": {\n                        \"type\": \"string\",\n                        \"minLength\": 1,\n                        \"maxLength\": 65535,\n                        \"nullable\": false\n                    }\n                }\n            },\n            \"CordaNodeSshCredentials\": {\n                \"type\": \"object\",\n                \"required\": [\"username\", \"password\", \"hostname\", \"port\", \"hostKeyEntry\"],\n                \"properties\": {\n                    \"hostKeyEntry\": {\n                        \"type\": \"string\",\n                        \"example\": \"localhost ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPmhSBtMctNa4hsZt8QGlsYSE5/gMkjeand69Vj4ir13\",\n                        \"minLength\": 1,\n                        \"maxLength\": 65535,\n                        \"nullable\": false\n                    },\n                    \"username\": {\n                        \"type\": \"string\",\n                        \"minLength\": 1,\n                        \"maxLength\": 32,\n                        \"nullable\": false\n                    },\n                    \"password\": {\n                        \"type\": \"string\",\n                        \"minLength\": 1,\n                        \"maxLength\": 4096,\n                        \"nullable\": false\n                    },\n                    \"hostname\": {\n                        \"type\": \"string\",\n                        \"minLength\": 1,\n                        \"maxLength\": 4096,\n                        \"nullable\": false\n                    },\n                    \"port\": {\n                        \"type\": \"integer\",\n                        \"minimum\": 1,\n                        \"maximum\": 65535,\n                        \"nullable\": false\n                    }\n                }\n            },\n            \"DeployContractJarsV1Request\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"jarFiles\",\n                    \"cordappDeploymentConfigs\"\n                ],\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"cordappDeploymentConfigs\": {\n                        \"type\": \"array\",\n                        \"description\": \"The list of deployment configurations pointing to the nodes where the provided cordapp jar files are to be deployed .\",\n                        \"minLength\": 0,\n                        \"maxLength\": 1024,\n                        \"default\": [],\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/CordappDeploymentConfig\"\n                        }\n                    },\n                    \"jarFiles\": {\n                        \"type\": \"array\",\n                        \"nullable\": false,\n                        \"items\": {\n                            \"minLength\": 1,\n                            \"maxLength\": 1024,\n                            \"$ref\": \"#/components/schemas/JarFile\"\n                        }\n                    }\n                }\n            },\n            \"DeployContractJarsSuccessV1Response\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"deployedJarFiles\"\n                ],\n                \"properties\": {\n                    \"deployedJarFiles\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"minItems\": 1,\n                            \"nullable\": false\n                        }\n                    }\n                }\n            },\n            \"DeployContractJarsBadRequestV1Response\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"errors\"\n                ],\n                \"properties\": {\n                    \"errors\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"minLength\": 1,\n                            \"maxLength\": 65535,\n                            \"minItems\": 1,\n                            \"maxItems\": 2048\n                        }\n                    }\n                }\n            },\n            \"InvokeContractV1Request\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"flowFullClassName\",\n                    \"flowInvocationType\",\n                    \"params\",\n                    \"signingCredential\"\n                ],\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"flowFullClassName\": {\n                        \"description\": \"The fully qualified name of the Corda flow to invoke\",\n                        \"example\": \"net.corda.samples.obligation.flows.IOUIssueFlow\",\n                        \"type\": \"string\",\n                        \"minLength\": 1,\n                        \"maxLength\": 1024,\n                        \"nullable\": false\n                    },\n                    \"flowInvocationType\": {\n                        \"$ref\": \"#/components/schemas/FlowInvocationType\"\n                    },\n                    \"params\": {\n                        \"description\": \"The list of arguments to pass in to the contract method being invoked.\",\n                        \"type\": \"array\",\n                        \"default\": [],\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/JvmObject\",\n                            \"nullable\": false\n                        },\n                        \"nullable\": false\n                    },\n                    \"timeoutMs\": {\n                        \"type\": \"integer\",\n                        \"description\": \"The amount of milliseconds to wait for a transaction receipt beforegiving up and crashing.\",\n                        \"minimum\": 0,\n                        \"default\": 60000,\n                        \"nullable\": false\n                    }\n                }\n            },\n            \"InvokeContractV1Response\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"success\",\n                    \"callOutput\",\n                    \"flowId\"                    \n                ],\n                \"properties\": {\n                    \"success\": {\n                        \"type\": \"boolean\",\n                        \"nullable\": false\n                    },\n                    \"callOutput\": {\n                        \"type\": \"object\",\n                        \"description\": \"Data returned from the JVM when no transaction is running\"\n                    },\n                    \"transactionId\": {\n                        \"type\": \"string\",\n                        \"description\": \"The net.corda.core.flows.StateMachineRunId value returned by the flow execution.\",\n                        \"minLength\": 1,\n                        \"maxLength\": 1024,\n                        \"nullable\": false\n                    },\n                    \"progress\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of strings representing the aggregated stream of progress updates provided by a *tracked* flow invocation. If the flow invocation was not tracked, this array is still returned, but as empty.\",\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"minItems\": 0,\n                            \"maxItems\": 10e6\n                        },\n                        \"default\": []\n                    },\n                    \"flowId\": {\n                        \"type\": \"string\",\n                        \"description\": \"The id for the flow handle\"\n                    }\n                }\n            },\n            \"ListFlowsV1Request\": {\n                \"type\": \"object\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"filter\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"ListFlowsV1Response\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"flowNames\"\n                ],\n                \"properties\": {\n                    \"flowNames\": {\n                        \"type\": \"array\",\n                        \"description\": \"An array of strings storing the names of the flows as returned by the flowList Corda RPC.\",\n                        \"example\": [\n                            \"net.corda.core.flows.ContractUpgradeFlow$Authorise\",\n                            \"net.corda.core.flows.ContractUpgradeFlow$Deauthorise\",\n                            \"net.corda.core.flows.ContractUpgradeFlow$Initiate\",\n                            \"net.corda.finance.flows.CashExitFlow\",\n                            \"net.corda.finance.flows.CashIssueAndPaymentFlow\",\n                            \"net.corda.finance.flows.CashIssueFlow\",\n                            \"net.corda.finance.flows.CashPaymentFlow\",\n                            \"net.corda.finance.internal.CashConfigDataFlow\",\n                            \"net.corda.samples.obligation.flows.IOUIssueFlow\",\n                            \"net.corda.samples.obligation.flows.IOUSettleFlow\",\n                            \"net.corda.samples.obligation.flows.IOUTransferFlow\",\n                            \"net.corda.samples.obligation.flows.SelfIssueCashFlow\"\n                        ],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"minItems\": 0,\n                            \"maxItems\": 10e6\n                        },\n                        \"default\": []\n                    }\n                }\n            },\n            \"NetworkHostAndPort\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"host\",\n                    \"port\"\n                ],\n                \"properties\": {\n                    \"host\": {\n                        \"type\": \"string\"\n                    },\n                    \"port\": {\n                        \"type\": \"number\"\n                    }\n                }\n            },\n            \"PartyAndCertificate\": {\n                \"type\": \"object\"\n            },\n            \"PublicKey\": {\n                \"type\": \"object\",\n                \"description\": \"An instance of a java.security.PublicKey (which is an interface) implementation such as org.hyperledger.cactus.plugin.ledger.connector.corda.server.impl.PublicKeyImpl\",\n                \"required\": [\n                    \"algorithm\",\n                    \"format\",\n                    \"encoded\"\n                ],\n                \"properties\": {\n                    \"algorithm\": {\n                        \"type\": \"string\",\n                        \"example\": \"EdDSA\"\n                    },\n                    \"format\": {\n                        \"type\": \"string\",\n                        \"example\": \"X.509\"\n                    },\n                    \"encoded\": {\n                        \"type\": \"string\",\n                        \"example\": \"MCowBQYDK2VwAyEAac1p4wLsAh70VJOcudQppu7NnKxyoKxVN0DbfTxF+54=\"\n                    }\n                }\n            },\n            \"X500Principal\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"name\",\n                    \"encoded\"\n                ],\n                \"properties\": {\n                    \"name\": {\n                        \"example\": \"O=PartyA,L=London,C=GB\",\n                        \"type\": \"string\"\n                    },\n                    \"encoded\": {\n                        \"type\": \"string\",\n                        \"description\": \"Base64 encoded public key\",\n                        \"example\": \"MC8xCzAJBgNVBAYTAkdCMQ8wDQYDVQQHDAZMb25kb24xDzANBgNVBAoMBlBhcnR5QQ==\"\n                    }\n                }\n            },\n            \"CordaX500Name\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"organisation\",\n                    \"locality\",\n                    \"country\",\n                    \"x500Principal\"\n                ],\n                \"properties\": {\n                    \"commonName\": {\n                        \"type\": \"string\"\n                    },\n                    \"organisationUnit\": {\n                        \"type\": \"string\"\n                    },\n                    \"organisation\": {\n                        \"type\": \"string\",\n                        \"example\": \"PartyA\"\n                    },\n                    \"locality\": {\n                        \"type\": \"string\",\n                        \"example\": \"London\"\n                    },\n                    \"state\": {\n                        \"type\": \"string\"\n                    },\n                    \"country\": {\n                        \"type\": \"string\",\n                        \"example\": \"GB\"\n                    },\n                    \"x500Principal\": {\n                        \"$ref\": \"#/components/schemas/X500Principal\"\n                    }\n                }\n            },\n            \"Party\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"owningKey\",\n                    \"name\"\n                ],\n                \"properties\": {\n                    \"name\": {\n                        \"$ref\": \"#/components/schemas/CordaX500Name\"\n                    },\n                    \"owningKey\": {\n                        \"$ref\": \"#/components/schemas/PublicKey\"\n                    }\n                }\n            },\n            \"NodeInfo\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"addresses\",\n                    \"legalIdentitiesAndCerts\",\n                    \"platformVersion\",\n                    \"serial\",\n                    \"legalIdentities\"\n                ],\n                \"properties\": {\n                    \"addresses\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/NetworkHostAndPort\"\n                        }\n                    },\n                    \"platformVersion\": {\n                        \"type\": \"integer\"\n                    },\n                    \"serial\": {\n                        \"type\": \"number\"\n                    },\n                    \"legalIdentities\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/Party\"\n                        }\n                    },\n                    \"legalIdentitiesAndCerts\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/PartyAndCertificate\"\n                        }\n                    }\n                }\n            },\n            \"NetworkMapV1Request\": {\n                \"type\": \"object\"\n            },\n            \"NetworkMapV1Response\": {\n                \"type\": \"array\",\n                \"minItems\": 1,\n                \"maxItems\": 2048,\n                \"nullable\": false,\n                \"items\": {\n                    \"$ref\": \"#/components/schemas/NodeInfo\"\n                }\n            },\n            \"DiagnoseNodeV1Request\": {\n                \"type\": \"object\",\n                \"additionalProperties\": false,\n                \"properties\": {\n                    \"nodeIds\": {\n                        \"type\": \"array\",\n                        \"description\": \"Optional property specifying which Corda Node should be the one being diagnosed in case the Connector has multiple connections established for different nodes (which is not yet a supported feature, but we want to keep this possibility open for the future).\",\n                        \"minItems\": 0,\n                        \"maxItems\": 1024,\n                        \"default\": [],\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"nullable\": false\n                        }\n                    }\n                }\n            },\n            \"DiagnoseNodeV1Response\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"nodeDiagnosticInfo\"\n                ],\n                \"properties\": {\n                    \"nodeDiagnosticInfo\": {\n                        \"$ref\": \"#/components/schemas/NodeDiagnosticInfo\"\n                    }\n                }\n            },\n            \"PrometheusExporterMetricsResponse\": {\n                \"type\": \"string\",\n                \"nullable\": false\n            }\n        }\n    },\n    \"paths\": {\n        \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/deploy-contract-jars\": {\n            \"post\": {\n                \"operationId\": \"deployContractJarsV1\",\n                \"x-hyperledger-cactus\": {\n                    \"http\": {\n                        \"path\": \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/deploy-contract-jars\",\n                        \"verbLowerCase\": \"post\"\n                    }\n                },\n                \"summary\": \"Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).\",\n                \"parameters\": [],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DeployContractJarsV1Request\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeployContractJarsSuccessV1Response\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DeployContractJarsBadRequestV1Response\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/invoke-contract\": {\n            \"post\": {\n                \"operationId\": \"invokeContractV1\",\n                \"x-hyperledger-cactus\": {\n                    \"http\": {\n                        \"path\": \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/invoke-contract\",\n                        \"verbLowerCase\": \"post\"\n                    }\n                },\n                \"summary\": \"Invokes a contract on a Corda ledger (e.g. a flow)\",\n                \"parameters\": [],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/InvokeContractV1Request\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/InvokeContractV1Response\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/network-map\": {\n            \"post\": {\n                \"operationId\": \"networkMapV1\",\n                \"x-hyperledger-cactus\": {\n                    \"http\": {\n                        \"path\": \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/network-map\",\n                        \"verbLowerCase\": \"post\"\n                    }\n                },\n                \"description\": \"Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List\u003cNodeInfo\u003e\",\n                \"parameters\": [],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/NetworkMapV1Request\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/NetworkMapV1Response\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/list-flows\": {\n            \"post\": {\n                \"operationId\": \"listFlowsV1\",\n                \"x-hyperledger-cactus\": {\n                    \"http\": {\n                        \"path\": \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/list-flows\",\n                        \"verbLowerCase\": \"post\"\n                    }\n                },\n                \"description\": \"Responds with a list of the flows on the Corda node.\",\n                \"parameters\": [],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/ListFlowsV1Request\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/ListFlowsV1Response\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/diagnose-node\": {\n            \"post\": {\n                \"operationId\": \"diagnoseNodeV1\",\n                \"x-hyperledger-cactus\": {\n                    \"http\": {\n                        \"path\": \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/diagnose-node\",\n                        \"verbLowerCase\": \"post\"\n                    }\n                },\n                \"description\": \"Responds with diagnostic information about the Corda node\",\n                \"parameters\": [],\n                \"requestBody\": {\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/DiagnoseNodeV1Request\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/DiagnoseNodeV1Response\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/get-prometheus-exporter-metrics\": {\n            \"get\": {\n                \"x-hyperledger-cactus\": {\n                    \"http\": {\n                        \"verbLowerCase\": \"get\",\n                        \"path\": \"/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/get-prometheus-exporter-metrics\"\n                    }\n                },\n                \"operationId\": \"getPrometheusMetricsV1\",\n                \"summary\": \"Get the Prometheus Metrics\",\n                \"parameters\": [],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"OK\",\n                        \"content\": {\n                            \"text/plain\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/PrometheusExporterMetricsResponse\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}},"Error":"callback: json: cannot unmarshal number 10e6 into Go struct field Schema.items.maxItems of type uint64"}